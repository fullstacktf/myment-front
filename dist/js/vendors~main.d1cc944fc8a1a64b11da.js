(window.webpackJsonp=window.webpackJsonp||[]).push([[3],[function(e,t,n){"use strict";(function(e,n){
/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
var i=Object.freeze({});function a(e){return null==e}function o(e){return null!=e}function s(e){return!0===e}function r(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function l(e){return null!==e&&"object"==typeof e}var c=Object.prototype.toString;function u(e){return"[object Object]"===c.call(e)}function d(e){return"[object RegExp]"===c.call(e)}function h(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function f(e){return o(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function p(e){return null==e?"":Array.isArray(e)||u(e)&&e.toString===c?JSON.stringify(e,null,2):String(e)}function v(e){var t=parseFloat(e);return isNaN(t)?e:t}function m(e,t){for(var n=Object.create(null),i=e.split(","),a=0;a<i.length;a++)n[i[a]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}m("slot,component",!0);var g=m("key,ref,slot,slot-scope,is");function y(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function w(e,t){return b.call(e,t)}function _(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var k=/-(\w)/g,C=_(function(e){return e.replace(k,function(e,t){return t?t.toUpperCase():""})}),S=_(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),x=/\B([A-Z])/g,D=_(function(e){return e.replace(x,"-$1").toLowerCase()});var $=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var i=arguments.length;return i?i>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function A(e,t){t=t||0;for(var n=e.length-t,i=new Array(n);n--;)i[n]=e[n+t];return i}function T(e,t){for(var n in t)e[n]=t[n];return e}function O(e){for(var t={},n=0;n<e.length;n++)e[n]&&T(t,e[n]);return t}function P(e,t,n){}var M=function(e,t,n){return!1},V=function(e){return e};function B(e,t){if(e===t)return!0;var n=l(e),i=l(t);if(!n||!i)return!n&&!i&&String(e)===String(t);try{var a=Array.isArray(e),o=Array.isArray(t);if(a&&o)return e.length===t.length&&e.every(function(e,n){return B(e,t[n])});if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(a||o)return!1;var s=Object.keys(e),r=Object.keys(t);return s.length===r.length&&s.every(function(n){return B(e[n],t[n])})}catch(e){return!1}}function I(e,t){for(var n=0;n<e.length;n++)if(B(e[n],t))return n;return-1}function F(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var N="data-server-rendered",E=["component","directive","filter"],R=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],L={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:M,isReservedAttr:M,isUnknownElement:M,getTagNamespace:P,parsePlatformTagName:V,mustUseProp:M,async:!0,_lifecycleHooks:R},j=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(e,t,n,i){Object.defineProperty(e,t,{value:n,enumerable:!!i,writable:!0,configurable:!0})}var z=new RegExp("[^"+j.source+".$_\\d]");var Y,q="__proto__"in{},W="undefined"!=typeof window,U="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=U&&WXEnvironment.platform.toLowerCase(),X=W&&window.navigator.userAgent.toLowerCase(),G=X&&/msie|trident/.test(X),J=X&&X.indexOf("msie 9.0")>0,Q=X&&X.indexOf("edge/")>0,Z=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===K),ee=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),te={}.watch,ne=!1;if(W)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){ne=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var ae=function(){return void 0===Y&&(Y=!W&&!U&&void 0!==e&&(e.process&&"server"===e.process.env.VUE_ENV)),Y},oe=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var re,le="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);re="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ce=P,ue=0,de=function(){this.id=ue++,this.subs=[]};de.prototype.addSub=function(e){this.subs.push(e)},de.prototype.removeSub=function(e){y(this.subs,e)},de.prototype.depend=function(){de.target&&de.target.addDep(this)},de.prototype.notify=function(){var e=this.subs.slice();for(var t=0,n=e.length;t<n;t++)e[t].update()},de.target=null;var he=[];function fe(e){he.push(e),de.target=e}function pe(){he.pop(),de.target=he[he.length-1]}var ve=function(e,t,n,i,a,o,s,r){this.tag=e,this.data=t,this.children=n,this.text=i,this.elm=a,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=s,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=r,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},me={child:{configurable:!0}};me.child.get=function(){return this.componentInstance},Object.defineProperties(ve.prototype,me);var ge=function(e){void 0===e&&(e="");var t=new ve;return t.text=e,t.isComment=!0,t};function ye(e){return new ve(void 0,void 0,void 0,String(e))}function be(e){var t=new ve(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var we=Array.prototype,_e=Object.create(we);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=we[e];H(_e,e,function(){for(var n=[],i=arguments.length;i--;)n[i]=arguments[i];var a,o=t.apply(this,n),s=this.__ob__;switch(e){case"push":case"unshift":a=n;break;case"splice":a=n.slice(2)}return a&&s.observeArray(a),s.dep.notify(),o})});var ke=Object.getOwnPropertyNames(_e),Ce=!0;function Se(e){Ce=e}var xe=function(e){this.value=e,this.dep=new de,this.vmCount=0,H(e,"__ob__",this),Array.isArray(e)?(q?function(e,t){e.__proto__=t}(e,_e):function(e,t,n){for(var i=0,a=n.length;i<a;i++){var o=n[i];H(e,o,t[o])}}(e,_e,ke),this.observeArray(e)):this.walk(e)};function De(e,t){var n;if(l(e)&&!(e instanceof ve))return w(e,"__ob__")&&e.__ob__ instanceof xe?n=e.__ob__:Ce&&!ae()&&(Array.isArray(e)||u(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new xe(e)),t&&n&&n.vmCount++,n}function $e(e,t,n,i,a){var o=new de,s=Object.getOwnPropertyDescriptor(e,t);if(!s||!1!==s.configurable){var r=s&&s.get,l=s&&s.set;r&&!l||2!==arguments.length||(n=e[t]);var c=!a&&De(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=r?r.call(e):n;return de.target&&(o.depend(),c&&(c.dep.depend(),Array.isArray(t)&&function e(t){for(var n=void 0,i=0,a=t.length;i<a;i++)(n=t[i])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&e(n)}(t))),t},set:function(t){var i=r?r.call(e):n;t===i||t!=t&&i!=i||r&&!l||(l?l.call(e,t):n=t,c=!a&&De(t),o.notify())}})}}function Ae(e,t,n){if(Array.isArray(e)&&h(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var i=e.__ob__;return e._isVue||i&&i.vmCount?n:i?($e(i.value,t,n),i.dep.notify(),n):(e[t]=n,n)}function Te(e,t){if(Array.isArray(e)&&h(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||w(e,t)&&(delete e[t],n&&n.dep.notify())}}xe.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)$e(e,t[n])},xe.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)De(e[t])};var Oe=L.optionMergeStrategies;function Pe(e,t){if(!t)return e;for(var n,i,a,o=le?Reflect.ownKeys(t):Object.keys(t),s=0;s<o.length;s++)"__ob__"!==(n=o[s])&&(i=e[n],a=t[n],w(e,n)?i!==a&&u(i)&&u(a)&&Pe(i,a):Ae(e,n,a));return e}function Me(e,t,n){return n?function(){var i="function"==typeof t?t.call(n,n):t,a="function"==typeof e?e.call(n,n):e;return i?Pe(i,a):a}:t?e?function(){return Pe("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Ve(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Be(e,t,n,i){var a=Object.create(e||null);return t?T(a,t):a}Oe.data=function(e,t,n){return n?Me(e,t,n):t&&"function"!=typeof t?e:Me(e,t)},R.forEach(function(e){Oe[e]=Ve}),E.forEach(function(e){Oe[e+"s"]=Be}),Oe.watch=function(e,t,n,i){if(e===te&&(e=void 0),t===te&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var a={};for(var o in T(a,e),t){var s=a[o],r=t[o];s&&!Array.isArray(s)&&(s=[s]),a[o]=s?s.concat(r):Array.isArray(r)?r:[r]}return a},Oe.props=Oe.methods=Oe.inject=Oe.computed=function(e,t,n,i){if(!e)return t;var a=Object.create(null);return T(a,e),t&&T(a,t),a},Oe.provide=Me;var Ie=function(e,t){return void 0===t?e:t};function Fe(e,t,n){if("function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var i,a,o={};if(Array.isArray(n))for(i=n.length;i--;)"string"==typeof(a=n[i])&&(o[C(a)]={type:null});else if(u(n))for(var s in n)a=n[s],o[C(s)]=u(a)?a:{type:a};else 0;e.props=o}}(t),function(e,t){var n=e.inject;if(n){var i=e.inject={};if(Array.isArray(n))for(var a=0;a<n.length;a++)i[n[a]]={from:n[a]};else if(u(n))for(var o in n){var s=n[o];i[o]=u(s)?T({from:o},s):{from:s}}else 0}}(t),function(e){var t=e.directives;if(t)for(var n in t){var i=t[n];"function"==typeof i&&(t[n]={bind:i,update:i})}}(t),!t._base&&(t.extends&&(e=Fe(e,t.extends,n)),t.mixins))for(var i=0,a=t.mixins.length;i<a;i++)e=Fe(e,t.mixins[i],n);var o,s={};for(o in e)r(o);for(o in t)w(e,o)||r(o);function r(i){var a=Oe[i]||Ie;s[i]=a(e[i],t[i],n,i)}return s}function Ne(e,t,n,i){if("string"==typeof n){var a=e[t];if(w(a,n))return a[n];var o=C(n);if(w(a,o))return a[o];var s=S(o);return w(a,s)?a[s]:a[n]||a[o]||a[s]}}function Ee(e,t,n,i){var a=t[e],o=!w(n,e),s=n[e],r=je(Boolean,a.type);if(r>-1)if(o&&!w(a,"default"))s=!1;else if(""===s||s===D(e)){var l=je(String,a.type);(l<0||r<l)&&(s=!0)}if(void 0===s){s=function(e,t,n){if(!w(t,"default"))return;var i=t.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof i&&"Function"!==Re(t.type)?i.call(e):i}(i,a,e);var c=Ce;Se(!0),De(s),Se(c)}return s}function Re(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function Le(e,t){return Re(e)===Re(t)}function je(e,t){if(!Array.isArray(t))return Le(t,e)?0:-1;for(var n=0,i=t.length;n<i;n++)if(Le(t[n],e))return n;return-1}function He(e,t,n){fe();try{if(t)for(var i=t;i=i.$parent;){var a=i.$options.errorCaptured;if(a)for(var o=0;o<a.length;o++)try{if(!1===a[o].call(i,e,t,n))return}catch(e){Ye(e,i,"errorCaptured hook")}}Ye(e,t,n)}finally{pe()}}function ze(e,t,n,i,a){var o;try{(o=n?e.apply(t,n):e.call(t))&&!o._isVue&&f(o)&&!o._handled&&(o.catch(function(e){return He(e,i,a+" (Promise/async)")}),o._handled=!0)}catch(e){He(e,i,a)}return o}function Ye(e,t,n){if(L.errorHandler)try{return L.errorHandler.call(null,e,t,n)}catch(t){t!==e&&qe(t,null,"config.errorHandler")}qe(e,t,n)}function qe(e,t,n){if(!W&&!U||"undefined"==typeof console)throw e;console.error(e)}var We,Ue=!1,Ke=[],Xe=!1;function Ge(){Xe=!1;var e=Ke.slice(0);Ke.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&se(Promise)){var Je=Promise.resolve();We=function(){Je.then(Ge),Z&&setTimeout(P)},Ue=!0}else if(G||"undefined"==typeof MutationObserver||!se(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())We=void 0!==n&&se(n)?function(){n(Ge)}:function(){setTimeout(Ge,0)};else{var Qe=1,Ze=new MutationObserver(Ge),et=document.createTextNode(String(Qe));Ze.observe(et,{characterData:!0}),We=function(){Qe=(Qe+1)%2,et.data=String(Qe)},Ue=!0}function tt(e,t){var n;if(Ke.push(function(){if(e)try{e.call(t)}catch(e){He(e,t,"nextTick")}else n&&n(t)}),Xe||(Xe=!0,We()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){n=e})}var nt=new re;function it(e){!function e(t,n){var i,a;var o=Array.isArray(t);if(!o&&!l(t)||Object.isFrozen(t)||t instanceof ve)return;if(t.__ob__){var s=t.__ob__.dep.id;if(n.has(s))return;n.add(s)}if(o)for(i=t.length;i--;)e(t[i],n);else for(a=Object.keys(t),i=a.length;i--;)e(t[a[i]],n)}(e,nt),nt.clear()}var at=_(function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),i="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=i?e.slice(1):e,once:n,capture:i,passive:t}});function ot(e,t){function n(){var e=arguments,i=n.fns;if(!Array.isArray(i))return ze(i,null,arguments,t,"v-on handler");for(var a=i.slice(),o=0;o<a.length;o++)ze(a[o],null,e,t,"v-on handler")}return n.fns=e,n}function st(e,t,n,i,o,r){var l,c,u,d;for(l in e)c=e[l],u=t[l],d=at(l),a(c)||(a(u)?(a(c.fns)&&(c=e[l]=ot(c,r)),s(d.once)&&(c=e[l]=o(d.name,c,d.capture)),n(d.name,c,d.capture,d.passive,d.params)):c!==u&&(u.fns=c,e[l]=u));for(l in t)a(e[l])&&i((d=at(l)).name,t[l],d.capture)}function rt(e,t,n){var i;e instanceof ve&&(e=e.data.hook||(e.data.hook={}));var r=e[t];function l(){n.apply(this,arguments),y(i.fns,l)}a(r)?i=ot([l]):o(r.fns)&&s(r.merged)?(i=r).fns.push(l):i=ot([r,l]),i.merged=!0,e[t]=i}function lt(e,t,n,i,a){if(o(t)){if(w(t,n))return e[n]=t[n],a||delete t[n],!0;if(w(t,i))return e[n]=t[i],a||delete t[i],!0}return!1}function ct(e){return r(e)?[ye(e)]:Array.isArray(e)?function e(t,n){var i=[];var l,c,u,d;for(l=0;l<t.length;l++)a(c=t[l])||"boolean"==typeof c||(u=i.length-1,d=i[u],Array.isArray(c)?c.length>0&&(ut((c=e(c,(n||"")+"_"+l))[0])&&ut(d)&&(i[u]=ye(d.text+c[0].text),c.shift()),i.push.apply(i,c)):r(c)?ut(d)?i[u]=ye(d.text+c):""!==c&&i.push(ye(c)):ut(c)&&ut(d)?i[u]=ye(d.text+c.text):(s(t._isVList)&&o(c.tag)&&a(c.key)&&o(n)&&(c.key="__vlist"+n+"_"+l+"__"),i.push(c)));return i}(e):void 0}function ut(e){return o(e)&&o(e.text)&&!1===e.isComment}function dt(e,t){if(e){for(var n=Object.create(null),i=le?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++){var o=i[a];if("__ob__"!==o){for(var s=e[o].from,r=t;r;){if(r._provided&&w(r._provided,s)){n[o]=r._provided[s];break}r=r.$parent}if(!r)if("default"in e[o]){var l=e[o].default;n[o]="function"==typeof l?l.call(t):l}else 0}}return n}}function ht(e,t){if(!e||!e.length)return{};for(var n={},i=0,a=e.length;i<a;i++){var o=e[i],s=o.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,o.context!==t&&o.fnContext!==t||!s||null==s.slot)(n.default||(n.default=[])).push(o);else{var r=s.slot,l=n[r]||(n[r]=[]);"template"===o.tag?l.push.apply(l,o.children||[]):l.push(o)}}for(var c in n)n[c].every(ft)&&delete n[c];return n}function ft(e){return e.isComment&&!e.asyncFactory||" "===e.text}function pt(e,t,n){var a,o=Object.keys(t).length>0,s=e?!!e.$stable:!o,r=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&n&&n!==i&&r===n.$key&&!o&&!n.$hasNormal)return n;for(var l in a={},e)e[l]&&"$"!==l[0]&&(a[l]=vt(t,l,e[l]))}else a={};for(var c in t)c in a||(a[c]=mt(t,c));return e&&Object.isExtensible(e)&&(e._normalized=a),H(a,"$stable",s),H(a,"$key",r),H(a,"$hasNormal",o),a}function vt(e,t,n){var i=function(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:ct(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:i,enumerable:!0,configurable:!0}),i}function mt(e,t){return function(){return e[t]}}function gt(e,t){var n,i,a,s,r;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),i=0,a=e.length;i<a;i++)n[i]=t(e[i],i);else if("number"==typeof e)for(n=new Array(e),i=0;i<e;i++)n[i]=t(i+1,i);else if(l(e))if(le&&e[Symbol.iterator]){n=[];for(var c=e[Symbol.iterator](),u=c.next();!u.done;)n.push(t(u.value,n.length)),u=c.next()}else for(s=Object.keys(e),n=new Array(s.length),i=0,a=s.length;i<a;i++)r=s[i],n[i]=t(e[r],r,i);return o(n)||(n=[]),n._isVList=!0,n}function yt(e,t,n,i){var a,o=this.$scopedSlots[e];o?(n=n||{},i&&(n=T(T({},i),n)),a=o(n)||t):a=this.$slots[e]||t;var s=n&&n.slot;return s?this.$createElement("template",{slot:s},a):a}function bt(e){return Ne(this.$options,"filters",e)||V}function wt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function _t(e,t,n,i,a){var o=L.keyCodes[t]||n;return a&&i&&!L.keyCodes[t]?wt(a,i):o?wt(o,e):i?D(i)!==t:void 0}function kt(e,t,n,i,a){if(n)if(l(n)){var o;Array.isArray(n)&&(n=O(n));var s=function(s){if("class"===s||"style"===s||g(s))o=e;else{var r=e.attrs&&e.attrs.type;o=i||L.mustUseProp(t,r,s)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=C(s),c=D(s);l in o||c in o||(o[s]=n[s],a&&((e.on||(e.on={}))["update:"+s]=function(e){n[s]=e}))};for(var r in n)s(r)}else;return e}function Ct(e,t){var n=this._staticTrees||(this._staticTrees=[]),i=n[e];return i&&!t?i:(xt(i=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),i)}function St(e,t,n){return xt(e,"__once__"+t+(n?"_"+n:""),!0),e}function xt(e,t,n){if(Array.isArray(e))for(var i=0;i<e.length;i++)e[i]&&"string"!=typeof e[i]&&Dt(e[i],t+"_"+i,n);else Dt(e,t,n)}function Dt(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function $t(e,t){if(t)if(u(t)){var n=e.on=e.on?T({},e.on):{};for(var i in t){var a=n[i],o=t[i];n[i]=a?[].concat(a,o):o}}else;return e}function At(e,t,n,i){t=t||{$stable:!n};for(var a=0;a<e.length;a++){var o=e[a];Array.isArray(o)?At(o,t,n):o&&(o.proxy&&(o.fn.proxy=!0),t[o.key]=o.fn)}return i&&(t.$key=i),t}function Tt(e,t){for(var n=0;n<t.length;n+=2){var i=t[n];"string"==typeof i&&i&&(e[t[n]]=t[n+1])}return e}function Ot(e,t){return"string"==typeof e?t+e:e}function Pt(e){e._o=St,e._n=v,e._s=p,e._l=gt,e._t=yt,e._q=B,e._i=I,e._m=Ct,e._f=bt,e._k=_t,e._b=kt,e._v=ye,e._e=ge,e._u=At,e._g=$t,e._d=Tt,e._p=Ot}function Mt(e,t,n,a,o){var r,l=this,c=o.options;w(a,"_uid")?(r=Object.create(a))._original=a:(r=a,a=a._original);var u=s(c._compiled),d=!u;this.data=e,this.props=t,this.children=n,this.parent=a,this.listeners=e.on||i,this.injections=dt(c.inject,a),this.slots=function(){return l.$slots||pt(e.scopedSlots,l.$slots=ht(n,a)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return pt(e.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=pt(e.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,t,n,i){var o=jt(r,e,t,n,i,d);return o&&!Array.isArray(o)&&(o.fnScopeId=c._scopeId,o.fnContext=a),o}:this._c=function(e,t,n,i){return jt(r,e,t,n,i,d)}}function Vt(e,t,n,i,a){var o=be(e);return o.fnContext=n,o.fnOptions=i,t.slot&&((o.data||(o.data={})).slot=t.slot),o}function Bt(e,t){for(var n in t)e[C(n)]=t[n]}Pt(Mt.prototype);var It={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;It.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},i=e.data.inlineTemplate;o(i)&&(n.render=i.render,n.staticRenderFns=i.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,Jt)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,a,o){0;var s=a.data.scopedSlots,r=e.$scopedSlots,l=!!(s&&!s.$stable||r!==i&&!r.$stable||s&&e.$scopedSlots.$key!==s.$key),c=!!(o||e.$options._renderChildren||l);e.$options._parentVnode=a,e.$vnode=a,e._vnode&&(e._vnode.parent=a);if(e.$options._renderChildren=o,e.$attrs=a.data.attrs||i,e.$listeners=n||i,t&&e.$options.props){Se(!1);for(var u=e._props,d=e.$options._propKeys||[],h=0;h<d.length;h++){var f=d[h],p=e.$options.props;u[f]=Ee(f,p,t,e)}Se(!0),e.$options.propsData=t}n=n||i;var v=e.$options._parentListeners;e.$options._parentListeners=n,Gt(e,n,v),c&&(e.$slots=ht(o,a.context),e.$forceUpdate());0}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,i=e.componentInstance;i._isMounted||(i._isMounted=!0,tn(i,"mounted")),e.data.keepAlive&&(n._isMounted?((t=i)._inactive=!1,an.push(t)):en(i,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(n&&(t._directInactive=!0,Zt(t)))return;if(!t._inactive){t._inactive=!0;for(var i=0;i<t.$children.length;i++)e(t.$children[i]);tn(t,"deactivated")}}(t,!0):t.$destroy())}},Ft=Object.keys(It);function Nt(e,t,n,r,c){if(!a(e)){var u=n.$options._base;if(l(e)&&(e=u.extend(e)),"function"==typeof e){var d;if(a(e.cid)&&void 0===(e=function(e,t){if(s(e.error)&&o(e.errorComp))return e.errorComp;if(o(e.resolved))return e.resolved;var n=zt;n&&o(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n);if(s(e.loading)&&o(e.loadingComp))return e.loadingComp;if(n&&!o(e.owners)){var i=e.owners=[n],r=!0,c=null,u=null;n.$on("hook:destroyed",function(){return y(i,n)});var d=function(e){for(var t=0,n=i.length;t<n;t++)i[t].$forceUpdate();e&&(i.length=0,null!==c&&(clearTimeout(c),c=null),null!==u&&(clearTimeout(u),u=null))},h=F(function(n){e.resolved=Yt(n,t),r?i.length=0:d(!0)}),p=F(function(t){o(e.errorComp)&&(e.error=!0,d(!0))}),v=e(h,p);return l(v)&&(f(v)?a(e.resolved)&&v.then(h,p):f(v.component)&&(v.component.then(h,p),o(v.error)&&(e.errorComp=Yt(v.error,t)),o(v.loading)&&(e.loadingComp=Yt(v.loading,t),0===v.delay?e.loading=!0:c=setTimeout(function(){c=null,a(e.resolved)&&a(e.error)&&(e.loading=!0,d(!1))},v.delay||200)),o(v.timeout)&&(u=setTimeout(function(){u=null,a(e.resolved)&&p(null)},v.timeout)))),r=!1,e.loading?e.loadingComp:e.resolved}}(d=e,u)))return function(e,t,n,i,a){var o=ge();return o.asyncFactory=e,o.asyncMeta={data:t,context:n,children:i,tag:a},o}(d,t,n,r,c);t=t||{},Sn(e),o(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",i=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var a=t.on||(t.on={}),s=a[i],r=t.model.callback;o(s)?(Array.isArray(s)?-1===s.indexOf(r):s!==r)&&(a[i]=[r].concat(s)):a[i]=r}(e.options,t);var h=function(e,t,n){var i=t.options.props;if(!a(i)){var s={},r=e.attrs,l=e.props;if(o(r)||o(l))for(var c in i){var u=D(c);lt(s,l,c,u,!0)||lt(s,r,c,u,!1)}return s}}(t,e);if(s(e.options.functional))return function(e,t,n,a,s){var r=e.options,l={},c=r.props;if(o(c))for(var u in c)l[u]=Ee(u,c,t||i);else o(n.attrs)&&Bt(l,n.attrs),o(n.props)&&Bt(l,n.props);var d=new Mt(n,l,s,a,e),h=r.render.call(null,d._c,d);if(h instanceof ve)return Vt(h,n,d.parent,r,d);if(Array.isArray(h)){for(var f=ct(h)||[],p=new Array(f.length),v=0;v<f.length;v++)p[v]=Vt(f[v],n,d.parent,r,d);return p}}(e,h,t,n,r);var p=t.on;if(t.on=t.nativeOn,s(e.options.abstract)){var v=t.slot;t={},v&&(t.slot=v)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<Ft.length;n++){var i=Ft[n],a=t[i],o=It[i];a===o||a&&a._merged||(t[i]=a?Et(o,a):o)}}(t);var m=e.options.name||c;return new ve("vue-component-"+e.cid+(m?"-"+m:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:h,listeners:p,tag:c,children:r},d)}}}function Et(e,t){var n=function(n,i){e(n,i),t(n,i)};return n._merged=!0,n}var Rt=1,Lt=2;function jt(e,t,n,i,c,u){return(Array.isArray(n)||r(n))&&(c=i,i=n,n=void 0),s(u)&&(c=Lt),function(e,t,n,i,r){if(o(n)&&o(n.__ob__))return ge();o(n)&&o(n.is)&&(t=n.is);if(!t)return ge();0;Array.isArray(i)&&"function"==typeof i[0]&&((n=n||{}).scopedSlots={default:i[0]},i.length=0);r===Lt?i=ct(i):r===Rt&&(i=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(i));var c,u;if("string"==typeof t){var d;u=e.$vnode&&e.$vnode.ns||L.getTagNamespace(t),c=L.isReservedTag(t)?new ve(L.parsePlatformTagName(t),n,i,void 0,void 0,e):n&&n.pre||!o(d=Ne(e.$options,"components",t))?new ve(t,n,i,void 0,void 0,e):Nt(d,n,e,i,t)}else c=Nt(t,n,e,i);return Array.isArray(c)?c:o(c)?(o(u)&&function e(t,n,i){t.ns=n;"foreignObject"===t.tag&&(n=void 0,i=!0);if(o(t.children))for(var r=0,l=t.children.length;r<l;r++){var c=t.children[r];o(c.tag)&&(a(c.ns)||s(i)&&"svg"!==c.tag)&&e(c,n,i)}}(c,u),o(n)&&function(e){l(e.style)&&it(e.style);l(e.class)&&it(e.class)}(n),c):ge()}(e,t,n,i,c)}var Ht,zt=null;function Yt(e,t){return(e.__esModule||le&&"Module"===e[Symbol.toStringTag])&&(e=e.default),l(e)?t.extend(e):e}function qt(e){return e.isComment&&e.asyncFactory}function Wt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(o(n)&&(o(n.componentOptions)||qt(n)))return n}}function Ut(e,t){Ht.$on(e,t)}function Kt(e,t){Ht.$off(e,t)}function Xt(e,t){var n=Ht;return function i(){var a=t.apply(null,arguments);null!==a&&n.$off(e,i)}}function Gt(e,t,n){Ht=e,st(t,n||{},Ut,Kt,Xt,e),Ht=void 0}var Jt=null;function Qt(e){var t=Jt;return Jt=e,function(){Jt=t}}function Zt(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function en(e,t){if(t){if(e._directInactive=!1,Zt(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)en(e.$children[n]);tn(e,"activated")}}function tn(e,t){fe();var n=e.$options[t],i=t+" hook";if(n)for(var a=0,o=n.length;a<o;a++)ze(n[a],e,null,e,i);e._hasHookEvent&&e.$emit("hook:"+t),pe()}var nn=[],an=[],on={},sn=!1,rn=!1,ln=0;var cn=0,un=Date.now;if(W&&!G){var dn=window.performance;dn&&"function"==typeof dn.now&&un()>document.createEvent("Event").timeStamp&&(un=function(){return dn.now()})}function hn(){var e,t;for(cn=un(),rn=!0,nn.sort(function(e,t){return e.id-t.id}),ln=0;ln<nn.length;ln++)(e=nn[ln]).before&&e.before(),t=e.id,on[t]=null,e.run();var n=an.slice(),i=nn.slice();ln=nn.length=an.length=0,on={},sn=rn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,en(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],i=n.vm;i._watcher===n&&i._isMounted&&!i._isDestroyed&&tn(i,"updated")}}(i),oe&&L.devtools&&oe.emit("flush")}var fn=0,pn=function(e,t,n,i,a){this.vm=e,a&&(e._watcher=this),e._watchers.push(this),i?(this.deep=!!i.deep,this.user=!!i.user,this.lazy=!!i.lazy,this.sync=!!i.sync,this.before=i.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++fn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new re,this.newDepIds=new re,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!z.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=P)),this.value=this.lazy?void 0:this.get()};pn.prototype.get=function(){var e;fe(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;He(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&it(e),pe(),this.cleanupDeps()}return e},pn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},pn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},pn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==on[t]){if(on[t]=!0,rn){for(var n=nn.length-1;n>ln&&nn[n].id>e.id;)n--;nn.splice(n+1,0,e)}else nn.push(e);sn||(sn=!0,tt(hn))}}(this)},pn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||l(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){He(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},pn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},pn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},pn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||y(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var vn={enumerable:!0,configurable:!0,get:P,set:P};function mn(e,t,n){vn.get=function(){return this[t][n]},vn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,vn)}function gn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},i=e._props={},a=e.$options._propKeys=[];e.$parent&&Se(!1);var o=function(o){a.push(o);var s=Ee(o,t,n,e);$e(i,o,s),o in e||mn(e,"_props",o)};for(var s in t)o(s);Se(!0)}(e,t.props),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?P:$(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;u(t=e._data="function"==typeof t?function(e,t){fe();try{return e.call(t,t)}catch(e){return He(e,t,"data()"),{}}finally{pe()}}(t,e):t||{})||(t={});var n=Object.keys(t),i=e.$options.props,a=(e.$options.methods,n.length);for(;a--;){var o=n[a];0,i&&w(i,o)||(s=void 0,36!==(s=(o+"").charCodeAt(0))&&95!==s&&mn(e,"_data",o))}var s;De(t,!0)}(e):De(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),i=ae();for(var a in t){var o=t[a],s="function"==typeof o?o:o.get;0,i||(n[a]=new pn(e,s||P,P,yn)),a in e||bn(e,a,o)}}(e,t.computed),t.watch&&t.watch!==te&&function(e,t){for(var n in t){var i=t[n];if(Array.isArray(i))for(var a=0;a<i.length;a++)kn(e,n,i[a]);else kn(e,n,i)}}(e,t.watch)}var yn={lazy:!0};function bn(e,t,n){var i=!ae();"function"==typeof n?(vn.get=i?wn(t):_n(n),vn.set=P):(vn.get=n.get?i&&!1!==n.cache?wn(t):_n(n.get):P,vn.set=n.set||P),Object.defineProperty(e,t,vn)}function wn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),de.target&&t.depend(),t.value}}function _n(e){return function(){return e.call(this,this)}}function kn(e,t,n,i){return u(n)&&(i=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,i)}var Cn=0;function Sn(e){var t=e.options;if(e.super){var n=Sn(e.super);if(n!==e.superOptions){e.superOptions=n;var i=function(e){var t,n=e.options,i=e.sealedOptions;for(var a in n)n[a]!==i[a]&&(t||(t={}),t[a]=n[a]);return t}(e);i&&T(e.extendOptions,i),(t=e.options=Fe(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function xn(e){this._init(e)}function Dn(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,i=n.cid,a=e._Ctor||(e._Ctor={});if(a[i])return a[i];var o=e.name||n.options.name;var s=function(e){this._init(e)};return(s.prototype=Object.create(n.prototype)).constructor=s,s.cid=t++,s.options=Fe(n.options,e),s.super=n,s.options.props&&function(e){var t=e.options.props;for(var n in t)mn(e.prototype,"_props",n)}(s),s.options.computed&&function(e){var t=e.options.computed;for(var n in t)bn(e.prototype,n,t[n])}(s),s.extend=n.extend,s.mixin=n.mixin,s.use=n.use,E.forEach(function(e){s[e]=n[e]}),o&&(s.options.components[o]=s),s.superOptions=n.options,s.extendOptions=e,s.sealedOptions=T({},s.options),a[i]=s,s}}function $n(e){return e&&(e.Ctor.options.name||e.tag)}function An(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!d(e)&&e.test(t)}function Tn(e,t){var n=e.cache,i=e.keys,a=e._vnode;for(var o in n){var s=n[o];if(s){var r=$n(s.componentOptions);r&&!t(r)&&On(n,o,i,a)}}}function On(e,t,n,i){var a=e[t];!a||i&&a.tag===i.tag||a.componentInstance.$destroy(),e[t]=null,y(n,t)}!function(e){e.prototype._init=function(e){var t=this;t._uid=Cn++,t._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),i=t._parentVnode;n.parent=t.parent,n._parentVnode=i;var a=i.componentOptions;n.propsData=a.propsData,n._parentListeners=a.listeners,n._renderChildren=a.children,n._componentTag=a.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=Fe(Sn(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Gt(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,a=n&&n.context;e.$slots=ht(t._renderChildren,a),e.$scopedSlots=i,e._c=function(t,n,i,a){return jt(e,t,n,i,a,!1)},e.$createElement=function(t,n,i,a){return jt(e,t,n,i,a,!0)};var o=n&&n.data;$e(e,"$attrs",o&&o.attrs||i,null,!0),$e(e,"$listeners",t._parentListeners||i,null,!0)}(t),tn(t,"beforeCreate"),function(e){var t=dt(e.$options.inject,e);t&&(Se(!1),Object.keys(t).forEach(function(n){$e(e,n,t[n])}),Se(!0))}(t),gn(t),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(t),tn(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(xn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Ae,e.prototype.$delete=Te,e.prototype.$watch=function(e,t,n){if(u(t))return kn(this,e,t,n);(n=n||{}).user=!0;var i=new pn(this,e,t,n);if(n.immediate)try{t.call(this,i.value)}catch(e){He(e,this,'callback for immediate watcher "'+i.expression+'"')}return function(){i.teardown()}}}(xn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var i=this;if(Array.isArray(e))for(var a=0,o=e.length;a<o;a++)i.$on(e[a],n);else(i._events[e]||(i._events[e]=[])).push(n),t.test(e)&&(i._hasHookEvent=!0);return i},e.prototype.$once=function(e,t){var n=this;function i(){n.$off(e,i),t.apply(n,arguments)}return i.fn=t,n.$on(e,i),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var i=0,a=e.length;i<a;i++)n.$off(e[i],t);return n}var o,s=n._events[e];if(!s)return n;if(!t)return n._events[e]=null,n;for(var r=s.length;r--;)if((o=s[r])===t||o.fn===t){s.splice(r,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?A(n):n;for(var i=A(arguments,1),a='event handler for "'+e+'"',o=0,s=n.length;o<s;o++)ze(n[o],t,i,t,a)}return t}}(xn),function(e){e.prototype._update=function(e,t){var n=this,i=n.$el,a=n._vnode,o=Qt(n);n._vnode=e,n.$el=a?n.__patch__(a,e):n.__patch__(n.$el,e,t,!1),o(),i&&(i.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){tn(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||y(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),tn(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(xn),function(e){Pt(e.prototype),e.prototype.$nextTick=function(e){return tt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,i=n.render,a=n._parentVnode;a&&(t.$scopedSlots=pt(a.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=a;try{zt=t,e=i.call(t._renderProxy,t.$createElement)}catch(n){He(n,t,"render"),e=t._vnode}finally{zt=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof ve||(e=ge()),e.parent=a,e}}(xn);var Pn=[String,RegExp,Array],Mn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Pn,exclude:Pn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)On(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",function(t){Tn(e,function(e){return An(t,e)})}),this.$watch("exclude",function(t){Tn(e,function(e){return!An(t,e)})})},render:function(){var e=this.$slots.default,t=Wt(e),n=t&&t.componentOptions;if(n){var i=$n(n),a=this.include,o=this.exclude;if(a&&(!i||!An(a,i))||o&&i&&An(o,i))return t;var s=this.cache,r=this.keys,l=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;s[l]?(t.componentInstance=s[l].componentInstance,y(r,l),r.push(l)):(s[l]=t,r.push(l),this.max&&r.length>parseInt(this.max)&&On(s,r[0],r,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return L}};Object.defineProperty(e,"config",t),e.util={warn:ce,extend:T,mergeOptions:Fe,defineReactive:$e},e.set=Ae,e.delete=Te,e.nextTick=tt,e.observable=function(e){return De(e),e},e.options=Object.create(null),E.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,T(e.options.components,Mn),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=A(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Fe(this.options,e),this}}(e),Dn(e),function(e){E.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&u(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}(e)}(xn),Object.defineProperty(xn.prototype,"$isServer",{get:ae}),Object.defineProperty(xn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(xn,"FunctionalRenderContext",{value:Mt}),xn.version="2.6.10";var Vn=m("style,class"),Bn=m("input,textarea,option,select,progress"),In=m("contenteditable,draggable,spellcheck"),Fn=m("events,caret,typing,plaintext-only"),Nn=function(e,t){return Hn(t)||"false"===t?"false":"contenteditable"===e&&Fn(t)?t:"true"},En=m("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Rn="http://www.w3.org/1999/xlink",Ln=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},jn=function(e){return Ln(e)?e.slice(6,e.length):""},Hn=function(e){return null==e||!1===e};function zn(e){for(var t=e.data,n=e,i=e;o(i.componentInstance);)(i=i.componentInstance._vnode)&&i.data&&(t=Yn(i.data,t));for(;o(n=n.parent);)n&&n.data&&(t=Yn(t,n.data));return function(e,t){if(o(e)||o(t))return qn(e,Wn(t));return""}(t.staticClass,t.class)}function Yn(e,t){return{staticClass:qn(e.staticClass,t.staticClass),class:o(e.class)?[e.class,t.class]:t.class}}function qn(e,t){return e?t?e+" "+t:e:t||""}function Wn(e){return Array.isArray(e)?function(e){for(var t,n="",i=0,a=e.length;i<a;i++)o(t=Wn(e[i]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):l(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var Un={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Kn=m("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Xn=m("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Gn=function(e){return Kn(e)||Xn(e)};var Jn=Object.create(null);var Qn=m("text,number,password,search,email,tel,url");var Zn=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(e,t){return document.createElementNS(Un[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),ei={create:function(e,t){ti(t)},update:function(e,t){e.data.ref!==t.data.ref&&(ti(e,!0),ti(t))},destroy:function(e){ti(e,!0)}};function ti(e,t){var n=e.data.ref;if(o(n)){var i=e.context,a=e.componentInstance||e.elm,s=i.$refs;t?Array.isArray(s[n])?y(s[n],a):s[n]===a&&(s[n]=void 0):e.data.refInFor?Array.isArray(s[n])?s[n].indexOf(a)<0&&s[n].push(a):s[n]=[a]:s[n]=a}}var ni=new ve("",{},[]),ii=["create","activate","update","remove","destroy"];function ai(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&o(e.data)===o(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,i=o(n=e.data)&&o(n=n.attrs)&&n.type,a=o(n=t.data)&&o(n=n.attrs)&&n.type;return i===a||Qn(i)&&Qn(a)}(e,t)||s(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&a(t.asyncFactory.error))}function oi(e,t,n){var i,a,s={};for(i=t;i<=n;++i)o(a=e[i].key)&&(s[a]=i);return s}var si={create:ri,update:ri,destroy:function(e){ri(e,ni)}};function ri(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,i,a,o=e===ni,s=t===ni,r=ci(e.data.directives,e.context),l=ci(t.data.directives,t.context),c=[],u=[];for(n in l)i=r[n],a=l[n],i?(a.oldValue=i.value,a.oldArg=i.arg,di(a,"update",t,e),a.def&&a.def.componentUpdated&&u.push(a)):(di(a,"bind",t,e),a.def&&a.def.inserted&&c.push(a));if(c.length){var d=function(){for(var n=0;n<c.length;n++)di(c[n],"inserted",t,e)};o?rt(t,"insert",d):d()}u.length&&rt(t,"postpatch",function(){for(var n=0;n<u.length;n++)di(u[n],"componentUpdated",t,e)});if(!o)for(n in r)l[n]||di(r[n],"unbind",e,e,s)}(e,t)}var li=Object.create(null);function ci(e,t){var n,i,a=Object.create(null);if(!e)return a;for(n=0;n<e.length;n++)(i=e[n]).modifiers||(i.modifiers=li),a[ui(i)]=i,i.def=Ne(t.$options,"directives",i.name);return a}function ui(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function di(e,t,n,i,a){var o=e.def&&e.def[t];if(o)try{o(n.elm,e,n,i,a)}catch(i){He(i,n.context,"directive "+e.name+" "+t+" hook")}}var hi=[ei,si];function fi(e,t){var n=t.componentOptions;if(!(o(n)&&!1===n.Ctor.options.inheritAttrs||a(e.data.attrs)&&a(t.data.attrs))){var i,s,r=t.elm,l=e.data.attrs||{},c=t.data.attrs||{};for(i in o(c.__ob__)&&(c=t.data.attrs=T({},c)),c)s=c[i],l[i]!==s&&pi(r,i,s);for(i in(G||Q)&&c.value!==l.value&&pi(r,"value",c.value),l)a(c[i])&&(Ln(i)?r.removeAttributeNS(Rn,jn(i)):In(i)||r.removeAttribute(i))}}function pi(e,t,n){e.tagName.indexOf("-")>-1?vi(e,t,n):En(t)?Hn(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):In(t)?e.setAttribute(t,Nn(t,n)):Ln(t)?Hn(n)?e.removeAttributeNS(Rn,jn(t)):e.setAttributeNS(Rn,t,n):vi(e,t,n)}function vi(e,t,n){if(Hn(n))e.removeAttribute(t);else{if(G&&!J&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var i=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",i)};e.addEventListener("input",i),e.__ieph=!0}e.setAttribute(t,n)}}var mi={create:fi,update:fi};function gi(e,t){var n=t.elm,i=t.data,s=e.data;if(!(a(i.staticClass)&&a(i.class)&&(a(s)||a(s.staticClass)&&a(s.class)))){var r=zn(t),l=n._transitionClasses;o(l)&&(r=qn(r,Wn(l))),r!==n._prevClass&&(n.setAttribute("class",r),n._prevClass=r)}}var yi,bi={create:gi,update:gi},wi="__r",_i="__c";function ki(e,t,n){var i=yi;return function a(){var o=t.apply(null,arguments);null!==o&&xi(e,a,n,i)}}var Ci=Ue&&!(ee&&Number(ee[1])<=53);function Si(e,t,n,i){if(Ci){var a=cn,o=t;t=o._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=a||e.timeStamp<=0||e.target.ownerDocument!==document)return o.apply(this,arguments)}}yi.addEventListener(e,t,ne?{capture:n,passive:i}:n)}function xi(e,t,n,i){(i||yi).removeEventListener(e,t._wrapper||t,n)}function Di(e,t){if(!a(e.data.on)||!a(t.data.on)){var n=t.data.on||{},i=e.data.on||{};yi=t.elm,function(e){if(o(e[wi])){var t=G?"change":"input";e[t]=[].concat(e[wi],e[t]||[]),delete e[wi]}o(e[_i])&&(e.change=[].concat(e[_i],e.change||[]),delete e[_i])}(n),st(n,i,Si,xi,ki,t.context),yi=void 0}}var $i,Ai={create:Di,update:Di};function Ti(e,t){if(!a(e.data.domProps)||!a(t.data.domProps)){var n,i,s=t.elm,r=e.data.domProps||{},l=t.data.domProps||{};for(n in o(l.__ob__)&&(l=t.data.domProps=T({},l)),r)n in l||(s[n]="");for(n in l){if(i=l[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),i===r[n])continue;1===s.childNodes.length&&s.removeChild(s.childNodes[0])}if("value"===n&&"PROGRESS"!==s.tagName){s._value=i;var c=a(i)?"":String(i);Oi(s,c)&&(s.value=c)}else if("innerHTML"===n&&Xn(s.tagName)&&a(s.innerHTML)){($i=$i||document.createElement("div")).innerHTML="<svg>"+i+"</svg>";for(var u=$i.firstChild;s.firstChild;)s.removeChild(s.firstChild);for(;u.firstChild;)s.appendChild(u.firstChild)}else if(i!==r[n])try{s[n]=i}catch(e){}}}}function Oi(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,i=e._vModifiers;if(o(i)){if(i.number)return v(n)!==v(t);if(i.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var Pi={create:Ti,update:Ti},Mi=_(function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach(function(e){if(e){var i=e.split(n);i.length>1&&(t[i[0].trim()]=i[1].trim())}}),t});function Vi(e){var t=Bi(e.style);return e.staticStyle?T(e.staticStyle,t):t}function Bi(e){return Array.isArray(e)?O(e):"string"==typeof e?Mi(e):e}var Ii,Fi=/^--/,Ni=/\s*!important$/,Ei=function(e,t,n){if(Fi.test(t))e.style.setProperty(t,n);else if(Ni.test(n))e.style.setProperty(D(t),n.replace(Ni,""),"important");else{var i=Li(t);if(Array.isArray(n))for(var a=0,o=n.length;a<o;a++)e.style[i]=n[a];else e.style[i]=n}},Ri=["Webkit","Moz","ms"],Li=_(function(e){if(Ii=Ii||document.createElement("div").style,"filter"!==(e=C(e))&&e in Ii)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Ri.length;n++){var i=Ri[n]+t;if(i in Ii)return i}});function ji(e,t){var n=t.data,i=e.data;if(!(a(n.staticStyle)&&a(n.style)&&a(i.staticStyle)&&a(i.style))){var s,r,l=t.elm,c=i.staticStyle,u=i.normalizedStyle||i.style||{},d=c||u,h=Bi(t.data.style)||{};t.data.normalizedStyle=o(h.__ob__)?T({},h):h;var f=function(e,t){var n,i={};if(t)for(var a=e;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(n=Vi(a.data))&&T(i,n);(n=Vi(e.data))&&T(i,n);for(var o=e;o=o.parent;)o.data&&(n=Vi(o.data))&&T(i,n);return i}(t,!0);for(r in d)a(f[r])&&Ei(l,r,"");for(r in f)(s=f[r])!==d[r]&&Ei(l,r,null==s?"":s)}}var Hi={create:ji,update:ji},zi=/\s+/;function Yi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(zi).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function qi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(zi).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",i=" "+t+" ";n.indexOf(i)>=0;)n=n.replace(i," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function Wi(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&T(t,Ui(e.name||"v")),T(t,e),t}return"string"==typeof e?Ui(e):void 0}}var Ui=_(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),Ki=W&&!J,Xi="transition",Gi="animation",Ji="transition",Qi="transitionend",Zi="animation",ea="animationend";Ki&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Ji="WebkitTransition",Qi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Zi="WebkitAnimation",ea="webkitAnimationEnd"));var ta=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function na(e){ta(function(){ta(e)})}function ia(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),Yi(e,t))}function aa(e,t){e._transitionClasses&&y(e._transitionClasses,t),qi(e,t)}function oa(e,t,n){var i=ra(e,t),a=i.type,o=i.timeout,s=i.propCount;if(!a)return n();var r=a===Xi?Qi:ea,l=0,c=function(){e.removeEventListener(r,u),n()},u=function(t){t.target===e&&++l>=s&&c()};setTimeout(function(){l<s&&c()},o+1),e.addEventListener(r,u)}var sa=/\b(transform|all)(,|$)/;function ra(e,t){var n,i=window.getComputedStyle(e),a=(i[Ji+"Delay"]||"").split(", "),o=(i[Ji+"Duration"]||"").split(", "),s=la(a,o),r=(i[Zi+"Delay"]||"").split(", "),l=(i[Zi+"Duration"]||"").split(", "),c=la(r,l),u=0,d=0;return t===Xi?s>0&&(n=Xi,u=s,d=o.length):t===Gi?c>0&&(n=Gi,u=c,d=l.length):d=(n=(u=Math.max(s,c))>0?s>c?Xi:Gi:null)?n===Xi?o.length:l.length:0,{type:n,timeout:u,propCount:d,hasTransform:n===Xi&&sa.test(i[Ji+"Property"])}}function la(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return ca(t)+ca(e[n])}))}function ca(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function ua(e,t){var n=e.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var i=Wi(e.data.transition);if(!a(i)&&!o(n._enterCb)&&1===n.nodeType){for(var s=i.css,r=i.type,c=i.enterClass,u=i.enterToClass,d=i.enterActiveClass,h=i.appearClass,f=i.appearToClass,p=i.appearActiveClass,m=i.beforeEnter,g=i.enter,y=i.afterEnter,b=i.enterCancelled,w=i.beforeAppear,_=i.appear,k=i.afterAppear,C=i.appearCancelled,S=i.duration,x=Jt,D=Jt.$vnode;D&&D.parent;)x=D.context,D=D.parent;var $=!x._isMounted||!e.isRootInsert;if(!$||_||""===_){var A=$&&h?h:c,T=$&&p?p:d,O=$&&f?f:u,P=$&&w||m,M=$&&"function"==typeof _?_:g,V=$&&k||y,B=$&&C||b,I=v(l(S)?S.enter:S);0;var N=!1!==s&&!J,E=fa(M),R=n._enterCb=F(function(){N&&(aa(n,O),aa(n,T)),R.cancelled?(N&&aa(n,A),B&&B(n)):V&&V(n),n._enterCb=null});e.data.show||rt(e,"insert",function(){var t=n.parentNode,i=t&&t._pending&&t._pending[e.key];i&&i.tag===e.tag&&i.elm._leaveCb&&i.elm._leaveCb(),M&&M(n,R)}),P&&P(n),N&&(ia(n,A),ia(n,T),na(function(){aa(n,A),R.cancelled||(ia(n,O),E||(ha(I)?setTimeout(R,I):oa(n,r,R)))})),e.data.show&&(t&&t(),M&&M(n,R)),N||E||R()}}}function da(e,t){var n=e.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var i=Wi(e.data.transition);if(a(i)||1!==n.nodeType)return t();if(!o(n._leaveCb)){var s=i.css,r=i.type,c=i.leaveClass,u=i.leaveToClass,d=i.leaveActiveClass,h=i.beforeLeave,f=i.leave,p=i.afterLeave,m=i.leaveCancelled,g=i.delayLeave,y=i.duration,b=!1!==s&&!J,w=fa(f),_=v(l(y)?y.leave:y);0;var k=n._leaveCb=F(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),b&&(aa(n,u),aa(n,d)),k.cancelled?(b&&aa(n,c),m&&m(n)):(t(),p&&p(n)),n._leaveCb=null});g?g(C):C()}function C(){k.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),h&&h(n),b&&(ia(n,c),ia(n,d),na(function(){aa(n,c),k.cancelled||(ia(n,u),w||(ha(_)?setTimeout(k,_):oa(n,r,k)))})),f&&f(n,k),b||w||k())}}function ha(e){return"number"==typeof e&&!isNaN(e)}function fa(e){if(a(e))return!1;var t=e.fns;return o(t)?fa(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function pa(e,t){!0!==t.data.show&&ua(t)}var va=function(e){var t,n,i={},l=e.modules,c=e.nodeOps;for(t=0;t<ii.length;++t)for(i[ii[t]]=[],n=0;n<l.length;++n)o(l[n][ii[t]])&&i[ii[t]].push(l[n][ii[t]]);function u(e){var t=c.parentNode(e);o(t)&&c.removeChild(t,e)}function d(e,t,n,a,r,l,u){if(o(e.elm)&&o(l)&&(e=l[u]=be(e)),e.isRootInsert=!r,!function(e,t,n,a){var r=e.data;if(o(r)){var l=o(e.componentInstance)&&r.keepAlive;if(o(r=r.hook)&&o(r=r.init)&&r(e,!1),o(e.componentInstance))return h(e,t),f(n,e.elm,a),s(l)&&function(e,t,n,a){var s,r=e;for(;r.componentInstance;)if(r=r.componentInstance._vnode,o(s=r.data)&&o(s=s.transition)){for(s=0;s<i.activate.length;++s)i.activate[s](ni,r);t.push(r);break}f(n,e.elm,a)}(e,t,n,a),!0}}(e,t,n,a)){var d=e.data,v=e.children,m=e.tag;o(m)?(e.elm=e.ns?c.createElementNS(e.ns,m):c.createElement(m,e),y(e),p(e,v,t),o(d)&&g(e,t),f(n,e.elm,a)):s(e.isComment)?(e.elm=c.createComment(e.text),f(n,e.elm,a)):(e.elm=c.createTextNode(e.text),f(n,e.elm,a))}}function h(e,t){o(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,v(e)?(g(e,t),y(e)):(ti(e),t.push(e))}function f(e,t,n){o(e)&&(o(n)?c.parentNode(n)===e&&c.insertBefore(e,t,n):c.appendChild(e,t))}function p(e,t,n){if(Array.isArray(t)){0;for(var i=0;i<t.length;++i)d(t[i],n,e.elm,null,!0,t,i)}else r(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function v(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return o(e.tag)}function g(e,n){for(var a=0;a<i.create.length;++a)i.create[a](ni,e);o(t=e.data.hook)&&(o(t.create)&&t.create(ni,e),o(t.insert)&&n.push(e))}function y(e){var t;if(o(t=e.fnScopeId))c.setStyleScope(e.elm,t);else for(var n=e;n;)o(t=n.context)&&o(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t),n=n.parent;o(t=Jt)&&t!==e.context&&t!==e.fnContext&&o(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t)}function b(e,t,n,i,a,o){for(;i<=a;++i)d(n[i],o,e,t,!1,n,i)}function w(e){var t,n,a=e.data;if(o(a))for(o(t=a.hook)&&o(t=t.destroy)&&t(e),t=0;t<i.destroy.length;++t)i.destroy[t](e);if(o(t=e.children))for(n=0;n<e.children.length;++n)w(e.children[n])}function _(e,t,n,i){for(;n<=i;++n){var a=t[n];o(a)&&(o(a.tag)?(k(a),w(a)):u(a.elm))}}function k(e,t){if(o(t)||o(e.data)){var n,a=i.remove.length+1;for(o(t)?t.listeners+=a:t=function(e,t){function n(){0==--n.listeners&&u(e)}return n.listeners=t,n}(e.elm,a),o(n=e.componentInstance)&&o(n=n._vnode)&&o(n.data)&&k(n,t),n=0;n<i.remove.length;++n)i.remove[n](e,t);o(n=e.data.hook)&&o(n=n.remove)?n(e,t):t()}else u(e.elm)}function C(e,t,n,i){for(var a=n;a<i;a++){var s=t[a];if(o(s)&&ai(e,s))return a}}function S(e,t,n,r,l,u){if(e!==t){o(t.elm)&&o(r)&&(t=r[l]=be(t));var h=t.elm=e.elm;if(s(e.isAsyncPlaceholder))o(t.asyncFactory.resolved)?$(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(s(t.isStatic)&&s(e.isStatic)&&t.key===e.key&&(s(t.isCloned)||s(t.isOnce)))t.componentInstance=e.componentInstance;else{var f,p=t.data;o(p)&&o(f=p.hook)&&o(f=f.prepatch)&&f(e,t);var m=e.children,g=t.children;if(o(p)&&v(t)){for(f=0;f<i.update.length;++f)i.update[f](e,t);o(f=p.hook)&&o(f=f.update)&&f(e,t)}a(t.text)?o(m)&&o(g)?m!==g&&function(e,t,n,i,s){var r,l,u,h=0,f=0,p=t.length-1,v=t[0],m=t[p],g=n.length-1,y=n[0],w=n[g],k=!s;for(0;h<=p&&f<=g;)a(v)?v=t[++h]:a(m)?m=t[--p]:ai(v,y)?(S(v,y,i,n,f),v=t[++h],y=n[++f]):ai(m,w)?(S(m,w,i,n,g),m=t[--p],w=n[--g]):ai(v,w)?(S(v,w,i,n,g),k&&c.insertBefore(e,v.elm,c.nextSibling(m.elm)),v=t[++h],w=n[--g]):ai(m,y)?(S(m,y,i,n,f),k&&c.insertBefore(e,m.elm,v.elm),m=t[--p],y=n[++f]):(a(r)&&(r=oi(t,h,p)),a(l=o(y.key)?r[y.key]:C(y,t,h,p))?d(y,i,e,v.elm,!1,n,f):ai(u=t[l],y)?(S(u,y,i,n,f),t[l]=void 0,k&&c.insertBefore(e,u.elm,v.elm)):d(y,i,e,v.elm,!1,n,f),y=n[++f]);h>p?b(e,a(n[g+1])?null:n[g+1].elm,n,f,g,i):f>g&&_(0,t,h,p)}(h,m,g,n,u):o(g)?(o(e.text)&&c.setTextContent(h,""),b(h,null,g,0,g.length-1,n)):o(m)?_(0,m,0,m.length-1):o(e.text)&&c.setTextContent(h,""):e.text!==t.text&&c.setTextContent(h,t.text),o(p)&&o(f=p.hook)&&o(f=f.postpatch)&&f(e,t)}}}function x(e,t,n){if(s(n)&&o(e.parent))e.parent.data.pendingInsert=t;else for(var i=0;i<t.length;++i)t[i].data.hook.insert(t[i])}var D=m("attrs,class,staticClass,staticStyle,key");function $(e,t,n,i){var a,r=t.tag,l=t.data,c=t.children;if(i=i||l&&l.pre,t.elm=e,s(t.isComment)&&o(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(o(l)&&(o(a=l.hook)&&o(a=a.init)&&a(t,!0),o(a=t.componentInstance)))return h(t,n),!0;if(o(r)){if(o(c))if(e.hasChildNodes())if(o(a=l)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==e.innerHTML)return!1}else{for(var u=!0,d=e.firstChild,f=0;f<c.length;f++){if(!d||!$(d,c[f],n,i)){u=!1;break}d=d.nextSibling}if(!u||d)return!1}else p(t,c,n);if(o(l)){var v=!1;for(var m in l)if(!D(m)){v=!0,g(t,n);break}!v&&l.class&&it(l.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,r){if(!a(t)){var l,u=!1,h=[];if(a(e))u=!0,d(t,h);else{var f=o(e.nodeType);if(!f&&ai(e,t))S(e,t,h,null,null,r);else{if(f){if(1===e.nodeType&&e.hasAttribute(N)&&(e.removeAttribute(N),n=!0),s(n)&&$(e,t,h))return x(t,h,!0),e;l=e,e=new ve(c.tagName(l).toLowerCase(),{},[],void 0,l)}var p=e.elm,m=c.parentNode(p);if(d(t,h,p._leaveCb?null:m,c.nextSibling(p)),o(t.parent))for(var g=t.parent,y=v(t);g;){for(var b=0;b<i.destroy.length;++b)i.destroy[b](g);if(g.elm=t.elm,y){for(var k=0;k<i.create.length;++k)i.create[k](ni,g);var C=g.data.hook.insert;if(C.merged)for(var D=1;D<C.fns.length;D++)C.fns[D]()}else ti(g);g=g.parent}o(m)?_(0,[e],0,0):o(e.tag)&&w(e)}}return x(t,h,u),t.elm}o(e)&&w(e)}}({nodeOps:Zn,modules:[mi,bi,Ai,Pi,Hi,W?{create:pa,activate:pa,remove:function(e,t){!0!==e.data.show?da(e,t):t()}}:{}].concat(hi)});J&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&Ca(e,"input")});var ma={inserted:function(e,t,n,i){"select"===n.tag?(i.elm&&!i.elm._vOptions?rt(n,"postpatch",function(){ma.componentUpdated(e,t,n)}):ga(e,t,n.context),e._vOptions=[].map.call(e.options,wa)):("textarea"===n.tag||Qn(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",_a),e.addEventListener("compositionend",ka),e.addEventListener("change",ka),J&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){ga(e,t,n.context);var i=e._vOptions,a=e._vOptions=[].map.call(e.options,wa);if(a.some(function(e,t){return!B(e,i[t])}))(e.multiple?t.value.some(function(e){return ba(e,a)}):t.value!==t.oldValue&&ba(t.value,a))&&Ca(e,"change")}}};function ga(e,t,n){ya(e,t,n),(G||Q)&&setTimeout(function(){ya(e,t,n)},0)}function ya(e,t,n){var i=t.value,a=e.multiple;if(!a||Array.isArray(i)){for(var o,s,r=0,l=e.options.length;r<l;r++)if(s=e.options[r],a)o=I(i,wa(s))>-1,s.selected!==o&&(s.selected=o);else if(B(wa(s),i))return void(e.selectedIndex!==r&&(e.selectedIndex=r));a||(e.selectedIndex=-1)}}function ba(e,t){return t.every(function(t){return!B(t,e)})}function wa(e){return"_value"in e?e._value:e.value}function _a(e){e.target.composing=!0}function ka(e){e.target.composing&&(e.target.composing=!1,Ca(e.target,"input"))}function Ca(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function Sa(e){return!e.componentInstance||e.data&&e.data.transition?e:Sa(e.componentInstance._vnode)}var xa={model:ma,show:{bind:function(e,t,n){var i=t.value,a=(n=Sa(n)).data&&n.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;i&&a?(n.data.show=!0,ua(n,function(){e.style.display=o})):e.style.display=i?o:"none"},update:function(e,t,n){var i=t.value;!i!=!t.oldValue&&((n=Sa(n)).data&&n.data.transition?(n.data.show=!0,i?ua(n,function(){e.style.display=e.__vOriginalDisplay}):da(n,function(){e.style.display="none"})):e.style.display=i?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,i,a){a||(e.style.display=e.__vOriginalDisplay)}}},Da={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function $a(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?$a(Wt(t.children)):e}function Aa(e){var t={},n=e.$options;for(var i in n.propsData)t[i]=e[i];var a=n._parentListeners;for(var o in a)t[C(o)]=a[o];return t}function Ta(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var Oa=function(e){return e.tag||qt(e)},Pa=function(e){return"show"===e.name},Ma={name:"transition",props:Da,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(Oa)).length){0;var i=this.mode;0;var a=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return a;var o=$a(a);if(!o)return a;if(this._leaving)return Ta(e,a);var s="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?s+"comment":s+o.tag:r(o.key)?0===String(o.key).indexOf(s)?o.key:s+o.key:o.key;var l=(o.data||(o.data={})).transition=Aa(this),c=this._vnode,u=$a(c);if(o.data.directives&&o.data.directives.some(Pa)&&(o.data.show=!0),u&&u.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(o,u)&&!qt(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var d=u.data.transition=T({},l);if("out-in"===i)return this._leaving=!0,rt(d,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),Ta(e,a);if("in-out"===i){if(qt(o))return c;var h,f=function(){h()};rt(l,"afterEnter",f),rt(l,"enterCancelled",f),rt(d,"delayLeave",function(e){h=e})}}return a}}},Va=T({tag:String,moveClass:String},Da);function Ba(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Ia(e){e.data.newPos=e.elm.getBoundingClientRect()}function Fa(e){var t=e.data.pos,n=e.data.newPos,i=t.left-n.left,a=t.top-n.top;if(i||a){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate("+i+"px,"+a+"px)",o.transitionDuration="0s"}}delete Va.mode;var Na={Transition:Ma,TransitionGroup:{props:Va,beforeMount:function(){var e=this,t=this._update;this._update=function(n,i){var a=Qt(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,a(),t.call(e,n,i)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),i=this.prevChildren=this.children,a=this.$slots.default||[],o=this.children=[],s=Aa(this),r=0;r<a.length;r++){var l=a[r];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))o.push(l),n[l.key]=l,(l.data||(l.data={})).transition=s;else;}if(i){for(var c=[],u=[],d=0;d<i.length;d++){var h=i[d];h.data.transition=s,h.data.pos=h.elm.getBoundingClientRect(),n[h.key]?c.push(h):u.push(h)}this.kept=e(t,null,c),this.removed=u}return e(t,null,o)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(Ba),e.forEach(Ia),e.forEach(Fa),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var n=e.elm,i=n.style;ia(n,t),i.transform=i.WebkitTransform=i.transitionDuration="",n.addEventListener(Qi,n._moveCb=function e(i){i&&i.target!==n||i&&!/transform$/.test(i.propertyName)||(n.removeEventListener(Qi,e),n._moveCb=null,aa(n,t))})}}))},methods:{hasMove:function(e,t){if(!Ki)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){qi(n,e)}),Yi(n,t),n.style.display="none",this.$el.appendChild(n);var i=ra(n);return this.$el.removeChild(n),this._hasMove=i.hasTransform}}}};xn.config.mustUseProp=function(e,t,n){return"value"===n&&Bn(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},xn.config.isReservedTag=Gn,xn.config.isReservedAttr=Vn,xn.config.getTagNamespace=function(e){return Xn(e)?"svg":"math"===e?"math":void 0},xn.config.isUnknownElement=function(e){if(!W)return!0;if(Gn(e))return!1;if(e=e.toLowerCase(),null!=Jn[e])return Jn[e];var t=document.createElement(e);return e.indexOf("-")>-1?Jn[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Jn[e]=/HTMLUnknownElement/.test(t.toString())},T(xn.options.directives,xa),T(xn.options.components,Na),xn.prototype.__patch__=W?va:P,xn.prototype.$mount=function(e,t){return function(e,t,n){var i;return e.$el=t,e.$options.render||(e.$options.render=ge),tn(e,"beforeMount"),i=function(){e._update(e._render(),n)},new pn(e,i,P,{before:function(){e._isMounted&&!e._isDestroyed&&tn(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,tn(e,"mounted")),e}(this,e=e&&W?function(e){if("string"==typeof e){var t=document.querySelector(e);return t||document.createElement("div")}return e}(e):void 0,t)},W&&setTimeout(function(){L.devtools&&oe&&oe.emit("init",xn)},0),t.a=xn}).call(this,n(3),n(12).setImmediate)},function(e,t,n){"use strict";
/*!
  * vue-router v3.1.2
  * (c) 2019 Evan You
  * @license MIT
  */function i(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function a(e,t){return t instanceof e||t&&(t.name===e.name||t._name===e._name)}function o(e,t){for(var n in t)e[n]=t[n];return e}var s={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,t){var n=t.props,i=t.children,a=t.parent,s=t.data;s.routerView=!0;for(var r=a.$createElement,l=n.name,c=a.$route,u=a._routerViewCache||(a._routerViewCache={}),d=0,h=!1;a&&a._routerRoot!==a;){var f=a.$vnode&&a.$vnode.data;f&&(f.routerView&&d++,f.keepAlive&&a._inactive&&(h=!0)),a=a.$parent}if(s.routerViewDepth=d,h)return r(u[l],s,i);var p=c.matched[d];if(!p)return u[l]=null,r();var v=u[l]=p.components[l];s.registerRouteInstance=function(e,t){var n=p.instances[l];(t&&n!==e||!t&&n===e)&&(p.instances[l]=t)},(s.hook||(s.hook={})).prepatch=function(e,t){p.instances[l]=t.componentInstance},s.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==p.instances[l]&&(p.instances[l]=e.componentInstance)};var m=s.props=function(e,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(e);case"boolean":return t?e.params:void 0;default:0}}(c,p.props&&p.props[l]);if(m){m=s.props=o({},m);var g=s.attrs=s.attrs||{};for(var y in m)v.props&&y in v.props||(g[y]=m[y],delete m[y])}return r(v,s,i)}};var r=/[!'()*]/g,l=function(e){return"%"+e.charCodeAt(0).toString(16)},c=/%2C/g,u=function(e){return encodeURIComponent(e).replace(r,l).replace(c,",")},d=decodeURIComponent;function h(e){var t={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach(function(e){var n=e.replace(/\+/g," ").split("="),i=d(n.shift()),a=n.length>0?d(n.join("=")):null;void 0===t[i]?t[i]=a:Array.isArray(t[i])?t[i].push(a):t[i]=[t[i],a]}),t):t}function f(e){var t=e?Object.keys(e).map(function(t){var n=e[t];if(void 0===n)return"";if(null===n)return u(t);if(Array.isArray(n)){var i=[];return n.forEach(function(e){void 0!==e&&(null===e?i.push(u(t)):i.push(u(t)+"="+u(e)))}),i.join("&")}return u(t)+"="+u(n)}).filter(function(e){return e.length>0}).join("&"):null;return t?"?"+t:""}var p=/\/?$/;function v(e,t,n,i){var a=i&&i.options.stringifyQuery,o=t.query||{};try{o=m(o)}catch(e){}var s={name:t.name||e&&e.name,meta:e&&e.meta||{},path:t.path||"/",hash:t.hash||"",query:o,params:t.params||{},fullPath:b(t,a),matched:e?y(e):[]};return n&&(s.redirectedFrom=b(n,a)),Object.freeze(s)}function m(e){if(Array.isArray(e))return e.map(m);if(e&&"object"==typeof e){var t={};for(var n in e)t[n]=m(e[n]);return t}return e}var g=v(null,{path:"/"});function y(e){for(var t=[];e;)t.unshift(e),e=e.parent;return t}function b(e,t){var n=e.path,i=e.query;void 0===i&&(i={});var a=e.hash;return void 0===a&&(a=""),(n||"/")+(t||f)(i)+a}function w(e,t){return t===g?e===t:!!t&&(e.path&&t.path?e.path.replace(p,"")===t.path.replace(p,"")&&e.hash===t.hash&&_(e.query,t.query):!(!e.name||!t.name)&&(e.name===t.name&&e.hash===t.hash&&_(e.query,t.query)&&_(e.params,t.params)))}function _(e,t){if(void 0===e&&(e={}),void 0===t&&(t={}),!e||!t)return e===t;var n=Object.keys(e),i=Object.keys(t);return n.length===i.length&&n.every(function(n){var i=e[n],a=t[n];return"object"==typeof i&&"object"==typeof a?_(i,a):String(i)===String(a)})}function k(e,t,n){var i=e.charAt(0);if("/"===i)return e;if("?"===i||"#"===i)return t+e;var a=t.split("/");n&&a[a.length-1]||a.pop();for(var o=e.replace(/^\//,"").split("/"),s=0;s<o.length;s++){var r=o[s];".."===r?a.pop():"."!==r&&a.push(r)}return""!==a[0]&&a.unshift(""),a.join("/")}function C(e){return e.replace(/\/\//g,"/")}var S=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},x=R,D=P,$=function(e,t){return V(P(e,t))},A=V,T=E,O=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function P(e,t){for(var n,i=[],a=0,o=0,s="",r=t&&t.delimiter||"/";null!=(n=O.exec(e));){var l=n[0],c=n[1],u=n.index;if(s+=e.slice(o,u),o=u+l.length,c)s+=c[1];else{var d=e[o],h=n[2],f=n[3],p=n[4],v=n[5],m=n[6],g=n[7];s&&(i.push(s),s="");var y=null!=h&&null!=d&&d!==h,b="+"===m||"*"===m,w="?"===m||"*"===m,_=n[2]||r,k=p||v;i.push({name:f||a++,prefix:h||"",delimiter:_,optional:w,repeat:b,partial:y,asterisk:!!g,pattern:k?I(k):g?".*":"[^"+B(_)+"]+?"})}}return o<e.length&&(s+=e.substr(o)),s&&i.push(s),i}function M(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function V(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,i){for(var a="",o=n||{},s=(i||{}).pretty?M:encodeURIComponent,r=0;r<e.length;r++){var l=e[r];if("string"!=typeof l){var c,u=o[l.name];if(null==u){if(l.optional){l.partial&&(a+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(S(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var d=0;d<u.length;d++){if(c=s(u[d]),!t[r].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");a+=(0===d?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):s(u),!t[r].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');a+=l.prefix+c}}else a+=l}return a}}function B(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function I(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function F(e,t){return e.keys=t,e}function N(e){return e.sensitive?"":"i"}function E(e,t,n){S(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,a=!1!==n.end,o="",s=0;s<e.length;s++){var r=e[s];if("string"==typeof r)o+=B(r);else{var l=B(r.prefix),c="(?:"+r.pattern+")";t.push(r),r.repeat&&(c+="(?:"+l+c+")*"),o+=c=r.optional?r.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var u=B(n.delimiter||"/"),d=o.slice(-u.length)===u;return i||(o=(d?o.slice(0,-u.length):o)+"(?:"+u+"(?=$))?"),o+=a?"$":i&&d?"":"(?="+u+"|$)",F(new RegExp("^"+o,N(n)),t)}function R(e,t,n){return S(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var i=0;i<n.length;i++)t.push({name:i,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return F(e,t)}(e,t):S(e)?function(e,t,n){for(var i=[],a=0;a<e.length;a++)i.push(R(e[a],t,n).source);return F(new RegExp("(?:"+i.join("|")+")",N(n)),t)}(e,t,n):function(e,t,n){return E(P(e,n),t,n)}(e,t,n)}x.parse=D,x.compile=$,x.tokensToFunction=A,x.tokensToRegExp=T;var L=Object.create(null);function j(e,t,n){t=t||{};try{var i=L[e]||(L[e]=x.compile(e));return t.pathMatch&&(t[0]=t.pathMatch),i(t,{pretty:!0})}catch(e){return""}finally{delete t[0]}}function H(e,t,n,i){var a="string"==typeof e?{path:e}:e;if(a._normalized)return a;if(a.name)return o({},e);if(!a.path&&a.params&&t){(a=o({},a))._normalized=!0;var s=o(o({},t.params),a.params);if(t.name)a.name=t.name,a.params=s;else if(t.matched.length){var r=t.matched[t.matched.length-1].path;a.path=j(r,s,t.path)}else 0;return a}var l=function(e){var t="",n="",i=e.indexOf("#");i>=0&&(t=e.slice(i),e=e.slice(0,i));var a=e.indexOf("?");return a>=0&&(n=e.slice(a+1),e=e.slice(0,a)),{path:e,query:n,hash:t}}(a.path||""),c=t&&t.path||"/",u=l.path?k(l.path,c,n||a.append):c,d=function(e,t,n){void 0===t&&(t={});var i,a=n||h;try{i=a(e||"")}catch(e){i={}}for(var o in t)i[o]=t[o];return i}(l.query,a.query,i&&i.options.parseQuery),f=a.hash||l.hash;return f&&"#"!==f.charAt(0)&&(f="#"+f),{_normalized:!0,path:u,query:d,hash:f}}var z,Y=[String,Object],q=[String,Array],W=function(){},U={name:"RouterLink",props:{to:{type:Y,required:!0},tag:{type:String,default:"a"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,event:{type:q,default:"click"}},render:function(e){var t=this,n=this.$router,i=this.$route,a=n.resolve(this.to,i,this.append),s=a.location,r=a.route,l=a.href,c={},u=n.options.linkActiveClass,d=n.options.linkExactActiveClass,h=null==u?"router-link-active":u,f=null==d?"router-link-exact-active":d,m=null==this.activeClass?h:this.activeClass,g=null==this.exactActiveClass?f:this.exactActiveClass,y=r.redirectedFrom?v(null,H(r.redirectedFrom),null,n):r;c[g]=w(i,y),c[m]=this.exact?c[g]:function(e,t){return 0===e.path.replace(p,"/").indexOf(t.path.replace(p,"/"))&&(!t.hash||e.hash===t.hash)&&function(e,t){for(var n in t)if(!(n in e))return!1;return!0}(e.query,t.query)}(i,y);var b=function(e){K(e)&&(t.replace?n.replace(s,W):n.push(s,W))},_={click:K};Array.isArray(this.event)?this.event.forEach(function(e){_[e]=b}):_[this.event]=b;var k={class:c},C=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:l,route:r,navigate:b,isActive:c[m],isExactActive:c[g]});if(C){if(1===C.length)return C[0];if(C.length>1||!C.length)return 0===C.length?e():e("span",{},C)}if("a"===this.tag)k.on=_,k.attrs={href:l};else{var S=function e(t){if(t)for(var n,i=0;i<t.length;i++){if("a"===(n=t[i]).tag)return n;if(n.children&&(n=e(n.children)))return n}}(this.$slots.default);if(S)S.isStatic=!1,(S.data=o({},S.data)).on=_,(S.data.attrs=o({},S.data.attrs)).href=l;else k.on=_}return e(this.tag,k,this.$slots.default)}};function K(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}var X="undefined"!=typeof window;function G(e,t,n,i){var a=t||[],o=n||Object.create(null),s=i||Object.create(null);e.forEach(function(e){!function e(t,n,i,a,o,s){var r=a.path;var l=a.name;0;var c=a.pathToRegexpOptions||{};var u=function(e,t,n){n||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==t)return e;return C(t.path+"/"+e)}(r,o,c.strict);"boolean"==typeof a.caseSensitive&&(c.sensitive=a.caseSensitive);var d={path:u,regex:J(u,c),components:a.components||{default:a.component},instances:{},name:l,parent:o,matchAs:s,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach(function(a){var o=s?C(s+"/"+a.path):void 0;e(t,n,i,a,d,o)});n[d.path]||(t.push(d.path),n[d.path]=d);if(void 0!==a.alias)for(var h=Array.isArray(a.alias)?a.alias:[a.alias],f=0;f<h.length;++f){var p=h[f];0;var v={path:p,children:a.children};e(t,n,i,v,o,d.path||"/")}l&&(i[l]||(i[l]=d))}(a,o,s,e)});for(var r=0,l=a.length;r<l;r++)"*"===a[r]&&(a.push(a.splice(r,1)[0]),l--,r--);return{pathList:a,pathMap:o,nameMap:s}}function J(e,t){return x(e,[],t)}function Q(e,t){var n=G(e),i=n.pathList,a=n.pathMap,o=n.nameMap;function s(e,n,s){var r=H(e,n,!1,t),c=r.name;if(c){var u=o[c];if(!u)return l(null,r);var d=u.regex.keys.filter(function(e){return!e.optional}).map(function(e){return e.name});if("object"!=typeof r.params&&(r.params={}),n&&"object"==typeof n.params)for(var h in n.params)!(h in r.params)&&d.indexOf(h)>-1&&(r.params[h]=n.params[h]);return r.path=j(u.path,r.params),l(u,r,s)}if(r.path){r.params={};for(var f=0;f<i.length;f++){var p=i[f],v=a[p];if(Z(v.regex,r.path,r.params))return l(v,r,s)}}return l(null,r)}function r(e,n){var i=e.redirect,a="function"==typeof i?i(v(e,n,null,t)):i;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return l(null,n);var r=a,c=r.name,u=r.path,d=n.query,h=n.hash,f=n.params;if(d=r.hasOwnProperty("query")?r.query:d,h=r.hasOwnProperty("hash")?r.hash:h,f=r.hasOwnProperty("params")?r.params:f,c){o[c];return s({_normalized:!0,name:c,query:d,hash:h,params:f},void 0,n)}if(u){var p=function(e,t){return k(e,t.parent?t.parent.path:"/",!0)}(u,e);return s({_normalized:!0,path:j(p,f),query:d,hash:h},void 0,n)}return l(null,n)}function l(e,n,i){return e&&e.redirect?r(e,i||n):e&&e.matchAs?function(e,t,n){var i=s({_normalized:!0,path:j(n,t.params)});if(i){var a=i.matched,o=a[a.length-1];return t.params=i.params,l(o,t)}return l(null,t)}(0,n,e.matchAs):v(e,n,i,t)}return{match:s,addRoutes:function(e){G(e,i,a,o)}}}function Z(e,t,n){var i=t.match(e);if(!i)return!1;if(!n)return!0;for(var a=1,o=i.length;a<o;++a){var s=e.keys[a-1],r="string"==typeof i[a]?decodeURIComponent(i[a]):i[a];s&&(n[s.name||"pathMatch"]=r)}return!0}var ee=Object.create(null);function te(){var e=window.location.protocol+"//"+window.location.host,t=window.location.href.replace(e,"");window.history.replaceState({key:pe()},"",t),window.addEventListener("popstate",function(e){var t;ie(),e.state&&e.state.key&&(t=e.state.key,he=t)})}function ne(e,t,n,i){if(e.app){var a=e.options.scrollBehavior;a&&e.app.$nextTick(function(){var o=function(){var e=pe();if(e)return ee[e]}(),s=a.call(e,t,n,i?o:null);s&&("function"==typeof s.then?s.then(function(e){le(e,o)}).catch(function(e){0}):le(s,o))})}}function ie(){var e=pe();e&&(ee[e]={x:window.pageXOffset,y:window.pageYOffset})}function ae(e){return se(e.x)||se(e.y)}function oe(e){return{x:se(e.x)?e.x:window.pageXOffset,y:se(e.y)?e.y:window.pageYOffset}}function se(e){return"number"==typeof e}var re=/^#\d/;function le(e,t){var n,i="object"==typeof e;if(i&&"string"==typeof e.selector){var a=re.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(a){var o=e.offset&&"object"==typeof e.offset?e.offset:{};t=function(e,t){var n=document.documentElement.getBoundingClientRect(),i=e.getBoundingClientRect();return{x:i.left-n.left-t.x,y:i.top-n.top-t.y}}(a,o={x:se((n=o).x)?n.x:0,y:se(n.y)?n.y:0})}else ae(e)&&(t=oe(e))}else i&&ae(e)&&(t=oe(e));t&&window.scrollTo(t.x,t.y)}var ce,ue=X&&((-1===(ce=window.navigator.userAgent).indexOf("Android 2.")&&-1===ce.indexOf("Android 4.0")||-1===ce.indexOf("Mobile Safari")||-1!==ce.indexOf("Chrome")||-1!==ce.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history),de=X&&window.performance&&window.performance.now?window.performance:Date,he=fe();function fe(){return de.now().toFixed(3)}function pe(){return he}function ve(e,t){ie();var n=window.history;try{t?n.replaceState({key:he},"",e):(he=fe(),n.pushState({key:he},"",e))}catch(n){window.location[t?"replace":"assign"](e)}}function me(e){ve(e,!0)}function ge(e,t,n){var i=function(a){a>=e.length?n():e[a]?t(e[a],function(){i(a+1)}):i(a+1)};i(0)}function ye(e){return function(t,n,a){var o=!1,s=0,r=null;be(e,function(e,t,n,l){if("function"==typeof e&&void 0===e.cid){o=!0,s++;var c,u=ke(function(t){var i;((i=t).__esModule||_e&&"Module"===i[Symbol.toStringTag])&&(t=t.default),e.resolved="function"==typeof t?t:z.extend(t),n.components[l]=t,--s<=0&&a()}),d=ke(function(e){var t="Failed to resolve async component "+l+": "+e;r||(r=i(e)?e:new Error(t),a(r))});try{c=e(u,d)}catch(e){d(e)}if(c)if("function"==typeof c.then)c.then(u,d);else{var h=c.component;h&&"function"==typeof h.then&&h.then(u,d)}}}),o||a()}}function be(e,t){return we(e.map(function(e){return Object.keys(e.components).map(function(n){return t(e.components[n],e.instances[n],e,n)})}))}function we(e){return Array.prototype.concat.apply([],e)}var _e="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function ke(e){var t=!1;return function(){for(var n=[],i=arguments.length;i--;)n[i]=arguments[i];if(!t)return t=!0,e.apply(this,n)}}var Ce=function(e){function t(){e.call(this,"Navigating to current location is not allowed"),this.name=this._name="NavigationDuplicated"}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Error);Ce._name="NavigationDuplicated";var Se=function(e,t){this.router=e,this.base=function(e){if(!e)if(X){var t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(t),this.current=g,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[]};function xe(e,t,n,i){var a=be(e,function(e,i,a,o){var s=function(e,t){"function"!=typeof e&&(e=z.extend(e));return e.options[t]}(e,t);if(s)return Array.isArray(s)?s.map(function(e){return n(e,i,a,o)}):n(s,i,a,o)});return we(i?a.reverse():a)}function De(e,t){if(t)return function(){return e.apply(t,arguments)}}Se.prototype.listen=function(e){this.cb=e},Se.prototype.onReady=function(e,t){this.ready?e():(this.readyCbs.push(e),t&&this.readyErrorCbs.push(t))},Se.prototype.onError=function(e){this.errorCbs.push(e)},Se.prototype.transitionTo=function(e,t,n){var i=this,a=this.router.match(e,this.current);this.confirmTransition(a,function(){i.updateRoute(a),t&&t(a),i.ensureURL(),i.ready||(i.ready=!0,i.readyCbs.forEach(function(e){e(a)}))},function(e){n&&n(e),e&&!i.ready&&(i.ready=!0,i.readyErrorCbs.forEach(function(t){t(e)}))})},Se.prototype.confirmTransition=function(e,t,n){var o=this,s=this.current,r=function(e){!a(Ce,e)&&i(e)&&(o.errorCbs.length?o.errorCbs.forEach(function(t){t(e)}):console.error(e)),n&&n(e)};if(w(e,s)&&e.matched.length===s.matched.length)return this.ensureURL(),r(new Ce(e));var l=function(e,t){var n,i=Math.max(e.length,t.length);for(n=0;n<i&&e[n]===t[n];n++);return{updated:t.slice(0,n),activated:t.slice(n),deactivated:e.slice(n)}}(this.current.matched,e.matched),c=l.updated,u=l.deactivated,d=l.activated,h=[].concat(function(e){return xe(e,"beforeRouteLeave",De,!0)}(u),this.router.beforeHooks,function(e){return xe(e,"beforeRouteUpdate",De)}(c),d.map(function(e){return e.beforeEnter}),ye(d));this.pending=e;var f=function(t,n){if(o.pending!==e)return r();try{t(e,s,function(e){!1===e||i(e)?(o.ensureURL(!0),r(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(r(),"object"==typeof e&&e.replace?o.replace(e):o.push(e)):n(e)})}catch(e){r(e)}};ge(h,f,function(){var n=[];ge(function(e,t,n){return xe(e,"beforeRouteEnter",function(e,i,a,o){return function(e,t,n,i,a){return function(o,s,r){return e(o,s,function(e){"function"==typeof e&&i.push(function(){!function e(t,n,i,a){n[i]&&!n[i]._isBeingDestroyed?t(n[i]):a()&&setTimeout(function(){e(t,n,i,a)},16)}(e,t.instances,n,a)}),r(e)})}}(e,a,o,t,n)})}(d,n,function(){return o.current===e}).concat(o.router.resolveHooks),f,function(){if(o.pending!==e)return r();o.pending=null,t(e),o.router.app&&o.router.app.$nextTick(function(){n.forEach(function(e){e()})})})})},Se.prototype.updateRoute=function(e){var t=this.current;this.current=e,this.cb&&this.cb(e),this.router.afterHooks.forEach(function(n){n&&n(e,t)})};var $e=function(e){function t(t,n){var i=this;e.call(this,t,n);var a=t.options.scrollBehavior,o=ue&&a;o&&te();var s=Ae(this.base);window.addEventListener("popstate",function(e){var n=i.current,a=Ae(i.base);i.current===g&&a===s||i.transitionTo(a,function(e){o&&ne(t,e,n,!0)})})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.go=function(e){window.history.go(e)},t.prototype.push=function(e,t,n){var i=this,a=this.current;this.transitionTo(e,function(e){ve(C(i.base+e.fullPath)),ne(i.router,e,a,!1),t&&t(e)},n)},t.prototype.replace=function(e,t,n){var i=this,a=this.current;this.transitionTo(e,function(e){me(C(i.base+e.fullPath)),ne(i.router,e,a,!1),t&&t(e)},n)},t.prototype.ensureURL=function(e){if(Ae(this.base)!==this.current.fullPath){var t=C(this.base+this.current.fullPath);e?ve(t):me(t)}},t.prototype.getCurrentLocation=function(){return Ae(this.base)},t}(Se);function Ae(e){var t=decodeURI(window.location.pathname);return e&&0===t.indexOf(e)&&(t=t.slice(e.length)),(t||"/")+window.location.search+window.location.hash}var Te=function(e){function t(t,n,i){e.call(this,t,n),i&&function(e){var t=Ae(e);if(!/^\/#/.test(t))return window.location.replace(C(e+"/#"+t)),!0}(this.base)||Oe()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this,t=this.router.options.scrollBehavior,n=ue&&t;n&&te(),window.addEventListener(ue?"popstate":"hashchange",function(){var t=e.current;Oe()&&e.transitionTo(Pe(),function(i){n&&ne(e.router,i,t,!0),ue||Be(i.fullPath)})})},t.prototype.push=function(e,t,n){var i=this,a=this.current;this.transitionTo(e,function(e){Ve(e.fullPath),ne(i.router,e,a,!1),t&&t(e)},n)},t.prototype.replace=function(e,t,n){var i=this,a=this.current;this.transitionTo(e,function(e){Be(e.fullPath),ne(i.router,e,a,!1),t&&t(e)},n)},t.prototype.go=function(e){window.history.go(e)},t.prototype.ensureURL=function(e){var t=this.current.fullPath;Pe()!==t&&(e?Ve(t):Be(t))},t.prototype.getCurrentLocation=function(){return Pe()},t}(Se);function Oe(){var e=Pe();return"/"===e.charAt(0)||(Be("/"+e),!1)}function Pe(){var e=window.location.href,t=e.indexOf("#");if(t<0)return"";var n=(e=e.slice(t+1)).indexOf("?");if(n<0){var i=e.indexOf("#");e=i>-1?decodeURI(e.slice(0,i))+e.slice(i):decodeURI(e)}else n>-1&&(e=decodeURI(e.slice(0,n))+e.slice(n));return e}function Me(e){var t=window.location.href,n=t.indexOf("#");return(n>=0?t.slice(0,n):t)+"#"+e}function Ve(e){ue?ve(Me(e)):window.location.hash=e}function Be(e){ue?me(Me(e)):window.location.replace(Me(e))}var Ie=function(e){function t(t,n){e.call(this,t,n),this.stack=[],this.index=-1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.push=function(e,t,n){var i=this;this.transitionTo(e,function(e){i.stack=i.stack.slice(0,i.index+1).concat(e),i.index++,t&&t(e)},n)},t.prototype.replace=function(e,t,n){var i=this;this.transitionTo(e,function(e){i.stack=i.stack.slice(0,i.index).concat(e),t&&t(e)},n)},t.prototype.go=function(e){var t=this,n=this.index+e;if(!(n<0||n>=this.stack.length)){var i=this.stack[n];this.confirmTransition(i,function(){t.index=n,t.updateRoute(i)},function(e){a(Ce,e)&&(t.index=n)})}},t.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},t.prototype.ensureURL=function(){},t}(Se),Fe=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Q(e.routes||[],this);var t=e.mode||"hash";switch(this.fallback="history"===t&&!ue&&!1!==e.fallback,this.fallback&&(t="hash"),X||(t="abstract"),this.mode=t,t){case"history":this.history=new $e(this,e.base);break;case"hash":this.history=new Te(this,e.base,this.fallback);break;case"abstract":this.history=new Ie(this,e.base);break;default:0}},Ne={currentRoute:{configurable:!0}};function Ee(e,t){return e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}Fe.prototype.match=function(e,t,n){return this.matcher.match(e,t,n)},Ne.currentRoute.get=function(){return this.history&&this.history.current},Fe.prototype.init=function(e){var t=this;if(this.apps.push(e),e.$once("hook:destroyed",function(){var n=t.apps.indexOf(e);n>-1&&t.apps.splice(n,1),t.app===e&&(t.app=t.apps[0]||null)}),!this.app){this.app=e;var n=this.history;if(n instanceof $e)n.transitionTo(n.getCurrentLocation());else if(n instanceof Te){var i=function(){n.setupListeners()};n.transitionTo(n.getCurrentLocation(),i,i)}n.listen(function(e){t.apps.forEach(function(t){t._route=e})})}},Fe.prototype.beforeEach=function(e){return Ee(this.beforeHooks,e)},Fe.prototype.beforeResolve=function(e){return Ee(this.resolveHooks,e)},Fe.prototype.afterEach=function(e){return Ee(this.afterHooks,e)},Fe.prototype.onReady=function(e,t){this.history.onReady(e,t)},Fe.prototype.onError=function(e){this.history.onError(e)},Fe.prototype.push=function(e,t,n){var i=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise(function(t,n){i.history.push(e,t,n)});this.history.push(e,t,n)},Fe.prototype.replace=function(e,t,n){var i=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise(function(t,n){i.history.replace(e,t,n)});this.history.replace(e,t,n)},Fe.prototype.go=function(e){this.history.go(e)},Fe.prototype.back=function(){this.go(-1)},Fe.prototype.forward=function(){this.go(1)},Fe.prototype.getMatchedComponents=function(e){var t=e?e.matched?e:this.resolve(e).route:this.currentRoute;return t?[].concat.apply([],t.matched.map(function(e){return Object.keys(e.components).map(function(t){return e.components[t]})})):[]},Fe.prototype.resolve=function(e,t,n){var i=H(e,t=t||this.history.current,n,this),a=this.match(i,t),o=a.redirectedFrom||a.fullPath;return{location:i,route:a,href:function(e,t,n){var i="hash"===n?"#"+t:t;return e?C(e+"/"+i):i}(this.history.base,o,this.mode),normalizedTo:i,resolved:a}},Fe.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==g&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Fe.prototype,Ne),Fe.install=function e(t){if(!e.installed||z!==t){e.installed=!0,z=t;var n=function(e){return void 0!==e},i=function(e,t){var i=e.$options._parentVnode;n(i)&&n(i=i.data)&&n(i=i.registerRouteInstance)&&i(e,t)};t.mixin({beforeCreate:function(){n(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,i(this,this)},destroyed:function(){i(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",s),t.component("RouterLink",U);var a=t.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},Fe.version="3.1.2",X&&window.Vue&&window.Vue.use(Fe),t.a=Fe},function(e,t,n){"use strict";function i(e,t,n,i,a,o,s,r){var l,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=n,c._compiled=!0),i&&(c.functional=!0),o&&(c._scopeId="data-v-"+o),s?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),a&&a.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(s)},c._ssrRegister=l):a&&(l=r?function(){a.call(this,this.$root.$options.shadowRoot)}:a),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(e,t){return l.call(t),u(e,t)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:e,options:c}}n.d(t,"a",function(){return i})},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},,,function(e,t,n){"use strict";(function(e){var n=("undefined"!=typeof window?window:void 0!==e?e:{}).__VUE_DEVTOOLS_GLOBAL_HOOK__;function i(e,t){Object.keys(e).forEach(function(n){return t(e[n],n)})}var a=function(e,t){this.runtime=t,this._children=Object.create(null),this._rawModule=e;var n=e.state;this.state=("function"==typeof n?n():n)||{}},o={namespaced:{configurable:!0}};o.namespaced.get=function(){return!!this._rawModule.namespaced},a.prototype.addChild=function(e,t){this._children[e]=t},a.prototype.removeChild=function(e){delete this._children[e]},a.prototype.getChild=function(e){return this._children[e]},a.prototype.update=function(e){this._rawModule.namespaced=e.namespaced,e.actions&&(this._rawModule.actions=e.actions),e.mutations&&(this._rawModule.mutations=e.mutations),e.getters&&(this._rawModule.getters=e.getters)},a.prototype.forEachChild=function(e){i(this._children,e)},a.prototype.forEachGetter=function(e){this._rawModule.getters&&i(this._rawModule.getters,e)},a.prototype.forEachAction=function(e){this._rawModule.actions&&i(this._rawModule.actions,e)},a.prototype.forEachMutation=function(e){this._rawModule.mutations&&i(this._rawModule.mutations,e)},Object.defineProperties(a.prototype,o);var s=function(e){this.register([],e,!1)};s.prototype.get=function(e){return e.reduce(function(e,t){return e.getChild(t)},this.root)},s.prototype.getNamespace=function(e){var t=this.root;return e.reduce(function(e,n){return e+((t=t.getChild(n)).namespaced?n+"/":"")},"")},s.prototype.update=function(e){!function e(t,n,i){0;n.update(i);if(i.modules)for(var a in i.modules){if(!n.getChild(a))return void 0;e(t.concat(a),n.getChild(a),i.modules[a])}}([],this.root,e)},s.prototype.register=function(e,t,n){var o=this;void 0===n&&(n=!0);var s=new a(t,n);0===e.length?this.root=s:this.get(e.slice(0,-1)).addChild(e[e.length-1],s);t.modules&&i(t.modules,function(t,i){o.register(e.concat(i),t,n)})},s.prototype.unregister=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1];t.getChild(n).runtime&&t.removeChild(n)};var r;var l=function(e){var t=this;void 0===e&&(e={}),!r&&"undefined"!=typeof window&&window.Vue&&m(window.Vue);var i=e.plugins;void 0===i&&(i=[]);var a=e.strict;void 0===a&&(a=!1),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new s(e),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new r;var o=this,l=this.dispatch,c=this.commit;this.dispatch=function(e,t){return l.call(o,e,t)},this.commit=function(e,t,n){return c.call(o,e,t,n)},this.strict=a;var u=this._modules.root.state;f(this,u,[],this._modules.root),h(this,u),i.forEach(function(e){return e(t)}),(void 0!==e.devtools?e.devtools:r.config.devtools)&&function(e){n&&(e._devtoolHook=n,n.emit("vuex:init",e),n.on("vuex:travel-to-state",function(t){e.replaceState(t)}),e.subscribe(function(e,t){n.emit("vuex:mutation",e,t)}))}(this)},c={state:{configurable:!0}};function u(e,t){return t.indexOf(e)<0&&t.push(e),function(){var n=t.indexOf(e);n>-1&&t.splice(n,1)}}function d(e,t){e._actions=Object.create(null),e._mutations=Object.create(null),e._wrappedGetters=Object.create(null),e._modulesNamespaceMap=Object.create(null);var n=e.state;f(e,n,[],e._modules.root,!0),h(e,n,t)}function h(e,t,n){var a=e._vm;e.getters={};var o=e._wrappedGetters,s={};i(o,function(t,n){s[n]=function(e,t){return function(){return e(t)}}(t,e),Object.defineProperty(e.getters,n,{get:function(){return e._vm[n]},enumerable:!0})});var l=r.config.silent;r.config.silent=!0,e._vm=new r({data:{$$state:t},computed:s}),r.config.silent=l,e.strict&&function(e){e._vm.$watch(function(){return this._data.$$state},function(){0},{deep:!0,sync:!0})}(e),a&&(n&&e._withCommit(function(){a._data.$$state=null}),r.nextTick(function(){return a.$destroy()}))}function f(e,t,n,i,a){var o=!n.length,s=e._modules.getNamespace(n);if(i.namespaced&&(e._modulesNamespaceMap[s]=i),!o&&!a){var l=p(t,n.slice(0,-1)),c=n[n.length-1];e._withCommit(function(){r.set(l,c,i.state)})}var u=i.context=function(e,t,n){var i=""===t,a={dispatch:i?e.dispatch:function(n,i,a){var o=v(n,i,a),s=o.payload,r=o.options,l=o.type;return r&&r.root||(l=t+l),e.dispatch(l,s)},commit:i?e.commit:function(n,i,a){var o=v(n,i,a),s=o.payload,r=o.options,l=o.type;r&&r.root||(l=t+l),e.commit(l,s,r)}};return Object.defineProperties(a,{getters:{get:i?function(){return e.getters}:function(){return function(e,t){var n={},i=t.length;return Object.keys(e.getters).forEach(function(a){if(a.slice(0,i)===t){var o=a.slice(i);Object.defineProperty(n,o,{get:function(){return e.getters[a]},enumerable:!0})}}),n}(e,t)}},state:{get:function(){return p(e.state,n)}}}),a}(e,s,n);i.forEachMutation(function(t,n){!function(e,t,n,i){(e._mutations[t]||(e._mutations[t]=[])).push(function(t){n.call(e,i.state,t)})}(e,s+n,t,u)}),i.forEachAction(function(t,n){var i=t.root?n:s+n,a=t.handler||t;!function(e,t,n,i){(e._actions[t]||(e._actions[t]=[])).push(function(t,a){var o,s=n.call(e,{dispatch:i.dispatch,commit:i.commit,getters:i.getters,state:i.state,rootGetters:e.getters,rootState:e.state},t,a);return(o=s)&&"function"==typeof o.then||(s=Promise.resolve(s)),e._devtoolHook?s.catch(function(t){throw e._devtoolHook.emit("vuex:error",t),t}):s})}(e,i,a,u)}),i.forEachGetter(function(t,n){!function(e,t,n,i){if(e._wrappedGetters[t])return void 0;e._wrappedGetters[t]=function(e){return n(i.state,i.getters,e.state,e.getters)}}(e,s+n,t,u)}),i.forEachChild(function(i,o){f(e,t,n.concat(o),i,a)})}function p(e,t){return t.length?t.reduce(function(e,t){return e[t]},e):e}function v(e,t,n){var i;return null!==(i=e)&&"object"==typeof i&&e.type&&(n=t,t=e,e=e.type),{type:e,payload:t,options:n}}function m(e){r&&e===r||
/**
 * vuex v3.1.1
 * (c) 2019 Evan You
 * @license MIT
 */
function(e){if(Number(e.version.split(".")[0])>=2)e.mixin({beforeCreate:n});else{var t=e.prototype._init;e.prototype._init=function(e){void 0===e&&(e={}),e.init=e.init?[n].concat(e.init):n,t.call(this,e)}}function n(){var e=this.$options;e.store?this.$store="function"==typeof e.store?e.store():e.store:e.parent&&e.parent.$store&&(this.$store=e.parent.$store)}}(r=e)}c.state.get=function(){return this._vm._data.$$state},c.state.set=function(e){0},l.prototype.commit=function(e,t,n){var i=this,a=v(e,t,n),o=a.type,s=a.payload,r=(a.options,{type:o,payload:s}),l=this._mutations[o];l&&(this._withCommit(function(){l.forEach(function(e){e(s)})}),this._subscribers.forEach(function(e){return e(r,i.state)}))},l.prototype.dispatch=function(e,t){var n=this,i=v(e,t),a=i.type,o=i.payload,s={type:a,payload:o},r=this._actions[a];if(r){try{this._actionSubscribers.filter(function(e){return e.before}).forEach(function(e){return e.before(s,n.state)})}catch(e){0}return(r.length>1?Promise.all(r.map(function(e){return e(o)})):r[0](o)).then(function(e){try{n._actionSubscribers.filter(function(e){return e.after}).forEach(function(e){return e.after(s,n.state)})}catch(e){0}return e})}},l.prototype.subscribe=function(e){return u(e,this._subscribers)},l.prototype.subscribeAction=function(e){return u("function"==typeof e?{before:e}:e,this._actionSubscribers)},l.prototype.watch=function(e,t,n){var i=this;return this._watcherVM.$watch(function(){return e(i.state,i.getters)},t,n)},l.prototype.replaceState=function(e){var t=this;this._withCommit(function(){t._vm._data.$$state=e})},l.prototype.registerModule=function(e,t,n){void 0===n&&(n={}),"string"==typeof e&&(e=[e]),this._modules.register(e,t),f(this,this.state,e,this._modules.get(e),n.preserveState),h(this,this.state)},l.prototype.unregisterModule=function(e){var t=this;"string"==typeof e&&(e=[e]),this._modules.unregister(e),this._withCommit(function(){var n=p(t.state,e.slice(0,-1));r.delete(n,e[e.length-1])}),d(this)},l.prototype.hotUpdate=function(e){this._modules.update(e),d(this,!0)},l.prototype._withCommit=function(e){var t=this._committing;this._committing=!0,e(),this._committing=t},Object.defineProperties(l.prototype,c);var g=k(function(e,t){var n={};return _(t).forEach(function(t){var i=t.key,a=t.val;n[i]=function(){var t=this.$store.state,n=this.$store.getters;if(e){var i=C(this.$store,"mapState",e);if(!i)return;t=i.context.state,n=i.context.getters}return"function"==typeof a?a.call(this,t,n):t[a]},n[i].vuex=!0}),n}),y=k(function(e,t){var n={};return _(t).forEach(function(t){var i=t.key,a=t.val;n[i]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var i=this.$store.commit;if(e){var o=C(this.$store,"mapMutations",e);if(!o)return;i=o.context.commit}return"function"==typeof a?a.apply(this,[i].concat(t)):i.apply(this.$store,[a].concat(t))}}),n}),b=k(function(e,t){var n={};return _(t).forEach(function(t){var i=t.key,a=t.val;a=e+a,n[i]=function(){if(!e||C(this.$store,"mapGetters",e))return this.$store.getters[a]},n[i].vuex=!0}),n}),w=k(function(e,t){var n={};return _(t).forEach(function(t){var i=t.key,a=t.val;n[i]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var i=this.$store.dispatch;if(e){var o=C(this.$store,"mapActions",e);if(!o)return;i=o.context.dispatch}return"function"==typeof a?a.apply(this,[i].concat(t)):i.apply(this.$store,[a].concat(t))}}),n});function _(e){return Array.isArray(e)?e.map(function(e){return{key:e,val:e}}):Object.keys(e).map(function(t){return{key:t,val:e[t]}})}function k(e){return function(t,n){return"string"!=typeof t?(n=t,t=""):"/"!==t.charAt(t.length-1)&&(t+="/"),e(t,n)}}function C(e,t,n){return e._modulesNamespaceMap[n]}var S={Store:l,install:m,version:"3.1.1",mapState:g,mapMutations:y,mapGetters:b,mapActions:w,createNamespacedHelpers:function(e){return{mapState:g.bind(null,e),mapGetters:b.bind(null,e),mapMutations:y.bind(null,e),mapActions:w.bind(null,e)}}};t.a=S}).call(this,n(3))},function(e,t,n){window,e.exports=function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist/",n(n.s=6)}([function(e,t,n){"use strict";function i(e,t,n,i,a,o,s,r){var l,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=n,c._compiled=!0),i&&(c.functional=!0),o&&(c._scopeId="data-v-"+o),s?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),a&&a.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(s)},c._ssrRegister=l):a&&(l=r?function(){a.call(this,this.$root.$options.shadowRoot)}:a),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(e,t){return l.call(t),u(e,t)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:e,options:c}}n.d(t,"a",function(){return i})},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"a",function(){return a});var i={data:function(){return{active:!1,childActive:!1,itemShow:!1}},created:function(){var e=this;this.initActiveState(),this.initShowState(),this.$router||window.addEventListener("hashchange",function(){e.initActiveState()})},methods:{isLinkActive:function(e){return this.matchRoute(e.href)||this.isAliasActive(e)},isChildActive:function(e){var t=this;return e.some(function(e){return t.isLinkActive(e)||!!e.child&&t.isChildActive(e.child)})},isAliasActive:function(e){var t=this;return!!e.alias&&(Array.isArray(e.alias)?e.alias.some(function(e){return t.matchRoute(e)}):this.matchRoute(e.alias))},matchRoute:function(e){return this.$route?e===this.$route.fullPath:e===window.location.pathname+window.location.search+window.location.hash},clickEvent:function(e){if(this.emitItemClick(e,this.item),(this.item.href||this.item.child&&!this.mobileItem)&&!this.item.disabled){if(!this.mobileItem&&this.isCollapsed&&this.firstItem){var t=this.item.child;this.$parent.$emit("touchClickItem",t)}var n=this.firstItem&&this.showOneChild&&!this.showChild;!this.mobileItem&&this.item.child?(this.item.href||e.preventDefault(),n?this.activeShow===this._uid?this.setActiveShow(!1):this.setActiveShow(!0,this._uid):this.itemShow=!this.itemShow):!this.mobileItem&&n&&this.emitActiveShow(null)}else e.preventDefault()},setActiveShow:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.emitActiveShow(e?t:null),this.itemShow=e},initActiveState:function(){this.active=!(!this.item||!this.item.href)&&this.isLinkActive(this.item),this.childActive=!(!this.item||!this.item.child)&&this.isChildActive(this.item.child)},initShowState:function(){this.item&&this.item.child&&(this.itemShow=this.isLinkActive(this.item)||this.isChildActive(this.item.child),this.showOneChild&&!this.showChild&&this.firstItem&&(this.active||this.childActive)&&this.emitActiveShow(this._uid))}},computed:{isRouterLink:function(){return this.$router&&this.item&&void 0!==this.item.href},show:function(){return!(!this.item||!this.item.child)&&(this.showChild?this.showChild:this.firstItem&&this.showOneChild?this._uid===this.activeShow:!!this.mobileItem||this.itemShow)}},watch:{$route:function(){this.initActiveState()}},inject:["emitActiveShow","emitItemClick"]},a={methods:{expandEnter:function(e){e.style.height=e.scrollHeight+"px"},expandAfterEnter:function(e){e.style.height="auto"},expandBeforeLeave:function(e){this.isCollapsed?e.style.display="none":e.style.height=e.scrollHeight+"px"}}}},function(e,t,n){},function(e,t,n){"use strict";var i={props:{items:{type:Array,required:!0},showChild:{type:Boolean,default:!1},rtl:{type:Boolean,default:!1}},beforeCreate:function(){this.$options.components.Item=n(4).default}},a=n(0),o=Object(a.a)(i,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"vsm-list"},e._l(e.items,function(t,i){return n("item",{key:i,attrs:{item:t,"show-child":e.showChild,rtl:e.rtl}},[e._t("dropdown-icon",null,{slot:"dropdown-icon"})],2)}),1)},[],!1,null,null,null);o.options.__file="ListItem.vue",t.a=o.exports},function(e,t,n){"use strict";n.r(t);var i=n(3),a=n(1),o={components:{ListItem:i.a},mixins:[a.b,a.a],props:{item:{type:Object,required:!0},firstItem:{type:Boolean,default:!1},isCollapsed:{type:Boolean},mobileItem:{type:Boolean,default:!1},activeShow:{type:Number,default:null},showChild:{type:Boolean,default:!1},showOneChild:{type:Boolean,default:!1},rtl:{type:Boolean,default:!1}},methods:{mouseEnter:function(e){this.isCollapsed&&this.firstItem&&!this.mobileItem&&!this.item.disabled&&this.$parent.$emit("mouseEnterItem",{item:this.item,pos:e.currentTarget.getBoundingClientRect().top-this.$parent.$el.getBoundingClientRect().top,height:this.$el.offsetHeight})}}},s=n(0),r=Object(s.a)(o,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"vsm-item",class:[{"first-item":e.firstItem},{"mobile-item":e.mobileItem},{"open-item":e.show},{"active-item":e.active},{"parent-active-item":e.childActive}],on:{mouseenter:function(t){e.mouseEnter(t)}}},[e.isRouterLink?[n("router-link",e._b({staticClass:"vsm-link",class:e.item.class,attrs:{to:e.item.href,disabled:e.item.disabled,tabindex:e.item.disabled?-1:""},nativeOn:{click:function(t){return e.clickEvent(t)}}},"router-link",e.item.attributes,!1),[e.item.icon?["string"==typeof e.item.icon||e.item.icon instanceof String?n("i",{staticClass:"vsm-icon",class:e.item.icon}):n(e.item.icon.element?e.item.icon.element:"i",e._b({tag:"component",staticClass:"vsm-icon",class:e.item.icon.class},"component",e.item.icon.attributes,!1),[e._v("\n          "+e._s(e.item.icon.text)+"\n        ")])]:e._e(),e._v(" "),!e.isCollapsed||e.mobileItem?[e.item.badge?n(e.item.badge.element?e.item.badge.element:"span",e._b({tag:"component",staticClass:"vsm-badge",class:e.item.badge.class,style:[e.rtl?e.item.child?{"margin-left":"30px"}:"":e.item.child?{"margin-right":"30px"}:""]},"component",e.item.badge.attributes,!1),[e._v("\n          "+e._s(e.item.badge.text)+"\n        ")]):e._e(),e._v(" "),n("span",{staticClass:"vsm-title"},[e._v(e._s(e.item.title))]),e._v(" "),e.item.child?n("div",{staticClass:"vsm-arrow",class:[{"open-arrow":e.show},{"slot-icon":e.$slots["dropdown-icon"]}]},[e._t("dropdown-icon")],2):e._e()]:e._e()],2)]:[n("a",e._b({staticClass:"vsm-link",class:e.item.class,attrs:{href:e.item.href?e.item.href:"#",disabled:e.item.disabled,tabindex:e.item.disabled?-1:""},on:{click:e.clickEvent}},"a",e.item.attributes,!1),[e.item.icon?["string"==typeof e.item.icon||e.item.icon instanceof String?n("i",{staticClass:"vsm-icon",class:e.item.icon}):n(e.item.icon.element?e.item.icon.element:"i",e._b({tag:"component",staticClass:"vsm-icon",class:e.item.icon.class},"component",e.item.icon.attributes,!1),[e._v("\n          "+e._s(e.item.icon.text)+"\n        ")])]:e._e(),e._v(" "),!e.isCollapsed||e.mobileItem?[e.item.badge?n(e.item.badge.element?e.item.badge.element:"span",e._b({tag:"component",staticClass:"vsm-badge",class:e.item.badge.class,style:[e.rtl?e.item.child?{"margin-left":"30px"}:"":e.item.child?{"margin-right":"30px"}:""]},"component",e.item.badge.attributes,!1),[e._v(e._s(e.item.badge.text))]):e._e(),e._v(" "),n("span",{staticClass:"vsm-title"},[e._v(e._s(e.item.title))]),e._v(" "),e.item.child?n("div",{staticClass:"vsm-arrow",class:[{"open-arrow":e.show},{"slot-icon":e.$slots["dropdown-icon"]}]},[e._t("dropdown-icon")],2):e._e()]:e._e()],2)],e._v(" "),e.item.child?[e.isCollapsed?e._e():[n("transition",{attrs:{name:"expand"},on:{enter:e.expandEnter,afterEnter:e.expandAfterEnter,beforeLeave:e.expandBeforeLeave}},[e.show?n("div",{staticClass:"vsm-dropdown"},[n("listItem",{attrs:{items:e.item.child,"show-child":e.showChild,rtl:e.rtl}},[e._t("dropdown-icon",null,{slot:"dropdown-icon"})],2)],1):e._e()])]]:e._e()],2)},[],!1,null,null,null);r.options.__file="Item.vue",t.default=r.exports},function(e,t,n){"use strict";var i=n(2);n.n(i).a},function(e,t,n){"use strict";n.r(t);var i=n(4),a=n(3),o=n(1),s={name:"SidebarMenu",components:{Item:i.default,ListItem:a.a},mixins:[o.a],props:{menu:{type:Array,required:!0},collapsed:{type:Boolean,default:!1},width:{type:String,default:"350px"},widthCollapsed:{type:String,default:"50px"},showChild:{type:Boolean,default:!1},theme:{type:String,default:""},showOneChild:{type:Boolean,default:!1},rtl:{type:Boolean,default:!1}},data:function(){return{isCollapsed:this.collapsed,mobileItem:null,mobileItemPos:0,mobileItemHeight:0,closeTimeout:null,activeShow:null,sidebarHeight:0}},computed:{sidebarWidth:function(){return this.isCollapsed?this.widthCollapsed:this.width}},watch:{collapsed:function(e){var t=this;this.isCollapsed=e,this.$nextTick(function(){t.initSidebarHeight()})}},created:function(){var e=this;this.$on("mouseEnterItem",function(t){e.mobileItem=null,e.$nextTick(function(){e.mobileItem=t.item,e.mobileItemPos=t.pos,e.mobileItemHeight=t.height})}),this.$on("touchClickItem",function(t){t?clearTimeout(e.closeTimeout):(e.closeTimeout&&clearTimeout(e.closeTimeout),e.closeTimeout=setTimeout(function(){e.mouseLeave()},600))})},mounted:function(){this.initSidebarHeight()},methods:{mouseLeave:function(){this.mobileItem=null},toggleCollapse:function(){var e=this;this.isCollapsed=!this.isCollapsed,this.$nextTick(function(){e.initSidebarHeight()}),this.$emit("collapse",this.isCollapsed)},onActiveShow:function(e){this.activeShow=e},onItemClick:function(e,t){this.$emit("itemClick",e,t),this.$emit("item-click",e,t)},initSidebarHeight:function(){this.sidebarHeight=this.$el.offsetHeight}},provide:function(){return{emitActiveShow:this.onActiveShow,emitItemClick:this.onItemClick}}},r=(n(5),n(0)),l=Object(r.a)(s,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"v-sidebar-menu",class:[e.isCollapsed?"vsm-collapsed":"vsm-default",e.theme,e.rtl?"rtl":""],style:{width:e.sidebarWidth},on:{mouseleave:e.mouseLeave}},[e._t("header"),e._v(" "),n("div",{staticClass:"vsm-list"},[e._l(e.menu,function(t,i){return[t.header?[!t.visibleOnCollapse&&e.isCollapsed||!t.component?t.visibleOnCollapse||!e.isCollapsed?[n("div",e._b({key:i,staticClass:"vsm-header",class:t.class},"div",t.attributes,!1),[e._v("\n            "+e._s(t.title)+"\n          ")])]:e._e():[n(t.component,{key:i,tag:"component"})]]:n("item",{key:i,attrs:{item:t,"first-item":!0,"is-collapsed":e.isCollapsed,"active-show":e.activeShow,"show-one-child":e.showOneChild,"show-child":e.showChild,rtl:e.rtl}},[e._t("dropdown-icon",null,{slot:"dropdown-icon"})],2)]})],2),e._v(" "),e.isCollapsed?n("div",{style:[{position:"absolute"},{top:e.mobileItemPos+"px"},e.rtl?{right:"0px"}:{left:"0px"},{"z-index":30},{width:e.width}]},[e.mobileItem?n("item",{attrs:{item:e.mobileItem,"mobile-item":!0,"is-collapsed":e.isCollapsed,"show-child":e.showChild,rtl:e.rtl}},[e._t("dropdown-icon",null,{slot:"dropdown-icon"})],2):e._e(),e._v(" "),n("transition",{attrs:{name:"slide-animation"}},[e.mobileItem?n("div",{staticClass:"vsm-mobile-bg",style:[{position:"absolute"},{left:"0px"},{right:"0px"},{top:"0px"},{height:e.mobileItemHeight+"px"}]}):e._e()]),e._v(" "),n("div",{staticClass:"vsm-dropdown",style:[{position:"absolute"},{top:e.mobileItemHeight+"px"},{left:e.rtl?"0px":e.sidebarWidth},{right:e.rtl?e.sidebarWidth:"0px"},{"max-height":"calc("+e.sidebarHeight+"px - "+(e.mobileItemPos+e.mobileItemHeight)+"px)"},{"overflow-y":"auto"}]},[n("transition",{attrs:{name:"expand"},on:{enter:e.expandEnter,afterEnter:e.expandAfterEnter,beforeLeave:e.expandBeforeLeave}},[e.mobileItem&&e.mobileItem.child?n("listItem",{attrs:{items:e.mobileItem.child,"show-child":e.showChild,rtl:e.rtl}},[e._t("dropdown-icon",null,{slot:"dropdown-icon"})],2):e._e()],1)],1)],1):e._e(),e._v(" "),e._t("footer"),e._v(" "),n("button",{staticClass:"collapse-btn",class:{"slot-icon":e.$slots["collapse-icon"]},on:{click:e.toggleCollapse}},[e._t("collapse-icon")],2)],2)},[],!1,null,null,null);l.options.__file="SidebarMenu.vue";var c=l.exports;n.d(t,"SidebarMenu",function(){return c}),t.default={install:function(e){e.component("sidebar-menu",c)}}}])},,function(e,t,n){"use strict";var i={defaultContainerElement:null,defaultIconPack:"mdi",defaultIconComponent:null,defaultDialogConfirmText:null,defaultDialogCancelText:null,defaultSnackbarDuration:3500,defaultSnackbarPosition:null,defaultToastDuration:2e3,defaultToastPosition:null,defaultNotificationDuration:2e3,defaultNotificationPosition:null,defaultTooltipType:"is-primary",defaultTooltipAnimated:!1,defaultTooltipDelay:0,defaultInputAutocomplete:"on",defaultDateFormatter:null,defaultDateParser:null,defaultDateCreator:null,defaultDayNames:null,defaultMonthNames:null,defaultFirstDayOfWeek:null,defaultUnselectableDaysOfWeek:null,defaultTimeFormatter:null,defaultTimeParser:null,defaultModalCanCancel:["escape","x","outside","button"],defaultModalScroll:null,defaultDatepickerMobileNative:!0,defaultTimepickerMobileNative:!0,defaultNoticeQueue:!0,defaultInputHasCounter:!0,defaultTaginputHasCounter:!0,defaultUseHtml5Validation:!0,defaultDropdownMobileModal:!0,defaultFieldLabelPosition:null,defaultDatepickerYearsRange:[-100,3],defaultDatepickerNearbyMonthDays:!0,defaultDatepickerNearbySelectableMonthDays:!1,defaultDatepickerShowWeekNumber:!1},a=i,o=function(e){i=e};var s=function(e,t,n,i,a,o,s,r,l,c){"boolean"!=typeof s&&(l=r,r=s,s=!1);var u,d="function"==typeof n?n.options:n;if(e&&e.render&&(d.render=e.render,d.staticRenderFns=e.staticRenderFns,d._compiled=!0,a&&(d.functional=!0)),i&&(d._scopeId=i),o?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),t&&t.call(this,l(e)),e&&e._registeredComponents&&e._registeredComponents.add(o)},d._ssrRegister=u):t&&(u=s?function(){t.call(this,c(this.$root.$options.shadowRoot))}:function(e){t.call(this,r(e))}),u)if(d.functional){var h=d.render;d.render=function(e,t){return u.call(t),h(e,t)}}else{var f=d.beforeCreate;d.beforeCreate=f?[].concat(f,u):[u]}return n},r=function(e){"undefined"!=typeof window&&window.Vue&&window.Vue.use(e)},l=function(e,t){e.component(t.name,t)},c=function(e,t,n){e.prototype.$buefy||(e.prototype.$buefy={}),e.prototype.$buefy[t]=n};function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function f(e,t){return t.split(".").reduce(function(e,t){return e[t]},e)}function p(e,t,n){if(!e)return-1;if(!n||"function"!=typeof n)return e.indexOf(t);for(var i=0;i<e.length;i++)if(n(e[i],t))return i;return-1}var v={Android:function(){return"undefined"!=typeof window&&window.navigator.userAgent.match(/Android/i)},BlackBerry:function(){return"undefined"!=typeof window&&window.navigator.userAgent.match(/BlackBerry/i)},iOS:function(){return"undefined"!=typeof window&&window.navigator.userAgent.match(/iPhone|iPad|iPod/i)},Opera:function(){return"undefined"!=typeof window&&window.navigator.userAgent.match(/Opera Mini/i)},Windows:function(){return"undefined"!=typeof window&&window.navigator.userAgent.match(/IEMobile/i)},any:function(){return v.Android()||v.BlackBerry()||v.iOS()||v.Opera()||v.Windows()}};function m(e){void 0!==e.remove?e.remove():void 0!==e.parentNode&&e.parentNode.removeChild(e)}var g={props:{size:String,expanded:Boolean,loading:Boolean,rounded:Boolean,icon:String,iconPack:String,autocomplete:String,maxlength:[Number,String],useHtml5Validation:{type:Boolean,default:function(){return a.defaultUseHtml5Validation}},validationMessage:String},data:function(){return{isValid:!0,isFocused:!1,newIconPack:this.iconPack||a.defaultIconPack}},computed:{parentField:function(){for(var e=this.$parent,t=0;t<3;t++)e&&!e.$data._isField&&(e=e.$parent);return e},statusType:function(){if(this.parentField&&this.parentField.newType){if("string"==typeof this.parentField.newType)return this.parentField.newType;for(var e in this.parentField.newType)if(this.parentField.newType[e])return e}},statusMessage:function(){if(this.parentField)return this.parentField.newMessage},iconSize:function(){switch(this.size){case"is-small":return this.size;case"is-medium":return;case"is-large":return"mdi"===this.newIconPack?"is-medium":""}}},methods:{focus:function(){var e=this;void 0!==this.$data._elementRef&&this.$nextTick(function(){var t=e.$el.querySelector(e.$data._elementRef);t&&t.focus()})},onBlur:function(e){this.isFocused=!1,this.$emit("blur",e),this.checkHtml5Validity()},onFocus:function(e){this.isFocused=!0,this.$emit("focus",e)},checkHtml5Validity:function(){var e=this;if(this.useHtml5Validation&&void 0!==this.$refs[this.$data._elementRef]){var t=this.$el.querySelector(this.$data._elementRef),n=null,i=null,a=!0;return t.checkValidity()||(n="is-danger",i=this.validationMessage||t.validationMessage,a=!1),this.isValid=a,this.$nextTick(function(){e.parentField&&(e.parentField.type||(e.parentField.newType=n),e.parentField.message||(e.parentField.newMessage=i))}),this.isValid}}}};var y=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("span",{staticClass:"icon",class:[e.newType,e.size]},[e.useIconComponent?n(e.useIconComponent,{tag:"component",class:[e.customClass],attrs:{icon:[e.newPack,e.newIcon],size:e.newCustomSize}}):n("i",{class:[e.newPack,e.newIcon,e.newCustomSize,e.customClass]})],1)},staticRenderFns:[]},void 0,{name:"BIcon",props:{type:[String,Object],pack:String,icon:String,size:String,customSize:String,customClass:String,both:Boolean},computed:{newIcon:function(){return"mdi"===this.newPack?"".concat(this.newPack,"-").concat(this.icon):this.addFAPrefix(this.getEquivalentIconOf(this.icon))},newPack:function(){return this.pack||a.defaultIconPack},newType:function(){if(this.type){var e=[];if("string"==typeof this.type)e=this.type.split("-");else for(var t in this.type)if(this.type[t]){e=t.split("-");break}if(!(e.length<=1))return"has-text-".concat(e[1])}},newCustomSize:function(){return this.customSize||this.customSizeByPack},customSizeByPack:function(){var e="mdi"===this.newPack?"mdi-24px":this.addFAPrefix("lg"),t="mdi"===this.newPack?"mdi-36px":this.addFAPrefix("2x"),n="mdi"===this.newPack?"mdi-48px":this.addFAPrefix("3x");switch(this.size){case"is-small":return;case"is-medium":return t;case"is-large":return n;default:return e}},useIconComponent:function(){return a.defaultIconComponent}},methods:{addFAPrefix:function(e){return this.useIconComponent?e:"fa-".concat(e)},getEquivalentIconOf:function(e){if(!this.both)return e;switch(e){case"check":return"check";case"information":return"info-circle";case"check-circle":return"check-circle";case"alert":return"exclamation-triangle";case"alert-circle":return"exclamation-circle";case"arrow-up":return"arrow-up";case"chevron-right":return"angle-right";case"chevron-left":return"angle-left";case"chevron-down":return"angle-down";case"eye":return"eye";case"eye-off":return"eye-slash";case"menu-down":return"caret-down";case"menu-up":return"caret-up";default:return e}}}},void 0,!1,void 0,void 0,void 0);var b=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"control",class:e.rootClasses},["textarea"!==e.type?n("input",e._b({ref:"input",staticClass:"input",class:[e.inputClasses,e.customClass],attrs:{type:e.newType,autocomplete:e.newAutocomplete,maxlength:e.maxlength},domProps:{value:e.computedValue},on:{input:e.onInput,blur:e.onBlur,focus:e.onFocus}},"input",e.$attrs,!1)):n("textarea",e._b({ref:"textarea",staticClass:"textarea",class:[e.inputClasses,e.customClass],attrs:{maxlength:e.maxlength},domProps:{value:e.computedValue},on:{input:e.onInput,blur:e.onBlur,focus:e.onFocus}},"textarea",e.$attrs,!1)),e._v(" "),e.icon?n("b-icon",{staticClass:"is-left",attrs:{icon:e.icon,pack:e.iconPack,size:e.iconSize}}):e._e(),e._v(" "),e.loading||!e.passwordReveal&&!e.statusTypeIcon?e._e():n("b-icon",{staticClass:"is-right",class:{"is-clickable":e.passwordReveal},attrs:{icon:e.passwordReveal?e.passwordVisibleIcon:e.statusTypeIcon,pack:e.iconPack,size:e.iconSize,type:e.passwordReveal?"is-primary":e.statusType,both:""},nativeOn:{click:function(t){e.togglePasswordVisibility(t)}}}),e._v(" "),e.maxlength&&e.hasCounter&&"number"!==e.type?n("small",{staticClass:"help counter",class:{"is-invisible":!e.isFocused}},[e._v("\n        "+e._s(e.valueLength)+" / "+e._s(e.maxlength)+"\n    ")]):e._e()],1)},staticRenderFns:[]},void 0,{name:"BInput",components:d({},y.name,y),mixins:[g],inheritAttrs:!1,props:{value:[Number,String],type:{type:String,default:"text"},passwordReveal:Boolean,hasCounter:{type:Boolean,default:function(){return a.defaultInputHasCounter}},customClass:{type:String,default:""}},data:function(){return{newValue:this.value,newType:this.type,newAutocomplete:this.autocomplete||a.defaultInputAutocomplete,isPasswordVisible:!1,_elementRef:"textarea"===this.type?"textarea":"input"}},computed:{computedValue:{get:function(){return this.newValue},set:function(e){this.newValue=e,this.$emit("input",e),!this.isValid&&this.checkHtml5Validity()}},rootClasses:function(){return[this.iconPosition,this.size,{"is-expanded":this.expanded,"is-loading":this.loading,"is-clearfix":!this.hasMessage}]},inputClasses:function(){return[this.statusType,this.size,{"is-rounded":this.rounded}]},hasIconRight:function(){return this.passwordReveal||this.loading||this.statusTypeIcon},iconPosition:function(){return this.icon&&this.hasIconRight?"has-icons-left has-icons-right":!this.icon&&this.hasIconRight?"has-icons-right":this.icon?"has-icons-left":void 0},statusTypeIcon:function(){switch(this.statusType){case"is-success":return"check";case"is-danger":return"alert-circle";case"is-info":return"information";case"is-warning":return"alert"}},hasMessage:function(){return!!this.statusMessage},passwordVisibleIcon:function(){return this.isPasswordVisible?"eye-off":"eye"},valueLength:function(){return"string"==typeof this.computedValue?this.computedValue.length:"number"==typeof this.computedValue?this.computedValue.toString().length:0}},watch:{value:function(e){this.newValue=e}},methods:{togglePasswordVisibility:function(){var e=this;this.isPasswordVisible=!this.isPasswordVisible,this.newType=this.isPasswordVisible?"text":"password",this.$nextTick(function(){e.$refs.input.focus()})},onInput:function(e){var t=this;this.$nextTick(function(){e.target&&(t.computedValue=e.target.value)})}}},void 0,!1,void 0,void 0,void 0);var w=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"autocomplete control",class:{"is-expanded":e.expanded}},[n("b-input",e._b({ref:"input",attrs:{type:"text",size:e.size,loading:e.loading,rounded:e.rounded,icon:e.icon,"icon-pack":e.iconPack,maxlength:e.maxlength,autocomplete:e.newAutocomplete,"use-html5-validation":e.useHtml5Validation},on:{input:e.onInput,focus:e.focused,blur:e.onBlur},nativeOn:{keyup:function(t){if(!("button"in t)&&e._k(t.keyCode,"esc",27,t.key))return null;t.preventDefault(),e.isActive=!1},keydown:[function(t){if(!("button"in t)&&e._k(t.keyCode,"tab",9,t.key))return null;e.tabPressed(t)},function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;t.preventDefault(),e.enterPressed(t)},function(t){if(!("button"in t)&&e._k(t.keyCode,"up",38,t.key))return null;t.preventDefault(),e.keyArrows("up")},function(t){if(!("button"in t)&&e._k(t.keyCode,"down",40,t.key))return null;t.preventDefault(),e.keyArrows("down")}]},model:{value:e.newValue,callback:function(t){e.newValue=t},expression:"newValue"}},"b-input",e.$attrs,!1)),e._v(" "),n("transition",{attrs:{name:"fade"}},[n("div",{directives:[{name:"show",rawName:"v-show",value:e.isActive&&(e.data.length>0||e.hasEmptySlot||e.hasHeaderSlot),expression:"isActive && (data.length > 0 || hasEmptySlot || hasHeaderSlot)"}],ref:"dropdown",staticClass:"dropdown-menu",class:{"is-opened-top":!e.isListInViewportVertically}},[n("div",{directives:[{name:"show",rawName:"v-show",value:e.isActive,expression:"isActive"}],staticClass:"dropdown-content"},[e.hasHeaderSlot?n("div",{staticClass:"dropdown-item"},[e._t("header")],2):e._e(),e._v(" "),e._l(e.data,function(t,i){return n("a",{key:i,staticClass:"dropdown-item",class:{"is-hovered":t===e.hovered},on:{click:function(n){e.setSelected(t)}}},[e.hasDefaultSlot?e._t("default",null,{option:t,index:i}):n("span",[e._v("\n                        "+e._s(e.getValue(t,!0))+"\n                    ")])],2)}),e._v(" "),0===e.data.length&&e.hasEmptySlot?n("div",{staticClass:"dropdown-item is-disabled"},[e._t("empty")],2):e._e(),e._v(" "),e.hasFooterSlot?n("div",{staticClass:"dropdown-item"},[e._t("footer")],2):e._e()],2)])])],1)},staticRenderFns:[]},void 0,{name:"BAutocomplete",components:d({},b.name,b),mixins:[g],inheritAttrs:!1,props:{value:[Number,String],data:{type:Array,default:function(){return[]}},field:{type:String,default:"value"},keepFirst:Boolean,clearOnSelect:Boolean,openOnFocus:Boolean,customFormatter:Function},data:function(){return{selected:null,hovered:null,isActive:!1,newValue:this.value,newAutocomplete:this.autocomplete||"off",isListInViewportVertically:!0,hasFocus:!1,_isAutocomplete:!0,_elementRef:"input"}},computed:{whiteList:function(){var e=[];if(e.push(this.$refs.input.$el.querySelector("input")),e.push(this.$refs.dropdown),void 0!==this.$refs.dropdown){var t=this.$refs.dropdown.querySelectorAll("*"),n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done);n=!0){var r=o.value;e.push(r)}}catch(e){i=!0,a=e}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}}return e},hasDefaultSlot:function(){return!!this.$scopedSlots.default},hasEmptySlot:function(){return!!this.$slots.empty},hasHeaderSlot:function(){return!!this.$slots.header},hasFooterSlot:function(){return!!this.$slots.footer}},watch:{isActive:function(e){var t=this;e?this.calcDropdownInViewportVertical():(this.$nextTick(function(){return t.setHovered(null)}),setTimeout(function(){t.calcDropdownInViewportVertical()},100))},newValue:function(e){this.$emit("input",e);var t=this.getValue(this.selected);t&&t!==e&&this.setSelected(null,!1),!this.hasFocus||this.openOnFocus&&!e||(this.isActive=!!e)},value:function(e){this.newValue=e,!this.isValid&&this.$refs.input.checkHtml5Validity()},data:function(e){this.keepFirst&&this.selectFirstOption(e)}},methods:{setHovered:function(e){void 0!==e&&(this.hovered=e)},setSelected:function(e){var t=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];void 0!==e&&(this.selected=e,this.$emit("select",this.selected),null!==this.selected&&(this.newValue=this.clearOnSelect?"":this.getValue(this.selected)),n&&this.$nextTick(function(){t.isActive=!1}))},selectFirstOption:function(e){var t=this;this.$nextTick(function(){e.length?(t.openOnFocus||""!==t.newValue&&t.hovered!==e[0])&&t.setHovered(e[0]):t.setHovered(null)})},enterPressed:function(){null!==this.hovered&&this.setSelected(this.hovered)},tabPressed:function(){null!==this.hovered?this.setSelected(this.hovered):this.isActive=!1},clickedOutside:function(e){this.whiteList.indexOf(e.target)<0&&(this.isActive=!1)},getValue:function(e){if(e)return void 0!==this.customFormatter?this.customFormatter(e):"object"===u(e)?f(e,this.field):e},calcDropdownInViewportVertical:function(){var e=this;this.$nextTick(function(){if(void 0!==e.$refs.dropdown){var t=e.$refs.dropdown.getBoundingClientRect();e.isListInViewportVertically=t.top>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)}})},keyArrows:function(e){var t="down"===e?1:-1;if(this.isActive){var n=this.data.indexOf(this.hovered)+t;n=(n=n>this.data.length-1?this.data.length:n)<0?0:n,this.setHovered(this.data[n]);var i=this.$refs.dropdown.querySelector(".dropdown-content"),a=i.querySelectorAll("a.dropdown-item:not(.is-disabled)")[n];if(!a)return;var o=i.scrollTop,s=i.scrollTop+i.clientHeight-a.clientHeight;a.offsetTop<o?i.scrollTop=a.offsetTop:a.offsetTop>=s&&(i.scrollTop=a.offsetTop-i.clientHeight+a.clientHeight)}else this.isActive=!0},focused:function(e){this.getValue(this.selected)===this.newValue&&this.$el.querySelector("input").select(),this.openOnFocus&&(this.isActive=!0,this.keepFirst&&this.selectFirstOption(this.data)),this.hasFocus=!0,this.$emit("focus",e)},onBlur:function(e){this.hasFocus=!1,this.$emit("blur",e)},onInput:function(e){var t=this.getValue(this.selected);t&&t===this.newValue||this.$emit("typing",this.newValue)}},created:function(){"undefined"!=typeof window&&(document.addEventListener("click",this.clickedOutside),window.addEventListener("resize",this.calcDropdownInViewportVertical))},beforeDestroy:function(){"undefined"!=typeof window&&(document.removeEventListener("click",this.clickedOutside),window.removeEventListener("resize",this.calcDropdownInViewportVertical))}},void 0,!1,void 0,void 0,void 0),_={install:function(e){l(e,w)}};r(_);var k=_;var C=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(e.tag,e._b({tag:"component",staticClass:"button",class:[e.size,e.type,{"is-rounded":e.rounded,"is-loading":e.loading,"is-outlined":e.outlined,"is-inverted":e.inverted,"is-focused":e.focused,"is-active":e.active,"is-hovered":e.hovered,"is-selected":e.selected}],attrs:{type:e.nativeType},on:{click:function(t){e.$emit("click",t)}}},"component",e.$attrs,!1),[e.iconLeft?n("b-icon",{attrs:{pack:e.iconPack,icon:e.iconLeft,size:e.iconSize}}):e._e(),e._v(" "),e.label?n("span",[e._v(e._s(e.label))]):e.$slots.default?n("span",[e._t("default")],2):e._e(),e._v(" "),e.iconRight?n("b-icon",{attrs:{pack:e.iconPack,icon:e.iconRight,size:e.iconSize}}):e._e()],1)},staticRenderFns:[]},void 0,{name:"BButton",components:d({},y.name,y),inheritAttrs:!1,props:{type:[String,Object],size:String,label:String,iconPack:String,iconLeft:String,iconRight:String,rounded:Boolean,loading:Boolean,outlined:Boolean,inverted:Boolean,focused:Boolean,active:Boolean,hovered:Boolean,selected:Boolean,nativeType:{type:String,default:"button",validator:function(e){return["button","submit","reset"].indexOf(e)>=0}},tag:{type:String,default:"button",validator:function(e){return["button","a","input","router-link","nuxt-link","n-link","NuxtLink","NLink"].indexOf(e)>=0}}},computed:{iconSize:function(){return this.size&&"is-medium"!==this.size?"is-large"===this.size?"is-medium":this.size:"is-small"}}},void 0,!1,void 0,void 0,void 0),S={install:function(e){l(e,C)}};r(S);var x=S;var D=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("label",{ref:"label",staticClass:"b-checkbox checkbox",class:[e.size,{"is-disabled":e.disabled}],attrs:{disabled:e.disabled},on:{click:e.focus,keydown:function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;t.preventDefault(),e.$refs.label.click()}}},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.computedValue,expression:"computedValue"}],ref:"input",attrs:{type:"checkbox",disabled:e.disabled,required:e.required,name:e.name,"true-value":e.trueValue,"false-value":e.falseValue},domProps:{indeterminate:e.indeterminate,value:e.nativeValue,checked:Array.isArray(e.computedValue)?e._i(e.computedValue,e.nativeValue)>-1:e._q(e.computedValue,e.trueValue)},on:{click:function(e){e.stopPropagation()},change:function(t){var n=e.computedValue,i=t.target,a=i.checked?e.trueValue:e.falseValue;if(Array.isArray(n)){var o=e.nativeValue,s=e._i(n,o);i.checked?s<0&&(e.computedValue=n.concat([o])):s>-1&&(e.computedValue=n.slice(0,s).concat(n.slice(s+1)))}else e.computedValue=a}}}),e._v(" "),n("span",{staticClass:"check",class:e.type}),e._v(" "),n("span",{staticClass:"control-label"},[e._t("default")],2)])},staticRenderFns:[]},void 0,{name:"BCheckbox",props:{value:[String,Number,Boolean,Function,Object,Array],nativeValue:[String,Number,Boolean,Function,Object,Array],indeterminate:Boolean,type:String,disabled:Boolean,required:Boolean,name:String,size:String,trueValue:{type:[String,Number,Boolean,Function,Object,Array],default:!0},falseValue:{type:[String,Number,Boolean,Function,Object,Array],default:!1}},data:function(){return{newValue:this.value}},computed:{computedValue:{get:function(){return this.newValue},set:function(e){this.newValue=e,this.$emit("input",e)}}},watch:{value:function(e){this.newValue=e}},methods:{focus:function(){this.$refs.input.focus()}}},void 0,!1,void 0,void 0,void 0);var $=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"control"},[n("label",{ref:"label",staticClass:"b-checkbox checkbox button",class:[e.checked?e.type:null,e.size,{"is-disabled":e.disabled,"is-focused":e.isFocused}],attrs:{disabled:e.disabled},on:{click:e.focus,keydown:function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;t.preventDefault(),e.$refs.label.click()}}},[e._t("default"),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.computedValue,expression:"computedValue"}],ref:"input",attrs:{type:"checkbox",disabled:e.disabled,required:e.required,name:e.name},domProps:{value:e.nativeValue,checked:Array.isArray(e.computedValue)?e._i(e.computedValue,e.nativeValue)>-1:e.computedValue},on:{click:function(e){e.stopPropagation()},focus:function(t){e.isFocused=!0},blur:function(t){e.isFocused=!1},change:function(t){var n=e.computedValue,i=t.target,a=!!i.checked;if(Array.isArray(n)){var o=e.nativeValue,s=e._i(n,o);i.checked?s<0&&(e.computedValue=n.concat([o])):s>-1&&(e.computedValue=n.slice(0,s).concat(n.slice(s+1)))}else e.computedValue=a}}})],2)])},staticRenderFns:[]},void 0,{name:"BCheckboxButton",props:{value:[String,Number,Boolean,Function,Object,Array],nativeValue:[String,Number,Boolean,Function,Object,Array],disabled:Boolean,required:Boolean,name:String,size:String,type:{type:String,default:"is-primary"}},data:function(){return{newValue:this.value,isFocused:!1}},computed:{computedValue:{get:function(){return this.newValue},set:function(e){this.newValue=e,this.$emit("input",e)}},checked:function(){return Array.isArray(this.newValue)?this.newValue.indexOf(this.nativeValue)>=0:this.newValue===this.nativeValue}},watch:{value:function(e){this.newValue=e}},methods:{focus:function(){this.$refs.input.focus()}}},void 0,!1,void 0,void 0,void 0),A={install:function(e){l(e,D),l(e,$)}};r(A);var T=A;var O=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"collapse"},[n("div",{staticClass:"collapse-trigger",on:{click:e.toggle}},[e._t("trigger",null,{open:e.isOpen})],2),e._v(" "),n("transition",{attrs:{name:e.animation}},[n("div",{directives:[{name:"show",rawName:"v-show",value:e.isOpen,expression:"isOpen"}],staticClass:"collapse-content",attrs:{id:e.ariaId,"aria-expanded":e.isOpen}},[e._t("default")],2)])],1)},staticRenderFns:[]},void 0,{name:"BCollapse",props:{open:{type:Boolean,default:!0},animation:{type:String,default:"fade"},ariaId:{type:String,default:""}},data:function(){return{isOpen:this.open}},watch:{open:function(e){this.isOpen=e}},methods:{toggle:function(){this.isOpen=!this.isOpen,this.$emit("update:open",this.isOpen),this.$emit(this.isOpen?"open":"close")}}},void 0,!1,void 0,void 0,void 0),P={install:function(e){l(e,O)}};r(P);var M=P,V="AM",B="PM",I={mixins:[g],inheritAttrs:!1,props:{value:Date,inline:Boolean,minTime:Date,maxTime:Date,placeholder:String,editable:Boolean,disabled:Boolean,hourFormat:{type:String,default:"24",validator:function(e){return"24"===e||"12"===e}},incrementMinutes:{type:Number,default:1},incrementSeconds:{type:Number,default:1},timeFormatter:{type:Function,default:function(e,t){return"function"==typeof a.defaultTimeFormatter?a.defaultTimeFormatter(e):function(e,t){var n=e.getHours(),i=e.getMinutes(),a=e.getSeconds(),o="";return"12"===t.hourFormat&&(o=" "+(n<12?V:B),n>12?n-=12:0===n&&(n=12)),t.pad(n)+":"+t.pad(i)+(t.enableSeconds?":"+t.pad(a):"")+o}(e,t)}},timeParser:{type:Function,default:function(e,t){return"function"==typeof a.defaultTimeParser?a.defaultTimeParser(e):function(e,t){if(e){var n=!1;if("12"===t.hourFormat){var i=e.split(" ");e=i[0],n=i[1]===V}var a=e.split(":"),o=parseInt(a[0],10),s=parseInt(a[1],10),r=t.enableSeconds?parseInt(a[2],10):0;if(isNaN(o)||o<0||o>23||"12"===t.hourFormat&&(o<1||o>12)||isNaN(s)||s<0||s>59)return null;var l=null;return t.computedValue&&!isNaN(t.computedValue)?l=new Date(t.computedValue):(l=new Date).setMilliseconds(0),l.setSeconds(r),l.setMinutes(s),"12"===t.hourFormat&&(n&&12===o?o=0:n||12===o||(o+=12)),l.setHours(o),new Date(l.getTime())}return null}(e,t)}},mobileNative:{type:Boolean,default:function(){return a.defaultTimepickerMobileNative}},position:String,unselectableTimes:Array,openOnFocus:Boolean,enableSeconds:Boolean,defaultMinutes:Number,defaultSeconds:Number},data:function(){return{dateSelected:this.value,hoursSelected:null,minutesSelected:null,secondsSelected:null,meridienSelected:null,_elementRef:"input",AM:V,PM:B,HOUR_FORMAT_24:"24",HOUR_FORMAT_12:"12"}},computed:{computedValue:{get:function(){return this.dateSelected},set:function(e){this.dateSelected=e,this.$emit("input",e)}},hours:function(){for(var e=[],t=this.isHourFormat24?24:12,n=0;n<t;n++){var i=n,a=i;this.isHourFormat24||(a=i=n+1,this.meridienSelected===this.AM?12===i&&(i=0):this.meridienSelected===this.PM&&12!==i&&(i+=12)),e.push({label:this.formatNumber(a),value:i})}return e},minutes:function(){for(var e=[],t=0;t<60;t+=this.incrementMinutes)e.push({label:this.formatNumber(t,!0),value:t});return e},seconds:function(){for(var e=[],t=0;t<60;t+=this.incrementSeconds)e.push({label:this.formatNumber(t,!0),value:t});return e},meridiens:function(){return[V,B]},isMobile:function(){return this.mobileNative&&v.any()},isHourFormat24:function(){return"24"===this.hourFormat}},watch:{hourFormat:function(){null!==this.hoursSelected&&(this.meridienSelected=this.hoursSelected>=12?B:V)},value:{handler:function(e){this.updateInternalState(e),!this.isValid&&this.$refs.input.checkHtml5Validity()},immediate:!0}},methods:{onMeridienChange:function(e){null!==this.hoursSelected&&(e===B?this.hoursSelected+=12:e===V&&(this.hoursSelected-=12)),this.updateDateSelected(this.hoursSelected,this.minutesSelected,this.enableSeconds?this.secondsSelected:0,e)},onHoursChange:function(e){!this.minutesSelected&&this.defaultMinutes&&(this.minutesSelected=this.defaultMinutes),!this.secondsSelected&&this.defaultSeconds&&(this.secondsSelected=this.defaultSeconds),this.updateDateSelected(parseInt(e,10),this.minutesSelected,this.enableSeconds?this.secondsSelected:0,this.meridienSelected)},onMinutesChange:function(e){!this.secondsSelected&&this.defaultSeconds&&(this.secondsSelected=this.defaultSeconds),this.updateDateSelected(this.hoursSelected,parseInt(e,10),this.enableSeconds?this.secondsSelected:0,this.meridienSelected)},onSecondsChange:function(e){this.updateDateSelected(this.hoursSelected,this.minutesSelected,parseInt(e,10),this.meridienSelected)},updateDateSelected:function(e,t,n,i){if(null!=e&&null!=t&&(!this.isHourFormat24&&null!==i||this.isHourFormat24)){var a=null;this.computedValue&&!isNaN(this.computedValue)?a=new Date(this.computedValue):(a=new Date).setMilliseconds(0),a.setHours(e),a.setMinutes(t),a.setSeconds(n),this.computedValue=new Date(a.getTime())}},updateInternalState:function(e){e?(this.hoursSelected=e.getHours(),this.minutesSelected=e.getMinutes(),this.secondsSelected=e.getSeconds(),this.meridienSelected=e.getHours()>=12?B:V):(this.hoursSelected=null,this.minutesSelected=null,this.secondsSelected=null,this.meridienSelected=V),this.dateSelected=e},isHourDisabled:function(e){var t=this,n=!1;if(this.minTime){var i=this.minTime.getHours();n=e<i}if(this.maxTime&&!n){var a=this.maxTime.getHours();n=e>a}this.unselectableTimes&&(n||(n=this.unselectableTimes.filter(function(n){return t.enableSeconds&&null!==t.secondsSelected?n.getHours()===e&&n.getMinutes()===t.minutesSelected&&n.getSeconds()===t.secondsSelected:null!==t.minutesSelected?n.getHours()===e&&n.getMinutes()===t.minutesSelected:n.getHours()===e}).length>0));return n},isMinuteDisabled:function(e){var t=this,n=!1;if(null!==this.hoursSelected){if(this.isHourDisabled(this.hoursSelected))n=!0;else{if(this.minTime){var i=this.minTime.getHours(),a=this.minTime.getMinutes();n=this.hoursSelected===i&&e<a}if(this.maxTime&&!n){var o=this.maxTime.getHours(),s=this.maxTime.getMinutes();n=this.hoursSelected===o&&e>s}}if(this.unselectableTimes)if(!n)n=this.unselectableTimes.filter(function(n){return t.enableSeconds&&null!==t.secondsSelected?n.getHours()===t.hoursSelected&&n.getMinutes()===e&&n.getSeconds()===t.secondsSelected:n.getHours()===t.hoursSelected&&n.getMinutes()===e}).length>0}return n},isSecondDisabled:function(e){var t=this,n=!1;if(null!==this.minutesSelected){if(this.isMinuteDisabled(this.minutesSelected))n=!0;else{if(this.minTime){var i=this.minTime.getHours(),a=this.minTime.getMinutes(),o=this.minTime.getSeconds();n=this.hoursSelected===i&&this.minutesSelected===a&&e<o}if(this.maxTime&&!n){var s=this.maxTime.getHours(),r=this.maxTime.getMinutes(),l=this.maxTime.getSeconds();n=this.hoursSelected===s&&this.minutesSelected===r&&e>l}}if(this.unselectableTimes)if(!n)n=this.unselectableTimes.filter(function(n){return n.getHours()===t.hoursSelected&&n.getMinutes()===t.minutesSelected&&n.getSeconds()===e}).length>0}return n},onChange:function(e){var t=this.timeParser(e,this);this.updateInternalState(t),t&&!isNaN(t)?this.computedValue=t:(this.computedValue=null,this.$refs.input.newValue=this.computedValue)},toggle:function(e){this.$refs.dropdown&&(this.$refs.dropdown.isActive="boolean"==typeof e?e:!this.$refs.dropdown.isActive)},close:function(){this.toggle(!1)},handleOnFocus:function(){this.onFocus(),this.openOnFocus&&this.toggle(!0)},formatHHMMSS:function(e){var t=new Date(e);if(e&&!isNaN(t)){var n=t.getHours(),i=t.getMinutes(),a=t.getSeconds();return this.formatNumber(n,!0)+":"+this.formatNumber(i,!0)+":"+this.formatNumber(a,!0)}return""},onChangeNativePicker:function(e){var t=e.target.value;if(t){var n=null;this.computedValue&&!isNaN(this.computedValue)?n=new Date(this.computedValue):(n=new Date).setMilliseconds(0);var i=t.split(":");n.setHours(parseInt(i[0],10)),n.setMinutes(parseInt(i[1],10)),n.setSeconds(i[2]?parseInt(i[2],10):0),this.computedValue=new Date(n.getTime())}else this.computedValue=null},formatNumber:function(e,t){return this.isHourFormat24||t?this.pad(e):e},pad:function(e){return(e<10?"0":"")+e},formatValue:function(e){return e&&!isNaN(e)?this.timeFormatter(e,this):null},keyPress:function(e){this.$refs.dropdown&&this.$refs.dropdown.isActive&&27===e.keyCode&&this.toggle(!1)}},created:function(){"undefined"!=typeof window&&document.addEventListener("keyup",this.keyPress)},beforeDestroy:function(){"undefined"!=typeof window&&document.removeEventListener("keyup",this.keyPress)}};var F=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"dropdown",class:e.rootClasses},[e.inline?e._e():n("div",{ref:"trigger",staticClass:"dropdown-trigger",attrs:{role:"button","aria-haspopup":"true"},on:{click:e.toggle}},[e._t("trigger")],2),e._v(" "),n("transition",{attrs:{name:e.animation}},[e.isMobileModal?n("div",{directives:[{name:"show",rawName:"v-show",value:e.isActive,expression:"isActive"}],staticClass:"background",attrs:{"aria-hidden":!e.isActive}}):e._e()]),e._v(" "),n("transition",{attrs:{name:e.animation}},[n("div",{directives:[{name:"show",rawName:"v-show",value:!e.disabled&&(e.isActive||e.isHoverable)||e.inline,expression:"(!disabled && (isActive || isHoverable)) || inline"}],ref:"dropdownMenu",staticClass:"dropdown-menu",attrs:{"aria-hidden":!e.isActive}},[n("div",{staticClass:"dropdown-content",attrs:{role:e.ariaRoleMenu}},[e._t("default")],2)])])],1)},staticRenderFns:[]},void 0,{name:"BDropdown",props:{value:{type:[String,Number,Boolean,Object,Array,Function],default:null},disabled:Boolean,hoverable:Boolean,inline:Boolean,position:{type:String,validator:function(e){return["is-top-right","is-top-left","is-bottom-left"].indexOf(e)>-1}},mobileModal:{type:Boolean,default:function(){return a.defaultDropdownMobileModal}},ariaRole:{type:String,default:""},animation:{type:String,default:"fade"},multiple:Boolean,closeOnClick:{type:Boolean,default:!0}},data:function(){return{selected:this.value,isActive:!1,isHoverable:this.hoverable,_isDropdown:!0}},computed:{rootClasses:function(){return[this.position,{"is-disabled":this.disabled,"is-hoverable":this.hoverable,"is-inline":this.inline,"is-active":this.isActive||this.inline,"is-mobile-modal":this.isMobileModal}]},isMobileModal:function(){return this.mobileModal&&!this.inline&&!this.hoverable},ariaRoleMenu:function(){return"menu"===this.ariaRole||"list"===this.ariaRole?this.ariaRole:null}},watch:{value:function(e){this.selected=e},isActive:function(e){this.$emit("active-change",e)}},methods:{selectItem:function(e){var t=this;if(this.multiple){if(this.selected){var n=this.selected.indexOf(e);-1===n?this.selected.push(e):this.selected.splice(n,1)}else this.selected=[e];this.$emit("change",this.selected)}else this.selected!==e&&(this.selected=e,this.$emit("change",this.selected));this.$emit("input",this.selected),this.multiple||(this.isActive=!this.closeOnClick,this.hoverable&&this.closeOnClick&&(this.isHoverable=!1,setTimeout(function(){t.isHoverable=!0},250)))},isInWhiteList:function(e){if(e===this.$refs.dropdownMenu)return!0;if(e===this.$refs.trigger)return!0;if(void 0!==this.$refs.dropdownMenu){var t=this.$refs.dropdownMenu.querySelectorAll("*"),n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done);n=!0){if(e===o.value)return!0}}catch(e){i=!0,a=e}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}}if(void 0!==this.$refs.trigger){var r=this.$refs.trigger.querySelectorAll("*"),l=!0,c=!1,u=void 0;try{for(var d,h=r[Symbol.iterator]();!(l=(d=h.next()).done);l=!0){if(e===d.value)return!0}}catch(e){c=!0,u=e}finally{try{l||null==h.return||h.return()}finally{if(c)throw u}}}return!1},clickedOutside:function(e){this.inline||this.isInWhiteList(e.target)||(this.isActive=!1)},toggle:function(){var e=this;this.disabled||(this.isActive?this.isActive=!this.isActive:this.$nextTick(function(){var t=!e.isActive;e.isActive=t,setTimeout(function(){return e.isActive=t})}))}},created:function(){"undefined"!=typeof window&&document.addEventListener("click",this.clickedOutside)},beforeDestroy:function(){"undefined"!=typeof window&&document.removeEventListener("click",this.clickedOutside)}},void 0,!1,void 0,void 0,void 0);var N=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.separator?n("hr",{staticClass:"dropdown-divider"}):e.custom||e.hasLink?n("div",{class:e.itemClasses,attrs:{role:e.ariaRoleItem,tabindex:e.focusable?0:null},on:{click:e.selectItem}},[e._t("default")],2):n("a",{staticClass:"dropdown-item",class:e.anchorClasses,attrs:{role:e.ariaRoleItem,tabindex:e.focusable?0:null},on:{click:e.selectItem}},[e._t("default")],2)},staticRenderFns:[]},void 0,{name:"BDropdownItem",props:{value:{type:[String,Number,Boolean,Object,Array,Function],default:null},separator:Boolean,disabled:Boolean,custom:Boolean,focusable:{type:Boolean,default:!0},paddingless:Boolean,hasLink:Boolean,ariaRole:{type:String,default:""}},computed:{anchorClasses:function(){return{"is-disabled":this.$parent.disabled||this.disabled,"is-paddingless":this.paddingless,"is-active":this.isActive}},itemClasses:function(){return{"dropdown-item":!this.hasLink,"is-disabled":this.disabled,"is-paddingless":this.paddingless,"is-active":this.isActive,"has-link":this.hasLink}},ariaRoleItem:function(){return"menuitem"===this.ariaRole||"listitem"===this.ariaRole?this.ariaRole:null},isClickable:function(){return!(this.$parent.disabled||this.separator||this.disabled||this.custom)},isActive:function(){return null!==this.$parent.selected&&(this.$parent.multiple?this.$parent.selected.indexOf(this.value)>=0:this.value===this.$parent.selected)}},methods:{selectItem:function(){this.isClickable&&(this.$parent.selectItem(this.value),this.$emit("click"))}},created:function(){if(!this.$parent.$data._isDropdown)throw this.$destroy(),new Error("You should wrap bDropdownItem on a bDropdown")}},void 0,!1,void 0,void 0,void 0);var E=s({},void 0,{name:"BFieldBody",props:{message:{type:String},type:{type:[String,Object]}},render:function(e){var t=this;return e("div",{attrs:{class:"field-body"}},this.$slots.default.map(function(n){return n.tag?t.message?e("b-field",{attrs:{message:t.message,type:t.type}},[n]):e("b-field",{attrs:{type:t.type}},[n]):n}))}},void 0,void 0,void 0,void 0,void 0);var R=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"field",class:[e.rootClasses,e.fieldType()]},[e.horizontal?n("div",{staticClass:"field-label",class:[e.customClass,e.fieldLabelSize]},[e.hasLabel?n("label",{staticClass:"label",class:e.customClass,attrs:{for:e.labelFor}},[e.$slots.label?e._t("label"):[e._v(e._s(e.label))]],2):e._e()]):[e.hasLabel?n("label",{staticClass:"label",class:e.customClass,attrs:{for:e.labelFor}},[e.$slots.label?e._t("label"):[e._v(e._s(e.label))]],2):e._e()],e._v(" "),e.horizontal?n("b-field-body",{attrs:{message:e.newMessage?e.formattedMessage:"",type:e.newType}},[e._t("default")],2):[e._t("default")],e._v(" "),e.newMessage&&!e.horizontal?n("p",{staticClass:"help",class:e.newType,domProps:{innerHTML:e._s(e.formattedMessage)}}):e._e()],2)},staticRenderFns:[]},void 0,{name:"BField",components:d({},E.name,E),props:{type:[String,Object],label:String,labelFor:String,message:[String,Array,Object],grouped:Boolean,groupMultiline:Boolean,position:String,expanded:Boolean,horizontal:Boolean,addons:{type:Boolean,default:!0},customClass:String,labelPosition:{type:String,default:function(){return a.defaultFieldLabelPosition}}},data:function(){return{newType:this.type,newMessage:this.message,fieldLabelSize:null,_isField:!0}},computed:{rootClasses:function(){return[this.newPosition,{"is-expanded":this.expanded,"is-grouped-multiline":this.groupMultiline,"is-horizontal":this.horizontal,"is-floating-in-label":this.hasLabel&&!this.horizontal&&"inside"===this.labelPosition,"is-floating-label":this.hasLabel&&!this.horizontal&&"on-border"===this.labelPosition},this.numberInputClasses]},newPosition:function(){if(void 0!==this.position){var e=this.position.split("-");if(!(e.length<1)){var t=this.grouped?"is-grouped-":"has-addons-";return this.position?t+e[1]:void 0}}},formattedMessage:function(){if("string"==typeof this.newMessage)return this.newMessage;var e=[];if(Array.isArray(this.newMessage))this.newMessage.forEach(function(t){if("string"==typeof t)e.push(t);else for(var n in t)t[n]&&e.push(n)});else for(var t in this.newMessage)this.newMessage[t]&&e.push(t);return e.filter(function(e){if(e)return e}).join(" <br> ")},hasLabel:function(){return this.label||this.$slots.label},numberInputClasses:function(){if(this.$slots.default){var e=this.$slots.default.filter(function(e){return e.tag&&e.tag.toLowerCase().indexOf("numberinput")>=0})[0];if(e){var t=["has-numberinput"],n=e.componentOptions.propsData.controlsPosition,i=e.componentOptions.propsData.size;return n&&t.push("has-numberinput-".concat(n)),i&&t.push("has-numberinput-".concat(i)),t}}return null}},watch:{type:function(e){this.newType=e},message:function(e){this.newMessage=e}},methods:{fieldType:function(){if(this.grouped)return"is-grouped";var e=0;return this.$slots.default&&(e=this.$slots.default.reduce(function(e,t){return t.tag?e+1:e},0)),e>1&&this.addons&&!this.horizontal?"has-addons":void 0}},mounted:function(){this.horizontal&&(this.$el.querySelectorAll(".input, .select, .button, .textarea, .b-slider").length>0&&(this.fieldLabelSize="is-normal"))}},void 0,!1,void 0,void 0,void 0);var L,j=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"b-clockpicker-face",on:{mousedown:e.onMouseDown,mouseup:e.onMouseUp,mousemove:e.onDragMove,touchstart:e.onMouseDown,touchend:e.onMouseUp,touchmove:e.onDragMove}},[n("div",{ref:"clock",staticClass:"b-clockpicker-face-outer-ring"},[n("div",{staticClass:"b-clockpicker-face-hand",style:e.handStyle}),e._v(" "),e._l(e.faceNumbers,function(t,i){return n("span",{key:i,staticClass:"b-clockpicker-face-number",class:e.getFaceNumberClasses(t),style:{transform:e.getNumberTranslate(t.value)}},[n("span",[e._v(e._s(t.label))])])})],2)])},staticRenderFns:[]},void 0,{name:"BClockpickerFace",props:{pickerSize:Number,min:Number,max:Number,double:Boolean,value:Number,faceNumbers:Array,disabledValues:Function},data:function(){return{isDragging:!1,inputValue:this.value,prevAngle:720}},computed:{count:function(){return this.max-this.min+1},countPerRing:function(){return this.double?this.count/2:this.count},radius:function(){return this.pickerSize/2},outerRadius:function(){return this.radius-5-20},innerRadius:function(){return Math.max(.6*this.outerRadius,this.outerRadius-5-40)},degreesPerUnit:function(){return 360/this.countPerRing},degrees:function(){return this.degreesPerUnit*Math.PI/180},handRotateAngle:function(){for(var e=this.prevAngle;e<0;)e+=360;var t=this.calcHandAngle(this.displayedValue),n=this.shortestDistanceDegrees(e,t);return this.prevAngle+n},handScale:function(){return this.calcHandScale(this.displayedValue)},handStyle:function(){return{transform:"rotate(".concat(this.handRotateAngle,"deg) scaleY(").concat(this.handScale,")"),transition:".3s cubic-bezier(.25,.8,.50,1)"}},displayedValue:function(){return null==this.inputValue?this.min:this.inputValue}},watch:{value:function(e){e!==this.inputValue&&(this.prevAngle=this.handRotateAngle),this.inputValue=e}},methods:{isDisabled:function(e){return this.disabledValues&&this.disabledValues(e)},euclidean:function(e,t){var n=t.x-e.x,i=t.y-e.y;return Math.sqrt(n*n+i*i)},shortestDistanceDegrees:function(e,t){var n=(t-e)%360,i=180-Math.abs(Math.abs(n)-180);return(n+360)%360<180?1*i:-1*i},coordToAngle:function(e,t){var n=2*Math.atan2(t.y-e.y-this.euclidean(e,t),t.x-e.x);return Math.abs(180*n/Math.PI)},getNumberTranslate:function(e){var t=this.getNumberCoords(e),n=t.x,i=t.y;return"translate(".concat(n,"px, ").concat(i,"px)")},getNumberCoords:function(e){var t=this.isInnerRing(e)?this.innerRadius:this.outerRadius;return{x:Math.round(t*Math.sin((e-this.min)*this.degrees)),y:Math.round(-t*Math.cos((e-this.min)*this.degrees))}},getFaceNumberClasses:function(e){return{active:e.value===this.displayedValue,disabled:this.isDisabled(e.value)}},isInnerRing:function(e){return this.double&&e-this.min>=this.countPerRing},calcHandAngle:function(e){var t=this.degreesPerUnit*(e-this.min);return this.isInnerRing(e)&&(t-=360),t},calcHandScale:function(e){return this.isInnerRing(e)?this.innerRadius/this.outerRadius:1},onMouseDown:function(e){e.preventDefault(),this.isDragging=!0,this.onDragMove(e)},onMouseUp:function(){this.isDragging=!1,this.isDisabled(this.inputValue)||this.$emit("change",this.inputValue)},onDragMove:function(e){if(e.preventDefault(),this.isDragging||"click"===e.type){var t=this.$refs.clock.getBoundingClientRect(),n=t.width,i=t.top,a=t.left,o="touches"in e?e.touches[0]:e,s={x:n/2,y:-n/2},r={x:o.clientX-a,y:i-o.clientY},l=Math.round(this.coordToAngle(s,r)+360)%360,c=this.double&&this.euclidean(s,r)<(this.outerRadius+this.innerRadius)/2-16,u=Math.round(l/this.degreesPerUnit)+this.min+(c?this.countPerRing:0);l>=360-this.degreesPerUnit/2&&(u=c?this.max:this.min),this.update(u)}},update:function(e){this.inputValue===e||this.isDisabled(e)||(this.prevAngle=this.handRotateAngle,this.inputValue=e,this.$emit("input",e))}}},void 0,!1,void 0,void 0,void 0);var H=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"b-clockpicker control",class:[e.size,e.type,{"is-expanded":e.expanded}]},[!e.isMobile||e.inline?n("b-dropdown",{ref:"dropdown",attrs:{position:e.position,disabled:e.disabled,inline:e.inline}},[e.inline?e._e():n("b-input",e._b({ref:"input",attrs:{slot:"trigger",autocomplete:"off",value:e.formatValue(e.computedValue),placeholder:e.placeholder,size:e.size,icon:e.icon,"icon-pack":e.iconPack,loading:e.loading,disabled:e.disabled,readonly:!e.editable,rounded:e.rounded,"use-html5-validation":e.useHtml5Validation},on:{focus:e.handleOnFocus,blur:function(t){e.onBlur()&&e.checkHtml5Validity()}},nativeOn:{click:function(t){t.stopPropagation(),e.toggle(!0)},keyup:function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;e.toggle(!0)},change:function(t){e.onChangeNativePicker(t)}},slot:"trigger"},"b-input",e.$attrs,!1)),e._v(" "),n("div",{staticClass:"card",attrs:{disabled:e.disabled,custom:""}},[e.inline?n("header",{staticClass:"card-header"},[n("div",{staticClass:"b-clockpicker-header card-header-title"},[n("div",{staticClass:"b-clockpicker-time"},[n("span",{staticClass:"b-clockpicker-btn",class:{active:e.isSelectingHour},on:{click:function(t){e.isSelectingHour=!0}}},[e._v(e._s(e.hoursDisplay))]),e._v(" "),n("span",[e._v(":")]),e._v(" "),n("span",{staticClass:"b-clockpicker-btn",class:{active:!e.isSelectingHour},on:{click:function(t){e.isSelectingHour=!1}}},[e._v(e._s(e.minutesDisplay))])]),e._v(" "),e.isHourFormat24?e._e():n("div",{staticClass:"b-clockpicker-period"},[n("div",{staticClass:"b-clockpicker-btn",class:{active:e.meridienSelected==e.AM},on:{click:function(t){e.onMeridienClick(e.AM)}}},[e._v("am")]),e._v(" "),n("div",{staticClass:"b-clockpicker-btn",class:{active:e.meridienSelected==e.PM},on:{click:function(t){e.onMeridienClick(e.PM)}}},[e._v("pm")])])])]):e._e(),e._v(" "),n("div",{staticClass:"card-content"},[n("div",{staticClass:"b-clockpicker-body",style:{width:e.faceSize+"px",height:e.faceSize+"px"}},[e.inline?e._e():n("div",{staticClass:"b-clockpicker-time"},[n("div",{staticClass:"b-clockpicker-btn",class:{active:e.isSelectingHour},on:{click:function(t){e.isSelectingHour=!0}}},[e._v("Hours")]),e._v(" "),n("span",{staticClass:"b-clockpicker-btn",class:{active:!e.isSelectingHour},on:{click:function(t){e.isSelectingHour=!1}}},[e._v("Min")])]),e._v(" "),e.isHourFormat24||e.inline?e._e():n("div",{staticClass:"b-clockpicker-period"},[n("div",{staticClass:"b-clockpicker-btn",class:{active:e.meridienSelected==e.AM},on:{click:function(t){e.onMeridienClick(e.AM)}}},[e._v(e._s(e.AM))]),e._v(" "),n("div",{staticClass:"b-clockpicker-btn",class:{active:e.meridienSelected==e.PM},on:{click:function(t){e.onMeridienClick(e.PM)}}},[e._v(e._s(e.PM))])]),e._v(" "),n("b-clockpicker-face",{attrs:{"picker-size":e.faceSize,min:e.minFaceValue,max:e.maxFaceValue,"face-numbers":e.isSelectingHour?e.hours:e.minutes,"disabled-values":e.faceDisabledValues,double:e.isSelectingHour&&e.isHourFormat24,value:e.isSelectingHour?e.hoursSelected:e.minutesSelected},on:{input:e.onClockInput,change:e.onClockChange}})],1)]),e._v(" "),void 0!==e.$slots.default&&e.$slots.default.length?n("footer",{staticClass:"b-clockpicker-footer card-footer"},[e._t("default")],2):e._e()])],1):n("b-input",e._b({ref:"input",attrs:{type:"time",autocomplete:"off",value:e.formatHHMMSS(e.computedValue),placeholder:e.placeholder,size:e.size,icon:e.icon,"icon-pack":e.iconPack,loading:e.loading,max:e.formatHHMMSS(e.maxTime),min:e.formatHHMMSS(e.minTime),disabled:e.disabled,readonly:!1,"use-html5-validation":e.useHtml5Validation},on:{focus:e.handleOnFocus,blur:function(t){e.onBlur()&&e.checkHtml5Validity()}},nativeOn:{click:function(t){t.stopPropagation(),e.toggle(!0)},keyup:function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;e.toggle(!0)},change:function(t){e.onChangeNativePicker(t)}}},"b-input",e.$attrs,!1))],1)},staticRenderFns:[]},void 0,{name:"BClockpicker",components:(L={},d(L,j.name,j),d(L,b.name,b),d(L,R.name,R),d(L,y.name,y),d(L,F.name,F),d(L,N.name,N),L),mixins:[I],props:{pickerSize:{type:Number,default:290},hourFormat:{type:String,default:"12",validator:function(e){return"24"===e||"12"===e}},incrementMinutes:{type:Number,default:5},autoSwitch:{type:Boolean,default:!0},type:{type:String,default:"is-primary"}},data:function(){return{isSelectingHour:!0,isDragging:!1,_isClockpicker:!0}},computed:{hoursDisplay:function(){if(null==this.hoursSelected)return"--";if(this.isHourFormat24)return this.pad(this.hoursSelected);var e=this.hoursSelected;return this.meridienSelected===this.PM&&(e-=12),0===e&&(e=12),e},minutesDisplay:function(){return null==this.minutesSelected?"--":this.pad(this.minutesSelected)},minFaceValue:function(){return this.isSelectingHour&&!this.isHourFormat24&&this.meridienSelected===this.PM?12:0},maxFaceValue:function(){return this.isSelectingHour?this.isHourFormat24||this.meridienSelected!==this.AM?23:11:59},faceSize:function(){return this.pickerSize-24},faceDisabledValues:function(){return this.isSelectingHour?this.isHourDisabled:this.isMinuteDisabled}},methods:{onClockInput:function(e){this.isSelectingHour?(this.hoursSelected=e,this.onHoursChange(e)):(this.minutesSelected=e,this.onMinutesChange(e))},onClockChange:function(e){this.autoSwitch&&this.isSelectingHour&&(this.isSelectingHour=!this.isSelectingHour)},onMeridienClick:function(e){this.meridienSelected!==e&&(this.meridienSelected=e,this.onMeridienChange(e))}}},void 0,!1,void 0,void 0,void 0),z={install:function(e){l(e,H)}};r(z);var Y=z;var q=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"control",class:{"is-expanded":e.expanded,"has-icons-left":e.icon}},[n("span",{staticClass:"select",class:e.spanClasses},[n("select",e._b({directives:[{name:"model",rawName:"v-model",value:e.computedValue,expression:"computedValue"}],ref:"select",attrs:{multiple:e.multiple,size:e.nativeSize},on:{blur:function(t){e.$emit("blur",t)&&e.checkHtml5Validity()},focus:function(t){e.$emit("focus",t)},change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.computedValue=t.target.multiple?n:n[0]}}},"select",e.$attrs,!1),[e.placeholder?[null==e.computedValue?n("option",{attrs:{disabled:"",hidden:""},domProps:{value:null}},[e._v("\n                    "+e._s(e.placeholder)+"\n                ")]):e._e()]:e._e(),e._v(" "),e._t("default")],2)]),e._v(" "),e.icon?n("b-icon",{staticClass:"is-left",attrs:{icon:e.icon,pack:e.iconPack,size:e.iconSize}}):e._e()],1)},staticRenderFns:[]},void 0,{name:"BSelect",components:d({},y.name,y),mixins:[g],inheritAttrs:!1,props:{value:{type:[String,Number,Boolean,Object,Array,Function],default:null},placeholder:String,multiple:Boolean,nativeSize:[String,Number]},data:function(){return{selected:this.value,_elementRef:"select"}},computed:{computedValue:{get:function(){return this.selected},set:function(e){this.selected=e,this.$emit("input",e),!this.isValid&&this.checkHtml5Validity()}},spanClasses:function(){return[this.size,this.statusType,{"is-fullwidth":this.expanded,"is-loading":this.loading,"is-multiple":this.multiple,"is-rounded":this.rounded,"is-empty":null===this.selected}]}},watch:{value:function(e){this.selected=e,!this.isValid&&this.checkHtml5Validity()}}},void 0,!1,void 0,void 0,void 0);var W=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"datepicker-row"},[e.showWeekNumber?n("a",{staticClass:"datepicker-cell is-week-number"},[e._v("\n        "+e._s(e.getWeekNumber(e.week[6]))+"\n    ")]):e._e(),e._v(" "),e._l(e.week,function(t,i){return[e.selectableDate(t)&&!e.disabled?n("a",{key:i,staticClass:"datepicker-cell",class:[e.classObject(t),{"has-event":e.eventsDateMatch(t)},e.indicators],attrs:{role:"button",href:"#",disabled:e.disabled},on:{click:function(n){n.preventDefault(),e.emitChosenDate(t)},keydown:[function(n){if(!("button"in n)&&e._k(n.keyCode,"enter",13,n.key))return null;n.preventDefault(),e.emitChosenDate(t)},function(n){if(!("button"in n)&&e._k(n.keyCode,"space",32,n.key))return null;n.preventDefault(),e.emitChosenDate(t)}],mouseenter:function(n){e.setRangeHoverEndDate(t)}}},[e._v("\n            "+e._s(t.getDate())+"\n            "),e.eventsDateMatch(t)?n("div",{staticClass:"events"},e._l(e.eventsDateMatch(t),function(e,t){return n("div",{key:t,staticClass:"event",class:e.type})})):e._e()]):n("div",{key:i,staticClass:"datepicker-cell",class:e.classObject(t)},[e._v("\n            "+e._s(t.getDate())+"\n        ")])]})],2)},staticRenderFns:[]},void 0,{name:"BDatepickerTableRow",props:{selectedDate:{type:[Date,Array]},hoveredDateRange:Array,week:{type:Array,required:!0},month:{type:Number,required:!0},minDate:Date,maxDate:Date,disabled:Boolean,unselectableDates:Array,unselectableDaysOfWeek:Array,selectableDates:Array,events:Array,indicators:String,dateCreator:Function,nearbyMonthDays:Boolean,nearbySelectableMonthDays:Boolean,showWeekNumber:{type:Boolean,default:function(){return!1}},rulesForFirstWeek:{type:Number,default:function(){return 4}},firstDayOfWeek:Number},methods:{firstWeekOffset:function(e,t,n){var i=7+t-n;return-((7+new Date(e,0,i).getDay()-t)%7)+i-1},daysInYear:function(e){return this.isLeapYear(e)?366:365},isLeapYear:function(e){return e%4==0&&e%100!=0||e%400==0},getSetDayOfYear:function(e){return Math.round((e-new Date(e.getFullYear(),0,1))/864e5)+1},weeksInYear:function(e,t,n){var i=this.firstWeekOffset(e,t,n),a=this.firstWeekOffset(e+1,t,n);return(this.daysInYear(e)-i+a)/7},getWeekNumber:function(e){var t,n,i=this.firstDayOfWeek,a=this.rulesForFirstWeek,o=this.firstWeekOffset(e.getFullYear(),i,a),s=Math.floor((this.getSetDayOfYear(e)-o-1)/7)+1;return s<1?(n=e.getFullYear()-1,t=s+this.weeksInYear(n,i,a)):s>this.weeksInYear(e.getFullYear(),i,a)?(t=s-this.weeksInYear(e.getFullYear(),i,a),n=e.getFullYear()+1):(n=e.getFullYear(),t=s),t},selectableDate:function(e){var t=[];if(this.minDate&&t.push(e>=this.minDate),this.maxDate&&t.push(e<=this.maxDate),this.nearbyMonthDays&&!this.nearbySelectableMonthDays&&t.push(e.getMonth()===this.month),this.selectableDates)for(var n=0;n<this.selectableDates.length;n++){var i=this.selectableDates[n];if(e.getDate()===i.getDate()&&e.getFullYear()===i.getFullYear()&&e.getMonth()===i.getMonth())return!0;t.push(!1)}if(this.unselectableDates)for(var a=0;a<this.unselectableDates.length;a++){var o=this.unselectableDates[a];t.push(e.getDate()!==o.getDate()||e.getFullYear()!==o.getFullYear()||e.getMonth()!==o.getMonth())}if(this.unselectableDaysOfWeek)for(var s=0;s<this.unselectableDaysOfWeek.length;s++){var r=this.unselectableDaysOfWeek[s];t.push(e.getDay()!==r)}return t.indexOf(!1)<0},emitChosenDate:function(e){this.disabled||this.selectableDate(e)&&this.$emit("select",e)},eventsDateMatch:function(e){if(!this.events||!this.events.length)return!1;for(var t=[],n=0;n<this.events.length;n++)this.events[n].date.getDay()===e.getDay()&&t.push(this.events[n]);return!!t.length&&t},classObject:function(e){function t(e,t){return!(!e||!t)&&(Array.isArray(t)?t.some(function(t){return e.getDate()===t.getDate()&&e.getFullYear()===t.getFullYear()&&e.getMonth()===t.getMonth()}):e.getDate()===t.getDate()&&e.getFullYear()===t.getFullYear()&&e.getMonth()===t.getMonth())}function n(e,t){return!!Array.isArray(t)&&(e>t[0]&&e<t[1])}return{"is-selected":t(e,this.selectedDate)||n(e,this.selectedDate),"is-first-selected":t(e,Array.isArray(this.selectedDate)&&this.selectedDate[0]),"is-within-selected":n(e,this.selectedDate),"is-last-selected":t(e,Array.isArray(this.selectedDate)&&this.selectedDate[1]),"is-within-hovered-range":this.hoveredDateRange&&2===this.hoveredDateRange.length&&(t(e,this.hoveredDateRange)||n(e,this.hoveredDateRange)),"is-first-hovered":t(e,Array.isArray(this.hoveredDateRange)&&this.hoveredDateRange[0]),"is-within-hovered":n(e,this.hoveredDateRange),"is-last-hovered":t(e,Array.isArray(this.hoveredDateRange)&&this.hoveredDateRange[1]),"is-today":t(e,this.dateCreator()),"is-selectable":this.selectableDate(e)&&!this.disabled,"is-unselectable":!this.selectableDate(e)||this.disabled,"is-invisible":!this.nearbyMonthDays&&e.getMonth()!==this.month,"is-nearby":this.nearbySelectableMonthDays&&e.getMonth()!==this.month}},setRangeHoverEndDate:function(e){Array.isArray(this.selectedDate)&&this.$emit("rangeHoverEndDate",e)}}},void 0,!1,void 0,void 0,void 0),U=function(e){return void 0!==e};var K=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("section",{staticClass:"datepicker-table"},[n("header",{staticClass:"datepicker-header"},e._l(e.visibleDayNames,function(t,i){return n("div",{key:i,staticClass:"datepicker-cell"},[e._v("\n            "+e._s(t)+"\n        ")])})),e._v(" "),n("div",{staticClass:"datepicker-body",class:{"has-events":e.hasEvents}},e._l(e.weeksInThisMonth,function(t,i){return n("b-datepicker-table-row",{key:i,attrs:{"selected-date":e.value,week:t,month:e.focused.month,"min-date":e.minDate,"max-date":e.maxDate,disabled:e.disabled,"unselectable-dates":e.unselectableDates,"unselectable-days-of-week":e.unselectableDaysOfWeek,"selectable-dates":e.selectableDates,events:e.eventsInThisWeek(t),indicators:e.indicators,"date-creator":e.dateCreator,"nearby-month-days":e.nearbyMonthDays,"nearby-selectable-month-days":e.nearbySelectableMonthDays,"show-week-number":e.showWeekNumber,"first-day-of-week":e.firstDayOfWeek,"rules-for-first-week":e.rulesForFirstWeek,range:e.range,"hovered-date-range":e.hoveredDateRange},on:{select:e.updateSelectedDate,rangeHoverEndDate:e.setRangeHoverEndDate}})}))])},staticRenderFns:[]},void 0,{name:"BDatepickerTable",components:d({},W.name,W),props:{value:{type:[Date,Array]},dayNames:Array,monthNames:Array,firstDayOfWeek:Number,events:Array,indicators:String,minDate:Date,maxDate:Date,focused:Object,disabled:Boolean,dateCreator:Function,unselectableDates:Array,unselectableDaysOfWeek:Array,selectableDates:Array,nearbyMonthDays:Boolean,nearbySelectableMonthDays:Boolean,showWeekNumber:{type:Boolean,default:function(){return!1}},rulesForFirstWeek:{type:Number,default:function(){return 4}},range:Boolean},data:function(){return{selectedBeginDate:void 0,selectedEndDate:void 0,hoveredEndDate:void 0}},computed:{visibleDayNames:function(){for(var e=[],t=this.firstDayOfWeek;e.length<this.dayNames.length;){var n=this.dayNames[t%this.dayNames.length];e.push(n),t++}return this.showWeekNumber&&e.unshift(""),e},hasEvents:function(){return this.events&&this.events.length},eventsInThisMonth:function(){if(!this.events)return[];for(var e=[],t=0;t<this.events.length;t++){var n=this.events[t];n.hasOwnProperty("date")||(n={date:n}),n.hasOwnProperty("type")||(n.type="is-primary"),n.date.getMonth()===this.focused.month&&n.date.getFullYear()===this.focused.year&&e.push(n)}return e},weeksInThisMonth:function(){for(var e=this.focused.month,t=this.focused.year,n=[],i=new Date(t,e+1,0).getDate(),a=1;a<=i+6;){var o=this.weekBuilder(a,e,t),s=!1;o.forEach(function(t){t.getMonth()===e&&(s=!0)}),s&&n.push(o),a+=7}return n},hoveredDateRange:function(){return this.range&&isNaN(this.selectedEndDate)?this.hoveredEndDate<this.selectedBeginDate?[this.hoveredEndDate,this.selectedBeginDate].filter(U):[this.selectedBeginDate,this.hoveredEndDate].filter(U):[]}},methods:{updateSelectedDate:function(e){this.range?this.handleSelectRangeDate(e):this.$emit("input",e)},handleSelectRangeDate:function(e){this.selectedBeginDate&&this.selectedEndDate?(this.selectedBeginDate=e,this.selectedEndDate=void 0):this.selectedBeginDate&&!this.selectedEndDate?(this.selectedBeginDate>e?(this.selectedEndDate=this.selectedBeginDate,this.selectedBeginDate=e):this.selectedEndDate=e,this.$emit("input",[this.selectedBeginDate,this.selectedEndDate])):this.selectedBeginDate=e},weekBuilder:function(e,t,n){for(var i=new Date(n,t),a=[],o=new Date(n,t,e).getDay(),s=o>=this.firstDayOfWeek?o-this.firstDayOfWeek:7-this.firstDayOfWeek+o,r=1,l=0;l<s;l++)a.unshift(new Date(i.getFullYear(),i.getMonth(),e-r)),r++;a.push(new Date(n,t,e));for(var c=1;a.length<7;)a.push(new Date(n,t,e+c)),c++;return a},eventsInThisWeek:function(e){return this.eventsInThisMonth.filter(function(t){var n=new Date(Date.parse(t.date));n.setHours(0),n.setMinutes(0),n.setSeconds(0),n.setMilliseconds(0);var i=n.getTime();return e.some(function(e){return e.getTime()===i})})},setRangeHoverEndDate:function(e){this.hoveredEndDate=e}}},void 0,!1,void 0,void 0,void 0);var X,G=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("section",{staticClass:"datepicker-table"},[n("div",{staticClass:"datepicker-body",class:{"has-events":e.hasEvents}},[n("div",{staticClass:"datepicker-months"},[e._l(e.monthDates,function(t,i){return[e.selectableDate(t)&&!e.disabled?n("a",{key:i,staticClass:"datepicker-cell",class:[e.classObject(t),{"has-event":e.eventsDateMatch(t)},e.indicators],attrs:{role:"button",href:"#",disabled:e.disabled},on:{click:function(n){n.preventDefault(),e.emitChosenDate(t)},keydown:[function(n){if(!("button"in n)&&e._k(n.keyCode,"enter",13,n.key))return null;n.preventDefault(),e.emitChosenDate(t)},function(n){if(!("button"in n)&&e._k(n.keyCode,"space",32,n.key))return null;n.preventDefault(),e.emitChosenDate(t)}]}},[e._v("\n                    "+e._s(e.monthNames[t.getMonth()])+"\n                    "),e.eventsDateMatch(t)?n("div",{staticClass:"events"},e._l(e.eventsDateMatch(t),function(e,t){return n("div",{key:t,staticClass:"event",class:e.type})})):e._e()]):n("div",{key:i,staticClass:"datepicker-cell",class:e.classObject(t)},[e._v("\n                    "+e._s(e.monthNames[t.getMonth()])+"\n                ")])]})],2)])])},staticRenderFns:[]},void 0,{name:"BDatepickerMonth",props:{value:Date,monthNames:Array,events:Array,indicators:String,minDate:Date,maxDate:Date,focused:Object,disabled:Boolean,dateCreator:Function,unselectableDates:Array,unselectableDaysOfWeek:Array,selectableDates:Array},computed:{hasEvents:function(){return this.events&&this.events.length},eventsInThisYear:function(){if(!this.events)return[];for(var e=[],t=0;t<this.events.length;t++){var n=this.events[t];n.hasOwnProperty("date")||(n={date:n}),n.hasOwnProperty("type")||(n.type="is-primary"),n.date.getFullYear()===this.focused.year&&e.push(n)}return e},monthDates:function(){for(var e=this.focused.year,t=[],n=0;n<12;n++){var i=new Date(e,n,1);i.setHours(0,0,0,0),t.push(i)}return t}},methods:{selectableDate:function(e){var t=[];if(this.minDate&&t.push(e>=this.minDate),this.maxDate&&t.push(e<=this.maxDate),t.push(e.getFullYear()===this.focused.year),this.selectableDates)for(var n=0;n<this.selectableDates.length;n++){var i=this.selectableDates[n];if(e.getFullYear()===i.getFullYear()&&e.getMonth()===i.getMonth())return!0;t.push(!1)}if(this.unselectableDates)for(var a=0;a<this.unselectableDates.length;a++){var o=this.unselectableDates[a];t.push(e.getFullYear()!==o.getFullYear()||e.getMonth()!==o.getMonth())}if(this.unselectableDaysOfWeek)for(var s=0;s<this.unselectableDaysOfWeek.length;s++){var r=this.unselectableDaysOfWeek[s];t.push(e.getDay()!==r)}return t.indexOf(!1)<0},eventsDateMatch:function(e){if(!this.eventsInThisYear.length)return!1;for(var t=[],n=0;n<this.eventsInThisYear.length;n++)this.eventsInThisYear[n].date.getMonth()===e.getMonth()&&t.push(this.events[n]);return!!t.length&&t},classObject:function(e){function t(e,t){return!(!e||!t)&&(e.getFullYear()===t.getFullYear()&&e.getMonth()===t.getMonth())}return{"is-selected":t(e,this.value),"is-today":t(e,this.dateCreator()),"is-selectable":this.selectableDate(e)&&!this.disabled,"is-unselectable":!this.selectableDate(e)||this.disabled}},emitChosenDate:function(e){this.disabled||this.selectableDate(e)&&this.$emit("input",e)}}},void 0,!1,void 0,void 0,void 0);var J=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"datepicker control",class:[e.size,{"is-expanded":e.expanded}]},[!e.isMobile||e.inline?n("b-dropdown",{ref:"dropdown",attrs:{position:e.position,disabled:e.disabled,inline:e.inline}},[e.inline?e._e():n("b-input",e._b({ref:"input",attrs:{slot:"trigger",autocomplete:"off",value:e.formatValue(e.computedValue),placeholder:e.placeholder,size:e.size,icon:e.icon,"icon-pack":e.iconPack,rounded:e.rounded,loading:e.loading,disabled:e.disabled,readonly:!e.editable,"use-html5-validation":e.useHtml5Validation},on:{focus:e.handleOnFocus,blur:e.onBlur},nativeOn:{click:function(t){e.onInputClick(t)},keyup:function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;e.togglePicker(!0)},change:function(t){e.onChange(t.target.value)}},slot:"trigger"},"b-input",e.$attrs,!1)),e._v(" "),n("b-dropdown-item",{attrs:{disabled:e.disabled,custom:""}},[n("header",{staticClass:"datepicker-header"},[void 0!==e.$slots.header&&e.$slots.header.length?[e._t("header")]:n("div",{staticClass:"pagination field is-centered",class:e.size},[n("a",{directives:[{name:"show",rawName:"v-show",value:!e.showPrev&&!e.disabled,expression:"!showPrev && !disabled"}],staticClass:"pagination-previous",attrs:{role:"button",href:"#",disabled:e.disabled},on:{click:function(t){t.preventDefault(),e.prev(t)},keydown:[function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;t.preventDefault(),e.prev(t)},function(t){if(!("button"in t)&&e._k(t.keyCode,"space",32,t.key))return null;t.preventDefault(),e.prev(t)}]}},[n("b-icon",{attrs:{icon:"chevron-left",pack:e.iconPack,both:"",type:"is-primary is-clickable"}})],1),e._v(" "),n("a",{directives:[{name:"show",rawName:"v-show",value:!e.showNext&&!e.disabled,expression:"!showNext && !disabled"}],staticClass:"pagination-next",attrs:{role:"button",href:"#",disabled:e.disabled},on:{click:function(t){t.preventDefault(),e.next(t)},keydown:[function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;t.preventDefault(),e.next(t)},function(t){if(!("button"in t)&&e._k(t.keyCode,"space",32,t.key))return null;t.preventDefault(),e.next(t)}]}},[n("b-icon",{attrs:{icon:"chevron-right",pack:e.iconPack,both:"",type:"is-primary is-clickable"}})],1),e._v(" "),n("div",{staticClass:"pagination-list"},[n("b-field",[e.isTypeMonth?e._e():n("b-select",{attrs:{disabled:e.disabled,size:e.size},model:{value:e.focusedDateData.month,callback:function(t){e.$set(e.focusedDateData,"month",t)},expression:"focusedDateData.month"}},e._l(e.monthNames,function(t,i){return n("option",{key:t,domProps:{value:i}},[e._v("\n                                    "+e._s(t)+"\n                                ")])})),e._v(" "),n("b-select",{attrs:{disabled:e.disabled,size:e.size},model:{value:e.focusedDateData.year,callback:function(t){e.$set(e.focusedDateData,"year",t)},expression:"focusedDateData.year"}},e._l(e.listOfYears,function(t){return n("option",{key:t,domProps:{value:t}},[e._v("\n                                    "+e._s(t)+"\n                                ")])}))],1)],1)])],2),e._v(" "),e.isTypeMonth?n("div",[n("b-datepicker-month",{attrs:{"month-names":e.monthNames,"min-date":e.minDate,"max-date":e.maxDate,focused:e.focusedDateData,disabled:e.disabled,"unselectable-dates":e.unselectableDates,"unselectable-days-of-week":e.unselectableDaysOfWeek,"selectable-dates":e.selectableDates,events:e.events,indicators:e.indicators,"date-creator":e.dateCreator},on:{close:function(t){e.togglePicker(!1)}},model:{value:e.computedValue,callback:function(t){e.computedValue=t},expression:"computedValue"}})],1):n("div",{staticClass:"datepicker-content"},[n("b-datepicker-table",{attrs:{"day-names":e.dayNames,"month-names":e.monthNames,"first-day-of-week":e.firstDayOfWeek,"rules-for-first-week":e.rulesForFirstWeek,"min-date":e.minDate,"max-date":e.maxDate,focused:e.focusedDateData,disabled:e.disabled,"unselectable-dates":e.unselectableDates,"unselectable-days-of-week":e.unselectableDaysOfWeek,"selectable-dates":e.selectableDates,events:e.events,indicators:e.indicators,"date-creator":e.dateCreator,"type-month":e.isTypeMonth,"nearby-month-days":e.nearbyMonthDays,"nearby-selectable-month-days":e.nearbySelectableMonthDays,"show-week-number":e.showWeekNumber,range:e.range},on:{close:function(t){e.togglePicker(!1)}},model:{value:e.computedValue,callback:function(t){e.computedValue=t},expression:"computedValue"}})],1),e._v(" "),void 0!==e.$slots.default&&e.$slots.default.length?n("footer",{staticClass:"datepicker-footer"},[e._t("default")],2):e._e()])],1):n("b-input",e._b({ref:"input",attrs:{type:e.isTypeMonth?"month":"date",autocomplete:"off",value:e.formatNative(e.computedValue),placeholder:e.placeholder,size:e.size,icon:e.icon,"icon-pack":e.iconPack,loading:e.loading,max:e.formatNative(e.maxDate),min:e.formatNative(e.minDate),disabled:e.disabled,readonly:!1,"show-week-number":e.showWeekNumber,"use-html5-validation":e.useHtml5Validation},on:{focus:e.handleOnFocus,blur:e.onBlur},nativeOn:{change:function(t){e.onChangeNativePicker(t)}}},"b-input",e.$attrs,!1))],1)},staticRenderFns:[]},void 0,{name:"BDatepicker",components:(X={},d(X,K.name,K),d(X,G.name,G),d(X,b.name,b),d(X,R.name,R),d(X,q.name,q),d(X,y.name,y),d(X,F.name,F),d(X,N.name,N),X),mixins:[g],inheritAttrs:!1,props:{value:{type:[Date,Array]},dayNames:{type:Array,default:function(){return Array.isArray(a.defaultDayNames)?a.defaultDayNames:["Su","M","Tu","W","Th","F","S"]}},monthNames:{type:Array,default:function(){return Array.isArray(a.defaultMonthNames)?a.defaultMonthNames:["January","February","March","April","May","June","July","August","September","October","November","December"]}},firstDayOfWeek:{type:Number,default:function(){return"number"==typeof a.defaultFirstDayOfWeek?a.defaultFirstDayOfWeek:0}},inline:Boolean,minDate:Date,maxDate:Date,focusedDate:Date,placeholder:String,editable:Boolean,disabled:Boolean,unselectableDates:Array,unselectableDaysOfWeek:{type:Array,default:function(){return a.defaultUnselectableDaysOfWeek}},selectableDates:Array,dateFormatter:{type:Function,default:function(e,t){return"function"==typeof a.defaultDateFormatter?a.defaultDateFormatter(e):function(e,t){return(Array.isArray(e)?e:[e]).map(function(e){var n=e.getFullYear()+"/"+(e.getMonth()+1)+"/"+e.getDate(),i=new Date(n);return t.isTypeMonth?i.toLocaleDateString(void 0,{year:"numeric",month:"2-digit"}):i.toLocaleDateString()}).join(" - ")}(e,t)}},dateParser:{type:Function,default:function(e,t){return"function"==typeof a.defaultDateParser?a.defaultDateParser(e):function(e,t){if(!t.isTypeMonth)return new Date(Date.parse(e));if(e){var n=e.split("/"),i=4===n[0].length?n[0]:n[1],a=2===n[0].length?n[0]:n[1];if(i&&a)return new Date(parseInt(i,10),parseInt(a-1,10),1,0,0,0,0)}return null}(e,t)}},dateCreator:{type:Function,default:function(){return"function"==typeof a.defaultDateCreator?a.defaultDateCreator():new Date}},mobileNative:{type:Boolean,default:function(){return a.defaultDatepickerMobileNative}},position:String,events:Array,indicators:{type:String,default:"dots"},openOnFocus:Boolean,yearsRange:{type:Array,default:function(){return a.defaultDatepickerYearsRange}},type:{type:String,validator:function(e){return["month"].indexOf(e)>=0}},nearbyMonthDays:{type:Boolean,default:function(){return a.defaultDatepickerNearbyMonthDays}},nearbySelectableMonthDays:{type:Boolean,default:function(){return a.defaultDatepickerNearbySelectableMonthDays}},showWeekNumber:{type:Boolean,default:function(){return a.defaultDatepickerShowWeekNumber}},rulesForFirstWeek:{type:Number,default:function(){return 4}},range:{type:Boolean,default:!1}},data:function(){var e=Array.isArray(this.value)?this.value[0]:this.value||this.focusedDate||this.dateCreator();return{dateSelected:this.value,focusedDateData:{month:e.getMonth(),year:e.getFullYear()},_elementRef:"input",_isDatepicker:!0}},computed:{computedValue:{get:function(){return this.dateSelected},set:function(e){this.updateInternalState(e),this.togglePicker(!1),this.$emit("input",e)}},listOfYears:function(){var e=this.focusedDateData.year+this.yearsRange[1];this.maxDate&&this.maxDate.getFullYear()<e&&(e=Math.max(this.maxDate.getFullYear(),this.focusedDateData.year));var t=this.focusedDateData.year+this.yearsRange[0];this.minDate&&this.minDate.getFullYear()>t&&(t=Math.min(this.minDate.getFullYear(),this.focusedDateData.year));for(var n=[],i=t;i<=e;i++)n.push(i);return n.reverse()},showPrev:function(){return!!this.minDate&&(this.isTypeMonth?this.focusedDateData.year<=this.minDate.getFullYear():new Date(this.focusedDateData.year,this.focusedDateData.month)<=new Date(this.minDate.getFullYear(),this.minDate.getMonth()))},showNext:function(){return!!this.maxDate&&(this.isTypeMonth?this.focusedDateData.year>=this.maxDate.getFullYear():new Date(this.focusedDateData.year,this.focusedDateData.month)>=new Date(this.maxDate.getFullYear(),this.maxDate.getMonth()))},isMobile:function(){return this.mobileNative&&v.any()},isTypeMonth:function(){return"month"===this.type}},watch:{value:function(e){this.updateInternalState(e),this.togglePicker(!1),!this.isValid&&this.$refs.input.checkHtml5Validity()},focusedDate:function(e){e&&(this.focusedDateData={month:e.getMonth(),year:e.getFullYear()})},"focusedDateData.month":function(e){this.$emit("change-month",e)},"focusedDateData.year":function(e){this.$emit("change-year",e)}},methods:{onChange:function(e){var t=this.dateParser(e,this);t&&!isNaN(t)?this.computedValue=t:(this.computedValue=null,this.$refs.input.newValue=this.computedValue)},formatValue:function(e){return Array.isArray(e)?Array.isArray(e)&&e.every(function(e){return!isNaN(e)})?this.dateFormatter(e,this):null:e&&!isNaN(e)?this.dateFormatter(e,this):null},prev:function(){this.disabled||(this.isTypeMonth?this.focusedDateData.year-=1:this.focusedDateData.month>0?this.focusedDateData.month-=1:(this.focusedDateData.month=11,this.focusedDateData.year-=1))},next:function(){this.disabled||(this.isTypeMonth?this.focusedDateData.year+=1:this.focusedDateData.month<11?this.focusedDateData.month+=1:(this.focusedDateData.month=0,this.focusedDateData.year+=1))},formatNative:function(e){return this.isTypeMonth?this.formatYYYYMM(e):this.formatYYYYMMDD(e)},formatYYYYMMDD:function(e){var t=new Date(e);if(e&&!isNaN(t)){var n=t.getFullYear(),i=t.getMonth()+1,a=t.getDate();return n+"-"+(i<10?"0":"")+i+"-"+(a<10?"0":"")+a}return""},formatYYYYMM:function(e){var t=new Date(e);if(e&&!isNaN(t)){var n=t.getFullYear(),i=t.getMonth()+1;return n+"-"+(i<10?"0":"")+i}return""},onChangeNativePicker:function(e){var t=e.target.value;this.computedValue=t?new Date(t+" 00:00:00"):null},updateInternalState:function(e){var t=Array.isArray(e)?e[0]:e||this.dateCreator();this.focusedDateData={month:t.getMonth(),year:t.getFullYear()},this.dateSelected=e},togglePicker:function(e){this.$refs.dropdown&&(this.$refs.dropdown.isActive="boolean"==typeof e?e:!this.$refs.dropdown.isActive)},handleOnFocus:function(e){this.onFocus(e),this.openOnFocus&&this.togglePicker(!0)},toggle:function(){if(this.mobileNative&&this.isMobile){var e=this.$refs.input.$refs.input;return e.focus(),void e.click()}this.$refs.dropdown.toggle()},onInputClick:function(e){this.$refs.dropdown.isActive&&e.stopPropagation()},keyPress:function(e){this.$refs.dropdown&&this.$refs.dropdown.isActive&&27===e.keyCode&&this.togglePicker(!1)}},created:function(){"undefined"!=typeof window&&document.addEventListener("keyup",this.keyPress)},beforeDestroy:function(){"undefined"!=typeof window&&document.removeEventListener("keyup",this.keyPress)}},void 0,!1,void 0,void 0,void 0),Q={install:function(e){l(e,J)}};r(Q);var Z=Q,ee=n(0);var te=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("transition",{attrs:{name:e.animation}},[e.isActive?n("div",{staticClass:"modal is-active",class:[{"is-full-screen":e.fullScreen},e.customClass]},[n("div",{staticClass:"modal-background",on:{click:function(t){e.cancel("outside")}}}),e._v(" "),n("div",{staticClass:"animation-content",class:{"modal-content":!e.hasModalCard},style:e.customStyle},[e.component?n(e.component,e._g(e._b({tag:"component",on:{close:e.close}},"component",e.props,!1),e.events)):e.content?n("div",{domProps:{innerHTML:e._s(e.content)}}):e._t("default")],2),e._v(" "),e.showX?n("button",{staticClass:"modal-close is-large",attrs:{type:"button"},on:{click:function(t){e.cancel("x")}}}):e._e()]):e._e()])},staticRenderFns:[]},void 0,{name:"BModal",props:{active:Boolean,component:[Object,Function],content:String,programmatic:Boolean,props:Object,events:Object,width:{type:[String,Number],default:960},hasModalCard:Boolean,animation:{type:String,default:"zoom-out"},canCancel:{type:[Array,Boolean],default:function(){return a.defaultModalCanCancel}},onCancel:{type:Function,default:function(){}},scroll:{type:String,default:function(){return a.defaultModalScroll?a.defaultModalScroll:"clip"},validator:function(e){return["clip","keep"].indexOf(e)>=0}},fullScreen:Boolean,customClass:String},data:function(){return{isActive:this.active||!1,savedScrollTop:null,newWidth:"number"==typeof this.width?this.width+"px":this.width}},computed:{cancelOptions:function(){return"boolean"==typeof this.canCancel?this.canCancel?a.defaultModalCanCancel:[]:this.canCancel},showX:function(){return this.cancelOptions.indexOf("x")>=0},customStyle:function(){return this.fullScreen?null:{maxWidth:this.newWidth}}},watch:{active:function(e){this.isActive=e},isActive:function(){this.handleScroll()}},methods:{handleScroll:function(){"undefined"!=typeof window&&("clip"!==this.scroll?(this.savedScrollTop=this.savedScrollTop?this.savedScrollTop:document.documentElement.scrollTop,this.isActive?document.body.classList.add("is-noscroll"):document.body.classList.remove("is-noscroll"),this.isActive?document.body.style.top="-".concat(this.savedScrollTop,"px"):(document.documentElement.scrollTop=this.savedScrollTop,document.body.style.top=null,this.savedScrollTop=null)):this.isActive?document.documentElement.classList.add("is-clipped"):document.documentElement.classList.remove("is-clipped"))},cancel:function(e){this.cancelOptions.indexOf(e)<0||(this.onCancel.apply(null,arguments),this.close())},close:function(){var e=this;this.$emit("close"),this.$emit("update:active",!1),this.programmatic&&(this.isActive=!1,setTimeout(function(){e.$destroy(),m(e.$el)},150))},keyPress:function(e){this.isActive&&27===e.keyCode&&this.cancel("escape")}},created:function(){"undefined"!=typeof window&&document.addEventListener("keyup",this.keyPress)},beforeMount:function(){this.programmatic&&document.body.appendChild(this.$el)},mounted:function(){this.programmatic?this.isActive=!0:this.isActive&&this.handleScroll()},beforeDestroy:function(){if("undefined"!=typeof window){document.removeEventListener("keyup",this.keyPress),document.documentElement.classList.remove("is-clipped");var e=this.savedScrollTop?this.savedScrollTop:document.documentElement.scrollTop;document.body.classList.remove("is-noscroll"),document.documentElement.scrollTop=e,document.body.style.top=null}}},void 0,!1,void 0,void 0,void 0);var ne=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("transition",{attrs:{name:e.animation}},[e.isActive?n("div",{staticClass:"dialog modal is-active",class:e.size},[n("div",{staticClass:"modal-background",on:{click:function(t){e.cancel("outside")}}}),e._v(" "),n("div",{staticClass:"modal-card animation-content"},[e.title?n("header",{staticClass:"modal-card-head"},[n("p",{staticClass:"modal-card-title"},[e._v(e._s(e.title))])]):e._e(),e._v(" "),n("section",{staticClass:"modal-card-body",class:{"is-titleless":!e.title,"is-flex":e.hasIcon}},[n("div",{staticClass:"media"},[e.hasIcon?n("div",{staticClass:"media-left"},[n("b-icon",{attrs:{icon:e.icon?e.icon:e.iconByType,pack:e.iconPack,type:e.type,both:!e.icon,size:"is-large"}})],1):e._e(),e._v(" "),n("div",{staticClass:"media-content"},[n("p",{domProps:{innerHTML:e._s(e.message)}}),e._v(" "),e.hasInput?n("div",{staticClass:"field"},[n("div",{staticClass:"control"},[n("input",e._b({directives:[{name:"model",rawName:"v-model",value:e.prompt,expression:"prompt"}],ref:"input",staticClass:"input",class:{"is-danger":e.validationMessage},domProps:{value:e.prompt},on:{keyup:function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;e.confirm(t)},input:function(t){t.target.composing||(e.prompt=t.target.value)}}},"input",e.inputAttrs,!1))]),e._v(" "),n("p",{staticClass:"help is-danger"},[e._v(e._s(e.validationMessage))])]):e._e()])])]),e._v(" "),n("footer",{staticClass:"modal-card-foot"},[e.showCancel?n("button",{ref:"cancelButton",staticClass:"button",on:{click:function(t){e.cancel("button")}}},[e._v("\n                    "+e._s(e.cancelText)+"\n                ")]):e._e(),e._v(" "),n("button",{ref:"confirmButton",staticClass:"button",class:e.type,on:{click:e.confirm}},[e._v("\n                    "+e._s(e.confirmText)+"\n                ")])])])]):e._e()])},staticRenderFns:[]},void 0,{name:"BDialog",components:d({},y.name,y),extends:te,props:{title:String,message:String,icon:String,iconPack:String,hasIcon:Boolean,type:{type:String,default:"is-primary"},size:String,confirmText:{type:String,default:function(){return a.defaultDialogConfirmText?a.defaultDialogConfirmText:"OK"}},cancelText:{type:String,default:function(){return a.defaultDialogCancelText?a.defaultDialogCancelText:"Cancel"}},hasInput:Boolean,inputAttrs:{type:Object,default:function(){return{}}},onConfirm:{type:Function,default:function(){}},focusOn:{type:String,default:"confirm"}},data:function(){return{prompt:this.hasInput&&this.inputAttrs.value||"",isActive:!1,validationMessage:""}},computed:{iconByType:function(){switch(this.type){case"is-info":return"information";case"is-success":return"check-circle";case"is-warning":return"alert";case"is-danger":return"alert-circle";default:return null}},showCancel:function(){return this.cancelOptions.indexOf("button")>=0}},methods:{confirm:function(){var e=this;if(void 0!==this.$refs.input&&!this.$refs.input.checkValidity())return this.validationMessage=this.$refs.input.validationMessage,void this.$nextTick(function(){return e.$refs.input.select()});this.onConfirm(this.prompt),this.close()},close:function(){var e=this;this.isActive=!1,setTimeout(function(){e.$destroy(),m(e.$el)},150)}},beforeMount:function(){var e=this;"undefined"!=typeof window&&this.$nextTick(function(){document.body.appendChild(e.$el)})},mounted:function(){var e=this;this.isActive=!0,void 0===this.inputAttrs.required&&this.$set(this.inputAttrs,"required",!0),this.$nextTick(function(){e.hasInput?e.$refs.input.focus():"cancel"===e.focusOn&&e.showCancel?e.$refs.cancelButton.focus():e.$refs.confirmButton.focus()})}},void 0,!1,void 0,void 0,void 0);function ie(e){return new(("undefined"!=typeof window&&window.Vue?window.Vue:ee.a).extend(ne))({el:document.createElement("div"),propsData:e})}var ae={alert:function(e){var t;"string"==typeof e&&(t=e);var n={canCancel:!1,message:t};return ie(Object.assign(n,e))},confirm:function(e){return ie(Object.assign({},e))},prompt:function(e){return ie(Object.assign({hasInput:!0,confirmText:"Done"},e))}},oe={install:function(e){l(e,ne),c(e,"dialog",ae)}};r(oe);var se=oe,re={install:function(e){l(e,F),l(e,N)}};r(re);var le=re,ce={install:function(e){l(e,R)}};r(ce);var ue=ce,de={install:function(e){l(e,y)}};r(de);var he=de,fe={install:function(e){l(e,b)}};r(fe);var pe=fe,ve="undefined"==typeof window,me=ve?Object:window.HTMLElement,ge=ve?Object:window.File;var ye=s({render:function(){var e=this.$createElement,t=this._self._c||e;return t("transition",{attrs:{name:this.animation}},[this.isActive?t("div",{staticClass:"loading-overlay is-active",class:{"is-full-page":this.isFullPage}},[t("div",{staticClass:"loading-background",on:{click:this.cancel}}),this._v(" "),this._t("default",[t("div",{staticClass:"loading-icon"})])],2):this._e()])},staticRenderFns:[]},void 0,{name:"BLoading",props:{active:Boolean,programmatic:Boolean,container:[Object,Function,me],isFullPage:{type:Boolean,default:!0},animation:{type:String,default:"fade"},canCancel:{type:Boolean,default:!1},onCancel:{type:Function,default:function(){}}},data:function(){return{isActive:this.active||!1}},watch:{active:function(e){this.isActive=e}},methods:{cancel:function(){this.canCancel&&this.isActive&&this.close()},close:function(){var e=this;this.onCancel.apply(null,arguments),this.$emit("close"),this.$emit("update:active",!1),this.programmatic&&(this.isActive=!1,setTimeout(function(){e.$destroy(),m(e.$el)},150))},keyPress:function(e){27===e.keyCode&&this.cancel()}},created:function(){"undefined"!=typeof window&&document.addEventListener("keyup",this.keyPress)},beforeMount:function(){this.programmatic&&(this.container?(this.isFullPage=!1,this.container.appendChild(this.$el)):document.body.appendChild(this.$el))},mounted:function(){this.programmatic&&(this.isActive=!0)},beforeDestroy:function(){"undefined"!=typeof window&&document.removeEventListener("keyup",this.keyPress)}},void 0,!1,void 0,void 0,void 0),be={open:function(e){var t=Object.assign({programmatic:!0},e);return new(("undefined"!=typeof window&&window.Vue?window.Vue:ee.a).extend(ye))({el:document.createElement("div"),propsData:t})}},we={install:function(e){l(e,ye),c(e,"loading",be)}};r(we);var _e=we;var ke=s({render:function(){var e=this.$createElement;return(this._self._c||e)("div",{staticClass:"menu"},[this._t("default")],2)},staticRenderFns:[]},void 0,{name:"BMenu"},void 0,!1,void 0,void 0,void 0);var Ce=s({},void 0,{name:"BMenuList",functional:!0,props:{label:String,icon:String,iconPack:String},render:function(e,t){var n=null,i=t.slots();(t.props.label||i.label)&&(n=e("p",{attrs:{class:"menu-label"}},t.props.label?t.props.icon?[e("b-icon",{props:{icon:t.props.icon,pack:t.props.iconPack,size:"is-small"}}),e("span",{},t.props.label)]:t.props.label:i.label));var a=e("ul",{attrs:{class:"menu-list"}},i.default);return n?[n,a]:a}},void 0,void 0,void 0,void 0,void 0);var Se=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("li",[n(e.tag,e._b({tag:"component",class:{"is-active":e.newActive,"is-disabled":e.disabled},on:{click:function(t){e.onClick(t)}}},"component",e.$attrs,!1),[e.icon?n("b-icon",{attrs:{icon:e.icon,pack:e.iconPack,size:"is-small"}}):e._e(),e._v(" "),e.label?n("span",[e._v(e._s(e.label))]):e._t("label",null,{expanded:e.newExpanded,active:e.newActive})],2),e._v(" "),e.$slots.default?[n("transition",{attrs:{name:e.animation}},[n("ul",{directives:[{name:"show",rawName:"v-show",value:e.newExpanded,expression:"newExpanded"}]},[e._t("default")],2)])]:e._e()],2)},staticRenderFns:[]},void 0,{name:"BMenuItem",components:d({},y.name,y),inheritAttrs:!1,props:{label:String,active:Boolean,expanded:Boolean,disabled:Boolean,iconPack:String,icon:String,animation:{type:String,default:"fade"},tag:{type:String,default:"a",validator:function(e){return["a","router-link","nuxt-link","n-link","NuxtLink","NLink"].indexOf(e)>=0}}},data:function(){return{newActive:this.active,newExpanded:this.expanded}},watch:{active:function(e){this.newActive=e},expanded:function(e){this.newExpanded=e}},methods:{onClick:function(e){this.disabled||(this.reset(this.$parent),this.newExpanded=!0,this.$emit("update:expanded",this.newActive),this.newActive=!0,this.$emit("update:active",this.newActive),this.$emit("click",e))},reset:function(e){var t=this;e.$children.filter(function(e){return e.name===t.name}).forEach(function(e){e!==t&&(t.reset(e),e.newExpanded=!1,e.$emit("update:expanded",e.newActive),e.newActive=!1,e.$emit("update:active",e.newActive))})}}},void 0,!1,void 0,void 0,void 0),xe={install:function(e){l(e,ke),l(e,Ce),l(e,Se)}};r(xe);var De=xe,$e={components:d({},y.name,y),props:{active:{type:Boolean,default:!0},title:String,closable:{type:Boolean,default:!0},message:String,type:String,hasIcon:Boolean,size:String,iconPack:String,iconSize:String,autoClose:{type:Boolean,default:!1},duration:{type:Number,default:2e3}},data:function(){return{isActive:this.active}},watch:{active:function(e){this.isActive=e},isActive:function(e){e?this.setAutoClose():this.timer&&clearTimeout(this.timer)}},computed:{icon:function(){switch(this.type){case"is-info":return"information";case"is-success":return"check-circle";case"is-warning":return"alert";case"is-danger":return"alert-circle";default:return null}}},methods:{close:function(){this.isActive=!1,this.$emit("close"),this.$emit("update:active",!1)},setAutoClose:function(){var e=this;this.autoClose&&(this.timer=setTimeout(function(){e.isActive&&e.close()},this.duration))}},mounted:function(){this.setAutoClose()}};var Ae=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("transition",{attrs:{name:"fade"}},[e.isActive?n("article",{staticClass:"message",class:[e.type,e.size]},[e.title?n("header",{staticClass:"message-header"},[n("p",[e._v(e._s(e.title))]),e._v(" "),e.closable?n("button",{staticClass:"delete",attrs:{type:"button","aria-label":e.ariaCloseLabel},on:{click:e.close}}):e._e()]):e._e(),e._v(" "),n("section",{staticClass:"message-body"},[n("div",{staticClass:"media"},[e.icon&&e.hasIcon?n("div",{staticClass:"media-left"},[n("b-icon",{class:e.type,attrs:{icon:e.icon,pack:e.iconPack,both:"",size:e.newIconSize}})],1):e._e(),e._v(" "),n("div",{staticClass:"media-content"},[e._t("default")],2)])])]):e._e()])},staticRenderFns:[]},void 0,{name:"BMessage",mixins:[$e],props:{ariaCloseLabel:String},data:function(){return{newIconSize:this.iconSize||this.size||"is-large"}}},void 0,!1,void 0,void 0,void 0),Te={install:function(e){l(e,Ae)}};r(Te);var Oe=Te,Pe={open:function(e){var t,n;"string"==typeof e&&(t=e);var i={programmatic:!0,content:t};e.parent&&(n=e.parent,delete e.parent);var a=Object.assign(i,e);return new(("undefined"!=typeof window&&window.Vue?window.Vue:ee.a).extend(te))({parent:n,el:document.createElement("div"),propsData:a})}},Me={install:function(e){l(e,te),c(e,"modal",Pe)}};r(Me);var Ve=Me,Be={props:{type:{type:String,default:"is-dark"},message:String,duration:Number,queue:{type:Boolean,default:void 0},position:{type:String,default:"is-top",validator:function(e){return["is-top-right","is-top","is-top-left","is-bottom-right","is-bottom","is-bottom-left"].indexOf(e)>-1}},container:String},data:function(){return{isActive:!1,parentTop:null,parentBottom:null,newContainer:this.container||a.defaultContainerElement}},computed:{correctParent:function(){switch(this.position){case"is-top-right":case"is-top":case"is-top-left":return this.parentTop;case"is-bottom-right":case"is-bottom":case"is-bottom-left":return this.parentBottom}},transition:function(){switch(this.position){case"is-top-right":case"is-top":case"is-top-left":return{enter:"fadeInDown",leave:"fadeOut"};case"is-bottom-right":case"is-bottom":case"is-bottom-left":return{enter:"fadeInUp",leave:"fadeOut"}}}},methods:{shouldQueue:function(){return!!(void 0!==this.queue?this.queue:a.defaultNoticeQueue)&&(this.parentTop.childElementCount>0||this.parentBottom.childElementCount>0)},close:function(){var e=this;clearTimeout(this.timer),this.isActive=!1,setTimeout(function(){e.$destroy(),m(e.$el)},150)},showNotice:function(){var e=this;this.shouldQueue()?setTimeout(function(){return e.showNotice()},250):(this.correctParent.insertAdjacentElement("afterbegin",this.$el),this.isActive=!0,this.indefinite||(this.timer=setTimeout(function(){return e.close()},this.newDuration)))},setupContainer:function(){if(this.parentTop=document.querySelector(".notices.is-top"),this.parentBottom=document.querySelector(".notices.is-bottom"),!this.parentTop||!this.parentBottom){this.parentTop||(this.parentTop=document.createElement("div"),this.parentTop.className="notices is-top"),this.parentBottom||(this.parentBottom=document.createElement("div"),this.parentBottom.className="notices is-bottom");var e=document.querySelector(this.newContainer)||document.body;e.appendChild(this.parentTop),e.appendChild(this.parentBottom),this.newContainer&&(this.parentTop.classList.add("has-custom-container"),this.parentBottom.classList.add("has-custom-container"))}}},beforeMount:function(){this.setupContainer()},mounted:function(){this.showNotice()}};var Ie=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("transition",{attrs:{name:"fade"}},[n("article",{directives:[{name:"show",rawName:"v-show",value:e.isActive,expression:"isActive"}],staticClass:"notification",class:[e.type,e.position]},[e.closable?n("button",{staticClass:"delete",attrs:{type:"button","aria-label":e.ariaCloseLabel},on:{click:e.close}}):e._e(),e._v(" "),n("div",{staticClass:"media"},[e.icon&&e.hasIcon?n("div",{staticClass:"media-left"},[n("b-icon",{attrs:{icon:e.icon,pack:e.iconPack,both:"",size:"is-large","aria-hidden":""}})],1):e._e(),e._v(" "),n("div",{staticClass:"media-content"},[e.message?n("p",{staticClass:"text",domProps:{innerHTML:e._s(e.message)}}):e._t("default")],2)])])])},staticRenderFns:[]},void 0,{name:"BNotification",mixins:[$e],props:{position:String,ariaCloseLabel:String}},void 0,!1,void 0,void 0,void 0);var Fe=s({render:function(){var e=this.$createElement;return(this._self._c||e)("b-notification",this._b({on:{close:this.close}},"b-notification",this.$options.propsData,!1))},staticRenderFns:[]},void 0,{name:"BNotificationNotice",mixins:[Be],props:{indefinite:{type:Boolean,default:!1}},data:function(){return{newDuration:this.duration||a.defaultNotificationDuration}}},void 0,!1,void 0,void 0,void 0),Ne={open:function(e){var t,n;"string"==typeof e&&(t=e);var i={message:t,position:a.defaultNotificationPosition||"is-top-right"};e.parent&&(n=e.parent,delete e.parent);var o=Object.assign(i,"string"==typeof e?{}:e);return new(("undefined"!=typeof window&&window.Vue?window.Vue:ee.a).extend(Fe))({parent:n,el:document.createElement("div"),propsData:o})}},Ee={install:function(e){l(e,Ie),c(e,"notification",Ne)}};r(Ee);var Re=Ee;var Le=s({render:function(){var e=this.$createElement,t=this._self._c||e;return t("a",{staticClass:"navbar-burger burger",class:{"is-active":this.isOpened},attrs:{role:"button","aria-label":"menu","aria-expanded":this.isOpened}},[t("span",{attrs:{"aria-hidden":"true"}}),this._v(" "),t("span",{attrs:{"aria-hidden":"true"}}),this._v(" "),t("span",{attrs:{"aria-hidden":"true"}})])},staticRenderFns:[]},void 0,{name:"NavbarBurger",props:{isOpened:{type:Boolean,default:!1}}},void 0,!1,void 0,void 0,void 0);var je=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("nav",{staticClass:"navbar",class:e.computedClasses,attrs:{role:"navigation","aria-label":"main navigation"}},[n("div",{staticClass:"navbar-brand"},[e._t("brand"),e._v(" "),e._t("burger",[n("navbar-burger",{attrs:{"is-opened":e.isOpened},nativeOn:{click:function(t){e.toggleActive(t)}}})],null,{isOpened:e.isOpened,toggleActive:e.toggleActive})],2),e._v(" "),n("div",{staticClass:"navbar-menu",class:{"is-active":e.isOpened}},[n("div",{staticClass:"navbar-start"},[e._t("start")],2),e._v(" "),n("div",{staticClass:"navbar-end"},[e._t("end")],2)])])},staticRenderFns:[]},void 0,{name:"BNavbar",components:{NavbarBurger:Le},props:{type:[String,Object],transparent:{type:Boolean,default:!1},fixedTop:{type:Boolean,default:!1},fixedBottom:{type:Boolean,default:!1},isActive:{type:Boolean,default:!1}},data:function(){return{internalIsActive:this.isActive}},computed:{isOpened:function(){return this.internalIsActive},computedClasses:function(){return[this.type,d({},"is-fixed-top",this.fixedTop),d({},"is-fixed-bottom",this.fixedBottom)]}},watch:{isActive:{handler:function(e){this.internalIsActive=e},immediate:!0},fixedTop:{handler:function(e){if(this.checkIfFixedPropertiesAreColliding(),e)return this.setBodyClass("is-fixed-top");this.removeBodyClass("is-fixed-top")},immediate:!0},fixedBottom:{handler:function(e){if(this.checkIfFixedPropertiesAreColliding(),e)return this.setBodyClass("is-fixed-bottom");this.removeBodyClass("is-fixed-bottom")},immediate:!0}},methods:{toggleActive:function(){this.internalIsActive=!this.internalIsActive,this.$emit("update:isActive",this.internalIsActive)},setBodyClass:function(e){"undefined"!=typeof window&&document.body.classList.add(e)},removeBodyClass:function(e){"undefined"!=typeof window&&document.body.classList.remove(e)},checkIfFixedPropertiesAreColliding:function(){if(this.fixedTop&&this.fixedBottom)throw new Error("You should choose if the BNavbar is fixed bottom or fixed top, but not both")}},beforeDestroy:function(){this.removeBodyClass("is-fixed-bottom"),this.removeBodyClass("is-fixed-top")}},void 0,!1,void 0,void 0,void 0);var He=s({render:function(){var e=this.$createElement;return(this._self._c||e)(this.tag,this._b({tag:"component",staticClass:"navbar-item"},"component",this.$attrs,!1),[this._t("default")],2)},staticRenderFns:[]},void 0,{name:"BNavbarItem",props:{tag:{type:String,default:"a"}}},void 0,!1,void 0,void 0,void 0),ze={install:function(e){l(e,je),l(e,He)}};r(ze);var Ye,qe=ze;var We=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"b-numberinput field",class:e.fieldClasses},[n("p",{staticClass:"control",on:{mouseup:function(t){e.onStopLongPress(!1)},mouseleave:function(t){e.onStopLongPress(!1)},touchend:function(t){e.onStopLongPress(!1)},touchcancel:function(t){e.onStopLongPress(!1)}}},[n("button",{staticClass:"button",class:e.buttonClasses,attrs:{type:"button",disabled:e.disabled||e.disabledMin},on:{mousedown:function(t){e.onStartLongPress(t,!1)},touchstart:function(t){t.preventDefault(),e.onStartLongPress(t,!1)},click:function(t){e.onControlClick(t,!1)}}},[n("b-icon",{attrs:{icon:"minus",pack:e.iconPack,size:e.iconSize}})],1)]),e._v(" "),n("b-input",e._b({ref:"input",attrs:{type:"number",step:e.newStep,max:e.max,min:e.min,size:e.size,disabled:e.disabled,readonly:!e.editable,loading:e.loading,rounded:e.rounded,icon:e.icon,"icon-pack":e.iconPack,autocomplete:e.autocomplete,expanded:e.expanded,"use-html5-validation":e.useHtml5Validation},on:{focus:function(t){e.$emit("focus",t)},blur:function(t){e.$emit("blur",t)}},model:{value:e.computedValue,callback:function(t){e.computedValue=e._n(t)},expression:"computedValue"}},"b-input",e.$attrs,!1)),e._v(" "),n("p",{staticClass:"control",on:{mouseup:function(t){e.onStopLongPress(!0)},mouseleave:function(t){e.onStopLongPress(!0)},touchend:function(t){e.onStopLongPress(!0)},touchcancel:function(t){e.onStopLongPress(!0)}}},[n("button",{staticClass:"button",class:e.buttonClasses,attrs:{type:"button",disabled:e.disabled||e.disabledMax},on:{mousedown:function(t){e.onStartLongPress(t,!0)},touchstart:function(t){t.preventDefault(),e.onStartLongPress(t,!0)},click:function(t){e.onControlClick(t,!0)}}},[n("b-icon",{attrs:{icon:"plus",pack:e.iconPack,size:e.iconSize}})],1)])],1)},staticRenderFns:[]},void 0,{name:"BNumberinput",components:(Ye={},d(Ye,y.name,y),d(Ye,b.name,b),Ye),mixins:[g],inheritAttrs:!1,props:{value:Number,min:[Number,String],max:[Number,String],step:[Number,String],disabled:Boolean,type:{type:String,default:"is-primary"},editable:{type:Boolean,default:!0},controlsRounded:{type:Boolean,default:!1},controlsPosition:String},data:function(){return{newValue:isNaN(this.value)?parseFloat(this.min)||0:this.value,newStep:this.step||1,_elementRef:"input"}},computed:{computedValue:{get:function(){return this.newValue},set:function(e){var t=e;""===e&&(t=parseFloat(this.min)||0),this.newValue=t,this.$emit("input",t),!this.isValid&&this.$refs.input.checkHtml5Validity()}},fieldClasses:function(){return[{"has-addons":"compact"===this.controlsPosition},{"is-grouped":"compact"!==this.controlsPosition}]},buttonClasses:function(){return[this.type,this.size,{"is-rounded":this.controlsRounded}]},minNumber:function(){return"string"==typeof this.min?parseFloat(this.min):this.min},maxNumber:function(){return"string"==typeof this.max?parseFloat(this.max):this.max},stepNumber:function(){return"string"==typeof this.newStep?parseFloat(this.newStep):this.newStep},disabledMin:function(){return this.computedValue-this.stepNumber<this.minNumber},disabledMax:function(){return this.computedValue+this.stepNumber>this.maxNumber},stepDecimals:function(){var e=this.stepNumber.toString(),t=e.indexOf(".");return t>=0?e.substring(t+1).length:0}},watch:{value:function(e){this.newValue=e}},methods:{decrement:function(){if(void 0===this.minNumber||this.computedValue-this.stepNumber>=this.minNumber){var e=this.computedValue-this.stepNumber;this.computedValue=parseFloat(e.toFixed(this.stepDecimals))}},increment:function(){if(void 0===this.maxNumber||this.computedValue+this.stepNumber<=this.maxNumber){var e=this.computedValue+this.stepNumber;this.computedValue=parseFloat(e.toFixed(this.stepDecimals))}},onControlClick:function(e,t){0===e.detail&&"click"!==e.type&&(t?this.increment():this.decrement())},onStartLongPress:function(e,t){var n=this;0!==e.button&&"touchstart"!==e.type||(this._$intervalTime=new Date,clearInterval(this._$intervalRef),this._$intervalRef=setInterval(function(){t?n.increment():n.decrement()},250))},onStopLongPress:function(e){this._$intervalRef&&(new Date-this._$intervalTime<250&&(e?this.increment():this.decrement()),clearInterval(this._$intervalRef),this._$intervalRef=null)}}},void 0,!1,void 0,void 0,void 0),Ue={install:function(e){l(e,We)}};r(Ue);var Ke=Ue;var Xe=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("nav",{staticClass:"pagination",class:e.rootClasses},[n("a",{staticClass:"pagination-previous",attrs:{role:"button",href:"#",disabled:!e.hasPrev,"aria-label":e.ariaPreviousLabel},on:{click:function(t){t.preventDefault(),e.prev(t)}}},[n("b-icon",{attrs:{icon:"chevron-left",pack:e.iconPack,both:"","aria-hidden":"true"}})],1),e._v(" "),n("a",{staticClass:"pagination-next",attrs:{role:"button",href:"#",disabled:!e.hasNext,"aria-label":e.ariaNextLabel},on:{click:function(t){t.preventDefault(),e.next(t)}}},[n("b-icon",{attrs:{icon:"chevron-right",pack:e.iconPack,both:"","aria-hidden":"true"}})],1),e._v(" "),e.simple?e._e():n("ul",{staticClass:"pagination-list"},[e.hasFirst?n("li",[n("a",{staticClass:"pagination-link",attrs:{role:"button",href:"#","aria-label":e.getAriaPageLabel(1,!1)},on:{click:function(t){t.preventDefault(),e.first(t)}}},[e._v("\n                1\n            ")])]):e._e(),e._v(" "),e.hasFirstEllipsis?n("li",[n("span",{staticClass:"pagination-ellipsis"},[e._v("…")])]):e._e(),e._v(" "),e._l(e.pagesInRange,function(t){return n("li",{key:t.number},[n("a",{staticClass:"pagination-link",class:{"is-current":t.isCurrent},attrs:{role:"button",href:"#","aria-label":e.getAriaPageLabel(t.number,t.isCurrent),"aria-current":t.isCurrent},on:{click:function(e){e.preventDefault(),t.click(e)}}},[e._v("\n                "+e._s(t.number)+"\n            ")])])}),e._v(" "),e.hasLastEllipsis?n("li",[n("span",{staticClass:"pagination-ellipsis"},[e._v("…")])]):e._e(),e._v(" "),e.hasLast?n("li",[n("a",{staticClass:"pagination-link",attrs:{role:"button",href:"#","aria-label":e.getAriaPageLabel(e.pageCount,!1)},on:{click:function(t){t.preventDefault(),e.last(t)}}},[e._v("\n                "+e._s(e.pageCount)+"\n            ")])]):e._e()],2),e._v(" "),e.simple?n("small",{staticClass:"info"},[1==e.perPage?[e._v("\n            "+e._s(e.firstItem)+" / "+e._s(e.total)+"\n        ")]:[e._v("\n            "+e._s(e.firstItem)+"-"+e._s(Math.min(e.current*e.perPage,e.total))+" / "+e._s(e.total)+"\n        ")]],2):e._e()])},staticRenderFns:[]},void 0,{name:"BPagination",components:d({},y.name,y),props:{total:[Number,String],perPage:{type:[Number,String],default:20},current:{type:[Number,String],default:1},rangeBefore:{type:[Number,String],default:1},rangeAfter:{type:[Number,String],default:1},size:String,simple:Boolean,rounded:Boolean,order:String,iconPack:String,ariaNextLabel:String,ariaPreviousLabel:String,ariaPageLabel:String,ariaCurrentLabel:String},computed:{rootClasses:function(){return[this.order,this.size,{"is-simple":this.simple,"is-rounded":this.rounded}]},beforeCurrent:function(){return parseInt(this.rangeBefore)},afterCurrent:function(){return parseInt(this.rangeAfter)},pageCount:function(){return Math.ceil(this.total/this.perPage)},firstItem:function(){var e=this.current*this.perPage-this.perPage+1;return e>=0?e:0},hasPrev:function(){return this.current>1},hasFirst:function(){return this.current>=2+this.beforeCurrent},hasFirstEllipsis:function(){return this.current>=this.beforeCurrent+4},hasLast:function(){return this.current<=this.pageCount-(1+this.afterCurrent)},hasLastEllipsis:function(){return this.current<this.pageCount-(2+this.afterCurrent)},hasNext:function(){return this.current<this.pageCount},pagesInRange:function(){var e=this;if(!this.simple){var t=Math.max(1,this.current-this.beforeCurrent);t-1==2&&t--;var n=Math.min(this.current+this.afterCurrent,this.pageCount);this.pageCount-n==2&&n++;for(var i=[],a=function(t){i.push({number:t,isCurrent:e.current===t,click:function(n){e.current!==t&&(e.$emit("change",t),e.$emit("update:current",t),e.$nextTick(function(){return n.target.focus()}))}})},o=t;o<=n;o++)a(o);return i}}},watch:{pageCount:function(e){this.current>e&&this.last()}},methods:{prev:function(){this.hasPrev&&(this.$emit("change",this.current-1),this.$emit("update:current",this.current-1))},first:function(){this.$emit("change",1),this.$emit("update:current",1)},last:function(){this.$emit("change",this.pageCount),this.$emit("update:current",this.pageCount)},next:function(){this.hasNext&&(this.$emit("change",this.current+1),this.$emit("update:current",this.current+1))},getAriaPageLabel:function(e,t){return!this.ariaPageLabel||t&&this.ariaCurrentLabel?this.ariaPageLabel&&t&&this.ariaCurrentLabel?this.ariaCurrentLabel+", "+this.ariaPageLabel+" "+e+".":null:this.ariaPageLabel+" "+e+"."}}},void 0,!1,void 0,void 0,void 0),Ge={install:function(e){l(e,Xe)}};r(Ge);var Je=Ge;var Qe=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"progress-wrapper"},[n("progress",{ref:"progress",staticClass:"progress",class:e.newType,attrs:{max:e.max}},[e._v(e._s(e.newValue))]),e._v(" "),e.showValue?n("p",{staticClass:"progress-value has-text-white"},[e._t("default",[e._v(e._s(e.newValue))])],2):e._e()])},staticRenderFns:[]},void 0,{name:"BProgress",props:{type:{type:[String,Object],default:"is-darkgrey"},size:String,value:{type:Number,default:void 0},max:{type:Number,default:100},showValue:{type:Boolean,default:!1},format:{type:String,default:"raw",validator:function(e){return["raw","percent"].indexOf(e)>=0}},precision:{type:Number,default:2},keepTrailingZeroes:{type:Boolean,default:!1}},computed:{isIndeterminate:function(){return void 0===this.value||null===this.value},newType:function(){return[this.size,this.type]},newValue:function(){if(void 0!==this.value&&null!==this.value&&!isNaN(this.value)){if("percent"===this.format){var e=this.toFixed(this.value*this.max/100);return"".concat(e,"%")}return this.toFixed(this.value)}}},watch:{value:function(e){this.setValue(e)}},methods:{setValue:function(e){this.isIndeterminate?this.$refs.progress.removeAttribute("value"):this.$refs.progress.setAttribute("value",e)},toFixed:function(e){var t=(+"".concat(Math.round(+"".concat(e,"e").concat(this.precision)),"e").concat(-this.precision)).toFixed(this.precision);return this.keepTrailingZeroes||(t=t.replace(/\.?0+$/,"")),t}},mounted:function(){this.setValue(this.value)}},void 0,!1,void 0,void 0,void 0),Ze={install:function(e){l(e,Qe)}};r(Ze);var et=Ze;var tt=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("label",{ref:"label",staticClass:"b-radio radio",class:[e.size,{"is-disabled":e.disabled}],attrs:{disabled:e.disabled},on:{click:e.focus,keydown:function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;t.preventDefault(),e.$refs.label.click()}}},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.computedValue,expression:"computedValue"}],ref:"input",attrs:{type:"radio",disabled:e.disabled,required:e.required,name:e.name},domProps:{value:e.nativeValue,checked:e._q(e.computedValue,e.nativeValue)},on:{click:function(e){e.stopPropagation()},change:function(t){e.computedValue=e.nativeValue}}}),e._v(" "),n("span",{staticClass:"check",class:e.type}),e._v(" "),n("span",{staticClass:"control-label"},[e._t("default")],2)])},staticRenderFns:[]},void 0,{name:"BRadio",props:{value:[String,Number,Boolean,Function,Object,Array],nativeValue:[String,Number,Boolean,Function,Object,Array],type:String,disabled:Boolean,required:Boolean,name:String,size:String},data:function(){return{newValue:this.value}},computed:{computedValue:{get:function(){return this.newValue},set:function(e){this.newValue=e,this.$emit("input",e)}}},watch:{value:function(e){this.newValue=e}},methods:{focus:function(){this.$refs.input.focus()}}},void 0,!1,void 0,void 0,void 0);var nt=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"control"},[n("label",{ref:"label",staticClass:"b-radio radio button",class:[e.newValue===e.nativeValue?e.type:null,e.size,{"is-disabled":e.disabled,"is-focused":e.isFocused}],attrs:{disabled:e.disabled},on:{click:e.focus,keydown:function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;t.preventDefault(),e.$refs.label.click()}}},[e._t("default"),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.computedValue,expression:"computedValue"}],ref:"input",attrs:{type:"radio",disabled:e.disabled,required:e.required,name:e.name},domProps:{value:e.nativeValue,checked:e._q(e.computedValue,e.nativeValue)},on:{click:function(e){e.stopPropagation()},focus:function(t){e.isFocused=!0},blur:function(t){e.isFocused=!1},change:function(t){e.computedValue=e.nativeValue}}})],2)])},staticRenderFns:[]},void 0,{name:"BRadioButton",props:{value:[String,Number,Boolean,Function,Object,Array],nativeValue:[String,Number,Boolean,Function,Object,Array],type:{type:String,default:"is-primary"},disabled:Boolean,required:Boolean,name:String,size:String},data:function(){return{newValue:this.value,isFocused:!1}},computed:{computedValue:{get:function(){return this.newValue},set:function(e){this.newValue=e,this.$emit("input",e)}}},watch:{value:function(e){this.newValue=e}},methods:{focus:function(){this.$refs.input.focus()}}},void 0,!1,void 0,void 0,void 0),it={install:function(e){l(e,tt),l(e,nt)}};r(it);var at=it,ot={install:function(e){l(e,q)}};r(ot);var st=ot;var rt=s({render:function(){var e=this,t=e.$createElement;return(e._self._c||t)("span",{class:[e.newType,e.position,e.size,{"b-tooltip":e.active,"is-square":e.square,"is-animated":e.newAnimated,"is-always":e.always,"is-multiline":e.multilined,"is-dashed":e.dashed}],style:{"transition-delay":e.newDelay+"ms"},attrs:{"data-label":e.label}},[e._t("default")],2)},staticRenderFns:[]},void 0,{name:"BTooltip",props:{active:{type:Boolean,default:!0},type:String,label:String,position:{type:String,default:"is-top",validator:function(e){return["is-top","is-bottom","is-left","is-right"].indexOf(e)>-1}},always:Boolean,animated:Boolean,square:Boolean,dashed:Boolean,multilined:Boolean,size:{type:String,default:"is-medium"},delay:Number},computed:{newType:function(){return this.type||a.defaultTooltipType},newAnimated:function(){return this.animated||a.defaultTooltipAnimated},newDelay:function(){return this.delay||a.defaultTooltipDelay}}},void 0,!1,void 0,void 0,void 0);var lt=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"b-slider-thumb-wrapper",class:{"is-dragging":e.dragging},style:e.wrapperStyle},[n("b-tooltip",{attrs:{label:e.value.toString(),type:e.type,always:e.dragging||e.isFocused,active:!e.disabled&&e.tooltip}},[n("div",e._b({staticClass:"b-slider-thumb",attrs:{tabindex:!e.disabled&&0},on:{mousedown:e.onButtonDown,touchstart:e.onButtonDown,focus:e.onFocus,blur:e.onBlur,keydown:[function(t){return"button"in t||!e._k(t.keyCode,"left",37,t.key)?"button"in t&&0!==t.button?null:(t.preventDefault(),void e.onLeftKeyDown(t)):null},function(t){return"button"in t||!e._k(t.keyCode,"right",39,t.key)?"button"in t&&2!==t.button?null:(t.preventDefault(),void e.onRightKeyDown(t)):null},function(t){if(!("button"in t)&&e._k(t.keyCode,"down",40,t.key))return null;t.preventDefault(),e.onLeftKeyDown(t)},function(t){if(!("button"in t)&&e._k(t.keyCode,"up",38,t.key))return null;t.preventDefault(),e.onRightKeyDown(t)},function(t){if(!("button"in t)&&e._k(t.keyCode,"home",void 0,t.key))return null;t.preventDefault(),e.onHomeKeyDown(t)},function(t){if(!("button"in t)&&e._k(t.keyCode,"end",void 0,t.key))return null;t.preventDefault(),e.onEndKeyDown(t)}]}},"div",e.$attrs,!1))])],1)},staticRenderFns:[]},void 0,{name:"BSliderThumb",components:d({},rt.name,rt),inheritAttrs:!1,props:{value:{type:Number,default:0},type:{type:String,default:""},tooltip:{type:Boolean,default:!0}},data:function(){return{isFocused:!1,dragging:!1,startX:0,startPosition:0,newPosition:null,oldValue:this.value}},computed:{disabled:function(){return this.$parent.disabled},max:function(){return this.$parent.max},min:function(){return this.$parent.min},step:function(){return this.$parent.step},precision:function(){return this.$parent.precision},currentPosition:function(){return"".concat((this.value-this.min)/(this.max-this.min)*100,"%")},wrapperStyle:function(){return{left:this.currentPosition}}},watch:{dragging:function(e){this.$parent.dragging=e}},methods:{onFocus:function(){this.isFocused=!0},onBlur:function(){this.isFocused=!1},onButtonDown:function(e){this.disabled||(e.preventDefault(),this.onDragStart(e),"undefined"!=typeof window&&(document.addEventListener("mousemove",this.onDragging),document.addEventListener("touchmove",this.onDragging),document.addEventListener("mouseup",this.onDragEnd),document.addEventListener("touchend",this.onDragEnd),document.addEventListener("contextmenu",this.onDragEnd)))},onLeftKeyDown:function(){this.disabled||this.value===this.min||(this.newPosition=parseFloat(this.currentPosition)-this.step/(this.max-this.min)*100,this.setPosition(this.newPosition),this.$parent.emitChange())},onRightKeyDown:function(){this.disabled||this.value===this.max||(this.newPosition=parseFloat(this.currentPosition)+this.step/(this.max-this.min)*100,this.setPosition(this.newPosition),this.$parent.emitChange())},onHomeKeyDown:function(){this.disabled||this.value===this.min||(this.newPosition=0,this.setPosition(this.newPosition),this.$parent.emitChange())},onEndKeyDown:function(){this.disabled||this.value===this.max||(this.newPosition=100,this.setPosition(this.newPosition),this.$parent.emitChange())},onDragStart:function(e){this.dragging=!0,"touchstart"===e.type&&(e.clientX=e.touches[0].clientX),this.startX=e.clientX,this.startPosition=parseFloat(this.currentPosition),this.newPosition=this.startPosition},onDragging:function(e){if(this.dragging){"touchmove"===e.type&&(e.clientX=e.touches[0].clientX);var t=(e.clientX-this.startX)/this.$parent.sliderSize*100;this.newPosition=this.startPosition+t,this.setPosition(this.newPosition)}},onDragEnd:function(){var e=this;this.value!==this.oldValue&&this.$parent.emitChange(),setTimeout(function(){e.dragging=!1,e.setPosition(e.newPosition)}),"undefined"!=typeof window&&(document.removeEventListener("mousemove",this.onDragging),document.removeEventListener("touchmove",this.onDragging),document.removeEventListener("mouseup",this.onDragEnd),document.removeEventListener("touchend",this.onDragEnd),document.removeEventListener("contextmenu",this.onDragEnd))},setPosition:function(e){if(null!==e&&!isNaN(e)){e<0?e=0:e>100&&(e=100);var t=100/((this.max-this.min)/this.step),n=Math.round(e/t)*t/100*(this.max-this.min)+this.min;n=parseFloat(n.toFixed(this.precision)),this.$emit("input",n),this.dragging||n===this.oldValue||(this.oldValue=n)}}}},void 0,!1,void 0,void 0,void 0);var ct,ut=s({render:function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"b-slider-tick",class:{"is-tick-hidden":this.hidden},style:this.getTickStyle(this.position)},[this.$slots.default?t("span",{staticClass:"b-slider-tick-label"},[this._t("default")],2):this._e()])},staticRenderFns:[]},void 0,{name:"BSliderTick",props:{value:{type:Number,default:0}},computed:{position:function(){var e=(this.value-this.$parent.min)/(this.$parent.max-this.$parent.min)*100;return e>=0&&e<=100?e:0},hidden:function(){return this.value===this.$parent.min||this.value===this.$parent.max}},methods:{getTickStyle:function(e){return{left:e+"%"}}},created:function(){if(!this.$parent.$data._isSlider)throw this.$destroy(),new Error("You should wrap bSliderTick on a bSlider")}},void 0,!1,void 0,void 0,void 0);var dt=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"b-slider",class:[e.size,e.type,e.rootClasses]},[n("div",{ref:"slider",staticClass:"b-slider-track",on:{click:e.onSliderClick}},[n("div",{staticClass:"b-slider-fill",style:e.barStyle}),e._v(" "),e.ticks?e._l(e.tickValues,function(e,t){return n("b-slider-tick",{key:t,attrs:{value:e}})}):e._e(),e._v(" "),e._t("default"),e._v(" "),n("b-slider-thumb",{ref:"button1",attrs:{type:e.newTooltipType,tooltip:e.tooltip,role:"slider","aria-valuenow":e.value1,"aria-valuemin":e.min,"aria-valuemax":e.max,"aria-orientation":"horizontal","aria-label":Array.isArray(e.ariaLabel)?e.ariaLabel[0]:e.ariaLabel,"aria-disabled":e.disabled},model:{value:e.value1,callback:function(t){e.value1=t},expression:"value1"}}),e._v(" "),e.isRange?n("b-slider-thumb",{ref:"button2",attrs:{type:e.newTooltipType,tooltip:e.tooltip,role:"slider","aria-valuenow":e.value2,"aria-valuemin":e.min,"aria-valuemax":e.max,"aria-orientation":"horizontal","aria-label":Array.isArray(e.ariaLabel)?e.ariaLabel[1]:"","aria-disabled":e.disabled},model:{value:e.value2,callback:function(t){e.value2=t},expression:"value2"}}):e._e()],2)])},staticRenderFns:[]},void 0,{name:"BSlider",components:(ct={},d(ct,lt.name,lt),d(ct,ut.name,ut),ct),props:{value:{type:[Number,Array],default:0},min:{type:Number,default:0},max:{type:Number,default:100},step:{type:Number,default:1},type:{type:String,default:"is-primary"},size:String,ticks:{type:Boolean,default:!1},tooltip:{type:Boolean,default:!0},tooltipType:String,rounded:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},ariaLabel:[String,Array]},data:function(){return{value1:null,value2:null,dragging:!1,isRange:!1,newTooltipType:this.tooltipType?this.tooltipType:this.type,_isSlider:!0}},computed:{tickValues:function(){if(!this.ticks||this.min>this.max||0===this.step)return[];for(var e=[],t=this.min+this.step;t<this.max;t+=this.step)e.push(t);return e},minValue:function(){return Math.min(this.value1,this.value2)},maxValue:function(){return Math.max(this.value1,this.value2)},barSize:function(){return this.isRange?"".concat(100*(this.maxValue-this.minValue)/(this.max-this.min),"%"):"".concat(100*(this.value1-this.min)/(this.max-this.min),"%")},barStart:function(){return this.isRange?"".concat(100*(this.minValue-this.min)/(this.max-this.min),"%"):"0%"},precision:function(){var e=[this.min,this.max,this.step].map(function(e){var t=(""+e).split(".")[1];return t?t.length:0});return Math.max.apply(Math,h(e))},barStyle:function(){return{width:this.barSize,left:this.barStart}},sliderSize:function(){return this.$refs.slider.clientWidth},rootClasses:function(){return{"is-rounded":this.rounded,"is-dragging":this.dragging,"is-disabled":this.disabled}}},watch:{value:function(e){this.setValues(e)},value1:function(e){this.isThumbReversed=this.value1>this.value2,this.isRange?this.$emit("input",[this.minValue,this.maxValue]):this.$emit("input",e)},value2:function(e){this.isThumbReversed=this.value1>this.value2,this.isRange&&this.$emit("input",[this.minValue,this.maxValue])},min:function(){this.setValues()},max:function(){this.setValues()}},methods:{setValues:function(e){if(!(this.min>this.max))if(Array.isArray(e)){this.isRange=!0;var t="number"!=typeof e[0]||isNaN(e[0])?this.min:Math.min(Math.max(this.min,e[0]),this.max),n="number"!=typeof e[1]||isNaN(e[1])?this.max:Math.max(Math.min(this.max,e[1]),this.min);this.value1=this.isThumbReversed?n:t,this.value2=this.isThumbReversed?t:n}else this.isRange=!1,this.value1=isNaN(e)?this.min:Math.min(this.max,Math.max(this.min,e))},onSliderClick:function(e){if(!this.disabled&&!this.dragging){var t=this.$refs.slider.getBoundingClientRect().left,n=(e.clientX-t)/this.sliderSize*100,i=this.min+n*(this.max-this.min)/100,a=Math.abs(i-this.value1);if(this.isRange){var o=Math.abs(i-this.value2);if(a<=o){if(a<this.step/2)return;this.$refs.button1.setPosition(n)}else{if(o<this.step/2)return;this.$refs.button2.setPosition(n)}}else{if(a<this.step/2)return;this.$refs.button1.setPosition(n)}this.emitChange()}},emitChange:function(){this.$emit("change",this.isRange?[this.minValue,this.maxValue]:this.value1)}},created:function(){this.setValues(this.value),this.isThumbReversed=!1}},void 0,!1,void 0,void 0,void 0),ht={install:function(e){l(e,dt),l(e,ut)}};r(ht);var ft=ht;var pt=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("transition",{attrs:{"enter-active-class":e.transition.enter,"leave-active-class":e.transition.leave}},[n("div",{directives:[{name:"show",rawName:"v-show",value:e.isActive,expression:"isActive"}],staticClass:"snackbar",class:[e.type,e.position]},[n("div",{staticClass:"text",domProps:{innerHTML:e._s(e.message)}}),e._v(" "),e.actionText?n("div",{staticClass:"action",class:e.type,on:{click:e.action}},[n("button",{staticClass:"button"},[e._v(e._s(e.actionText))])]):e._e()])])},staticRenderFns:[]},void 0,{name:"BSnackbar",mixins:[Be],props:{actionText:{type:String,default:"OK"},onAction:{type:Function,default:function(){}},indefinite:{type:Boolean,default:!1}},data:function(){return{newDuration:this.duration||a.defaultSnackbarDuration}},methods:{action:function(){this.onAction(),this.close()}}},void 0,!1,void 0,void 0,void 0),vt={open:function(e){var t,n;"string"==typeof e&&(t=e);var i={type:"is-success",position:a.defaultSnackbarPosition||"is-bottom-right",message:t};e.parent&&(n=e.parent,delete e.parent);var o=Object.assign(i,e);return new(("undefined"!=typeof window&&window.Vue?window.Vue:ee.a).extend(pt))({parent:n,el:document.createElement("div"),propsData:o})}},mt={install:function(e){c(e,"snackbar",vt)}};r(mt);var gt,yt=mt,bt={name:"BSlotComponent",props:{component:{type:Object,required:!0},name:{type:String,default:"default"},scoped:{type:Boolean},props:{type:Object},tag:{type:String,default:"div"},event:{type:String,default:"hook:updated"}},methods:{refresh:function(){this.$forceUpdate()},isVueComponent:function(){return this.component&&this.component._isVue}},created:function(){this.isVueComponent()&&this.component.$on(this.event,this.refresh)},beforeDestroy:function(){this.isVueComponent()&&this.component.$off(this.event,this.refresh)},render:function(e){if(this.isVueComponent())return e(this.tag,{},this.scoped?this.component.$scopedSlots[this.name](this.props):this.component.$slots[this.name])}};var wt=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"b-steps"},[n("nav",{staticClass:"steps",class:e.mainClasses},[n("ul",{staticClass:"step-items"},e._l(e.stepItems,function(t,i){return n("li",{directives:[{name:"show",rawName:"v-show",value:t.visible,expression:"stepItem.visible"}],key:i,staticClass:"step-item",class:[t.type||e.type,{"is-active":e.activeStep===i,"is-previous":e.activeStep>i}]},[n("a",{staticClass:"step-link",class:{"is-clickable":e.isItemClickable(t,i)},on:{click:function(n){e.isItemClickable(t,i)&&e.stepClick(i)}}},[n("div",{staticClass:"step-marker"},[t.icon?n("b-icon",{attrs:{icon:t.icon,pack:t.iconPack,size:e.size}}):e._e()],1),e._v(" "),n("div",{staticClass:"step-details"},[n("span",{staticClass:"step-title"},[e._v(e._s(t.label))])])])])}))]),e._v(" "),n("section",{staticClass:"step-content",class:{"is-transitioning":e.isTransitioning}},[e._t("default")],2),e._v(" "),e.hasNavigation?n("nav",{staticClass:"step-navigation"},[n("a",{staticClass:"pagination-previous",attrs:{role:"button",href:"#",disabled:!e.hasPrev,"aria-label":e.ariaPreviousLabel},on:{click:function(t){t.preventDefault(),e.prev(t)}}},[n("b-icon",{attrs:{icon:"chevron-left",pack:e.iconPack,both:"","aria-hidden":"true"}})],1),e._v(" "),n("a",{staticClass:"pagination-next",attrs:{role:"button",href:"#",disabled:!e.hasNext,"aria-label":e.ariaNextLabel},on:{click:function(t){t.preventDefault(),e.next(t)}}},[n("b-icon",{attrs:{icon:"chevron-right",pack:e.iconPack,both:"","aria-hidden":"true"}})],1)]):e._e()])},staticRenderFns:[]},void 0,{name:"BSteps",components:(gt={},d(gt,y.name,y),d(gt,bt.name,bt),gt),props:{value:Number,type:[String,Object],size:String,animated:{type:Boolean,default:!0},destroyOnHide:{type:Boolean,default:!1},iconPack:String,hasNavigation:{type:Boolean,default:!0},ariaNextLabel:String,ariaPreviousLabel:String},data:function(){return{activeStep:this.value||0,stepItems:[],contentHeight:0,isTransitioning:!1,_isSteps:!0}},computed:{mainClasses:function(){return[this.type,this.size]},reversedStepItems:function(){return this.stepItems.slice().reverse()},firstVisibleStepIndex:function(){return this.stepItems.findIndex(function(e,t){return e.visible})},hasPrev:function(){return this.firstVisibleStepIndex>=0&&this.activeStep>this.firstVisibleStepIndex},lastVisibleStepIndex:function(){var e=this.reversedStepItems.findIndex(function(e,t){return e.visible});return e>=0?this.stepItems.length-1-e:e},hasNext:function(){return this.lastVisibleStepIndex>=0&&this.activeStep<this.lastVisibleStepIndex}},watch:{value:function(e){this.changeStep(e)},stepItems:function(){this.activeStep<this.stepItems.length&&(this.stepItems[this.activeStep].isActive=!0)}},methods:{changeStep:function(e){this.activeStep!==e&&(this.activeStep<this.stepItems.length&&this.stepItems[this.activeStep].deactivate(this.activeStep,e),this.stepItems[e].activate(this.activeStep,e),this.activeStep=e,this.$emit("change",e))},isItemClickable:function(e,t){return void 0===e.clickable?this.activeStep>t:e.clickable},stepClick:function(e){this.$emit("input",e),this.changeStep(e)},prev:function(){var e=this;if(this.hasPrev){var t=this.reversedStepItems.findIndex(function(t,n){return e.stepItems.length-1-n<e.activeStep&&t.visible});t>=0&&(t=this.stepItems.length-1-t),this.$emit("input",t),this.changeStep(t)}},next:function(){var e=this;if(this.hasNext){var t=this.stepItems.findIndex(function(t,n){return n>e.activeStep&&t.visible});this.$emit("input",t),this.changeStep(t)}}},mounted:function(){this.activeStep<this.stepItems.length&&(this.stepItems[this.activeStep].isActive=!0)}},void 0,!1,void 0,void 0,void 0);var _t=s({},void 0,{name:"BStepItem",props:{label:String,type:String|Object,icon:String,iconPack:String,clickable:{type:Boolean,default:void 0},visible:{type:Boolean,default:!0}},data:function(){return{isActive:!1,transitionName:null}},methods:{activate:function(e,t){this.transitionName=t<e?"slide-next":"slide-prev",this.isActive=!0},deactivate:function(e,t){this.transitionName=t<e?"slide-next":"slide-prev",this.isActive=!1}},created:function(){if(!this.$parent.$data._isSteps)throw this.$destroy(),new Error("You should wrap bStepItem on a bSteps");this.$parent.stepItems.push(this)},beforeDestroy:function(){var e=this.$parent.stepItems.indexOf(this);e>=0&&this.$parent.stepItems.splice(e,1)},render:function(e){var t=this;if(!this.$parent.destroyOnHide||this.isActive&&this.visible){var n=e("div",{directives:[{name:"show",value:this.isActive&&this.visible}],attrs:{class:"step-item"}},this.$slots.default);return this.$parent.animated?e("transition",{props:{name:this.transitionName},on:{"before-enter":function(){t.$parent.isTransitioning=!0},"after-enter":function(){t.$parent.isTransitioning=!1}}},[n]):n}}},void 0,void 0,void 0,void 0,void 0),kt={install:function(e){l(e,wt),l(e,_t)}};r(kt);var Ct=kt;var St=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("label",{ref:"label",staticClass:"switch",class:e.newClass,attrs:{disabled:e.disabled},on:{click:e.focus,keydown:function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;t.preventDefault(),e.$refs.label.click()},mousedown:function(t){e.isMouseDown=!0},mouseup:function(t){e.isMouseDown=!1},mouseout:function(t){e.isMouseDown=!1},blur:function(t){e.isMouseDown=!1}}},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.computedValue,expression:"computedValue"}],ref:"input",attrs:{type:"checkbox",disabled:e.disabled,name:e.name,required:e.required,"true-value":e.trueValue,"false-value":e.falseValue},domProps:{value:e.nativeValue,checked:Array.isArray(e.computedValue)?e._i(e.computedValue,e.nativeValue)>-1:e._q(e.computedValue,e.trueValue)},on:{click:function(e){e.stopPropagation()},change:function(t){var n=e.computedValue,i=t.target,a=i.checked?e.trueValue:e.falseValue;if(Array.isArray(n)){var o=e.nativeValue,s=e._i(n,o);i.checked?s<0&&(e.computedValue=n.concat([o])):s>-1&&(e.computedValue=n.slice(0,s).concat(n.slice(s+1)))}else e.computedValue=a}}}),e._v(" "),n("span",{staticClass:"check",class:[{"is-elastic":e.isMouseDown&&!e.disabled},e.type]}),e._v(" "),n("span",{staticClass:"control-label"},[e._t("default")],2)])},staticRenderFns:[]},void 0,{name:"BSwitch",props:{value:[String,Number,Boolean,Function,Object,Array],nativeValue:[String,Number,Boolean,Function,Object,Array],disabled:Boolean,type:String,name:String,required:Boolean,size:String,trueValue:{type:[String,Number,Boolean,Function,Object,Array],default:!0},falseValue:{type:[String,Number,Boolean,Function,Object,Array],default:!1},rounded:{type:Boolean,default:!0},outlined:{type:Boolean,default:!1}},data:function(){return{newValue:this.value,isMouseDown:!1}},computed:{computedValue:{get:function(){return this.newValue},set:function(e){this.newValue=e,this.$emit("input",e)}},newClass:function(){return[this.size,{"is-disabled":this.disabled},{"is-rounded":this.rounded},{"is-outlined":this.outlined}]}},watch:{value:function(e){this.newValue=e}},methods:{focus:function(){this.$refs.input.focus()}}},void 0,!1,void 0,void 0,void 0),xt={install:function(e){l(e,St)}};r(xt);var Dt,$t=xt;var At=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"field table-mobile-sort"},[n("div",{staticClass:"field has-addons"},[n("b-select",{attrs:{expanded:""},model:{value:e.mobileSort,callback:function(t){e.mobileSort=t},expression:"mobileSort"}},[e.placeholder?[n("option",{directives:[{name:"show",rawName:"v-show",value:e.showPlaceholder,expression:"showPlaceholder"}],attrs:{selected:"",disabled:"",hidden:""},domProps:{value:{}}},[e._v("\n                    "+e._s(e.placeholder)+"\n                ")])]:e._e(),e._v(" "),e._l(e.columns,function(t,i){return t.sortable?n("option",{key:i,domProps:{value:t}},[e._v("\n                "+e._s(t.label)+"\n            ")]):e._e()})],2),e._v(" "),n("div",{staticClass:"control"},[n("button",{staticClass:"button is-primary",on:{click:e.sort}},[n("b-icon",{directives:[{name:"show",rawName:"v-show",value:e.currentSortColumn===e.mobileSort,expression:"currentSortColumn === mobileSort"}],class:{"is-desc":!e.isAsc},attrs:{icon:"arrow-up",size:"is-small",both:""}})],1)])],1)])},staticRenderFns:[]},void 0,{name:"BTableMobileSort",components:(Dt={},d(Dt,q.name,q),d(Dt,y.name,y),Dt),props:{currentSortColumn:Object,isAsc:Boolean,columns:Array,placeholder:String},data:function(){return{mobileSort:this.currentSortColumn}},computed:{showPlaceholder:function(){var e=this;return!this.columns||!this.columns.some(function(t){return t===e.mobileSort})}},watch:{mobileSort:function(e){this.currentSortColumn!==e&&this.$emit("sort",e)},currentSortColumn:function(e){this.mobileSort=e}},methods:{sort:function(){this.$emit("sort",this.mobileSort)}}},void 0,!1,void 0,void 0,void 0);var Tt,Ot=s({render:function(){var e=this.$createElement,t=this._self._c||e;return this.visible?t("td",{class:this.rootClasses,attrs:{"data-label":this.label}},[this._t("default")],2):this._e()},staticRenderFns:[]},void 0,{name:"BTableColumn",props:{label:String,customKey:[String,Number],field:String,meta:[String,Number,Boolean,Function,Object,Array],width:[Number,String],numeric:Boolean,centered:Boolean,sortable:Boolean,visible:{type:Boolean,default:!0},customSort:Function,internal:Boolean},data:function(){return{newKey:this.customKey||this.label}},computed:{rootClasses:function(){return{"has-text-right":this.numeric&&!this.centered,"has-text-centered":this.centered}}},methods:{addRefToTable:function(){var e=this;if(!this.$parent.$data._isTable)throw this.$destroy(),new Error("You should wrap bTableColumn on a bTable");this.internal||!this.$parent.newColumns.some(function(t){return t.newKey===e.newKey})&&this.$parent.newColumns.push(this)}},beforeMount:function(){this.addRefToTable()},beforeUpdate:function(){this.addRefToTable()},beforeDestroy:function(){var e=this.$parent.newColumns.map(function(e){return e.newKey}).indexOf(this.newKey);e>=0&&this.$parent.newColumns.splice(e,1)}},void 0,!1,void 0,void 0,void 0);var Pt=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"b-table",class:{"is-loading":e.loading}},[e.mobileCards&&e.hasSortablenewColumns?n("b-table-mobile-sort",{attrs:{"current-sort-column":e.currentSortColumn,"is-asc":e.isAsc,columns:e.newColumns,placeholder:e.mobileSortPlaceholder},on:{sort:function(t){return e.sort(t)}}}):e._e(),e._v(" "),!e.paginated||"top"!==e.paginationPosition&&"both"!==e.paginationPosition?e._e():n("div",{staticClass:"top level"},[n("div",{staticClass:"level-left"},[e._t("top-left")],2),e._v(" "),n("div",{staticClass:"level-right"},[e.paginated?n("div",{staticClass:"level-item"},[n("b-pagination",{attrs:{"icon-pack":e.iconPack,total:e.newDataTotal,"per-page":e.perPage,simple:e.paginationSimple,size:e.paginationSize,current:e.newCurrentPage,"aria-next-label":e.ariaNextLabel,"aria-previous-label":e.ariaPreviousLabel,"aria-page-label":e.ariaPageLabel,"aria-current-label":e.ariaCurrentLabel},on:{change:e.pageChanged}})],1):e._e()])]),e._v(" "),n("div",{staticClass:"table-wrapper"},[n("table",{staticClass:"table",class:e.tableClasses,attrs:{tabindex:!!e.focusable&&0},on:{keydown:[function(t){return"button"in t||!e._k(t.keyCode,"up",38,t.key)?t.target!==t.currentTarget?null:(t.preventDefault(),void e.pressedArrow(-1)):null},function(t){return"button"in t||!e._k(t.keyCode,"down",40,t.key)?t.target!==t.currentTarget?null:(t.preventDefault(),void e.pressedArrow(1)):null}]}},[e.newColumns.length?n("thead",[n("tr",[e.showDetailRowIcon?n("th",{attrs:{width:"40px"}}):e._e(),e._v(" "),e.checkable&&"left"===e.checkboxPosition?n("th",{staticClass:"checkbox-cell"},[e.headerCheckable?[n("b-checkbox",{attrs:{value:e.isAllChecked,disabled:e.isAllUncheckable},nativeOn:{change:function(t){e.checkAll(t)}}})]:e._e()],2):e._e(),e._v(" "),e._l(e.visibleColumns,function(t,i){return n("th",{key:i,class:{"is-current-sort":e.currentSortColumn===t,"is-sortable":t.sortable},style:{width:void 0===t.width?null:t.width+"px"},on:{click:function(n){n.stopPropagation(),e.sort(t)}}},[n("div",{staticClass:"th-wrap",class:{"is-numeric":t.numeric,"is-centered":t.centered}},[t.$scopedSlots&&t.$scopedSlots.header?[n("b-slot-component",{attrs:{component:t,scoped:!0,name:"header",tag:"span",props:{column:t,index:i}}})]:e.$scopedSlots.header?[e._t("header",null,{column:t,index:i})]:[e._v(e._s(t.label))],e._v(" "),n("b-icon",{directives:[{name:"show",rawName:"v-show",value:e.currentSortColumn===t,expression:"currentSortColumn === column"}],class:{"is-desc":!e.isAsc},attrs:{icon:e.sortIcon,pack:e.iconPack,both:"",size:e.sortIconSize}})],2)])}),e._v(" "),e.checkable&&"right"===e.checkboxPosition?n("th",{staticClass:"checkbox-cell"},[e.headerCheckable?[n("b-checkbox",{attrs:{value:e.isAllChecked,disabled:e.isAllUncheckable},nativeOn:{change:function(t){e.checkAll(t)}}})]:e._e()],2):e._e()],2)]):e._e(),e._v(" "),e.visibleData.length?n("tbody",[e._l(e.visibleData,function(t,i){return[n("tr",{key:e.customRowKey?t[e.customRowKey]:i,class:[e.rowClass(t,i),{"is-selected":t===e.selected,"is-checked":e.isRowChecked(t)}],attrs:{draggable:e.draggable},on:{click:function(n){e.selectRow(t)},dblclick:function(n){e.$emit("dblclick",t)},mouseenter:function(n){e.$emit("mouseenter",t)},mouseleave:function(n){e.$emit("mouseleave",t)},contextmenu:function(n){e.$emit("contextmenu",t,n)},dragstart:function(n){e.handleDragStart(n,t,i)},drop:function(n){e.handleDrop(n,t,i)},dragover:function(n){e.handleDragOver(n,t,i)},dragleave:function(n){e.handleDragLeave(n,t,i)}}},[e.showDetailRowIcon?n("td",{staticClass:"chevron-cell"},[e.hasDetailedVisible(t)?n("a",{attrs:{role:"button"},on:{click:function(n){n.stopPropagation(),e.toggleDetails(t)}}},[n("b-icon",{class:{"is-expanded":e.isVisibleDetailRow(t)},attrs:{icon:"chevron-right",pack:e.iconPack,both:""}})],1):e._e()]):e._e(),e._v(" "),e.checkable&&"left"===e.checkboxPosition?n("td",{staticClass:"checkbox-cell"},[n("b-checkbox",{attrs:{disabled:!e.isRowCheckable(t),value:e.isRowChecked(t)},nativeOn:{change:function(n){e.checkRow(t)},click:function(e){e.stopPropagation()}}})],1):e._e(),e._v(" "),e.$scopedSlots.default?e._t("default",null,{row:t,index:i}):e._l(e.newColumns,function(i){return n("BTableColumn",e._b({key:i.field,attrs:{internal:""}},"BTableColumn",i,!1),[i.renderHtml?n("span",{domProps:{innerHTML:e._s(e.getValueByPath(t,i.field))}}):[e._v("\n                                    "+e._s(e.getValueByPath(t,i.field))+"\n                                ")]],2)}),e._v(" "),e.checkable&&"right"===e.checkboxPosition?n("td",{staticClass:"checkbox-cell"},[n("b-checkbox",{attrs:{disabled:!e.isRowCheckable(t),value:e.isRowChecked(t)},nativeOn:{change:function(n){e.checkRow(t)},click:function(e){e.stopPropagation()}}})],1):e._e()],2),e._v(" "),e.isActiveDetailRow(t)?n("tr",{staticClass:"detail"},[n("td",{attrs:{colspan:e.columnCount}},[n("div",{staticClass:"detail-container"},[e._t("detail",null,{row:t,index:i})],2)])]):e._e(),e._v(" "),e.isActiveCustomDetailRow(t)?e._t("detail",null,{row:t,index:i}):e._e()]})],2):n("tbody",[n("tr",{staticClass:"is-empty"},[n("td",{attrs:{colspan:e.columnCount}},[e._t("empty")],2)])]),e._v(" "),void 0!==e.$slots.footer?n("tfoot",[n("tr",{staticClass:"table-footer"},[e.hasCustomFooterSlot()?e._t("footer"):n("th",{attrs:{colspan:e.columnCount}},[e._t("footer")],2)],2)]):e._e()])]),e._v(" "),e.checkable&&e.hasBottomLeftSlot()||e.paginated&&("bottom"===e.paginationPosition||"both"===e.paginationPosition)?n("div",{staticClass:"level"},[n("div",{staticClass:"level-left"},[e._t("bottom-left")],2),e._v(" "),n("div",{staticClass:"level-right"},[e.paginated?n("div",{staticClass:"level-item"},[n("b-pagination",{attrs:{"icon-pack":e.iconPack,total:e.newDataTotal,"per-page":e.perPage,simple:e.paginationSimple,size:e.paginationSize,current:e.newCurrentPage,"aria-next-label":e.ariaNextLabel,"aria-previous-label":e.ariaPreviousLabel,"aria-page-label":e.ariaPageLabel,"aria-current-label":e.ariaCurrentLabel},on:{change:e.pageChanged}})],1):e._e()])]):e._e()],1)},staticRenderFns:[]},void 0,{name:"BTable",components:(Tt={},d(Tt,D.name,D),d(Tt,y.name,y),d(Tt,Xe.name,Xe),d(Tt,bt.name,bt),d(Tt,At.name,At),d(Tt,Ot.name,Ot),Tt),props:{data:{type:Array,default:function(){return[]}},columns:{type:Array,default:function(){return[]}},bordered:Boolean,striped:Boolean,narrowed:Boolean,hoverable:Boolean,loading:Boolean,detailed:Boolean,checkable:Boolean,headerCheckable:{type:Boolean,default:!0},checkboxPosition:{type:String,default:"left",validator:function(e){return["left","right"].indexOf(e)>=0}},selected:Object,focusable:Boolean,customIsChecked:Function,isRowCheckable:{type:Function,default:function(){return!0}},checkedRows:{type:Array,default:function(){return[]}},mobileCards:{type:Boolean,default:!0},defaultSort:[String,Array],defaultSortDirection:{type:String,default:"asc"},sortIcon:{type:String,default:"arrow-up"},sortIconSize:{type:String,default:"is-small"},paginated:Boolean,currentPage:{type:Number,default:1},perPage:{type:[Number,String],default:20},showDetailIcon:{type:Boolean,default:!0},paginationSimple:Boolean,paginationSize:String,paginationPosition:{type:String,default:"bottom",validator:function(e){return["bottom","top","both"].indexOf(e)>=0}},backendSorting:Boolean,rowClass:{type:Function,default:function(){return""}},openedDetailed:{type:Array,default:function(){return[]}},hasDetailedVisible:{type:Function,default:function(){return!0}},detailKey:{type:String,default:""},customDetailRow:{type:Boolean,default:!1},backendPagination:Boolean,total:{type:[Number,String],default:0},iconPack:String,mobileSortPlaceholder:String,customRowKey:String,draggable:{type:Boolean,defualt:!1},ariaNextLabel:String,ariaPreviousLabel:String,ariaPageLabel:String,ariaCurrentLabel:String},data:function(){return{getValueByPath:f,newColumns:h(this.columns),visibleDetailRows:this.openedDetailed,newData:this.data,newDataTotal:this.backendPagination?this.total:this.data.length,newCheckedRows:h(this.checkedRows),newCurrentPage:this.currentPage,currentSortColumn:{},isAsc:!0,firstTimeSort:!0,_isTable:!0}},computed:{showDetailRowIcon:function(){return this.detailed&&this.showDetailIcon},tableClasses:function(){return{"is-bordered":this.bordered,"is-striped":this.striped,"is-narrow":this.narrowed,"has-mobile-cards":this.mobileCards,"is-hoverable":(this.hoverable||this.focusable)&&this.visibleData.length}},visibleData:function(){if(!this.paginated)return this.newData;var e=this.newCurrentPage,t=this.perPage;if(this.newData.length<=t)return this.newData;var n=(e-1)*t,i=parseInt(n,10)+parseInt(t,10);return this.newData.slice(n,i)},visibleColumns:function(){return this.newColumns?this.newColumns.filter(function(e){return e.visible||void 0===e.visible}):this.newColumns},isAllChecked:function(){var e=this,t=this.visibleData.filter(function(t){return e.isRowCheckable(t)});if(0===t.length)return!1;var n=t.some(function(t){return p(e.newCheckedRows,t,e.customIsChecked)<0});return!n},isAllUncheckable:function(){var e=this;return 0===this.visibleData.filter(function(t){return e.isRowCheckable(t)}).length},hasSortablenewColumns:function(){return this.newColumns.some(function(e){return e.sortable})},columnCount:function(){var e=this.newColumns.length;return e+=this.checkable?1:0,e+=this.detailed?1:0}},watch:{data:function(e){var t=this,n=this.newColumns;this.newColumns=[],this.newData=e,this.$nextTick(function(){t.newColumns.length||(t.newColumns=n)}),this.backendSorting||this.sort(this.currentSortColumn,!0),this.backendPagination||(this.newDataTotal=e.length)},total:function(e){this.backendPagination&&(this.newDataTotal=e)},checkedRows:function(e){this.newCheckedRows=h(e)},columns:function(e){this.newColumns=h(e)},newColumns:function(e){this.checkSort()},openedDetailed:function(e){this.visibleDetailRows=e},currentPage:function(e){this.newCurrentPage=e}},methods:{sortBy:function(e,t,n,i){return n&&"function"==typeof n?h(e).sort(function(e,t){return n(e,t,i)}):h(e).sort(function(e,n){var a=f(e,t),o=f(n,t);return"boolean"==typeof a&&"boolean"==typeof o?i?a-o:o-a:a||0===a?o||0===o?a===o?0:(a="string"==typeof a?a.toUpperCase():a,o="string"==typeof o?o.toUpperCase():o,i?a>o?1:-1:a>o?-1:1):-1:1})},sort:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e&&e.sortable&&(t||(this.isAsc=e===this.currentSortColumn?!this.isAsc:"desc"!==this.defaultSortDirection.toLowerCase()),this.firstTimeSort||this.$emit("sort",e.field,this.isAsc?"asc":"desc"),this.backendSorting||(this.newData=this.sortBy(this.newData,e.field,e.customSort,this.isAsc)),this.currentSortColumn=e)},isRowChecked:function(e){return p(this.newCheckedRows,e,this.customIsChecked)>=0},removeCheckedRow:function(e){var t=p(this.newCheckedRows,e,this.customIsChecked);t>=0&&this.newCheckedRows.splice(t,1)},checkAll:function(){var e=this,t=this.isAllChecked;this.visibleData.forEach(function(n){e.removeCheckedRow(n),t||e.isRowCheckable(n)&&e.newCheckedRows.push(n)}),this.$emit("check",this.newCheckedRows),this.$emit("check-all",this.newCheckedRows),this.$emit("update:checkedRows",this.newCheckedRows)},checkRow:function(e){this.isRowChecked(e)?this.removeCheckedRow(e):this.newCheckedRows.push(e),this.$emit("check",this.newCheckedRows,e),this.$emit("update:checkedRows",this.newCheckedRows)},selectRow:function(e,t){this.$emit("click",e),this.selected!==e&&(this.$emit("select",e,this.selected),this.$emit("update:selected",e))},pageChanged:function(e){this.newCurrentPage=e>0?e:1,this.$emit("page-change",this.newCurrentPage),this.$emit("update:currentPage",this.newCurrentPage)},toggleDetails:function(e){this.isVisibleDetailRow(e)?(this.closeDetailRow(e),this.$emit("details-close",e)):(this.openDetailRow(e),this.$emit("details-open",e)),this.$emit("update:openedDetailed",this.visibleDetailRows)},openDetailRow:function(e){var t=this.handleDetailKey(e);this.visibleDetailRows.push(t)},closeDetailRow:function(e){var t=this.handleDetailKey(e),n=this.visibleDetailRows.indexOf(t);this.visibleDetailRows.splice(n,1)},isVisibleDetailRow:function(e){var t=this.handleDetailKey(e);return this.visibleDetailRows.indexOf(t)>=0},isActiveDetailRow:function(e){return this.detailed&&!this.customDetailRow&&this.isVisibleDetailRow(e)},isActiveCustomDetailRow:function(e){return this.detailed&&this.customDetailRow&&this.isVisibleDetailRow(e)},handleDetailKey:function(e){var t=this.detailKey;return t.length?e[t]:e},checkPredefinedDetailedRows:function(){if(this.openedDetailed.length>0&&!this.detailKey.length)throw new Error('If you set a predefined opened-detailed, you must provide a unique key using the prop "detail-key"')},checkSort:function(){if(this.newColumns.length&&this.firstTimeSort)this.initSort(),this.firstTimeSort=!1;else if(this.newColumns.length&&this.currentSortColumn.field)for(var e=0;e<this.newColumns.length;e++)if(this.newColumns[e].field===this.currentSortColumn.field){this.currentSortColumn=this.newColumns[e];break}},hasCustomFooterSlot:function(){if(this.$slots.footer.length>1)return!0;var e=this.$slots.footer[0].tag;return"th"===e||"td"===e},hasBottomLeftSlot:function(){return void 0!==this.$slots["bottom-left"]},pressedArrow:function(e){if(this.visibleData.length){var t=this.visibleData.indexOf(this.selected)+e;t=t<0?0:t>this.visibleData.length-1?this.visibleData.length-1:t,this.selectRow(this.visibleData[t])}},focus:function(){this.focusable&&this.$el.querySelector("table").focus()},initSort:function(){var e=this;if(this.defaultSort){var t="",n=this.defaultSortDirection;Array.isArray(this.defaultSort)?(t=this.defaultSort[0],this.defaultSort[1]&&(n=this.defaultSort[1])):t=this.defaultSort,this.newColumns.forEach(function(i){i.field===t&&(e.isAsc="desc"!==n.toLowerCase(),e.sort(i,!0))})}},handleDragStart:function(e,t,n){this.$emit("dragstart",{event:e,row:t,index:n})},handleDrop:function(e,t,n){this.$emit("drop",{event:e,row:t,index:n})},handleDragOver:function(e,t,n){this.$emit("dragover",{event:e,row:t,index:n})},handleDragLeave:function(e,t,n){this.$emit("dragleave",{event:e,row:t,index:n})}},mounted:function(){this.checkPredefinedDetailedRows(),this.checkSort()}},void 0,!1,void 0,void 0,void 0),Mt={install:function(e){l(e,Pt),l(e,Ot)}};r(Mt);var Vt,Bt=Mt;var It=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"b-tabs",class:{"is-fullwidth":e.expanded}},[n("nav",{staticClass:"tabs",class:e.navClasses},[n("ul",e._l(e.tabItems,function(t,i){return n("li",{directives:[{name:"show",rawName:"v-show",value:t.visible,expression:"tabItem.visible"}],key:i,class:{"is-active":e.activeTab===i,"is-disabled":t.disabled}},[n("a",{on:{click:function(t){e.tabClick(i)}}},[t.$slots.header?[n("b-slot-component",{attrs:{component:t,name:"header",tag:"span"}})]:[t.icon?n("b-icon",{attrs:{icon:t.icon,pack:t.iconPack,size:e.size}}):e._e(),e._v(" "),n("span",[e._v(e._s(t.label))])]],2)])}))]),e._v(" "),n("section",{staticClass:"tab-content",class:{"is-transitioning":e.isTransitioning}},[e._t("default")],2)])},staticRenderFns:[]},void 0,{name:"BTabs",components:(Vt={},d(Vt,y.name,y),d(Vt,bt.name,bt),Vt),props:{value:Number,expanded:Boolean,type:String,size:String,position:String,animated:{type:Boolean,default:!0},destroyOnHide:{type:Boolean,default:!1}},data:function(){return{activeTab:this.value||0,tabItems:[],contentHeight:0,isTransitioning:!1,_isTabs:!0}},computed:{navClasses:function(){return[this.type,this.size,this.position,{"is-fullwidth":this.expanded,"is-toggle-rounded is-toggle":"is-toggle-rounded"===this.type}]}},watch:{value:function(e){this.changeTab(e)},tabItems:function(){this.activeTab<this.tabItems.length&&(this.tabItems[this.activeTab].isActive=!0)}},methods:{changeTab:function(e){this.activeTab!==e&&(this.activeTab<this.tabItems.length&&this.tabItems[this.activeTab].deactivate(this.activeTab,e),this.tabItems[e].activate(this.activeTab,e),this.activeTab=e,this.$emit("change",e))},tabClick:function(e){this.$emit("input",e),this.changeTab(e)}},mounted:function(){this.activeTab<this.tabItems.length&&(this.tabItems[this.activeTab].isActive=!0)}},void 0,!1,void 0,void 0,void 0);var Ft=s({},void 0,{name:"BTabItem",props:{label:String,icon:String,iconPack:String,disabled:Boolean,visible:{type:Boolean,default:!0}},data:function(){return{isActive:!1,transitionName:null}},methods:{activate:function(e,t){this.transitionName=t<e?"slide-next":"slide-prev",this.isActive=!0},deactivate:function(e,t){this.transitionName=t<e?"slide-next":"slide-prev",this.isActive=!1}},created:function(){if(!this.$parent.$data._isTabs)throw this.$destroy(),new Error("You should wrap bTabItem on a bTabs");this.$parent.tabItems.push(this)},beforeDestroy:function(){var e=this.$parent.tabItems.indexOf(this);e>=0&&this.$parent.tabItems.splice(e,1)},render:function(e){var t=this;if(!this.$parent.destroyOnHide||this.isActive&&this.visible){var n=e("div",{directives:[{name:"show",value:this.isActive&&this.visible}],attrs:{class:"tab-item"}},this.$slots.default);return this.$parent.animated?e("transition",{props:{name:this.transitionName},on:{"before-enter":function(){t.$parent.isTransitioning=!0},"after-enter":function(){t.$parent.isTransitioning=!1}}},[n]):n}}},void 0,void 0,void 0,void 0,void 0),Nt={install:function(e){l(e,It),l(e,Ft)}};r(Nt);var Et=Nt;var Rt=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.attached&&e.closable?n("div",{staticClass:"tags has-addons"},[n("span",{staticClass:"tag",class:[e.type,e.size,{"is-rounded":e.rounded}]},[n("span",{class:{"has-ellipsis":e.ellipsis}},[e._t("default")],2)]),e._v(" "),n("a",{staticClass:"tag is-delete",class:[e.size,{"is-rounded":e.rounded}],attrs:{role:"button","aria-label":e.ariaCloseLabel,tabindex:!!e.tabstop&&0,disabled:e.disabled},on:{click:function(t){e.close()},keyup:function(t){if(!("button"in t)&&e._k(t.keyCode,"delete",[8,46],t.key))return null;t.preventDefault(),e.close()}}})]):n("span",{staticClass:"tag",class:[e.type,e.size,{"is-rounded":e.rounded}]},[n("span",{class:{"has-ellipsis":e.ellipsis}},[e._t("default")],2),e._v(" "),e.closable?n("a",{staticClass:"delete is-small",attrs:{role:"button","aria-label":e.ariaCloseLabel,disabled:e.disabled,tabindex:!!e.tabstop&&0},on:{click:function(t){e.close()},keyup:function(t){if(!("button"in t)&&e._k(t.keyCode,"delete",[8,46],t.key))return null;t.preventDefault(),e.close()}}}):e._e()])},staticRenderFns:[]},void 0,{name:"BTag",props:{attached:Boolean,closable:Boolean,type:String,size:String,rounded:Boolean,disabled:Boolean,ellipsis:Boolean,tabstop:{type:Boolean,default:!0},ariaCloseLabel:String},methods:{close:function(){this.disabled||this.$emit("close")}}},void 0,!1,void 0,void 0,void 0);var Lt=s({render:function(){var e=this.$createElement;return(this._self._c||e)("div",{staticClass:"tags",class:{"has-addons":this.attached}},[this._t("default")],2)},staticRenderFns:[]},void 0,{name:"BTaglist",props:{attached:Boolean}},void 0,!1,void 0,void 0,void 0),jt={install:function(e){l(e,Rt),l(e,Lt)}};r(jt);var Ht,zt=jt;var Yt=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"taginput control",class:e.rootClasses},[n("div",{staticClass:"taginput-container",class:[e.statusType,e.size,e.containerClasses],attrs:{disabled:e.disabled},on:{click:function(t){e.hasInput&&e.focus(t)}}},[e._l(e.tags,function(t,i){return n("b-tag",{key:i,attrs:{type:e.type,size:e.size,rounded:e.rounded,attached:e.attached,tabstop:!1,disabled:e.disabled,ellipsis:e.ellipsis,closable:e.closable,title:e.ellipsis&&e.getNormalizedTagText(t)},on:{close:function(t){e.removeTag(i)}}},[e._v("\n            "+e._s(e.getNormalizedTagText(t))+"\n        ")])}),e._v(" "),e.hasInput?n("b-autocomplete",e._b({ref:"autocomplete",attrs:{data:e.data,field:e.field,icon:e.icon,"icon-pack":e.iconPack,maxlength:e.maxlength,"has-counter":!1,size:e.size,disabled:e.disabled,loading:e.loading,autocomplete:e.nativeAutocomplete,"keep-first":!e.allowNew,"use-html5-validation":e.useHtml5Validation},on:{typing:e.onTyping,focus:e.onFocus,blur:e.customOnBlur,select:e.onSelect},nativeOn:{keydown:function(t){e.keydown(t)}},scopedSlots:e._u([{key:e.defaultSlotName,fn:function(t){return[e._t("default",null,{option:t.option,index:t.index})]}}]),model:{value:e.newTag,callback:function(t){e.newTag=t},expression:"newTag"}},"b-autocomplete",e.$attrs,!1),[n("template",{slot:e.headerSlotName},[e._t("header")],2),e._v(" "),n("template",{slot:e.emptySlotName},[e._t("empty")],2),e._v(" "),n("template",{slot:e.footerSlotName},[e._t("footer")],2)],2):e._e()],2),e._v(" "),e.hasCounter&&(e.maxtags||e.maxlength)?n("small",{staticClass:"help counter"},[e.maxlength&&e.valueLength>0?[e._v("\n            "+e._s(e.valueLength)+" / "+e._s(e.maxlength)+"\n        ")]:e.maxtags?[e._v("\n            "+e._s(e.tagsLength)+" / "+e._s(e.maxtags)+"\n        ")]:e._e()],2):e._e()])},staticRenderFns:[]},void 0,{name:"BTaginput",components:(Ht={},d(Ht,w.name,w),d(Ht,Rt.name,Rt),Ht),mixins:[g],inheritAttrs:!1,props:{value:{type:Array,default:function(){return[]}},data:{type:Array,default:function(){return[]}},type:String,rounded:{type:Boolean,default:!1},attached:{type:Boolean,default:!1},maxtags:{type:[Number,String],required:!1},hasCounter:{type:Boolean,default:function(){return a.defaultTaginputHasCounter}},field:{type:String,default:"value"},autocomplete:Boolean,nativeAutocomplete:String,disabled:Boolean,ellipsis:Boolean,closable:{type:Boolean,default:!0},confirmKeyCodes:{type:Array,default:function(){return[13,188]}},removeOnKeys:{type:Array,default:function(){return[8]}},allowNew:Boolean,onPasteSeparators:{type:Array,default:function(){return[","]}},beforeAdding:{type:Function,default:function(){return!0}},allowDuplicates:{type:Boolean,default:!1}},data:function(){return{tags:Array.isArray(this.value)?this.value.slice(0):this.value||[],newTag:"",_elementRef:"input",_isTaginput:!0}},computed:{rootClasses:function(){return{"is-expanded":this.expanded}},containerClasses:function(){return{"is-focused":this.isFocused,"is-focusable":this.hasInput}},valueLength:function(){return this.newTag.trim().length},defaultSlotName:function(){return this.hasDefaultSlot?"default":"dontrender"},emptySlotName:function(){return this.hasEmptySlot?"empty":"dontrender"},headerSlotName:function(){return this.hasHeaderSlot?"header":"dontrender"},footerSlotName:function(){return this.hasHeaderSlot?"footer":"dontrender"},hasDefaultSlot:function(){return!!this.$scopedSlots.default},hasEmptySlot:function(){return!!this.$slots.empty},hasHeaderSlot:function(){return!!this.$slots.header},hasFooterSlot:function(){return!!this.$slots.footer},hasInput:function(){return null==this.maxtags||this.tagsLength<this.maxtags},tagsLength:function(){return this.tags.length},separatorsAsRegExp:function(){var e=this.onPasteSeparators;return e.length?new RegExp(e.map(function(e){return e?e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"):null}).join("|"),"g"):null}},watch:{value:function(e){this.tags=e},hasInput:function(){this.hasInput||this.onBlur()}},methods:{addTag:function(e){var t=e||this.newTag.trim();if(t){if(!this.autocomplete){var n=this.separatorsAsRegExp;if(n&&t.match(n))return void t.split(n).map(function(e){return e.trim()}).filter(function(e){return 0!==e.length}).map(this.addTag)}(!!this.allowDuplicates||-1===this.tags.indexOf(t))&&this.beforeAdding(t)&&(this.tags.push(t),this.$emit("input",this.tags),this.$emit("add",t))}this.newTag=""},getNormalizedTagText:function(e){return"object"===u(e)?f(e,this.field):e},customOnBlur:function(e){this.autocomplete||this.addTag(),this.onBlur(e)},onSelect:function(e){var t=this;e&&(this.addTag(e),this.$nextTick(function(){t.newTag=""}))},removeTag:function(e){var t=this.tags.splice(e,1)[0];return this.$emit("input",this.tags),this.$emit("remove",t),t},removeLastTag:function(){this.tagsLength>0&&this.removeTag(this.tagsLength-1)},keydown:function(e){-1===this.removeOnKeys.indexOf(e.keyCode)||this.newTag.length||this.removeLastTag(),this.autocomplete&&!this.allowNew||this.confirmKeyCodes.indexOf(e.keyCode)>=0&&(e.preventDefault(),this.addTag())},onTyping:function(e){this.$emit("typing",e.trim())}}},void 0,!1,void 0,void 0,void 0),qt={install:function(e){l(e,Yt)}};r(qt);var Wt,Ut=qt;var Kt=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"timepicker control",class:[e.size,{"is-expanded":e.expanded}]},[!e.isMobile||e.inline?n("b-dropdown",{ref:"dropdown",attrs:{position:e.position,disabled:e.disabled,inline:e.inline}},[e.inline?e._e():n("b-input",e._b({ref:"input",attrs:{slot:"trigger",autocomplete:"off",value:e.formatValue(e.computedValue),placeholder:e.placeholder,size:e.size,icon:e.icon,"icon-pack":e.iconPack,loading:e.loading,disabled:e.disabled,readonly:!e.editable,rounded:e.rounded,"use-html5-validation":e.useHtml5Validation},on:{focus:e.handleOnFocus,blur:function(t){e.onBlur()&&e.checkHtml5Validity()}},nativeOn:{keyup:function(t){if(!("button"in t)&&e._k(t.keyCode,"enter",13,t.key))return null;e.toggle(!0)},change:function(t){e.onChange(t.target.value)}},slot:"trigger"},"b-input",e.$attrs,!1)),e._v(" "),n("b-dropdown-item",{attrs:{disabled:e.disabled,custom:""}},[n("b-field",{attrs:{grouped:"",position:"is-centered"}},[n("b-select",{attrs:{disabled:e.disabled,placeholder:"00"},nativeOn:{change:function(t){e.onHoursChange(t.target.value)}},model:{value:e.hoursSelected,callback:function(t){e.hoursSelected=t},expression:"hoursSelected"}},e._l(e.hours,function(t){return n("option",{key:t.value,attrs:{disabled:e.isHourDisabled(t.value)},domProps:{value:t.value}},[e._v("\n                        "+e._s(t.label)+"\n                    ")])})),e._v(" "),n("span",{staticClass:"control is-colon"},[e._v(":")]),e._v(" "),n("b-select",{attrs:{disabled:e.disabled,placeholder:"00"},nativeOn:{change:function(t){e.onMinutesChange(t.target.value)}},model:{value:e.minutesSelected,callback:function(t){e.minutesSelected=t},expression:"minutesSelected"}},e._l(e.minutes,function(t){return n("option",{key:t.value,attrs:{disabled:e.isMinuteDisabled(t.value)},domProps:{value:t.value}},[e._v("\n                        "+e._s(t.label)+"\n                    ")])})),e._v(" "),e.enableSeconds?[n("span",{staticClass:"control is-colon"},[e._v(":")]),e._v(" "),n("b-select",{attrs:{disabled:e.disabled,placeholder:"00"},nativeOn:{change:function(t){e.onSecondsChange(t.target.value)}},model:{value:e.secondsSelected,callback:function(t){e.secondsSelected=t},expression:"secondsSelected"}},e._l(e.seconds,function(t){return n("option",{key:t.value,attrs:{disabled:e.isSecondDisabled(t.value)},domProps:{value:t.value}},[e._v("\n                            "+e._s(t.label)+"\n                        ")])}))]:e._e(),e._v(" "),e.isHourFormat24?e._e():n("b-select",{attrs:{disabled:e.disabled},nativeOn:{change:function(t){e.onMeridienChange(t.target.value)}},model:{value:e.meridienSelected,callback:function(t){e.meridienSelected=t},expression:"meridienSelected"}},e._l(e.meridiens,function(t){return n("option",{key:t,domProps:{value:t}},[e._v("\n                        "+e._s(t)+"\n                    ")])}))],2),e._v(" "),void 0!==e.$slots.default&&e.$slots.default.length?n("footer",{staticClass:"timepicker-footer"},[e._t("default")],2):e._e()],1)],1):n("b-input",e._b({ref:"input",attrs:{type:"time",step:e.nativeStep,autocomplete:"off",value:e.formatHHMMSS(e.computedValue),placeholder:e.placeholder,size:e.size,icon:e.icon,"icon-pack":e.iconPack,loading:e.loading,max:e.formatHHMMSS(e.maxTime),min:e.formatHHMMSS(e.minTime),disabled:e.disabled,readonly:!1,"use-html5-validation":e.useHtml5Validation},on:{focus:e.handleOnFocus,blur:function(t){e.onBlur()&&e.checkHtml5Validity()}},nativeOn:{change:function(t){e.onChange(t.target.value)}}},"b-input",e.$attrs,!1))],1)},staticRenderFns:[]},void 0,{name:"BTimepicker",components:(Wt={},d(Wt,b.name,b),d(Wt,R.name,R),d(Wt,q.name,q),d(Wt,y.name,y),d(Wt,F.name,F),d(Wt,N.name,N),Wt),mixins:[I],inheritAttrs:!1,data:function(){return{_isTimepicker:!0}},computed:{nativeStep:function(){if(this.enableSeconds)return"1"}}},void 0,!1,void 0,void 0,void 0),Xt={install:function(e){l(e,Kt)}};r(Xt);var Gt=Xt;var Jt=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("transition",{attrs:{"enter-active-class":e.transition.enter,"leave-active-class":e.transition.leave}},[n("div",{directives:[{name:"show",rawName:"v-show",value:e.isActive,expression:"isActive"}],staticClass:"toast",class:[e.type,e.position],attrs:{"aria-hidden":!e.isActive,role:"alert"}},[n("div",{domProps:{innerHTML:e._s(e.message)}})])])},staticRenderFns:[]},void 0,{name:"BToast",mixins:[Be],data:function(){return{newDuration:this.duration||a.defaultToastDuration}}},void 0,!1,void 0,void 0,void 0),Qt={open:function(e){var t,n;"string"==typeof e&&(t=e);var i={message:t,position:a.defaultToastPosition||"is-top"};e.parent&&(n=e.parent,delete e.parent);var o=Object.assign(i,e);return new(("undefined"!=typeof window&&window.Vue?window.Vue:ee.a).extend(Jt))({parent:n,el:document.createElement("div"),propsData:o})}},Zt={install:function(e){c(e,"toast",Qt)}};r(Zt);var en=Zt,tn={install:function(e){l(e,rt)}};r(tn);var nn=tn;var an=s({render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("label",{staticClass:"upload control"},[e.dragDrop?n("div",{staticClass:"upload-draggable",class:[e.type,{"is-loading":e.loading,"is-disabled":e.disabled,"is-hovered":e.dragDropFocus}],on:{dragover:function(t){t.preventDefault(),e.updateDragDropFocus(!0)},dragleave:function(t){t.preventDefault(),e.updateDragDropFocus(!1)},dragenter:function(t){t.preventDefault(),e.updateDragDropFocus(!0)},drop:function(t){t.preventDefault(),e.onFileChange(t)}}},[e._t("default")],2):[e._t("default")],e._v(" "),n("input",e._b({ref:"input",attrs:{type:"file",multiple:e.multiple,accept:e.accept,disabled:e.disabled},on:{change:e.onFileChange}},"input",e.$attrs,!1))],2)},staticRenderFns:[]},void 0,{name:"BUpload",mixins:[g],inheritAttrs:!1,props:{value:{type:[Object,Function,ge,Array]},multiple:Boolean,disabled:Boolean,accept:String,dragDrop:Boolean,type:{type:String,default:"is-primary"},native:{type:Boolean,default:!1}},data:function(){return{newValue:this.value,dragDropFocus:!1,_elementRef:"input"}},watch:{value:function(e){var t=this.$refs.input.files;this.newValue=e,(!this.newValue||Array.isArray(this.newValue)&&0===this.newValue.length||!t[0]||Array.isArray(this.newValue)&&!this.newValue.some(function(e){return e.name===t[0].name}))&&(this.$refs.input.value=null),!this.isValid&&!this.dragDrop&&this.checkHtml5Validity()}},methods:{onFileChange:function(e){if(!this.disabled&&!this.loading){this.dragDrop&&this.updateDragDropFocus(!1);var t=e.target.files||e.dataTransfer.files;if(0===t.length){if(!this.newValue)return;this.native&&(this.newValue=null)}else if(this.multiple){var n=!1;!this.native&&this.newValue||(this.newValue=[],n=!0);for(var i=0;i<t.length;i++){var a=t[i];this.checkType(a)&&(this.newValue.push(a),n=!0)}if(!n)return}else{if(this.dragDrop&&1!==t.length)return;var o=t[0];if(this.checkType(o))this.newValue=o;else{if(!this.newValue)return;this.newValue=null}}this.$emit("input",this.newValue),!this.dragDrop&&this.checkHtml5Validity()}},updateDragDropFocus:function(e){this.disabled||this.loading||(this.dragDropFocus=e)},checkType:function(e){if(!this.accept)return!0;var t=this.accept.split(",");if(0===t.length)return!0;for(var n=!1,i=0;i<t.length&&!n;i++){var a=t[i].trim();if(a)if("."===a.substring(0,1)){var o=e.name.lastIndexOf(".");(o>=0?e.name.substring(o):"").toLowerCase()===a.toLowerCase()&&(n=!0)}else e.type.match(a)&&(n=!0)}return n}}},void 0,!1,void 0,void 0,void 0),on={install:function(e){l(e,an)}};r(on);var sn=on,rn=Object.freeze({Autocomplete:k,Button:x,Checkbox:T,Clockpicker:Y,Collapse:M,Datepicker:Z,Dialog:se,Dropdown:le,Field:ue,Icon:he,Input:pe,Loading:_e,Menu:De,Message:Oe,Modal:Ve,Navbar:qe,Notification:Re,Numberinput:Ke,Pagination:Je,Progress:et,Radio:at,Select:st,Slider:ft,Snackbar:yt,Steps:Ct,Switch:$t,Table:Bt,Tabs:Et,Tag:zt,Taginput:Ut,Timepicker:Gt,Toast:en,Tooltip:nn,Upload:sn}),ln={install:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var n in o(Object.assign(a,t)),rn)e.use(rn[n]);var i={setOptions:function(e){o(Object.assign(a,e))}};c(e,"config",i)}};r(ln);t.a=ln},,function(e,t,n){},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,a=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(a.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new o(a.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(13),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(3))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,a,o,s,r,l=1,c={},u=!1,d=e.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(e);h=h&&h.setTimeout?h:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick(function(){p(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},i=function(e){o.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(a=d.documentElement,i=function(e){var t=d.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,a.removeChild(t),t=null},a.appendChild(t)}):i=function(e){setTimeout(p,0,e)}:(s="setImmediate$"+Math.random()+"$",r=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(s)&&p(+t.data.slice(s.length))},e.addEventListener?e.addEventListener("message",r,!1):e.attachEvent("onmessage",r),i=function(t){e.postMessage(s+t,"*")}),h.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var a={callback:e,args:t};return c[l]=a,i(l),l++},h.clearImmediate=f}function f(e){delete c[e]}function p(e){if(u)setTimeout(p,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,i=e.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(n,i)}}(t)}finally{f(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(3),n(14))},function(e,t){var n,i,a=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function r(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(e){i=s}}();var l,c=[],u=!1,d=-1;function h(){u&&l&&(u=!1,l.length?c=l.concat(c):d=-1,c.length&&f())}function f(){if(!u){var e=r(h);u=!0;for(var t=c.length;t;){for(l=c,c=[];++d<t;)l&&l[d].run();d=-1,t=c.length}l=null,u=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function v(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new p(e,t)),1!==c.length||u||r(f)},p.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=v,a.addListener=v,a.once=v,a.off=v,a.removeListener=v,a.removeAllListeners=v,a.emit=v,a.prependListener=v,a.prependOnceListener=v,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},,function(e,t,n){}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtcm91dGVyL2Rpc3QvdnVlLXJvdXRlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWV4L2Rpc3QvdnVleC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1zaWRlYmFyLW1lbnUvZGlzdC92dWUtc2lkZWJhci1tZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9jaHVuay05ZTMyMDdjYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vY2h1bmstY2NhODhkYjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2NodW5rLWQ2MjAwMDg3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9jaHVuay1lNWZjZTQ4Zi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vY2h1bmstMTBjODU1MjkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2NodW5rLWU4NGI0MDQ3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9jaHVuay05OGU4NmY0MC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vY2h1bmstOTJhY2MyMWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2F1dG9jb21wbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vYnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9jaHVuay05YTc3NjY5Ny5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vY2hlY2tib3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2NvbGxhcHNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9jaHVuay0wN2UxOTQ0Ni5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vY2h1bmstMDBlM2U2N2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2NodW5rLTUzMWI4Mjc0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9jbG9ja3BpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vY2h1bmstOTEyZWQ3MTUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2RhdGVwaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2NodW5rLWE1ZWE3MGQwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2Ryb3Bkb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9maWVsZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vaWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vaW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2NodW5rLWI5YmRiMGU0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9sb2FkaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9tZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9jaHVuay1lZGQ4ZmY5MS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vbWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vbW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2NodW5rLWRhZWFjODUyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9ub3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL25hdmJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vbnVtYmVyaW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2NodW5rLWNjNzE4YzE1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9wYWdpbmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9wcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vcmFkaW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vY2h1bmstNDExZDZlZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL3NsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vc25hY2tiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL3N0ZXBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS9jaHVuay0wZTNmNGZiNS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vc3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS90YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vdGFicy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vY2h1bmstM2U0NzMwOGYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL3RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVlZnkvZGlzdC9lc20vdGFnaW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL3RpbWVwaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL3RvYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS90b29sdGlwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWVmeS9kaXN0L2VzbS91cGxvYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZWZ5L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiXSwibmFtZXMiOlsiZW1wdHlPYmplY3QiLCJPYmplY3QiLCJmcmVlemUiLCJpc1VuZGVmIiwidiIsImlzRGVmIiwiaXNUcnVlIiwiaXNQcmltaXRpdmUiLCJ2YWx1ZSIsImlzT2JqZWN0Iiwib2JqIiwiX3RvU3RyaW5nIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJpc1BsYWluT2JqZWN0IiwiY2FsbCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJ2YWwiLCJuIiwicGFyc2VGbG9hdCIsIlN0cmluZyIsIk1hdGgiLCJmbG9vciIsImlzRmluaXRlIiwiaXNQcm9taXNlIiwidGhlbiIsImNhdGNoIiwiQXJyYXkiLCJpc0FycmF5IiwiSlNPTiIsInN0cmluZ2lmeSIsInRvTnVtYmVyIiwiaXNOYU4iLCJtYWtlTWFwIiwic3RyIiwiZXhwZWN0c0xvd2VyQ2FzZSIsIm1hcCIsImNyZWF0ZSIsImxpc3QiLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJ0b0xvd2VyQ2FzZSIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJyZW1vdmUiLCJhcnIiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiaGFzT3duUHJvcGVydHkiLCJoYXNPd24iLCJrZXkiLCJjYWNoZWQiLCJmbiIsImNhY2hlIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwicmVwbGFjZSIsIl8iLCJjIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0Iiwic2xpY2UiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsImJpbmQiLCJGdW5jdGlvbiIsImN0eCIsImJvdW5kRm4iLCJhIiwibCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsImV4dGVuZCIsInRvIiwiX2Zyb20iLCJ0b09iamVjdCIsInJlcyIsIm5vb3AiLCJiIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZXZlcnkiLCJlIiwiRGF0ZSIsImdldFRpbWUiLCJrZXlzQSIsImtleXMiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsIm9uY2UiLCJjYWxsZWQiLCJ0aGlzIiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsImNvbmZpZyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiYXN5bmMiLCJfbGlmZWN5Y2xlSG9va3MiLCJ1bmljb2RlUmVnRXhwIiwiZGVmIiwiZW51bWVyYWJsZSIsImRlZmluZVByb3BlcnR5Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJiYWlsUkUiLCJSZWdFeHAiLCJfaXNTZXJ2ZXIiLCJoYXNQcm90byIsImluQnJvd3NlciIsIndpbmRvdyIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNJRSIsInRlc3QiLCJpc0lFOSIsImlzRWRnZSIsImlzSU9TIiwiaXNGRiIsIm1hdGNoIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJnZXQiLCJhZGRFdmVudExpc3RlbmVyIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJ1bmRlZmluZWQiLCJnbG9iYWwiLCJlbnYiLCJWVUVfRU5WIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzTmF0aXZlIiwiQ3RvciIsIl9TZXQiLCJoYXNTeW1ib2wiLCJTeW1ib2wiLCJSZWZsZWN0Iiwib3duS2V5cyIsIlNldCIsInNldCIsImhhcyIsImFkZCIsImNsZWFyIiwid2FybiIsInVpZCIsIkRlcCIsImlkIiwic3VicyIsImFkZFN1YiIsInN1YiIsInB1c2giLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJ0YXJnZXQiLCJhZGREZXAiLCJub3RpZnkiLCJ1cGRhdGUiLCJ0YXJnZXRTdGFjayIsInB1c2hUYXJnZXQiLCJwb3BUYXJnZXQiLCJwb3AiLCJWTm9kZSIsInRhZyIsImRhdGEiLCJjaGlsZHJlbiIsInRleHQiLCJlbG0iLCJjb250ZXh0IiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJwYXJlbnQiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2hpbGQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3JlYXRlRW1wdHlWTm9kZSIsIm5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsIm9yaWdpbmFsIiwiYXJncyIsImxlbiIsImluc2VydGVkIiwicmVzdWx0Iiwib2IiLCJfX29iX18iLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJhcnJheUtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsIk9ic2VydmVyIiwidm1Db3VudCIsInNyYyIsIl9fcHJvdG9fXyIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiX2lzVnVlIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwicHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJtYXgiLCJkZWwiLCJpdGVtcyIsInN0cmF0cyIsIm1lcmdlRGF0YSIsImZyb20iLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJ2bSIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiY29uY2F0IiwiaG9va3MiLCJkZWR1cGVIb29rcyIsIm1lcmdlQXNzZXRzIiwiaG9vayIsInR5cGUiLCJrZXkkMSIsInByb3BzIiwibWV0aG9kcyIsImluamVjdCIsImNvbXB1dGVkIiwicHJvdmlkZSIsImRlZmF1bHRTdHJhdCIsIm1lcmdlT3B0aW9ucyIsIm9wdGlvbnMiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVJbmplY3QiLCJkaXJzIiwiZGlyZWN0aXZlcyIsImRlZiQkMSIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wc0RhdGEiLCJwcm9wIiwiYWJzZW50IiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4IiwiQm9vbGVhbiIsInN0cmluZ0luZGV4IiwiZGVmYXVsdCIsIiRvcHRpb25zIiwiX3Byb3BzIiwiZ2V0VHlwZSIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiaGFuZGxlRXJyb3IiLCJlcnIiLCJpbmZvIiwiY3VyIiwiJHBhcmVudCIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiaGFuZGxlciIsIl9oYW5kbGVkIiwibG9nRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJ0aW1lckZ1bmMiLCJpc1VzaW5nTWljcm9UYXNrIiwiY2FsbGJhY2tzIiwicGVuZGluZyIsImZsdXNoQ2FsbGJhY2tzIiwiY29waWVzIiwiUHJvbWlzZSIsInAiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJzZXRJbW1lZGlhdGUiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwibmV4dFRpY2siLCJjYiIsIl9yZXNvbHZlIiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibm9ybWFsaXplRXZlbnQiLCJuYW1lIiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjYXB0dXJlIiwiY3JlYXRlRm5JbnZva2VyIiwiZm5zIiwiaW52b2tlciIsImFyZ3VtZW50cyQxIiwidXBkYXRlTGlzdGVuZXJzIiwib24iLCJvbGRPbiIsInJlbW92ZSQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyIiwib2xkIiwiZXZlbnQiLCJwYXJhbXMiLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJtZXJnZWQiLCJjaGVja1Byb3AiLCJoYXNoIiwiYWx0S2V5IiwicHJlc2VydmUiLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJuZXN0ZWRJbmRleCIsImxhc3RJbmRleCIsImxhc3QiLCJpc1RleHROb2RlIiwic2hpZnQiLCJfaXNWTGlzdCIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5Iiwic291cmNlIiwiX3Byb3ZpZGVkIiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsImF0dHJzIiwic2xvdCIsIm5hbWUkMSIsImlzV2hpdGVzcGFjZSIsIm5vcm1hbGl6ZVNjb3BlZFNsb3RzIiwibm9ybWFsU2xvdHMiLCJwcmV2U2xvdHMiLCJoYXNOb3JtYWxTbG90cyIsImlzU3RhYmxlIiwiJHN0YWJsZSIsIiRrZXkiLCJfbm9ybWFsaXplZCIsIiRoYXNOb3JtYWwiLCJub3JtYWxpemVTY29wZWRTbG90Iiwia2V5JDIiLCJwcm94eU5vcm1hbFNsb3QiLCJwcm94eSIsInJlbmRlckxpc3QiLCJyZW5kZXIiLCJpdGVyYXRvciIsIm5leHQiLCJkb25lIiwicmVuZGVyU2xvdCIsImZhbGxiYWNrIiwiYmluZE9iamVjdCIsIm5vZGVzIiwic2NvcGVkU2xvdEZuIiwiJHNjb3BlZFNsb3RzIiwiJHNsb3RzIiwiJGNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImxvb3AiLCJkb21Qcm9wcyIsImNhbWVsaXplZEtleSIsImh5cGhlbmF0ZWRLZXkiLCIkZXZlbnQiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwidHJlZSIsIm1hcmtTdGF0aWMiLCJzdGF0aWNSZW5kZXJGbnMiLCJfcmVuZGVyUHJveHkiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsImV4aXN0aW5nIiwib3VycyIsInJlc29sdmVTY29wZWRTbG90cyIsImhhc0R5bmFtaWNLZXlzIiwiY29udGVudEhhc2hLZXkiLCJiaW5kRHluYW1pY0tleXMiLCJiYXNlT2JqIiwidmFsdWVzIiwicHJlcGVuZE1vZGlmaWVyIiwic3ltYm9sIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9uIiwiX3MiLCJfbCIsIl90IiwiX3EiLCJfaSIsIl9tIiwiX2YiLCJfayIsIl9iIiwiX3YiLCJfZSIsIl91IiwiX2ciLCJfZCIsIl9wIiwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLCJjb250ZXh0Vm0iLCJ0aGlzJDEiLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwiX2NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJsaXN0ZW5lcnMiLCJpbmplY3Rpb25zIiwic2NvcGVkU2xvdHMiLCJfc2NvcGVJZCIsIl9jIiwiZCIsImNyZWF0ZUVsZW1lbnQiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0IiwicmVuZGVyQ29udGV4dCIsImNsb25lIiwibWVyZ2VQcm9wcyIsImNvbXBvbmVudFZOb2RlSG9va3MiLCJpbml0IiwiaHlkcmF0aW5nIiwiX2lzRGVzdHJveWVkIiwia2VlcEFsaXZlIiwibW91bnRlZE5vZGUiLCJwcmVwYXRjaCIsIl9pc0NvbXBvbmVudCIsIl9wYXJlbnRWbm9kZSIsImlubGluZVRlbXBsYXRlIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsImFjdGl2ZUluc3RhbmNlIiwiJG1vdW50Iiwib2xkVm5vZGUiLCJwYXJlbnRWbm9kZSIsInJlbmRlckNoaWxkcmVuIiwibmV3U2NvcGVkU2xvdHMiLCJvbGRTY29wZWRTbG90cyIsImhhc0R5bmFtaWNTY29wZWRTbG90IiwibmVlZHNGb3JjZVVwZGF0ZSIsIl9yZW5kZXJDaGlsZHJlbiIsIiR2bm9kZSIsIl92bm9kZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJwcm9wS2V5cyIsIl9wcm9wS2V5cyIsIm9sZExpc3RlbmVycyIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCIkZm9yY2VVcGRhdGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsImluc2VydCIsIl9pc01vdW50ZWQiLCJjYWxsSG9vayIsIl9pbmFjdGl2ZSIsImFjdGl2YXRlZENoaWxkcmVuIiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRlc3Ryb3kiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJkaXJlY3QiLCJfZGlyZWN0SW5hY3RpdmUiLCJpc0luSW5hY3RpdmVUcmVlIiwiJGNoaWxkcmVuIiwiJGRlc3Ryb3kiLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsImNpZCIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsIm93bmVyIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwib3duZXJzIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwic3luYyIsInRpbWVyTG9hZGluZyIsInRpbWVyVGltZW91dCIsIiRvbiIsImZvcmNlUmVuZGVyIiwicmVuZGVyQ29tcGxldGVkIiwiY2xlYXJUaW1lb3V0IiwiZW5zdXJlQ3RvciIsInJlamVjdCIsInJlYXNvbiIsImNvbXBvbmVudCIsImRlbGF5IiwidGltZW91dCIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwibW9kZWwiLCJjYWxsYmFjayIsInRyYW5zZm9ybU1vZGVsIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsImZ1bmN0aW9uYWwiLCJ2bm9kZXMiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibmF0aXZlT24iLCJhYnN0cmFjdCIsInRvTWVyZ2UiLCJfbWVyZ2VkIiwibWVyZ2VIb29rJDEiLCJpbnN0YWxsQ29tcG9uZW50SG9va3MiLCJmMSIsImYyIiwiU0lNUExFX05PUk1BTElaRSIsIkFMV0FZU19OT1JNQUxJWkUiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsImlzIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJwcmUiLCJhcHBseU5TIiwiZm9yY2UiLCJzdHlsZSIsImNsYXNzIiwicmVnaXN0ZXJEZWVwQmluZGluZ3MiLCJfY3JlYXRlRWxlbWVudCIsImNvbXAiLCJiYXNlIiwiX19lc01vZHVsZSIsInRvU3RyaW5nVGFnIiwiZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCIsInJlbW92ZSQxIiwiJG9mZiIsIl90YXJnZXQiLCJvbmNlSGFuZGxlciIsInNldEFjdGl2ZUluc3RhbmNlIiwicHJldkFjdGl2ZUluc3RhbmNlIiwiaGFuZGxlcnMiLCJqIiwiX2hhc0hvb2tFdmVudCIsIiRlbWl0IiwicXVldWUiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJub3ciLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsImZsdXNoU2NoZWR1bGVyUXVldWUiLCJ3YXRjaGVyIiwic29ydCIsImJlZm9yZSIsInJ1biIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiX3dhdGNoZXIiLCJjYWxsVXBkYXRlZEhvb2tzIiwiZW1pdCIsInVpZCQyIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJfd2F0Y2hlcnMiLCJkZWVwIiwidXNlciIsImxhenkiLCJhY3RpdmUiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiZXhwcmVzc2lvbiIsInBhdGgiLCJzZWdtZW50cyIsInBhcnNlUGF0aCIsImNsZWFudXBEZXBzIiwidG1wIiwicXVldWVXYXRjaGVyIiwib2xkVmFsdWUiLCJldmFsdWF0ZSIsInRlYXJkb3duIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJzb3VyY2VLZXkiLCJpbml0U3RhdGUiLCJwcm9wc09wdGlvbnMiLCJpbml0UHJvcHMiLCJpbml0TWV0aG9kcyIsIl9kYXRhIiwiZ2V0RGF0YSIsImNoYXJDb2RlQXQiLCJpbml0RGF0YSIsIndhdGNoZXJzIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJpc1NTUiIsInVzZXJEZWYiLCJjb21wdXRlZFdhdGNoZXJPcHRpb25zIiwiZGVmaW5lQ29tcHV0ZWQiLCJpbml0Q29tcHV0ZWQiLCJjcmVhdGVXYXRjaGVyIiwiaW5pdFdhdGNoIiwic2hvdWxkQ2FjaGUiLCJjcmVhdGVDb21wdXRlZEdldHRlciIsImNyZWF0ZUdldHRlckludm9rZXIiLCIkd2F0Y2giLCJ1aWQkMyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwibW9kaWZpZWQiLCJsYXRlc3QiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJjb21wb25lbnRzIiwiVnVlIiwiX2luaXQiLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsImNvbnN0cnVjdG9yIiwiQ29tcCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJtaXhpbiIsInVzZSIsImdldENvbXBvbmVudE5hbWUiLCJtYXRjaGVzIiwicGF0dGVybiIsInBydW5lQ2FjaGUiLCJrZWVwQWxpdmVJbnN0YW5jZSIsImZpbHRlciIsImNhY2hlZE5vZGUiLCJwcnVuZUNhY2hlRW50cnkiLCJjdXJyZW50IiwiY2FjaGVkJCQxIiwiX3VpZCIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsIl9jb21wb25lbnRUYWciLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJfc2VsZiIsIiRyb290IiwiJHJlZnMiLCJpbml0TGlmZWN5Y2xlIiwiX2V2ZW50cyIsImluaXRFdmVudHMiLCJwYXJlbnREYXRhIiwiaW5pdFJlbmRlciIsImluaXRJbmplY3Rpb25zIiwiaW5pdFByb3ZpZGUiLCJlbCIsImluaXRNaXhpbiIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIiRzZXQiLCIkZGVsZXRlIiwiaW1tZWRpYXRlIiwic3RhdGVNaXhpbiIsImhvb2tSRSIsIiRvbmNlIiwiaSQxIiwiY2JzIiwiZXZlbnRzTWl4aW4iLCJfdXBkYXRlIiwicHJldkVsIiwiJGVsIiwicHJldlZub2RlIiwicmVzdG9yZUFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsImxpZmVjeWNsZU1peGluIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsInJlZiIsInJlbmRlck1peGluIiwicGF0dGVyblR5cGVzIiwiYnVpbHRJbkNvbXBvbmVudHMiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsIk51bWJlciIsImNyZWF0ZWQiLCJkZXN0cm95ZWQiLCJtb3VudGVkIiwicGFyc2VJbnQiLCJjb25maWdEZWYiLCJ1dGlsIiwiZGVmaW5lUmVhY3RpdmUiLCJkZWxldGUiLCJvYnNlcnZhYmxlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluc3RhbGwiLCJpbml0VXNlIiwiaW5pdE1peGluJDEiLCJkZWZpbml0aW9uIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiaW5pdEdsb2JhbEFQSSIsInNzckNvbnRleHQiLCJ2ZXJzaW9uIiwiYWNjZXB0VmFsdWUiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlIiwiY29udmVydEVudW1lcmF0ZWRWYWx1ZSIsImlzRmFsc3lBdHRyVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJnZW5DbGFzc0ZvclZub2RlIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwic3RhdGljQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInJlbmRlckNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJub2RlT3BzIiwidGFnTmFtZSIsIm11bHRpcGxlIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudE5TIiwibmFtZXNwYWNlIiwiY3JlYXRlQ29tbWVudCIsImluc2VydEJlZm9yZSIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJzY29wZUlkIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZzIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJ0eXBlQSIsInR5cGVCIiwic2FtZUlucHV0VHlwZSIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJ1cGRhdGVEaXJlY3RpdmVzIiwib2xkRGlyIiwiZGlyIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJvbGRBcmciLCJhcmciLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiam9pbiIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsImJhc2VTZXRBdHRyIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJ0YXJnZXQkMSIsImtsYXNzIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsImN1cnJlbnRUYXJnZXQiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwiY2hhbmdlIiwibm9ybWFsaXplRXZlbnRzIiwic3ZnQ29udGFpbmVyIiwiZXZlbnRzIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsImNoaWxkTm9kZXMiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJjaGVja1ZhbCIsImNvbXBvc2luZyIsIm5vdEluRm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaXNOb3RJbkZvY3VzQW5kRGlydHkiLCJfdk1vZGlmaWVycyIsIm51bWJlciIsInRyaW0iLCJpc0RpcnR5V2l0aE1vZGlmaWVycyIsInBhcnNlU3R5bGVUZXh0IiwiY3NzVGV4dCIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJlbXB0eVN0eWxlIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZWROYW1lIiwibm9ybWFsaXplIiwidmVuZG9yTmFtZXMiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiZ2V0U3R5bGUiLCJ3aGl0ZXNwYWNlUkUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJjc3MiLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZXhwZWN0ZWRUeXBlIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRlZCIsImVuZCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJzdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsInMiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsInRyYW5zaXRpb24iLCJfZW50ZXJDYiIsIm5vZGVUeXBlIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsInJtIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBhdGNoIiwiYmFja2VuZCIsIm1vZHVsZXMiLCJyZW1vdmVOb2RlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwiaW5uZXJOb2RlIiwiYWN0aXZhdGUiLCJyZWFjdGl2YXRlQ29tcG9uZW50Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwicmVmJCQxIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwiY2hpbGRFbG0iLCJjcmVhdGVSbUNiIiwiZmluZElkeEluT2xkIiwib2xkQ2giLCJwYXRjaFZub2RlIiwicmVtb3ZlT25seSIsImh5ZHJhdGUiLCJuZXdDaCIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwidXBkYXRlQ2hpbGRyZW4iLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaW5pdGlhbCIsImlzUmVuZGVyZWRNb2R1bGUiLCJpblZQcmUiLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGRyZW5NYXRjaCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJvbGRFbG0iLCJwYXRjaGFibGUiLCJpJDIiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsImJpbmRpbmciLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsInNvbWUiLCJvIiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsImFjdHVhbGx5U2V0U2VsZWN0ZWQiLCJpc011bHRpcGxlIiwic2VsZWN0ZWQiLCJvcHRpb24iLCJzZWxlY3RlZEluZGV4IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImxvY2F0ZU5vZGUiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uJCQxIiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwiZGlzcGxheSIsInVuYmluZCIsInRyYW5zaXRpb25Qcm9wcyIsIm1vZGUiLCJnZXRSZWFsQ2hpbGQiLCJjb21wT3B0aW9ucyIsImV4dHJhY3RUcmFuc2l0aW9uRGF0YSIsInBsYWNlaG9sZGVyIiwiaCIsInJhd0NoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsIl9sZWF2aW5nIiwib2xkUmF3Q2hpbGQiLCJvbGRDaGlsZCIsImlzU2FtZUNoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiY2FsbFBlbmRpbmdDYnMiLCJfbW92ZUNiIiwicmVjb3JkUG9zaXRpb24iLCJuZXdQb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhcHBseVRyYW5zbGF0aW9uIiwib2xkUG9zIiwicG9zIiwiZHgiLCJsZWZ0IiwiZHkiLCJ0b3AiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInBsYXRmb3JtQ29tcG9uZW50cyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwidXBkYXRlZCIsImhhc01vdmUiLCJfcmVmbG93IiwiYm9keSIsIm9mZnNldEhlaWdodCIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiY2xvbmVOb2RlIiwiYXR0ciIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidXBkYXRlQ29tcG9uZW50IiwibW91bnRDb21wb25lbnQiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnkiLCJpc0Vycm9yIiwiaXNFeHRlbmRlZEVycm9yIiwiX25hbWUiLCJWaWV3Iiwicm91dGVyVmlldyIsInJvdXRlIiwiJHJvdXRlIiwiX3JvdXRlclZpZXdDYWNoZSIsImRlcHRoIiwiaW5hY3RpdmUiLCJfcm91dGVyUm9vdCIsInZub2RlRGF0YSIsInJvdXRlclZpZXdEZXB0aCIsIm1hdGNoZWQiLCJyZWdpc3RlclJvdXRlSW5zdGFuY2UiLCJpbnN0YW5jZXMiLCJwcm9wc1RvUGFzcyIsInJlc29sdmVQcm9wcyIsImVuY29kZVJlc2VydmVSRSIsImVuY29kZVJlc2VydmVSZXBsYWNlciIsImNvbW1hUkUiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkZWNvZGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZVF1ZXJ5IiwicGFyYW0iLCJwYXJ0cyIsInN0cmluZ2lmeVF1ZXJ5IiwidmFsMiIsIngiLCJ0cmFpbGluZ1NsYXNoUkUiLCJjcmVhdGVSb3V0ZSIsInJlY29yZCIsImxvY2F0aW9uIiwicmVkaXJlY3RlZEZyb20iLCJyb3V0ZXIiLCJzdHJpbmdpZnlRdWVyeSQkMSIsIm1ldGEiLCJmdWxsUGF0aCIsImdldEZ1bGxQYXRoIiwiZm9ybWF0TWF0Y2giLCJTVEFSVCIsIl9zdHJpbmdpZnlRdWVyeSIsImlzU2FtZVJvdXRlIiwiaXNPYmplY3RFcXVhbCIsImFLZXlzIiwiYktleXMiLCJhVmFsIiwiYlZhbCIsInJlc29sdmVQYXRoIiwicmVsYXRpdmUiLCJhcHBlbmQiLCJmaXJzdENoYXIiLCJzdGFjayIsInNlZ21lbnQiLCJjbGVhblBhdGgiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwXzEiLCJwYXRoVG9SZWdleHAiLCJwYXJzZV8xIiwicGFyc2UiLCJjb21waWxlXzEiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9GdW5jdGlvbl8xIiwidG9rZW5zVG9SZWdFeHBfMSIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXhlYyIsIm0iLCJlc2NhcGVkIiwib2Zmc2V0IiwicHJlZml4IiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJwcmV0dHkiLCJ0b2tlbiIsIlR5cGVFcnJvciIsImF0dGFjaEtleXMiLCJyZSIsImZsYWdzIiwic2Vuc2l0aXZlIiwic3RyaWN0IiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsImNvbXBpbGUiLCJyZWdleHBDb21waWxlQ2FjaGUiLCJmaWxsUGFyYW1zIiwicm91dGVNc2ciLCJmaWxsZXIiLCJwYXRoTWF0Y2giLCJub3JtYWxpemVMb2NhdGlvbiIsInJhd1BhdGgiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4IiwicXVlcnlJbmRleCIsImJhc2VQYXRoIiwiZXh0cmFRdWVyeSIsIl9wYXJzZVF1ZXJ5IiwicGFyc2VkUXVlcnkiLCJyZXNvbHZlUXVlcnkiLCJfVnVlIiwidG9UeXBlcyIsImV2ZW50VHlwZXMiLCJMaW5rIiwicmVxdWlyZWQiLCJleGFjdCIsImV4YWN0QWN0aXZlQ2xhc3MiLCIkcm91dGVyIiwiaHJlZiIsImNsYXNzZXMiLCJnbG9iYWxBY3RpdmVDbGFzcyIsImxpbmtBY3RpdmVDbGFzcyIsImdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MiLCJsaW5rRXhhY3RBY3RpdmVDbGFzcyIsImFjdGl2ZUNsYXNzRmFsbGJhY2siLCJleGFjdEFjdGl2ZUNsYXNzRmFsbGJhY2siLCJjb21wYXJlVGFyZ2V0IiwicXVlcnlJbmNsdWRlcyIsImlzSW5jbHVkZWRSb3V0ZSIsImd1YXJkRXZlbnQiLCJjbGljayIsInNjb3BlZFNsb3QiLCJuYXZpZ2F0ZSIsImlzQWN0aXZlIiwiaXNFeGFjdEFjdGl2ZSIsImZpbmRBbmNob3IiLCJtZXRhS2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0IiwiY3JlYXRlUm91dGVNYXAiLCJyb3V0ZXMiLCJvbGRQYXRoTGlzdCIsIm9sZFBhdGhNYXAiLCJvbGROYW1lTWFwIiwicGF0aExpc3QiLCJwYXRoTWFwIiwibmFtZU1hcCIsImFkZFJvdXRlUmVjb3JkIiwibWF0Y2hBcyIsInBhdGhUb1JlZ2V4cE9wdGlvbnMiLCJub3JtYWxpemVkUGF0aCIsIm5vcm1hbGl6ZVBhdGgiLCJjYXNlU2Vuc2l0aXZlIiwicmVnZXgiLCJjb21waWxlUm91dGVSZWdleCIsInJlZGlyZWN0IiwiY2hpbGRNYXRjaEFzIiwiYWxpYXMiLCJhbGlhc2VzIiwiYWxpYXNSb3V0ZSIsImNyZWF0ZU1hdGNoZXIiLCJjdXJyZW50Um91dGUiLCJfY3JlYXRlUm91dGUiLCJwYXJhbU5hbWVzIiwicmVjb3JkJDEiLCJtYXRjaFJvdXRlIiwib3JpZ2luYWxSZWRpcmVjdCIsInJlc29sdmVSZWNvcmRQYXRoIiwiYWxpYXNlZE1hdGNoIiwiYWxpYXNlZFJlY29yZCIsImFkZFJvdXRlcyIsInBvc2l0aW9uU3RvcmUiLCJzZXR1cFNjcm9sbCIsInByb3RvY29sQW5kUGF0aCIsInByb3RvY29sIiwiaG9zdCIsImFic29sdXRlUGF0aCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJnZXRTdGF0ZUtleSIsInNhdmVTY3JvbGxQb3NpdGlvbiIsInN0YXRlIiwiX2tleSIsImhhbmRsZVNjcm9sbCIsImlzUG9wIiwiYXBwIiwiYmVoYXZpb3IiLCJzY3JvbGxCZWhhdmlvciIsInBvc2l0aW9uIiwiZ2V0U2Nyb2xsUG9zaXRpb24iLCJzaG91bGRTY3JvbGwiLCJzY3JvbGxUb1Bvc2l0aW9uIiwicGFnZVhPZmZzZXQiLCJ5IiwicGFnZVlPZmZzZXQiLCJpc1ZhbGlkUG9zaXRpb24iLCJpc051bWJlciIsIm5vcm1hbGl6ZVBvc2l0aW9uIiwiaGFzaFN0YXJ0c1dpdGhOdW1iZXJSRSIsInNlbGVjdG9yIiwiZ2V0RWxlbWVudEJ5SWQiLCJkb2NSZWN0IiwiZG9jdW1lbnRFbGVtZW50IiwiZWxSZWN0IiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwic2Nyb2xsVG8iLCJ1YSIsInN1cHBvcnRzUHVzaFN0YXRlIiwiVGltZSIsImdlbktleSIsInRvRml4ZWQiLCJwdXNoU3RhdGUiLCJ1cmwiLCJydW5RdWV1ZSIsInN0ZXAiLCJyZXNvbHZlQXN5bmNDb21wb25lbnRzIiwiaGFzQXN5bmMiLCJmbGF0TWFwQ29tcG9uZW50cyIsInJlc29sdmVkRGVmIiwibXNnIiwiRXJyb3IiLCJmbGF0dGVuIiwiTmF2aWdhdGlvbkR1cGxpY2F0ZWQiLCJIaXN0b3J5IiwiYmFzZUVsIiwibm9ybWFsaXplQmFzZSIsInJlYWR5IiwicmVhZHlDYnMiLCJyZWFkeUVycm9yQ2JzIiwiZXJyb3JDYnMiLCJleHRyYWN0R3VhcmRzIiwicmVjb3JkcyIsInJldmVyc2UiLCJndWFyZHMiLCJpbnN0YW5jZSIsImd1YXJkIiwiZXh0cmFjdEd1YXJkIiwiYmluZEd1YXJkIiwibGlzdGVuIiwib25SZWFkeSIsImVycm9yQ2IiLCJvbkVycm9yIiwidHJhbnNpdGlvblRvIiwib25Db21wbGV0ZSIsIm9uQWJvcnQiLCJjb25maXJtVHJhbnNpdGlvbiIsInVwZGF0ZVJvdXRlIiwiZW5zdXJlVVJMIiwiYWJvcnQiLCJhY3RpdmF0ZWQiLCJkZWFjdGl2YXRlZCIsInJlc29sdmVRdWV1ZSIsImV4dHJhY3RMZWF2ZUd1YXJkcyIsImJlZm9yZUhvb2tzIiwiZXh0cmFjdFVwZGF0ZUhvb2tzIiwicG9zdEVudGVyQ2JzIiwiaXNWYWxpZCIsInBvbGwiLCJiaW5kRW50ZXJHdWFyZCIsImV4dHJhY3RFbnRlckd1YXJkcyIsInJlc29sdmVIb29rcyIsInByZXYiLCJhZnRlckhvb2tzIiwiSFRNTDVIaXN0b3J5IiwiSGlzdG9yeSQkMSIsImV4cGVjdFNjcm9sbCIsInN1cHBvcnRzU2Nyb2xsIiwiaW5pdExvY2F0aW9uIiwiZ2V0TG9jYXRpb24iLCJnbyIsImZyb21Sb3V0ZSIsImdldEN1cnJlbnRMb2NhdGlvbiIsImRlY29kZVVSSSIsInBhdGhuYW1lIiwic2VhcmNoIiwiSGFzaEhpc3RvcnkiLCJjaGVja0ZhbGxiYWNrIiwiZW5zdXJlU2xhc2giLCJzZXR1cExpc3RlbmVycyIsImdldEhhc2giLCJyZXBsYWNlSGFzaCIsInB1c2hIYXNoIiwic2VhcmNoSW5kZXgiLCJnZXRVcmwiLCJBYnN0cmFjdEhpc3RvcnkiLCJ0YXJnZXRJbmRleCIsIlZ1ZVJvdXRlciIsImFwcHMiLCJtYXRjaGVyIiwicmVnaXN0ZXJIb29rIiwic2V0dXBIYXNoTGlzdGVuZXIiLCJfcm91dGUiLCJiZWZvcmVFYWNoIiwiYmVmb3JlUmVzb2x2ZSIsImFmdGVyRWFjaCIsImJhY2siLCJmb3J3YXJkIiwiZ2V0TWF0Y2hlZENvbXBvbmVudHMiLCJjcmVhdGVIcmVmIiwibm9ybWFsaXplZFRvIiwiaW5zdGFsbGVkIiwicmVnaXN0ZXJJbnN0YW5jZSIsImNhbGxWYWwiLCJiZWZvcmVDcmVhdGUiLCJfcm91dGVyIiwiYmVmb3JlUm91dGVFbnRlciIsImJlZm9yZVJvdXRlTGVhdmUiLCJiZWZvcmVSb3V0ZVVwZGF0ZSIsIm5vcm1hbGl6ZUNvbXBvbmVudCIsInNjcmlwdEV4cG9ydHMiLCJmdW5jdGlvbmFsVGVtcGxhdGUiLCJpbmplY3RTdHlsZXMiLCJtb2R1bGVJZGVudGlmaWVyIiwic2hhZG93TW9kZSIsIl9fVlVFX1NTUl9DT05URVhUX18iLCJfcmVnaXN0ZXJlZENvbXBvbmVudHMiLCJfc3NyUmVnaXN0ZXIiLCJzaGFkb3dSb290IiwiX2luamVjdFN0eWxlcyIsIm9yaWdpbmFsUmVuZGVyIiwiZXhwb3J0cyIsImciLCJtb2R1bGUiLCJkZXZ0b29sSG9vayIsImZvckVhY2hWYWx1ZSIsIk1vZHVsZSIsInJhd01vZHVsZSIsInJ1bnRpbWUiLCJfY2hpbGRyZW4iLCJfcmF3TW9kdWxlIiwicmF3U3RhdGUiLCJuYW1lc3BhY2VkIiwiYWRkQ2hpbGQiLCJnZXRDaGlsZCIsImFjdGlvbnMiLCJtdXRhdGlvbnMiLCJnZXR0ZXJzIiwiZm9yRWFjaENoaWxkIiwiZm9yRWFjaEdldHRlciIsImZvckVhY2hBY3Rpb24iLCJmb3JFYWNoTXV0YXRpb24iLCJNb2R1bGVDb2xsZWN0aW9uIiwicmF3Um9vdE1vZHVsZSIsInJlZ2lzdGVyIiwicmVkdWNlIiwicm9vdCIsImdldE5hbWVzcGFjZSIsInRhcmdldE1vZHVsZSIsIm5ld01vZHVsZSIsInJhd0NoaWxkTW9kdWxlIiwidW5yZWdpc3RlciIsIlN0b3JlIiwicGx1Z2lucyIsIl9jb21taXR0aW5nIiwiX2FjdGlvbnMiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfbXV0YXRpb25zIiwiX3dyYXBwZWRHZXR0ZXJzIiwiX21vZHVsZXMiLCJfbW9kdWxlc05hbWVzcGFjZU1hcCIsIl9zdWJzY3JpYmVycyIsIl93YXRjaGVyVk0iLCJzdG9yZSIsImRpc3BhdGNoIiwiY29tbWl0IiwicGF5bG9hZCIsImluc3RhbGxNb2R1bGUiLCJyZXNldFN0b3JlVk0iLCJfZGV2dG9vbEhvb2siLCJ0YXJnZXRTdGF0ZSIsInN1YnNjcmliZSIsIm11dGF0aW9uIiwiZGV2dG9vbFBsdWdpbiIsInByb3RvdHlwZUFjY2Vzc29ycyQxIiwiZ2VuZXJpY1N1YnNjcmliZSIsInJlc2V0U3RvcmUiLCJob3QiLCJvbGRWbSIsIl92bSIsIndyYXBwZWRHZXR0ZXJzIiwiJCRzdGF0ZSIsImVuYWJsZVN0cmljdE1vZGUiLCJfd2l0aENvbW1pdCIsInJvb3RTdGF0ZSIsImlzUm9vdCIsInBhcmVudFN0YXRlIiwiZ2V0TmVzdGVkU3RhdGUiLCJtb2R1bGVOYW1lIiwibG9jYWwiLCJub05hbWVzcGFjZSIsIl90eXBlIiwiX3BheWxvYWQiLCJfb3B0aW9ucyIsInVuaWZ5T2JqZWN0U3R5bGUiLCJnZXR0ZXJzUHJveHkiLCJzcGxpdFBvcyIsImxvY2FsVHlwZSIsIm1ha2VMb2NhbEdldHRlcnMiLCJtYWtlTG9jYWxDb250ZXh0IiwicmVnaXN0ZXJNdXRhdGlvbiIsImFjdGlvbiIsInJvb3RHZXR0ZXJzIiwicmVnaXN0ZXJBY3Rpb24iLCJyYXdHZXR0ZXIiLCJyZWdpc3RlckdldHRlciIsInZ1ZXhJbml0IiwiJHN0b3JlIiwiYXBwbHlNaXhpbiIsImVudHJ5IiwiYWxsIiwiYWZ0ZXIiLCJzdWJzY3JpYmVBY3Rpb24iLCJyZWdpc3Rlck1vZHVsZSIsInByZXNlcnZlU3RhdGUiLCJ1bnJlZ2lzdGVyTW9kdWxlIiwiaG90VXBkYXRlIiwibmV3T3B0aW9ucyIsImNvbW1pdHRpbmciLCJtYXBTdGF0ZSIsIm5vcm1hbGl6ZU5hbWVzcGFjZSIsInN0YXRlcyIsIm5vcm1hbGl6ZU1hcCIsImdldE1vZHVsZUJ5TmFtZXNwYWNlIiwidnVleCIsIm1hcE11dGF0aW9ucyIsIm1hcEdldHRlcnMiLCJtYXBBY3Rpb25zIiwiaGVscGVyIiwiaW5kZXhfZXNtIiwiY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMiLCJ0IiwiciIsImNoaWxkQWN0aXZlIiwiaXRlbVNob3ciLCJpbml0QWN0aXZlU3RhdGUiLCJpbml0U2hvd1N0YXRlIiwiaXNMaW5rQWN0aXZlIiwiaXNBbGlhc0FjdGl2ZSIsImlzQ2hpbGRBY3RpdmUiLCJjbGlja0V2ZW50IiwiZW1pdEl0ZW1DbGljayIsIm1vYmlsZUl0ZW0iLCJkaXNhYmxlZCIsImlzQ29sbGFwc2VkIiwiZmlyc3RJdGVtIiwic2hvd09uZUNoaWxkIiwic2hvd0NoaWxkIiwiYWN0aXZlU2hvdyIsInNldEFjdGl2ZVNob3ciLCJlbWl0QWN0aXZlU2hvdyIsImlzUm91dGVyTGluayIsImV4cGFuZEVudGVyIiwiaGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiZXhwYW5kQWZ0ZXJFbnRlciIsImV4cGFuZEJlZm9yZUxlYXZlIiwicnRsIiwiSXRlbSIsIl9fZmlsZSIsIkxpc3RJdGVtIiwibW91c2VFbnRlciIsIm1vdXNlZW50ZXIiLCJ0YWJpbmRleCIsImF0dHJpYnV0ZXMiLCJpY29uIiwiZWxlbWVudCIsImJhZGdlIiwidGl0bGUiLCJtZW51IiwiY29sbGFwc2VkIiwid2lkdGgiLCJ3aWR0aENvbGxhcHNlZCIsInRoZW1lIiwibW9iaWxlSXRlbVBvcyIsIm1vYmlsZUl0ZW1IZWlnaHQiLCJjbG9zZVRpbWVvdXQiLCJzaWRlYmFySGVpZ2h0Iiwic2lkZWJhcldpZHRoIiwiaW5pdFNpZGViYXJIZWlnaHQiLCJtb3VzZUxlYXZlIiwidG9nZ2xlQ29sbGFwc2UiLCJvbkFjdGl2ZVNob3ciLCJvbkl0ZW1DbGljayIsIm1vdXNlbGVhdmUiLCJoZWFkZXIiLCJ2aXNpYmxlT25Db2xsYXBzZSIsInJpZ2h0IiwiZGVmYXVsdENvbnRhaW5lckVsZW1lbnQiLCJkZWZhdWx0SWNvblBhY2siLCJkZWZhdWx0SWNvbkNvbXBvbmVudCIsImRlZmF1bHREaWFsb2dDb25maXJtVGV4dCIsImRlZmF1bHREaWFsb2dDYW5jZWxUZXh0IiwiZGVmYXVsdFNuYWNrYmFyRHVyYXRpb24iLCJkZWZhdWx0U25hY2tiYXJQb3NpdGlvbiIsImRlZmF1bHRUb2FzdER1cmF0aW9uIiwiZGVmYXVsdFRvYXN0UG9zaXRpb24iLCJkZWZhdWx0Tm90aWZpY2F0aW9uRHVyYXRpb24iLCJkZWZhdWx0Tm90aWZpY2F0aW9uUG9zaXRpb24iLCJkZWZhdWx0VG9vbHRpcFR5cGUiLCJkZWZhdWx0VG9vbHRpcEFuaW1hdGVkIiwiZGVmYXVsdFRvb2x0aXBEZWxheSIsImRlZmF1bHRJbnB1dEF1dG9jb21wbGV0ZSIsImRlZmF1bHREYXRlRm9ybWF0dGVyIiwiZGVmYXVsdERhdGVQYXJzZXIiLCJkZWZhdWx0RGF0ZUNyZWF0b3IiLCJkZWZhdWx0RGF5TmFtZXMiLCJkZWZhdWx0TW9udGhOYW1lcyIsImRlZmF1bHRGaXJzdERheU9mV2VlayIsImRlZmF1bHRVbnNlbGVjdGFibGVEYXlzT2ZXZWVrIiwiZGVmYXVsdFRpbWVGb3JtYXR0ZXIiLCJkZWZhdWx0VGltZVBhcnNlciIsImRlZmF1bHRNb2RhbENhbkNhbmNlbCIsImRlZmF1bHRNb2RhbFNjcm9sbCIsImRlZmF1bHREYXRlcGlja2VyTW9iaWxlTmF0aXZlIiwiZGVmYXVsdFRpbWVwaWNrZXJNb2JpbGVOYXRpdmUiLCJkZWZhdWx0Tm90aWNlUXVldWUiLCJkZWZhdWx0SW5wdXRIYXNDb3VudGVyIiwiZGVmYXVsdFRhZ2lucHV0SGFzQ291bnRlciIsImRlZmF1bHRVc2VIdG1sNVZhbGlkYXRpb24iLCJkZWZhdWx0RHJvcGRvd25Nb2JpbGVNb2RhbCIsImRlZmF1bHRGaWVsZExhYmVsUG9zaXRpb24iLCJkZWZhdWx0RGF0ZXBpY2tlclllYXJzUmFuZ2UiLCJkZWZhdWx0RGF0ZXBpY2tlck5lYXJieU1vbnRoRGF5cyIsImRlZmF1bHREYXRlcGlja2VyTmVhcmJ5U2VsZWN0YWJsZU1vbnRoRGF5cyIsImRlZmF1bHREYXRlcGlja2VyU2hvd1dlZWtOdW1iZXIiLCJjb25maWckMSIsInNldE9wdGlvbnMiLCJub3JtYWxpemVDb21wb25lbnRfMSIsInRlbXBsYXRlIiwic2NyaXB0IiwiaXNGdW5jdGlvbmFsVGVtcGxhdGUiLCJjcmVhdGVJbmplY3RvciIsImNyZWF0ZUluamVjdG9yU1NSIiwiY3JlYXRlSW5qZWN0b3JTaGFkb3ciLCJyZWdpc3RlckNvbXBvbmVudCIsInJlZ2lzdGVyQ29tcG9uZW50UHJvZ3JhbW1hdGljIiwiJGJ1ZWZ5IiwiX3R5cGVvZiIsIl9kZWZpbmVQcm9wZXJ0eSIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImdldFZhbHVlQnlQYXRoIiwiYXJyYXkiLCJpc01vYmlsZSIsIkFuZHJvaWQiLCJCbGFja0JlcnJ5IiwiaU9TIiwiT3BlcmEiLCJXaW5kb3dzIiwiYW55IiwicmVtb3ZlRWxlbWVudCIsIkZvcm1FbGVtZW50TWl4aW4iLCJzaXplIiwiZXhwYW5kZWQiLCJyb3VuZGVkIiwiaWNvblBhY2siLCJhdXRvY29tcGxldGUiLCJtYXhsZW5ndGgiLCJ1c2VIdG1sNVZhbGlkYXRpb24iLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImlzRm9jdXNlZCIsIm5ld0ljb25QYWNrIiwicGFyZW50RmllbGQiLCIkZGF0YSIsIl9pc0ZpZWxkIiwic3RhdHVzVHlwZSIsIm5ld1R5cGUiLCJzdGF0dXNNZXNzYWdlIiwibmV3TWVzc2FnZSIsImljb25TaXplIiwiZm9jdXMiLCJfdGhpcyIsIl9lbGVtZW50UmVmIiwib25CbHVyIiwiY2hlY2tIdG1sNVZhbGlkaXR5Iiwib25Gb2N1cyIsIl90aGlzMiIsIm1lc3NhZ2UiLCJjaGVja1ZhbGlkaXR5IiwiSWNvbiIsIl9oIiwidXNlSWNvbkNvbXBvbmVudCIsImN1c3RvbUNsYXNzIiwibmV3UGFjayIsIm5ld0ljb24iLCJuZXdDdXN0b21TaXplIiwicGFjayIsImN1c3RvbVNpemUiLCJib3RoIiwiYWRkRkFQcmVmaXgiLCJnZXRFcXVpdmFsZW50SWNvbk9mIiwic3BsaXRUeXBlIiwiY3VzdG9tU2l6ZUJ5UGFjayIsImRlZmF1bHRTaXplIiwibWVkaXVtU2l6ZSIsImxhcmdlU2l6ZSIsIklucHV0Iiwicm9vdENsYXNzZXMiLCJpbnB1dENsYXNzZXMiLCJuZXdBdXRvY29tcGxldGUiLCJjb21wdXRlZFZhbHVlIiwib25JbnB1dCIsInBhc3N3b3JkUmV2ZWFsIiwic3RhdHVzVHlwZUljb24iLCJwYXNzd29yZFZpc2libGVJY29uIiwidG9nZ2xlUGFzc3dvcmRWaXNpYmlsaXR5IiwiaGFzQ291bnRlciIsInZhbHVlTGVuZ3RoIiwibmV3VmFsdWUiLCJpc1Bhc3N3b3JkVmlzaWJsZSIsImljb25Qb3NpdGlvbiIsImhhc01lc3NhZ2UiLCJoYXNJY29uUmlnaHQiLCJpbnB1dCIsIkF1dG9jb21wbGV0ZSIsImZvY3VzZWQiLCJrZXlDb2RlIiwidGFiUHJlc3NlZCIsImVudGVyUHJlc3NlZCIsImtleUFycm93cyIsIiQkdiIsImhhc0VtcHR5U2xvdCIsImhhc0hlYWRlclNsb3QiLCJpc0xpc3RJblZpZXdwb3J0VmVydGljYWxseSIsImhvdmVyZWQiLCJmaWVsZCIsImtlZXBGaXJzdCIsImNsZWFyT25TZWxlY3QiLCJvcGVuT25Gb2N1cyIsImN1c3RvbUZvcm1hdHRlciIsImhhc0ZvY3VzIiwiX2lzQXV0b2NvbXBsZXRlIiwid2hpdGVMaXN0IiwiZHJvcGRvd24iLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsInJldHVybiIsImhhc0RlZmF1bHRTbG90IiwiZW1wdHkiLCJoYXNGb290ZXJTbG90IiwiZm9vdGVyIiwiY2FsY0Ryb3Bkb3duSW5WaWV3cG9ydFZlcnRpY2FsIiwic2V0SG92ZXJlZCIsImN1cnJlbnRWYWx1ZSIsInNlbGVjdEZpcnN0T3B0aW9uIiwiY2xvc2VEcm9wZG93biIsIl90aGlzMyIsImNsaWNrZWRPdXRzaWRlIiwiX3RoaXM0IiwicmVjdCIsImJvdHRvbSIsImlubmVySGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiZGlyZWN0aW9uIiwic3VtIiwidmlzTWluIiwic2Nyb2xsVG9wIiwidmlzTWF4Iiwib2Zmc2V0VG9wIiwic2VsZWN0IiwiYmVmb3JlRGVzdHJveSIsIlBsdWdpbiIsIkJ1dHRvbiIsIm91dGxpbmVkIiwiaW52ZXJ0ZWQiLCJuYXRpdmVUeXBlIiwiaWNvbkxlZnQiLCJsYWJlbCIsImljb25SaWdodCIsInZhbGlkYXRvciIsIkNoZWNrYm94IiwidHJ1ZVZhbHVlIiwiZmFsc2VWYWx1ZSIsImluZGV0ZXJtaW5hdGUiLCJuYXRpdmVWYWx1ZSIsInN0b3BQcm9wYWdhdGlvbiIsIiQkYSIsIiQkZWwiLCIkJGMiLCJjaGVja2VkIiwiJCRpIiwiQ2hlY2tib3hCdXR0b24iLCJDb2xsYXBzZSIsInRvZ2dsZSIsIm9wZW4iLCJpc09wZW4iLCJhbmltYXRpb24iLCJhcmlhSWQiLCJBTSIsIlBNIiwiVGltZXBpY2tlck1peGluIiwiaW5saW5lIiwibWluVGltZSIsIm1heFRpbWUiLCJlZGl0YWJsZSIsImhvdXJGb3JtYXQiLCJpbmNyZW1lbnRNaW51dGVzIiwiaW5jcmVtZW50U2Vjb25kcyIsInRpbWVGb3JtYXR0ZXIiLCJkYXRlIiwiaG91cnMiLCJnZXRIb3VycyIsIm1pbnV0ZXMiLCJnZXRNaW51dGVzIiwic2Vjb25kcyIsImdldFNlY29uZHMiLCJwZXJpb2QiLCJwYWQiLCJlbmFibGVTZWNvbmRzIiwidGltZVBhcnNlciIsInRpbWVTdHJpbmciLCJhbSIsImRhdGVTdHJpbmcxMiIsInRpbWUiLCJzZXRNaWxsaXNlY29uZHMiLCJzZXRTZWNvbmRzIiwic2V0TWludXRlcyIsInNldEhvdXJzIiwibW9iaWxlTmF0aXZlIiwidW5zZWxlY3RhYmxlVGltZXMiLCJkZWZhdWx0TWludXRlcyIsImRlZmF1bHRTZWNvbmRzIiwiZGF0ZVNlbGVjdGVkIiwiaG91cnNTZWxlY3RlZCIsIm1pbnV0ZXNTZWxlY3RlZCIsInNlY29uZHNTZWxlY3RlZCIsIm1lcmlkaWVuU2VsZWN0ZWQiLCJIT1VSX0ZPUk1BVF8yNCIsIkhPVVJfRk9STUFUXzEyIiwibnVtYmVyT2ZIb3VycyIsImlzSG91ckZvcm1hdDI0IiwiZm9ybWF0TnVtYmVyIiwibWVyaWRpZW5zIiwidXBkYXRlSW50ZXJuYWxTdGF0ZSIsIm9uTWVyaWRpZW5DaGFuZ2UiLCJ1cGRhdGVEYXRlU2VsZWN0ZWQiLCJvbkhvdXJzQ2hhbmdlIiwib25NaW51dGVzQ2hhbmdlIiwib25TZWNvbmRzQ2hhbmdlIiwiaXNIb3VyRGlzYWJsZWQiLCJob3VyIiwibWluSG91cnMiLCJtYXhIb3VycyIsImlzTWludXRlRGlzYWJsZWQiLCJtaW51dGUiLCJtaW5NaW51dGVzIiwibWF4TWludXRlcyIsImlzU2Vjb25kRGlzYWJsZWQiLCJzZWNvbmQiLCJtaW5TZWNvbmRzIiwibWF4U2Vjb25kcyIsIm9uQ2hhbmdlIiwiY2xvc2UiLCJoYW5kbGVPbkZvY3VzIiwiZm9ybWF0SEhNTVNTIiwib25DaGFuZ2VOYXRpdmVQaWNrZXIiLCJwcmVwZW5kWmVybyIsImZvcm1hdFZhbHVlIiwia2V5UHJlc3MiLCJEcm9wZG93biIsImlzSG92ZXJhYmxlIiwiYXJpYVJvbGVNZW51IiwiaG92ZXJhYmxlIiwibW9iaWxlTW9kYWwiLCJhcmlhUm9sZSIsImNsb3NlT25DbGljayIsIl9pc0Ryb3Bkb3duIiwiaXNNb2JpbGVNb2RhbCIsInNlbGVjdEl0ZW0iLCJpc0luV2hpdGVMaXN0IiwiZHJvcGRvd25NZW51IiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIiLCJfZGlkSXRlcmF0b3JFcnJvcjIiLCJfaXRlcmF0b3JFcnJvcjIiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiRHJvcGRvd25JdGVtIiwiY3VzdG9tIiwiaGFzTGluayIsIml0ZW1DbGFzc2VzIiwiYXJpYVJvbGVJdGVtIiwiZm9jdXNhYmxlIiwiYW5jaG9yQ2xhc3NlcyIsInNlcGFyYXRvciIsInBhZGRpbmdsZXNzIiwiaXNDbGlja2FibGUiLCJGaWVsZEJvZHkiLCJGaWVsZCIsImZpZWxkVHlwZSIsImZpZWxkTGFiZWxTaXplIiwibGFiZWxGb3IiLCJmb3JtYXR0ZWRNZXNzYWdlIiwiaG9yaXpvbnRhbCIsImdyb3VwZWQiLCJncm91cE11bHRpbGluZSIsImFkZG9ucyIsImxhYmVsUG9zaXRpb24iLCJuZXdQb3NpdGlvbiIsImhhc0xhYmVsIiwibnVtYmVySW5wdXRDbGFzc2VzIiwibWVzc2FnZXMiLCJudW1iZXJpbnB1dCIsImNvbnRyb2xzUG9zaXRpb24iLCJyZW5kZXJlZE5vZGUiLCJfY29tcG9uZW50cyIsIkNsb2NrcGlja2VyRmFjZSIsIm9uTW91c2VEb3duIiwib25Nb3VzZVVwIiwib25EcmFnTW92ZSIsIm51bSIsImdldEZhY2VOdW1iZXJDbGFzc2VzIiwiZ2V0TnVtYmVyVHJhbnNsYXRlIiwicGlja2VyU2l6ZSIsIm1pbiIsImRvdWJsZSIsImZhY2VOdW1iZXJzIiwiZGlzYWJsZWRWYWx1ZXMiLCJpc0RyYWdnaW5nIiwiaW5wdXRWYWx1ZSIsInByZXZBbmdsZSIsImNvdW50IiwiY291bnRQZXJSaW5nIiwicmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJpbmRpY2F0b3JTaXplIiwiaW5uZXJSYWRpdXMiLCJkZWdyZWVzUGVyVW5pdCIsImRlZ3JlZXMiLCJQSSIsImhhbmRSb3RhdGVBbmdsZSIsImN1cnJlbnRBbmdsZSIsInRhcmdldEFuZ2xlIiwiY2FsY0hhbmRBbmdsZSIsImRpc3BsYXllZFZhbHVlIiwiZGVncmVlc0RpZmYiLCJzaG9ydGVzdERpc3RhbmNlRGVncmVlcyIsImhhbmRTY2FsZSIsImNhbGNIYW5kU2NhbGUiLCJoYW5kU3R5bGUiLCJpc0Rpc2FibGVkIiwiZXVjbGlkZWFuIiwicDAiLCJwMSIsInNxcnQiLCJzdG9wIiwibW9kRGlmZiIsInNob3J0ZXN0RGlzdGFuY2UiLCJhYnMiLCJjb29yZFRvQW5nbGUiLCJjZW50ZXIiLCJhdGFuMiIsIl90aGlzJGdldE51bWJlckNvb3JkcyIsImdldE51bWJlckNvb3JkcyIsImlzSW5uZXJSaW5nIiwicm91bmQiLCJzaW4iLCJjb3MiLCJhbmdsZSIsIl90aGlzJCRyZWZzJGNsb2NrJGdldCIsImNsb2NrIiwiX3JlZiIsInRvdWNoZXMiLCJjb29yZHMiLCJjbGllbnRYIiwiY2xpZW50WSIsImhhbmRBbmdsZSIsImluc2lkZUNsaWNrIiwiQ2xvY2twaWNrZXIiLCJpc1NlbGVjdGluZ0hvdXIiLCJob3Vyc0Rpc3BsYXkiLCJtaW51dGVzRGlzcGxheSIsIm9uTWVyaWRpZW5DbGljayIsImZhY2VTaXplIiwibWluRmFjZVZhbHVlIiwibWF4RmFjZVZhbHVlIiwiZmFjZURpc2FibGVkVmFsdWVzIiwib25DbG9ja0lucHV0Iiwib25DbG9ja0NoYW5nZSIsImF1dG9Td2l0Y2giLCJfaXNDbG9ja3BpY2tlciIsIm91dGVyUGFkZGluZyIsIlNlbGVjdCIsInNwYW5DbGFzc2VzIiwibmF0aXZlU2l6ZSIsIiQkc2VsZWN0ZWRWYWwiLCJEYXRlcGlja2VyVGFibGVSb3ciLCJnZXRXZWVrTnVtYmVyIiwid2VlayIsImRheSIsInNlbGVjdGFibGVEYXRlIiwiY2xhc3NPYmplY3QiLCJldmVudHNEYXRlTWF0Y2giLCJpbmRpY2F0b3JzIiwiZW1pdENob3NlbkRhdGUiLCJzZXRSYW5nZUhvdmVyRW5kRGF0ZSIsImdldERhdGUiLCJzZWxlY3RlZERhdGUiLCJob3ZlcmVkRGF0ZVJhbmdlIiwibW9udGgiLCJtaW5EYXRlIiwibWF4RGF0ZSIsInVuc2VsZWN0YWJsZURhdGVzIiwidW5zZWxlY3RhYmxlRGF5c09mV2VlayIsInNlbGVjdGFibGVEYXRlcyIsImRhdGVDcmVhdG9yIiwibmVhcmJ5TW9udGhEYXlzIiwibmVhcmJ5U2VsZWN0YWJsZU1vbnRoRGF5cyIsInNob3dXZWVrTnVtYmVyIiwicnVsZXNGb3JGaXJzdFdlZWsiLCJmaXJzdERheU9mV2VlayIsImZpcnN0V2Vla09mZnNldCIsInllYXIiLCJkb3ciLCJkb3kiLCJmd2QiLCJnZXREYXkiLCJkYXlzSW5ZZWFyIiwiaXNMZWFwWWVhciIsImdldFNldERheU9mWWVhciIsImdldEZ1bGxZZWFyIiwid2Vla3NJblllYXIiLCJ3ZWVrT2Zmc2V0Iiwid2Vla09mZnNldE5leHQiLCJtb20iLCJyZXNXZWVrIiwicmVzWWVhciIsInZhbGlkaXR5IiwiZ2V0TW9udGgiLCJlbmFibGVkRGF0ZSIsImRpc2FibGVkRGF0ZSIsIl9pMiIsImRheU9mV2VlayIsImRheUV2ZW50cyIsImRhdGVNYXRjaCIsImRhdGVPbmUiLCJkYXRlVHdvIiwiZGF0ZVdpdGhpbiIsImRhdGVzIiwiaXNEZWZpbmVkIiwiRGF0ZXBpY2tlclRhYmxlIiwiaGFzRXZlbnRzIiwiZXZlbnRzSW5UaGlzV2VlayIsInJhbmdlIiwidXBkYXRlU2VsZWN0ZWREYXRlIiwiZGF5TmFtZXMiLCJtb250aE5hbWVzIiwic2VsZWN0ZWRCZWdpbkRhdGUiLCJzZWxlY3RlZEVuZERhdGUiLCJob3ZlcmVkRW5kRGF0ZSIsInZpc2libGVEYXlOYW1lcyIsImN1cnJlbnREYXlOYW1lIiwiZXZlbnRzSW5UaGlzTW9udGgiLCJtb250aEV2ZW50cyIsIndlZWtzSW5UaGlzTW9udGgiLCJkYXlzSW5UaGlzTW9udGgiLCJzdGFydGluZ0RheSIsIm5ld1dlZWsiLCJ3ZWVrQnVpbGRlciIsIndlZWtWYWxpZCIsImhhbmRsZVNlbGVjdFJhbmdlRGF0ZSIsInN0YXJ0aW5nRGF0ZSIsInRoaXNNb250aCIsInRoaXNXZWVrIiwiZGF5c0FnbyIsImRheXNGb3J3YXJkIiwic3RyaXBwZWQiLCJ0aW1lZCIsIndlZWtEYXRlIiwiRGF0ZXBpY2tlck1vbnRoIiwiZXZlbnRzSW5UaGlzWWVhciIsInllYXJFdmVudHMiLCJtb250aERhdGVzIiwibW9udGhzIiwiRGF0ZXBpY2tlciIsIm9uSW5wdXRDbGljayIsInRvZ2dsZVBpY2tlciIsInNob3dQcmV2Iiwic2hvd05leHQiLCJpc1R5cGVNb250aCIsImZvY3VzZWREYXRlRGF0YSIsImZvcm1hdE5hdGl2ZSIsImZvY3VzZWREYXRlIiwiZGF0ZUZvcm1hdHRlciIsInl5eXlNTWRkIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwiZGF0ZVBhcnNlciIsInllYXJzUmFuZ2UiLCJfaXNEYXRlcGlja2VyIiwibGlzdE9mWWVhcnMiLCJsYXRlc3RZZWFyIiwiZWFybGllc3RZZWFyIiwiYXJyYXlPZlllYXJzIiwiZm9ybWF0WVlZWU1NIiwiZm9ybWF0WVlZWU1NREQiLCJjdXJyZW50RGF0ZSIsIk1vZGFsIiwiZnVsbFNjcmVlbiIsImNhbmNlbCIsImhhc01vZGFsQ2FyZCIsImNvbnRlbnQiLCJwcm9ncmFtbWF0aWMiLCJjYW5DYW5jZWwiLCJvbkNhbmNlbCIsInNjcm9sbCIsInNhdmVkU2Nyb2xsVG9wIiwibmV3V2lkdGgiLCJjYW5jZWxPcHRpb25zIiwic2hvd1giLCJjdXN0b21TdHlsZSIsIm1heFdpZHRoIiwiRGlhbG9nIiwiaGFzSWNvbiIsImljb25CeVR5cGUiLCJjb25maXJtIiwicHJvbXB0IiwiaW5wdXRBdHRycyIsImNhbmNlbFRleHQiLCJjb25maXJtVGV4dCIsImhhc0lucHV0Iiwib25Db25maXJtIiwiZm9jdXNPbiIsInNob3dDYW5jZWwiLCJjYW5jZWxCdXR0b24iLCJjb25maXJtQnV0dG9uIiwiRGlhbG9nUHJvZ3JhbW1hdGljIiwiYWxlcnQiLCJkZWZhdWx0UGFyYW0iLCJhc3NpZ24iLCJGaWxlIiwiTG9hZGluZyIsImlzRnVsbFBhZ2UiLCJjb250YWluZXIiLCJMb2FkaW5nUHJvZ3JhbW1hdGljIiwiTWVudSIsIk1lbnVMaXN0IiwidmxhYmVsIiwiTWVudUl0ZW0iLCJuZXdBY3RpdmUiLCJvbkNsaWNrIiwibmV3RXhwYW5kZWQiLCJyZXNldCIsIk1lc3NhZ2VNaXhpbiIsImNsb3NhYmxlIiwiYXV0b0Nsb3NlIiwic2V0QXV0b0Nsb3NlIiwidGltZXIiLCJNZXNzYWdlIiwiYXJpYUNsb3NlTGFiZWwiLCJuZXdJY29uU2l6ZSIsIk1vZGFsUHJvZ3JhbW1hdGljIiwiTm90aWNlTWl4aW4iLCJwYXJlbnRUb3AiLCJwYXJlbnRCb3R0b20iLCJuZXdDb250YWluZXIiLCJjb3JyZWN0UGFyZW50Iiwic2hvdWxkUXVldWUiLCJjaGlsZEVsZW1lbnRDb3VudCIsInNob3dOb3RpY2UiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJpbmRlZmluaXRlIiwibmV3RHVyYXRpb24iLCJzZXR1cENvbnRhaW5lciIsImNsYXNzTmFtZSIsIk5vdGlmaWNhdGlvbiIsIk5vdGlmaWNhdGlvbk5vdGljZSIsIk5vdGlmaWNhdGlvblByb2dyYW1tYXRpYyIsIk5hdmJhckJ1cmdlciIsImlzT3BlbmVkIiwiTmF2YmFyIiwiY29tcHV0ZWRDbGFzc2VzIiwidG9nZ2xlQWN0aXZlIiwidHJhbnNwYXJlbnQiLCJmaXhlZFRvcCIsImZpeGVkQm90dG9tIiwiaW50ZXJuYWxJc0FjdGl2ZSIsImlzU2V0IiwiY2hlY2tJZkZpeGVkUHJvcGVydGllc0FyZUNvbGxpZGluZyIsInNldEJvZHlDbGFzcyIsInJlbW92ZUJvZHlDbGFzcyIsIk5hdmJhckl0ZW0iLCJOdW1iZXJpbnB1dCIsImZpZWxkQ2xhc3NlcyIsIm9uU3RvcExvbmdQcmVzcyIsImJ1dHRvbkNsYXNzZXMiLCJkaXNhYmxlZE1pbiIsIm9uU3RhcnRMb25nUHJlc3MiLCJvbkNvbnRyb2xDbGljayIsIm5ld1N0ZXAiLCJkaXNhYmxlZE1heCIsImNvbnRyb2xzUm91bmRlZCIsIm1pbk51bWJlciIsIm1heE51bWJlciIsInN0ZXBOdW1iZXIiLCJzdGVwRGVjaW1hbHMiLCJzdWJzdHJpbmciLCJkZWNyZW1lbnQiLCJpbmNyZW1lbnQiLCJpbmMiLCJkZXRhaWwiLCJfJGludGVydmFsVGltZSIsImNsZWFySW50ZXJ2YWwiLCJfJGludGVydmFsUmVmIiwic2V0SW50ZXJ2YWwiLCJQYWdpbmF0aW9uIiwiaGFzUHJldiIsImFyaWFQcmV2aW91c0xhYmVsIiwiaGFzTmV4dCIsImFyaWFOZXh0TGFiZWwiLCJzaW1wbGUiLCJnZXRBcmlhUGFnZUxhYmVsIiwiZmlyc3QiLCJwYWdlIiwiaXNDdXJyZW50IiwicGFnZUNvdW50IiwicGVyUGFnZSIsInRvdGFsIiwicmFuZ2VCZWZvcmUiLCJyYW5nZUFmdGVyIiwib3JkZXIiLCJhcmlhUGFnZUxhYmVsIiwiYXJpYUN1cnJlbnRMYWJlbCIsImJlZm9yZUN1cnJlbnQiLCJhZnRlckN1cnJlbnQiLCJjZWlsIiwiaGFzRmlyc3QiLCJoYXNGaXJzdEVsbGlwc2lzIiwiaGFzTGFzdCIsImhhc0xhc3RFbGxpcHNpcyIsInBhZ2VzSW5SYW5nZSIsInBhZ2VzIiwiX2xvb3AiLCJwYWdlTnVtYmVyIiwiUHJvZ3Jlc3MiLCJzaG93VmFsdWUiLCJmb3JtYXQiLCJwcmVjaXNpb24iLCJrZWVwVHJhaWxpbmdaZXJvZXMiLCJpc0luZGV0ZXJtaW5hdGUiLCJfdmFsIiwic2V0VmFsdWUiLCJwcm9ncmVzcyIsImZpeGVkIiwiUmFkaW8iLCJSYWRpb0J1dHRvbiIsIlRvb2x0aXAiLCJzcXVhcmUiLCJuZXdBbmltYXRlZCIsImFsd2F5cyIsIm11bHRpbGluZWQiLCJkYXNoZWQiLCJuZXdEZWxheSIsImFuaW1hdGVkIiwiU2xpZGVyVGh1bWIiLCJkcmFnZ2luZyIsInRvb2x0aXAiLCJvbkJ1dHRvbkRvd24iLCJvbkxlZnRLZXlEb3duIiwib25SaWdodEtleURvd24iLCJvbkhvbWVLZXlEb3duIiwib25FbmRLZXlEb3duIiwic3RhcnRYIiwic3RhcnRQb3NpdGlvbiIsImN1cnJlbnRQb3NpdGlvbiIsIndyYXBwZXJTdHlsZSIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnZ2luZyIsIm9uRHJhZ0VuZCIsInNldFBvc2l0aW9uIiwiZW1pdENoYW5nZSIsImRpZmYiLCJzbGlkZXJTaXplIiwicGVyY2VudCIsInN0ZXBMZW5ndGgiLCJTbGlkZXJUaWNrIiwiaGlkZGVuIiwiZ2V0VGlja1N0eWxlIiwiX2lzU2xpZGVyIiwiU2xpZGVyIiwib25TbGlkZXJDbGljayIsIm5ld1Rvb2x0aXBUeXBlIiwidmFsdWUxIiwiYXJpYUxhYmVsIiwidmFsdWUyIiwidGlja3MiLCJ0b29sdGlwVHlwZSIsImlzUmFuZ2UiLCJ0aWNrVmFsdWVzIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsImJhclNpemUiLCJiYXJTdGFydCIsInByZWNpc2lvbnMiLCJkZWNpbWFsIiwiYmFyU3R5bGUiLCJzbGlkZXIiLCJzZXRWYWx1ZXMiLCJpc1RodW1iUmV2ZXJzZWQiLCJzbWFsbFZhbHVlIiwibGFyZ2VWYWx1ZSIsInNsaWRlck9mZnNldExlZnQiLCJ0YXJnZXRWYWx1ZSIsImRpZmZGaXJzdCIsImRpZmZTZWNvbmQiLCJidXR0b24xIiwiU25hY2tiYXIiLCJhY3Rpb25UZXh0Iiwib25BY3Rpb24iLCJTbmFja2JhclByb2dyYW1tYXRpYyIsIlNsb3RDb21wb25lbnQiLCJzY29wZWQiLCJyZWZyZXNoIiwiaXNWdWVDb21wb25lbnQiLCJTdGVwcyIsIm1haW5DbGFzc2VzIiwic3RlcEl0ZW0iLCJhY3RpdmVTdGVwIiwiaXNJdGVtQ2xpY2thYmxlIiwic3RlcENsaWNrIiwiaXNUcmFuc2l0aW9uaW5nIiwiZGVzdHJveU9uSGlkZSIsImhhc05hdmlnYXRpb24iLCJzdGVwSXRlbXMiLCJjb250ZW50SGVpZ2h0IiwiX2lzU3RlcHMiLCJyZXZlcnNlZFN0ZXBJdGVtcyIsImZpcnN0VmlzaWJsZVN0ZXBJbmRleCIsImZpbmRJbmRleCIsImlkeCIsInZpc2libGUiLCJsYXN0VmlzaWJsZVN0ZXBJbmRleCIsImNoYW5nZVN0ZXAiLCJuZXdJbmRleCIsImRlYWN0aXZhdGUiLCJjbGlja2FibGUiLCJwcmV2SXRlbUlkeCIsIm5leHRJdGVtSWR4IiwiU3RlcEl0ZW0iLCJ0cmFuc2l0aW9uTmFtZSIsIm9sZEluZGV4IiwiU3dpdGNoIiwibmV3Q2xhc3MiLCJpc01vdXNlRG93biIsIlRhYmxlTW9iaWxlU29ydCIsIm1vYmlsZVNvcnQiLCJjb2x1bW4iLCJjdXJyZW50U29ydENvbHVtbiIsImlzQXNjIiwiY29sdW1ucyIsInNob3dQbGFjZWhvbGRlciIsIl9jb21wb25lbnRzJDEiLCJUYWJsZUNvbHVtbiIsImN1c3RvbUtleSIsIm51bWVyaWMiLCJjZW50ZXJlZCIsInNvcnRhYmxlIiwiY3VzdG9tU29ydCIsImludGVybmFsIiwibmV3S2V5IiwiYWRkUmVmVG9UYWJsZSIsIl9pc1RhYmxlIiwibmV3Q29sdW1ucyIsImJlZm9yZVVwZGF0ZSIsIlRhYmxlIiwibW9iaWxlQ2FyZHMiLCJoYXNTb3J0YWJsZW5ld0NvbHVtbnMiLCJtb2JpbGVTb3J0UGxhY2Vob2xkZXIiLCJwYWdpbmF0ZWQiLCJwYWdpbmF0aW9uUG9zaXRpb24iLCJuZXdEYXRhVG90YWwiLCJwYWdpbmF0aW9uU2ltcGxlIiwicGFnaW5hdGlvblNpemUiLCJuZXdDdXJyZW50UGFnZSIsInBhZ2VDaGFuZ2VkIiwidGFibGVDbGFzc2VzIiwicHJlc3NlZEFycm93IiwiY2hlY2thYmxlIiwiY2hlY2tib3hQb3NpdGlvbiIsImlzQWxsQ2hlY2tlZCIsImlzQWxsVW5jaGVja2FibGUiLCJjaGVja0FsbCIsInNvcnRJY29uIiwic29ydEljb25TaXplIiwidmlzaWJsZURhdGEiLCJyb3ciLCJjdXN0b21Sb3dLZXkiLCJyb3dDbGFzcyIsImlzUm93Q2hlY2tlZCIsImRyYWdnYWJsZSIsInNlbGVjdFJvdyIsImhhbmRsZURyYWdTdGFydCIsImhhbmRsZURyb3AiLCJoYW5kbGVEcmFnT3ZlciIsImhhbmRsZURyYWdMZWF2ZSIsImhhc0RldGFpbGVkVmlzaWJsZSIsInRvZ2dsZURldGFpbHMiLCJpc1Zpc2libGVEZXRhaWxSb3ciLCJpc1Jvd0NoZWNrYWJsZSIsImNoZWNrUm93IiwiaXNBY3RpdmVEZXRhaWxSb3ciLCJjb2x1bW5Db3VudCIsImlzQWN0aXZlQ3VzdG9tRGV0YWlsUm93IiwiaGFzQ3VzdG9tRm9vdGVyU2xvdCIsImhhc0JvdHRvbUxlZnRTbG90IiwiYm9yZGVyZWQiLCJzdHJpcGVkIiwibmFycm93ZWQiLCJkZXRhaWxlZCIsImhlYWRlckNoZWNrYWJsZSIsImN1c3RvbUlzQ2hlY2tlZCIsImNoZWNrZWRSb3dzIiwiZGVmYXVsdFNvcnQiLCJkZWZhdWx0U29ydERpcmVjdGlvbiIsImN1cnJlbnRQYWdlIiwic2hvd0RldGFpbEljb24iLCJiYWNrZW5kU29ydGluZyIsIm9wZW5lZERldGFpbGVkIiwiZGV0YWlsS2V5IiwiY3VzdG9tRGV0YWlsUm93IiwiYmFja2VuZFBhZ2luYXRpb24iLCJkZWZ1YWx0IiwidmlzaWJsZURldGFpbFJvd3MiLCJuZXdEYXRhIiwibmV3Q2hlY2tlZFJvd3MiLCJmaXJzdFRpbWVTb3J0Iiwic2hvd0RldGFpbFJvd0ljb24iLCJ2aXNpYmxlQ29sdW1ucyIsInZhbGlkVmlzaWJsZURhdGEiLCJjdXJyZW50VmlzaWJsZVJvdyIsIm5ld1RvdGFsIiwicm93cyIsImNoZWNrU29ydCIsImV4cGFuZGVkUm93cyIsInNvcnRCeSIsIm5ld0EiLCJuZXdCIiwidXBkYXRpbmdEYXRhIiwicmVtb3ZlQ2hlY2tlZFJvdyIsImN1cnJlbnRSb3ciLCJjbG9zZURldGFpbFJvdyIsIm9wZW5EZXRhaWxSb3ciLCJoYW5kbGVEZXRhaWxLZXkiLCJjaGVja1ByZWRlZmluZWREZXRhaWxlZFJvd3MiLCJpbml0U29ydCIsIl90aGlzNSIsInNvcnRGaWVsZCIsInNvcnREaXJlY3Rpb24iLCJUYWJzIiwibmF2Q2xhc3NlcyIsInRhYkl0ZW0iLCJhY3RpdmVUYWIiLCJ0YWJDbGljayIsInRhYkl0ZW1zIiwiX2lzVGFicyIsImNoYW5nZVRhYiIsIlRhYkl0ZW0iLCJUYWciLCJhdHRhY2hlZCIsImVsbGlwc2lzIiwidGFic3RvcCIsIlRhZ2xpc3QiLCJUYWdpbnB1dCIsImNvbnRhaW5lckNsYXNzZXMiLCJnZXROb3JtYWxpemVkVGFnVGV4dCIsInJlbW92ZVRhZyIsIm5hdGl2ZUF1dG9jb21wbGV0ZSIsImFsbG93TmV3Iiwib25UeXBpbmciLCJjdXN0b21PbkJsdXIiLCJvblNlbGVjdCIsImtleWRvd24iLCJkZWZhdWx0U2xvdE5hbWUiLCJuZXdUYWciLCJoZWFkZXJTbG90TmFtZSIsImVtcHR5U2xvdE5hbWUiLCJmb290ZXJTbG90TmFtZSIsIm1heHRhZ3MiLCJ0YWdzTGVuZ3RoIiwiY29uZmlybUtleUNvZGVzIiwicmVtb3ZlT25LZXlzIiwib25QYXN0ZVNlcGFyYXRvcnMiLCJiZWZvcmVBZGRpbmciLCJhbGxvd0R1cGxpY2F0ZXMiLCJ0YWdzIiwiX2lzVGFnaW5wdXQiLCJzZXBhcmF0b3JzQXNSZWdFeHAiLCJzZXAiLCJhZGRUYWciLCJ0YWdUb0FkZCIsInJlZyIsInJlbW92ZUxhc3RUYWciLCJUaW1lcGlja2VyIiwibWVyaWRpZW4iLCJuYXRpdmVTdGVwIiwiX2lzVGltZXBpY2tlciIsIlRvYXN0IiwiVG9hc3RQcm9ncmFtbWF0aWMiLCJVcGxvYWQiLCJkcmFnRHJvcCIsImRyYWdEcm9wRm9jdXMiLCJ1cGRhdGVEcmFnRHJvcEZvY3VzIiwib25GaWxlQ2hhbmdlIiwiYWNjZXB0IiwibmF0aXZlIiwiaW5wdXRGaWxlcyIsImZpbGVzIiwiZGF0YVRyYW5zZmVyIiwibmV3VmFsdWVzIiwiX2ZpbGUiLCJjaGVja1R5cGUiLCJmaWxlIiwidHlwZXMiLCJ2YWxpZCIsImV4dEluZGV4IiwibGFzdEluZGV4T2YiLCJCdWVmeSIsImNvbXBvbmVudEtleSIsIkJ1ZWZ5UHJvZ3JhbW1hdGljIiwic2VsZiIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzY29wZSIsInVucmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiX29uVGltZW91dCIsImNsZWFySW1tZWRpYXRlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJodG1sIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwiZ2V0UHJvdG90eXBlT2YiLCJwcm9jZXNzIiwiaGFuZGxlIiwicnVuSWZQcmVzZW50IiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsIm9ubWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmFuZG9tIiwiYXR0YWNoRXZlbnQiLCJ0YXNrIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJjd2QiLCJjaGRpciIsInVtYXNrIl0sIm1hcHBpbmdzIjoidUZBQUE7Ozs7OztBQU9BLElBQUlBLEVBQWNDLE9BQU9DLE9BQU8sSUFJaEMsU0FBU0MsRUFBU0MsR0FDaEIsT0FBT0EsUUFHVCxTQUFTQyxFQUFPRCxHQUNkLE9BQU9BLFFBR1QsU0FBU0UsRUFBUUYsR0FDZixPQUFhLElBQU5BLEVBVVQsU0FBU0csRUFBYUMsR0FDcEIsTUFDbUIsaUJBQVZBLEdBQ1UsaUJB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QixTQUFVLEVBQ2xCN0IsRUFBUXA4RSxJQUFNLEdBQ2RvOEUsRUFBUThCLEtBQU8sR0FDZjlCLEVBQVF4MEQsUUFBVSxHQUNsQncwRCxFQUFRK0IsU0FBVyxHQUluQi9CLEVBQVExdUUsR0FBS3RTLEVBQ2JnaEYsRUFBUWdDLFlBQWNoakYsRUFDdEJnaEYsRUFBUS8vRSxLQUFPakIsRUFDZmdoRixFQUFRaUMsSUFBTWpqRixFQUNkZ2hGLEVBQVFrQyxlQUFpQmxqRixFQUN6QmdoRixFQUFRbUMsbUJBQXFCbmpGLEVBQzdCZ2hGLEVBQVE3OUQsS0FBT25qQixFQUNmZ2hGLEVBQVFvQyxnQkFBa0JwakYsRUFDMUJnaEYsRUFBUXFDLG9CQUFzQnJqRixFQUU5QmdoRixFQUFROW1FLFVBQVksU0FBVXJJLEdBQVEsTUFBTyxJQUU3Q212RSxFQUFRdmdELFFBQVUsU0FBVTV1QixHQUN4QixNQUFNLElBQUlvaUMsTUFBTSxxQ0FHcEIrc0MsRUFBUXNDLElBQU0sV0FBYyxNQUFPLEtBQ25DdEMsRUFBUXVDLE1BQVEsU0FBVXB6RCxHQUN0QixNQUFNLElBQUk4akIsTUFBTSxtQ0FFcEIrc0MsRUFBUXdDLE1BQVEsV0FBYSxPQUFPLEkiLCJmaWxlIjoianMvdmVuZG9yc35tYWluLmQxY2M5NDRmYzhhMWE2NGIxMWRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBWdWUuanMgdjIuNi4xMFxuICogKGMpIDIwMTQtMjAxOSBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHZhciByZXMgPSBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWw7XG4gIHJldHVybiByZXNcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcbiAgICA6IHJlc1xufVxuXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG5cbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIiB3aXRoIHZhbHVlIFwiICsgZXhwZWN0ZWRWYWx1ZTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgdmFyIGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaGluaWNhbGx5IGl0IGxldmVyYWdlcyB0aGUgKG1hY3JvKSB0YXNrIHF1ZXVlLFxuICAvLyBidXQgaXQgaXMgc3RpbGwgYSBiZXR0ZXIgY2hvaWNlIHRoYW4gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBGYWxsYmFjayB0byBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgdGltZXJGdW5jKCk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIiArIGtleSArIFwiXFxcIiBiZWNhdXNlIFwiICtcbiAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgIH07XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBvbmNlJCQxID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG4gIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBvbmNlOiBvbmNlJCQxLFxuICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMsIHZtKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjbG9uZWRbaV0sIG51bGwsIGFyZ3VtZW50cyQxLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICByZXR1cm4gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoZm5zLCBudWxsLCBhcmd1bWVudHMsIHZtLCBcInYtb24gaGFuZGxlclwiKVxuICAgIH1cbiAgfVxuICBpbnZva2VyLmZucyA9IGZucztcbiAgcmV0dXJuIGludm9rZXJcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzIChcbiAgb24sXG4gIG9sZE9uLFxuICBhZGQsXG4gIHJlbW92ZSQkMSxcbiAgY3JlYXRlT25jZUhhbmRsZXIsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGRlZiQkMSwgY3VyLCBvbGQsIGV2ZW50O1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBkZWYkJDEgPSBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgIGlmIChpc1VuZGVmKGN1cikpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7XG4gIH1cbiAgdmFyIGludm9rZXI7XG4gIHZhciBvbGRIb29rID0gZGVmW2hvb2tLZXldO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZWRIb29rICgpIHtcbiAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZVxuICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7XG4gIH1cblxuICBpZiAoaXNVbmRlZihvbGRIb29rKSkge1xuICAgIC8vIG5vIGV4aXN0aW5nIGhvb2tcbiAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFt3cmFwcGVkSG9va10pO1xuICB9IGVsc2Uge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihvbGRIb29rLmZucykgJiYgaXNUcnVlKG9sZEhvb2subWVyZ2VkKSkge1xuICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXG4gICAgICBpbnZva2VyID0gb2xkSG9vaztcbiAgICAgIGludm9rZXIuZm5zLnB1c2god3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBwbGFpbiBob29rXG4gICAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFtvbGRIb29rLCB3cmFwcGVkSG9va10pO1xuICAgIH1cbiAgfVxuXG4gIGludm9rZXIubWVyZ2VkID0gdHJ1ZTtcbiAgZGVmW2hvb2tLZXldID0gaW52b2tlcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKFxuICBkYXRhLFxuICBDdG9yLFxuICB0YWdcbikge1xuICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHtcbiAgaWYgKGluamVjdCkge1xuICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uXG4gICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIGhhc093bihzb3VyY2UuX3Byb3ZpZGVkLCBwcm92aWRlS2V5KSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkge1xuICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcbiAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoc2xvdHMuZGVmYXVsdCB8fCAoc2xvdHMuZGVmYXVsdCA9IFtdKSkucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG4gIC8vIGlnbm9yZSBzbG90cyB0aGF0IGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZVxuICBmb3IgKHZhciBuYW1lJDEgaW4gc2xvdHMpIHtcbiAgICBpZiAoc2xvdHNbbmFtZSQxXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7XG4gICAgICBkZWxldGUgc2xvdHNbbmFtZSQxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAobm9kZSkge1xuICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICdcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3RzIChcbiAgc2xvdHMsXG4gIG5vcm1hbFNsb3RzLFxuICBwcmV2U2xvdHNcbikge1xuICB2YXIgcmVzO1xuICB2YXIgaGFzTm9ybWFsU2xvdHMgPSBPYmplY3Qua2V5cyhub3JtYWxTbG90cykubGVuZ3RoID4gMDtcbiAgdmFyIGlzU3RhYmxlID0gc2xvdHMgPyAhIXNsb3RzLiRzdGFibGUgOiAhaGFzTm9ybWFsU2xvdHM7XG4gIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5O1xuICBpZiAoIXNsb3RzKSB7XG4gICAgcmVzID0ge307XG4gIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAvLyBmYXN0IHBhdGggMTogY2hpbGQgY29tcG9uZW50IHJlLXJlbmRlciBvbmx5LCBwYXJlbnQgZGlkIG5vdCBjaGFuZ2VcbiAgICByZXR1cm4gc2xvdHMuX25vcm1hbGl6ZWRcbiAgfSBlbHNlIGlmIChcbiAgICBpc1N0YWJsZSAmJlxuICAgIHByZXZTbG90cyAmJlxuICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiZcbiAgICBrZXkgPT09IHByZXZTbG90cy4ka2V5ICYmXG4gICAgIWhhc05vcm1hbFNsb3RzICYmXG4gICAgIXByZXZTbG90cy4kaGFzTm9ybWFsXG4gICkge1xuICAgIC8vIGZhc3QgcGF0aCAyOiBzdGFibGUgc2NvcGVkIHNsb3RzIHcvIG5vIG5vcm1hbCBzbG90cyB0byBwcm94eSxcbiAgICAvLyBvbmx5IG5lZWQgdG8gbm9ybWFsaXplIG9uY2VcbiAgICByZXR1cm4gcHJldlNsb3RzXG4gIH0gZWxzZSB7XG4gICAgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5JDEgaW4gc2xvdHMpIHtcbiAgICAgIGlmIChzbG90c1trZXkkMV0gJiYga2V5JDFbMF0gIT09ICckJykge1xuICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGV4cG9zZSBub3JtYWwgc2xvdHMgb24gc2NvcGVkU2xvdHNcbiAgZm9yICh2YXIga2V5JDIgaW4gbm9ybWFsU2xvdHMpIHtcbiAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7XG4gICAgICByZXNba2V5JDJdID0gcHJveHlOb3JtYWxTbG90KG5vcm1hbFNsb3RzLCBrZXkkMik7XG4gICAgfVxuICB9XG4gIC8vIGF2b3JpYXogc2VlbXMgdG8gbW9jayBhIG5vbi1leHRlbnNpYmxlICRzY29wZWRTbG90cyBvYmplY3RcbiAgLy8gYW5kIHdoZW4gdGhhdCBpcyBwYXNzZWQgZG93biB0aGlzIHdvdWxkIGNhdXNlIGFuIGVycm9yXG4gIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkge1xuICAgIChzbG90cykuX25vcm1hbGl6ZWQgPSByZXM7XG4gIH1cbiAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7XG4gIGRlZihyZXMsICcka2V5Jywga2V5KTtcbiAgZGVmKHJlcywgJyRoYXNOb3JtYWwnLCBoYXNOb3JtYWxTbG90cyk7XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5LCBmbikge1xuICB2YXIgbm9ybWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiBmbih7fSk7XG4gICAgcmVzID0gcmVzICYmIHR5cGVvZiByZXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcylcbiAgICAgID8gW3Jlc10gLy8gc2luZ2xlIHZub2RlXG4gICAgICA6IG5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7XG4gICAgcmV0dXJuIHJlcyAmJiAoXG4gICAgICByZXMubGVuZ3RoID09PSAwIHx8XG4gICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiByZXNbMF0uaXNDb21tZW50KSAvLyAjOTY1OFxuICAgICkgPyB1bmRlZmluZWRcbiAgICAgIDogcmVzXG4gIH07XG4gIC8vIHRoaXMgaXMgYSBzbG90IHVzaW5nIHRoZSBuZXcgdi1zbG90IHN5bnRheCB3aXRob3V0IHNjb3BlLiBhbHRob3VnaCBpdCBpc1xuICAvLyBjb21waWxlZCBhcyBhIHNjb3BlZCBzbG90LCByZW5kZXIgZm4gdXNlcnMgd291bGQgZXhwZWN0IGl0IHRvIGJlIHByZXNlbnRcbiAgLy8gb24gdGhpcy4kc2xvdHMgYmVjYXVzZSB0aGUgdXNhZ2UgaXMgc2VtYW50aWNhbGx5IGEgbm9ybWFsIHNsb3QuXG4gIGlmIChmbi5wcm94eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub3JtYWxTbG90cywga2V5LCB7XG4gICAgICBnZXQ6IG5vcm1hbGl6ZWQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRcbn1cblxuZnVuY3Rpb24gcHJveHlOb3JtYWxTbG90KHNsb3RzLCBrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNsb3RzW2tleV07IH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gIHZhbCxcbiAgcmVuZGVyXG4pIHtcbiAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5O1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICBpZiAoaGFzU3ltYm9sICYmIHZhbFtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICByZXQgPSBbXTtcbiAgICAgIHZhciBpdGVyYXRvciA9IHZhbFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICByZXQucHVzaChyZW5kZXIocmVzdWx0LnZhbHVlLCByZXQubGVuZ3RoKSk7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc0RlZihyZXQpKSB7XG4gICAgcmV0ID0gW107XG4gIH1cbiAgKHJldCkuX2lzVkxpc3QgPSB0cnVlO1xuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICBub2RlcyA9IHRoaXMuJHNsb3RzW25hbWVdIHx8IGZhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7XG4gIGlmICh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnLCB7IHNsb3Q6IHRhcmdldCB9LCBub2RlcylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZXNcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNLZXlOb3RNYXRjaCAoZXhwZWN0LCBhY3R1YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0KSkge1xuICAgIHJldHVybiBleHBlY3QuaW5kZXhPZihhY3R1YWwpID09PSAtMVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBleHBlY3QgIT09IGFjdHVhbFxuICB9XG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLlxuICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gIGV2ZW50S2V5Q29kZSxcbiAga2V5LFxuICBidWlsdEluS2V5Q29kZSxcbiAgZXZlbnRLZXlOYW1lLFxuICBidWlsdEluS2V5TmFtZVxuKSB7XG4gIHZhciBtYXBwZWRLZXlDb2RlID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbktleUNvZGU7XG4gIGlmIChidWlsdEluS2V5TmFtZSAmJiBldmVudEtleU5hbWUgJiYgIWNvbmZpZy5rZXlDb2Rlc1trZXldKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2goYnVpbHRJbktleU5hbWUsIGV2ZW50S2V5TmFtZSlcbiAgfSBlbHNlIGlmIChtYXBwZWRLZXlDb2RlKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKVxuICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICBpZiAoIShjYW1lbGl6ZWRLZXkgaW4gaGFzaCkgJiYgIShoeXBoZW5hdGVkS2V5IGluIGhhc2gpKSB7XG4gICAgICAgICAgaGFzaFtrZXldID0gdmFsdWVba2V5XTtcblxuICAgICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICBvblsoXCJ1cGRhdGU6XCIgKyBrZXkpXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIGxvb3AoIGtleSApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHN0YXRpYyB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgaW5kZXgsXG4gIGlzSW5Gb3Jcbikge1xuICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gdHJlZVxuICB9XG4gIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgdHJlZSA9IGNhY2hlZFtpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbChcbiAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICBudWxsLFxuICAgIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcbiAgKTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XG4gICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgb3VycykgOiBvdXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzIChcbiAgZm5zLCAvLyBzZWUgZmxvdy92bm9kZVxuICByZXMsXG4gIC8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNlxuICBoYXNEeW5hbWljS2V5cyxcbiAgY29udGVudEhhc2hLZXlcbikge1xuICByZXMgPSByZXMgfHwgeyAkc3RhYmxlOiAhaGFzRHluYW1pY0tleXMgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2xvdCA9IGZuc1tpXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbG90KSkge1xuICAgICAgcmVzb2x2ZVNjb3BlZFNsb3RzKHNsb3QsIHJlcywgaGFzRHluYW1pY0tleXMpO1xuICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgLy8gbWFya2VyIGZvciByZXZlcnNlIHByb3h5aW5nIHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gICAgICBpZiAoc2xvdC5wcm94eSkge1xuICAgICAgICBzbG90LmZuLnByb3h5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuO1xuICAgIH1cbiAgfVxuICBpZiAoY29udGVudEhhc2hLZXkpIHtcbiAgICAocmVzKS4ka2V5ID0gY29udGVudEhhc2hLZXk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5ID0gdmFsdWVzW2ldO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkpIHtcbiAgICAgIGJhc2VPYmpbdmFsdWVzW2ldXSA9IHZhbHVlc1tpICsgMV07XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAvLyBudWxsIGlzIGEgc3BlaWNhbCB2YWx1ZSBmb3IgZXhwbGljaXRseSByZW1vdmluZyBhIGJpbmRpbmdcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkludmFsaWQgdmFsdWUgZm9yIGR5bmFtaWMgZGlyZWN0aXZlIGFyZ3VtZW50IChleHBlY3RlZCBzdHJpbmcgb3IgbnVsbCk6IFwiICsga2V5KSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJhc2VPYmpcbn1cblxuLy8gaGVscGVyIHRvIGR5bmFtaWNhbGx5IGFwcGVuZCBtb2RpZmllciBydW50aW1lIG1hcmtlcnMgdG8gZXZlbnQgbmFtZXMuXG4vLyBlbnN1cmUgb25seSBhcHBlbmQgd2hlbiB2YWx1ZSBpcyBhbHJlYWR5IHN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgY2FzdFxuLy8gdG8gc3RyaW5nIGFuZCBjYXVzZSB0aGUgdHlwZSBjaGVjayB0byBtaXNzLlxuZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyICh2YWx1ZSwgc3ltYm9sKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gc3ltYm9sICsgdmFsdWUgOiB2YWx1ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnMgKHRhcmdldCkge1xuICB0YXJnZXQuX28gPSBtYXJrT25jZTtcbiAgdGFyZ2V0Ll9uID0gdG9OdW1iZXI7XG4gIHRhcmdldC5fcyA9IHRvU3RyaW5nO1xuICB0YXJnZXQuX2wgPSByZW5kZXJMaXN0O1xuICB0YXJnZXQuX3QgPSByZW5kZXJTbG90O1xuICB0YXJnZXQuX3EgPSBsb29zZUVxdWFsO1xuICB0YXJnZXQuX2kgPSBsb29zZUluZGV4T2Y7XG4gIHRhcmdldC5fbSA9IHJlbmRlclN0YXRpYztcbiAgdGFyZ2V0Ll9mID0gcmVzb2x2ZUZpbHRlcjtcbiAgdGFyZ2V0Ll9rID0gY2hlY2tLZXlDb2RlcztcbiAgdGFyZ2V0Ll9iID0gYmluZE9iamVjdFByb3BzO1xuICB0YXJnZXQuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIHRhcmdldC5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gIHRhcmdldC5fdSA9IHJlc29sdmVTY29wZWRTbG90cztcbiAgdGFyZ2V0Ll9nID0gYmluZE9iamVjdExpc3RlbmVycztcbiAgdGFyZ2V0Ll9kID0gYmluZER5bmFtaWNLZXlzO1xuICB0YXJnZXQuX3AgPSBwcmVwZW5kTW9kaWZpZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duKHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcyQxLiRzbG90cykge1xuICAgICAgbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIGRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHRoaXMkMS4kc2xvdHMgPSByZXNvbHZlU2xvdHMoY2hpbGRyZW4sIHBhcmVudClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzJDEuJHNsb3RzXG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzY29wZWRTbG90cycsICh7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy5zbG90cygpKVxuICAgIH1cbiAgfSkpO1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLiRzbG90cyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5fc2NvcGVJZCkge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgdmFyIHZub2RlID0gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTtcbiAgICAgIGlmICh2bm9kZSAmJiAhQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgdm5vZGUuZm5TY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDtcbiAgICAgICAgdm5vZGUuZm5Db250ZXh0ID0gcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZub2RlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7IH07XG4gIH1cbn1cblxuaW5zdGFsbFJlbmRlckhlbHBlcnMoRnVuY3Rpb25hbFJlbmRlckNvbnRleHQucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCAoXG4gIEN0b3IsXG4gIHByb3BzRGF0YSxcbiAgZGF0YSxcbiAgY29udGV4dFZtLFxuICBjaGlsZHJlblxuKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHByb3BPcHRpb25zID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwgZW1wdHlPYmplY3QpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEZWYoZGF0YS5hdHRycykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgfVxuXG4gIHZhciByZW5kZXJDb250ZXh0ID0gbmV3IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KFxuICAgIGRhdGEsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgY29udGV4dFZtLFxuICAgIEN0b3JcbiAgKTtcblxuICB2YXIgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpO1xuXG4gIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgdmFyIHZub2RlcyA9IG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlKSB8fCBbXTtcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5KHZub2Rlcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXNbaV0gPSBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2Rlc1tpXSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCAodm5vZGUsIGRhdGEsIGNvbnRleHRWbSwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCkge1xuICAvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZFxuICAvLyAoZS5nLiBpdCB3YXMgZnJvbSBhIGNhY2hlZCBub3JtYWwgc2xvdCkgdGhlIGZuQ29udGV4dCBjYXVzZXMgbmFtZWQgc2xvdHNcbiAgLy8gdGhhdCBzaG91bGQgbm90IGJlIG1hdGNoZWQgdG8gbWF0Y2guXG4gIHZhciBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICBjbG9uZS5mbkNvbnRleHQgPSBjb250ZXh0Vm07XG4gIGNsb25lLmZuT3B0aW9ucyA9IG9wdGlvbnM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG4gIH1cbiAgaWYgKGRhdGEuc2xvdCkge1xuICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICB9XG4gIHJldHVybiBjbG9uZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICBpZiAoXG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICApIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VcbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yKTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gIHBhcmVudCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGVcbikge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBfaXNDb21wb25lbnQ6IHRydWUsXG4gICAgX3BhcmVudFZub2RlOiB2bm9kZSxcbiAgICBwYXJlbnQ6IHBhcmVudFxuICB9O1xuICAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBpbmxpbmVUZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbiAgcmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gaW5zdGFsbENvbXBvbmVudEhvb2tzIChkYXRhKSB7XG4gIHZhciBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGV4aXN0aW5nID0gaG9va3Nba2V5XTtcbiAgICB2YXIgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICBpZiAoZXhpc3RpbmcgIT09IHRvTWVyZ2UgJiYgIShleGlzdGluZyAmJiBleGlzdGluZy5fbWVyZ2VkKSkge1xuICAgICAgaG9va3Nba2V5XSA9IGV4aXN0aW5nID8gbWVyZ2VIb29rJDEodG9NZXJnZSwgZXhpc3RpbmcpIDogdG9NZXJnZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICB2YXIgbWVyZ2VkID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAvLyBmbG93IGNvbXBsYWlucyBhYm91dCBleHRyYSBhcmdzIHdoaWNoIGlzIHdoeSB3ZSB1c2UgYW55XG4gICAgZjEoYSwgYik7XG4gICAgZjIoYSwgYik7XG4gIH07XG4gIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTtcbiAgcmV0dXJuIG1lcmdlZFxufVxuXG4vLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4vLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS5cbmZ1bmN0aW9uIHRyYW5zZm9ybU1vZGVsIChvcHRpb25zLCBkYXRhKSB7XG4gIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICB2YXIgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnXG4gIDsoZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICB2YXIgZXhpc3RpbmcgPSBvbltldmVudF07XG4gIHZhciBjYWxsYmFjayA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XG4gIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICBpZiAoXG4gICAgICBBcnJheS5pc0FycmF5KGV4aXN0aW5nKVxuICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICA6IGV4aXN0aW5nICE9PSBjYWxsYmFja1xuICAgICkge1xuICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxudmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgLy8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcbiAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7XG5cbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB2bS4kc2xvdHMsXG4gICAgICAgIHZtLiRzY29wZWRTbG90c1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdWVzIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyXCIpO1xuICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVuc3VyZUN0b3IgKGNvbXAsIGJhc2UpIHtcbiAgaWYgKFxuICAgIGNvbXAuX19lc01vZHVsZSB8fFxuICAgIChoYXNTeW1ib2wgJiYgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbiAgKSB7XG4gICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgfVxuICByZXR1cm4gaXNPYmplY3QoY29tcClcbiAgICA/IGJhc2UuZXh0ZW5kKGNvbXApXG4gICAgOiBjb21wXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIgKFxuICBmYWN0b3J5LFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgdmFyIG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcbiAgbm9kZS5hc3luY01ldGEgPSB7IGRhdGE6IGRhdGEsIGNvbnRleHQ6IGNvbnRleHQsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGFnOiB0YWcgfTtcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgZmFjdG9yeSxcbiAgYmFzZUN0b3Jcbikge1xuICBpZiAoaXNUcnVlKGZhY3RvcnkuZXJyb3IpICYmIGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxuXG4gIHZhciBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKG93bmVyICYmIGlzRGVmKGZhY3Rvcnkub3duZXJzKSAmJiBmYWN0b3J5Lm93bmVycy5pbmRleE9mKG93bmVyKSA9PT0gLTEpIHtcbiAgICAvLyBhbHJlYWR5IHBlbmRpbmdcbiAgICBmYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTtcbiAgfVxuXG4gIGlmIChpc1RydWUoZmFjdG9yeS5sb2FkaW5nKSAmJiBpc0RlZihmYWN0b3J5LmxvYWRpbmdDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdDb21wXG4gIH1cblxuICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkge1xuICAgIHZhciBvd25lcnMgPSBmYWN0b3J5Lm93bmVycyA9IFtvd25lcl07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuICAgIHZhciB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgIHZhciB0aW1lclRpbWVvdXQgPSBudWxsXG5cbiAgICA7KG93bmVyKS4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKG93bmVycywgb3duZXIpOyB9KTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKHRpbWVyTG9hZGluZyAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lckxvYWRpbmcpO1xuICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVyVGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lclRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICBmYWN0b3J5LnJlc29sdmVkID0gZW5zdXJlQ3RvcihyZXMsIGJhc2VDdG9yKTtcbiAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcbiAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVqZWN0ID0gb25jZShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgICAgaWYgKGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoZXZlbnQsIGZuKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0O1xuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICB2bS4kb2ZmKGV2ZW50W2kkMV0sIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmICghZm4pIHtcbiAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgdmFyIGNiO1xuICAgIHZhciBpID0gY2JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjYiA9IGNic1tpXTtcbiAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgdmFyIGluZm8gPSBcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gIC8vIHNpbmNlIHRoZSB3YXRjaGVyJ3MgaW5pdGlhbCBwYXRjaCBtYXkgY2FsbCAkZm9yY2VVcGRhdGUgKGUuZy4gaW5zaWRlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwge1xuICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlICgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KVxuICApO1xuXG4gIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgLy8gdXBkYXRlLiBEeW5hbWljIHNjb3BlZCBzbG90cyBtYXkgYWxzbyBoYXZlIGNoYW5nZWQuIEluIHN1Y2ggY2FzZXMsIGEgZm9yY2VkXG4gIC8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxuICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgLy8gdXNlZCB0aGVtIGR1cmluZyByZW5kZXJcbiAgdm0uJGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzO1xuICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIH1cbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGFjdGl2YXRlZENoaWxkcmVuID0gW107XG52YXIgaGFzID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICBoYXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXG4vLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbi8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcbi8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxudmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXG52YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXG4vLyB0aW1lc3RhbXAgY2FuIGVpdGhlciBiZSBoaS1yZXMgKHJlbGF0aXZlIHRvIHBhZ2UgbG9hZCkgb3IgbG93LXJlc1xuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXG4vLyBBbGwgSUUgdmVyc2lvbnMgdXNlIGxvdy1yZXMgZXZlbnQgdGltZXN0YW1wcywgYW5kIGhhdmUgcHJvYmxlbWF0aWMgY2xvY2tcbi8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpXG5pZiAoaW5Ccm93c2VyICYmICFpc0lFKSB7XG4gIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgaWYgKFxuICAgIHBlcmZvcm1hbmNlICYmXG4gICAgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wXG4gICkge1xuICAgIC8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXNcbiAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXIgdGltZXN0YW1wcyBhc1xuICAgIC8vIHdlbGwuXG4gICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07XG4gIH1cbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLlxuICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHtcbiAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxBY3RpdmF0ZWRIb29rcyAocXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZSAvKiB0cnVlICovKTtcbiAgfVxufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgIGhhc1tpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBub29wO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldCB8fCBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlckludm9rZXIoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCB0aGlzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiICsgKHR5cGVvZiBtZXRob2RzW2tleV0pICsgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIHZtLCAoXCJjYWxsYmFjayBmb3IgaW1tZWRpYXRlIHdhdGNoZXIgXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkJDMgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCQzKys7XG5cbiAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodm0uX25hbWUpICsgXCIgaW5pdFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfVxuXG4gICAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50ICh2bSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cbiAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlKTtcbnN0YXRlTWl4aW4oVnVlKTtcbmV2ZW50c01peGluKFZ1ZSk7XG5saWZlY3ljbGVNaXhpbihWdWUpO1xucmVuZGVyTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBTdWIgPSBmdW5jdGlvbiBWdWVDb21wb25lbnQgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgU3ViLmNpZCA9IGNpZCsrO1xuICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgU3VwZXIub3B0aW9ucyxcbiAgICAgIGV4dGVuZE9wdGlvbnNcbiAgICApO1xuICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuXG4gICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbiAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpc1xuICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cbiAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcbiAgICAgIGluaXRQcm9wcyQxKFN1Yik7XG4gICAgfVxuICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTtcbiAgICB9XG5cbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG5cbiAgICAvLyBjcmVhdGUgYXNzZXQgcmVnaXN0ZXJzLCBzbyBleHRlbmRlZCBjbGFzc2VzXG4gICAgLy8gY2FuIGhhdmUgdGhlaXIgcHJpdmF0ZSBhc3NldHMgdG9vLlxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgIH0pO1xuICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICBpZiAobmFtZSkge1xuICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICB9XG5cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpO1xuXG4gICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICByZXR1cm4gU3ViXG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7XG4gIHZhciBwcm9wcyA9IENvbXAub3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIFwiX3Byb3BzXCIsIGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHtcbiAgdmFyIGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEFzc2V0UmVnaXN0ZXJzIChWdWUpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICovXG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZSAoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikge1xuICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTtcbiAgdmFyIGtleXMgPSBrZWVwQWxpdmVJbnN0YW5jZS5rZXlzO1xuICB2YXIgX3Zub2RlID0ga2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlO1xuICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICB2YXIgY2FjaGVkTm9kZSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZE5vZGUpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleSwga2V5cywgX3Zub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5IChcbiAgY2FjaGUsXG4gIGtleSxcbiAga2V5cyxcbiAgY3VycmVudFxuKSB7XG4gIHZhciBjYWNoZWQkJDEgPSBjYWNoZVtrZXldO1xuICBpZiAoY2FjaGVkJCQxICYmICghY3VycmVudCB8fCBjYWNoZWQkJDEudGFnICE9PSBjdXJyZW50LnRhZykpIHtcbiAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5rZXlzID0gW107XG4gIH0sXG5cbiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICBwcnVuZUNhY2hlRW50cnkodGhpcy5jYWNoZSwga2V5LCB0aGlzLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuXG4gIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb25cbiAgLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay5cbiAgVnVlLnV0aWwgPSB7XG4gICAgd2Fybjogd2FybixcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDFcbiAgfTtcblxuICBWdWUuc2V0ID0gc2V0O1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcbiAgVnVlLm9ic2VydmFibGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgb2JzZXJ2ZShvYmopO1xuICAgIHJldHVybiBvYmpcbiAgfTtcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH0pO1xuXG4gIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG4gIFZ1ZS5vcHRpb25zLl9iYXNlID0gVnVlO1xuXG4gIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgaW5pdFVzZShWdWUpO1xuICBpbml0TWl4aW4kMShWdWUpO1xuICBpbml0RXh0ZW5kKFZ1ZSk7XG4gIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpO1xufVxuXG5pbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckc3NyQ29udGV4dCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHRcbiAgfVxufSk7XG5cbi8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ0Z1bmN0aW9uYWxSZW5kZXJDb250ZXh0Jywge1xuICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbn0pO1xuXG5WdWUudmVyc2lvbiA9ICcyLjYuMTAnO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlID0gbWFrZU1hcCgnZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seScpO1xuXG52YXIgY29udmVydEVudW1lcmF0ZWRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJ1xuICAgID8gJ2ZhbHNlJ1xuICAgIC8vIGFsbG93IGFyYml0cmFyeSBzdHJpbmcgdmFsdWUgZm9yIGNvbnRlbnRlZGl0YWJsZVxuICAgIDoga2V5ID09PSAnY29udGVudGVkaXRhYmxlJyAmJiBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6ICd0cnVlJ1xufTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cbnZhciBpc1Jlc2VydmVkVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxufTtcblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlICh0YWcpIHtcbiAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICByZXR1cm4gJ3N2ZydcbiAgfVxuICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuICBpZiAodGFnID09PSAnbWF0aCcpIHtcbiAgICByZXR1cm4gJ21hdGgnXG4gIH1cbn1cblxudmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCAodGFnKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuICB9XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4MjEwMzY0LzEwNzAyNDRcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IChcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxFbGVtZW50XG4gICAgKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IC9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSkpXG4gIH1cbn1cblxudmFyIGlzVGV4dElucHV0VHlwZSA9IG1ha2VNYXAoJ3RleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsJyk7XG5cbi8qICAqL1xuXG4vKipcbiAqIFF1ZXJ5IGFuIGVsZW1lbnQgc2VsZWN0b3IgaWYgaXQncyBub3QgYW4gZWxlbWVudCBhbHJlYWR5LlxuICovXG5mdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2VsZWN0ZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICBpZiAoIXNlbGVjdGVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlIChub2RlLCBzY29wZUlkKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTtcbn1cblxudmFyIG5vZGVPcHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcbiAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gIGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcbiAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gIHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcbiAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gIHRhZ05hbWU6IHRhZ05hbWUsXG4gIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgc2V0U3R5bGVTY29wZTogc2V0U3R5bGVTY29wZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgaXNVbmRlZihiLmFzeW5jRmFjdG9yeS5lcnJvcilcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaTtcbiAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlJCQxICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZSQkMS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZSQkMS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZSQkMVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50JCQxICh2bm9kZSwgaW5WUHJlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICFpblZQcmUgJiZcbiAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgIShcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHtcbiAgICAgICAgICByZXR1cm4gaXNSZWdFeHAoaWdub3JlKVxuICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgIH0pXG4gICAgICApICYmXG4gICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgKVxuICB9XG5cbiAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcblxuICBmdW5jdGlvbiBjcmVhdGVFbG0gKFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtLFxuICAgIG5lc3RlZCxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4XG4gICkge1xuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4gICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXG4gICAgICAvLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgY3JlYXRpbmdFbG1JblZQcmUpKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdVbmtub3duIGN1c3RvbSBlbGVtZW50OiA8JyArIHRhZyArICc+IC0gZGlkIHlvdSAnICtcbiAgICAgICAgICAgICdyZWdpc3RlciB0aGUgY29tcG9uZW50IGNvcnJlY3RseT8gRm9yIHJlY3Vyc2l2ZSBjb21wb25lbnRzLCAnICtcbiAgICAgICAgICAgICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgXCJuYW1lXCIgb3B0aW9uLicsXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5lbG0gPSB2bm9kZS5uc1xuICAgICAgICA/IG5vZGVPcHMuY3JlYXRlRWxlbWVudE5TKHZub2RlLm5zLCB0YWcpXG4gICAgICAgIDogbm9kZU9wcy5jcmVhdGVFbGVtZW50KHRhZywgdm5vZGUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIHtcbiAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIHZhciBpc1JlYWN0aXZhdGVkID0gaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGkua2VlcEFsaXZlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLyk7XG4gICAgICB9XG4gICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4gICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChub2RlT3BzLnBhcmVudE5vZGUocmVmJCQxKSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSwgY2hpbGRyZW4sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIGZhbHNlLCB2bm9kZXMsIHN0YXJ0SWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICB2YXIgaSwgajtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpIHsgaSh2bm9kZSk7IH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkgeyBjYnMuZGVzdHJveVtpXSh2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzIChwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRFbmRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgeyBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTsgfVxuICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxuICAgICAgICAgID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldXG4gICAgICAgICAgOiBmaW5kSWR4SW5PbGQobmV3U3RhcnRWbm9kZSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICBpZiAoc2FtZVZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMoZWxtLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayAodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XG4gICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICBpZiAoaXNUcnVlKGluaXRpYWwpICYmIGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgaHlkcmF0aW9uQmFpbGVkID0gZmFsc2U7XG4gIC8vIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IGNhbiBza2lwIGNyZWF0ZSBob29rIGR1cmluZyBoeWRyYXRpb24gYmVjYXVzZSB0aGV5XG4gIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZVxuICAvLyBkZWVwIHVwZGF0ZXMgKCM3MDYzKS5cbiAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblxuICAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkge1xuICAgIHZhciBpO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGluVlByZSA9IGluVlByZSB8fCAoZGF0YSAmJiBkYXRhLnByZSk7XG4gICAgdm5vZGUuZWxtID0gZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcbiAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyBhc3NlcnQgbm9kZSBtYXRjaFxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWFzc2VydE5vZGVNYXRjaChlbG0sIHZub2RlLCBpblZQcmUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgeyBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLlxuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKGlzRGVmKGNoaWxkcmVuKSkge1xuICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHYtaHRtbCBhbmQgZG9tUHJvcHM6IGlubmVySFRNTFxuICAgICAgICAgIGlmIChpc0RlZihpID0gZGF0YSkgJiYgaXNEZWYoaSA9IGkuZG9tUHJvcHMpICYmIGlzRGVmKGkgPSBpLmlubmVySFRNTCkpIHtcbiAgICAgICAgICAgIGlmIChpICE9PSBlbG0uaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3NlcnZlciBpbm5lckhUTUw6ICcsIGkpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY2xpZW50IGlubmVySFRNTDogJywgZWxtLmlubmVySFRNTCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgYW5kIGNvbXBhcmUgY2hpbGRyZW4gbGlzdHNcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpJDFdLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbk1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBjaGlsZE5vZGUgaXMgbm90IG51bGwsIGl0IG1lYW5zIHRoZSBhY3R1YWwgY2hpbGROb2RlcyBsaXN0IGlzXG4gICAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LlxuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbk1hdGNoIHx8IGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgdmFyIGZ1bGxJbnZva2UgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgZnVsbEludm9rZSA9IHRydWU7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZnVsbEludm9rZSAmJiBkYXRhWydjbGFzcyddKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcbiAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUsIGluVlByZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7XG4gICAgICByZXR1cm4gdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fCAoXG4gICAgICAgICFpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBpblZQcmUpICYmXG4gICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwYXRjaCAob2xkVm5vZGUsIHZub2RlLCBoeWRyYXRpbmcsIHJlbW92ZU9ubHkpIHtcbiAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZSkpIHtcbiAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG51bGwsIG51bGwsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtID0gbm9kZU9wcy5wYXJlbnROb2RlKG9sZEVsbSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIG5ldyBub2RlXG4gICAgICAgIGNyZWF0ZUVsbShcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgICAgICAgLy8gZXh0cmVtZWx5IHJhcmUgZWRnZSBjYXNlOiBkbyBub3QgaW5zZXJ0IGlmIG9sZCBlbGVtZW50IGlzIGluIGFcbiAgICAgICAgICAvLyBsZWF2aW5nIHRyYW5zaXRpb24uIE9ubHkgaGFwcGVucyB3aGVuIGNvbWJpbmluZyB0cmFuc2l0aW9uICtcbiAgICAgICAgICAvLyBrZWVwLWFsaXZlICsgSE9Dcy4gKCM0NTkwKVxuICAgICAgICAgIG9sZEVsbS5fbGVhdmVDYiA/IG51bGwgOiBwYXJlbnRFbG0sXG4gICAgICAgICAgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHBhcmVudCBwbGFjZWhvbGRlciBub2RlIGVsZW1lbnQsIHJlY3Vyc2l2ZWx5XG4gICAgICAgIGlmIChpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGUucGFyZW50O1xuICAgICAgICAgIHZhciBwYXRjaGFibGUgPSBpc1BhdGNoYWJsZSh2bm9kZSk7XG4gICAgICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGNicy5kZXN0cm95W2ldKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yLmVsbSA9IHZub2RlLmVsbTtcbiAgICAgICAgICAgIGlmIChwYXRjaGFibGUpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICAgICAgICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgYW5jZXN0b3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vICM2NTEzXG4gICAgICAgICAgICAgIC8vIGludm9rZSBpbnNlcnQgaG9va3MgdGhhdCBtYXkgaGF2ZSBiZWVuIG1lcmdlZCBieSBjcmVhdGUgaG9va3MuXG4gICAgICAgICAgICAgIC8vIGUuZy4gZm9yIGRpcmVjdGl2ZXMgdGhhdCB1c2VzIHRoZSBcImluc2VydGVkXCIgaG9vay5cbiAgICAgICAgICAgICAgdmFyIGluc2VydCA9IGFuY2VzdG9yLmRhdGEuaG9vay5pbnNlcnQ7XG4gICAgICAgICAgICAgIGlmIChpbnNlcnQubWVyZ2VkKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgYXQgaW5kZXggMSB0byBhdm9pZCByZS1pbnZva2luZyBjb21wb25lbnQgbW91bnRlZCBob29rXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSQyID0gMTsgaSQyIDwgaW5zZXJ0LmZucy5sZW5ndGg7IGkkMisrKSB7XG4gICAgICAgICAgICAgICAgICBpbnNlcnQuZm5zW2kkMl0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlZ2lzdGVyUmVmKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlc3Ryb3kgb2xkIG5vZGVcbiAgICAgICAgaWYgKGlzRGVmKHBhcmVudEVsbSkpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZztcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUoa2V5LCB2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgKSB7XG4gICAgICB2YXIgYmxvY2tlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICB9O1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZWwuX19pZXBoID0gdHJ1ZTsgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqL1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4vLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLlxudmFyIFJBTkdFX1RPS0VOID0gJ19fcic7XG52YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuLyogICovXG5cbi8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2Vcbi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmVcbi8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMgKG9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgIC8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbiAgICB2YXIgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTtcbiAgfVxuICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAvLyBhZnRlciAyLjUuIEtlZXBpbmcgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBnZW5lcmF0ZWQgY29kZSBmcm9tIDwgMi40XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgIG9uLmNoYW5nZSA9IFtdLmNvbmNhdChvbltDSEVDS0JPWF9SQURJT19UT0tFTl0sIG9uLmNoYW5nZSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICByZW1vdmUkMihldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgIH1cbiAgfVxufVxuXG4vLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcFxuLy8gaW1wbGVtZW50YXRpb24gYW5kIGRvZXMgbm90IGZpcmUgbWljcm90YXNrcyBpbiBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLCBzb1xuLy8gc2FmZSB0byBleGNsdWRlLlxudmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgcGFzc2l2ZVxuKSB7XG4gIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcbiAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcbiAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcbiAgLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZFxuICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXG4gIGlmICh1c2VNaWNyb3Rhc2tGaXgpIHtcbiAgICB2YXIgYXR0YWNoZWRUaW1lc3RhbXAgPSBjdXJyZW50Rmx1c2hUaW1lc3RhbXA7XG4gICAgdmFyIG9yaWdpbmFsID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gb3JpZ2luYWwuX3dyYXBwZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKFxuICAgICAgICAvLyBubyBidWJibGluZywgc2hvdWxkIGFsd2F5cyBmaXJlLlxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYSBzYWZldHkgbmV0IGluIGNhc2UgZXZlbnQudGltZVN0YW1wIGlzIHVucmVsaWFibGUgaW5cbiAgICAgICAgLy8gY2VydGFpbiB3ZWlyZCBlbnZpcm9ubWVudHMuLi5cbiAgICAgICAgZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fFxuICAgICAgICAvLyBldmVudCBpcyBmaXJlZCBhZnRlciBoYW5kbGVyIGF0dGFjaG1lbnRcbiAgICAgICAgZS50aW1lU3RhbXAgPj0gYXR0YWNoZWRUaW1lc3RhbXAgfHxcbiAgICAgICAgLy8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXG4gICAgICAgIC8vICM5NDYyIGlPUyA5IGJ1ZzogZXZlbnQudGltZVN0YW1wIGlzIDAgYWZ0ZXIgaGlzdG9yeS5wdXNoU3RhdGVcbiAgICAgICAgLy8gIzk2ODEgUXRXZWJFbmdpbmUgZXZlbnQudGltZVN0YW1wIGlzIG5lZ2F0aXZlIHZhbHVlXG4gICAgICAgIGUudGltZVN0YW1wIDw9IDAgfHxcbiAgICAgICAgLy8gIzk0NDggYmFpbCBpZiBldmVudCBpcyBmaXJlZCBpbiBhbm90aGVyIGRvY3VtZW50IGluIGEgbXVsdGktcGFnZVxuICAgICAgICAvLyBlbGVjdHJvbi9udy5qcyBhcHAsIHNpbmNlIGV2ZW50LnRpbWVTdGFtcCB3aWxsIGJlIHVzaW5nIGEgZGlmZmVyZW50XG4gICAgICAgIC8vIHN0YXJ0aW5nIHJlZmVyZW5jZVxuICAgICAgICBlLnRhcmdldC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBzdXBwb3J0c1Bhc3NpdmVcbiAgICAgID8geyBjYXB0dXJlOiBjYXB0dXJlLCBwYXNzaXZlOiBwYXNzaXZlIH1cbiAgICAgIDogY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIuX3dyYXBwZXIgfHwgaGFuZGxlcixcbiAgICBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCBjcmVhdGVPbmNlSGFuZGxlciQxLCB2bm9kZS5jb250ZXh0KTtcbiAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufTtcblxuLyogICovXG5cbnZhciBzdmdDb250YWluZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG5cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5XG4gICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJiBlbG0udGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBpc1VuZGVmKGN1cikgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmIGlzU1ZHKGVsbS50YWdOYW1lKSAmJiBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XG4gICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHNcbiAgICAgIHN2Z0NvbnRhaW5lciA9IHN2Z0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIgKyBjdXIgKyBcIjwvc3ZnPlwiO1xuICAgICAgdmFyIHN2ZyA9IHN2Z0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGVsbS5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoc3ZnLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgICAvLyBgdmFsdWVgIGlzIGhhbmRsZWQgc2VwYXJhdGVseSBiZWNhdXNlIHRoZSBET00gdmFsdWUgbWF5IGJlIHRlbXBvcmFyaWx5XG4gICAgICAvLyBvdXQgb2Ygc3luYyB3aXRoIFZET00gc3RhdGUgZHVlIHRvIGZvY3VzLCBjb21wb3NpdGlvbiBhbmQgbW9kaWZpZXJzLlxuICAgICAgLy8gVGhpcyAgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNhcnJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgICBjdXIgIT09IG9sZFByb3BzW2tleV1cbiAgICApIHtcbiAgICAgIC8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbiAgICAgIC8vIGUuZy4gYHZhbHVlYCBvbiA8cHJvZ3Jlc3M+IHcvIG5vbi1maW5pdGUgdmFsdWVcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG52YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG4gIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEgKGRhdGEpIHtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBzdHlsZURhdGE7XG5cbiAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChcbiAgICAgICAgY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhICYmXG4gICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKVxuICAgICAgKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgfVxuXG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xuICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGNzc1ZhclJFID0gL14tLS87XG52YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbnZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUobmFtZSksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4vLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duIChpLmUuIGFjdGluZ1xuLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdyAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZVxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbiAodmFsLCBuYW1lLCB2bm9kZSkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gXCIgK1xuICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgTmFOIC0gXCIgK1xuICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZER1cmF0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gKiAtIGEgbWVyZ2VkIGhvb2sgKGludm9rZXIpIHdpdGggdGhlIG9yaWdpbmFsIGluIC5mbnNcbiAqIC0gYSB3cmFwcGVkIGNvbXBvbmVudCBtZXRob2QgKGNoZWNrIC5fbGVuZ3RoKVxuICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICovXG5mdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoIChmbikge1xuICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7XG4gICAgLy8gaW52b2tlclxuICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKVxuICAgICAgICA/IGludm9rZXJGbnNbMF1cbiAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlJCQxICh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICAgIGxlYXZlKHZub2RlLCBybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgfVxuICB9XG59IDoge307XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl07XG5cbi8qICAqL1xuXG4vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcbi8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkaXJlY3RpdmUgPSB7XG4gIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAvLyAjNjkwM1xuICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBpc1RleHRJbnB1dFR5cGUoZWwudHlwZSkpIHtcbiAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGF0IHRoZSB2YWx1ZSBpcyBvdXQtb2Ytc3luYyB3aXRoIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cbiAgICAgIHZhciBwcmV2T3B0aW9ucyA9IGVsLl92T3B0aW9ucztcbiAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZShmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOyB9KSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCBpZlxuICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zKTsgfSlcbiAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgdmFsdWUpOyB9KVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKSB7IHJldHVybiB9XG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBkaXJlY3RpdmUsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcblxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiAgICAgICEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UgJiYgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudClcbiAgICApIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTtcbiAgICB0aGlzLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHRoaXMkMSk7XG4gICAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgICB0aGlzJDEuX19wYXRjaF9fKFxuICAgICAgICB0aGlzJDEuX3Zub2RlLFxuICAgICAgICB0aGlzJDEua2VwdCxcbiAgICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICk7XG4gICAgICB0aGlzJDEuX3Zub2RlID0gdGhpcyQxLmtlcHQ7XG4gICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgIHVwZGF0ZS5jYWxsKHRoaXMkMSwgdm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLl9yZWZsb3cgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCdcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsIi8qIVxuICAqIHZ1ZS1yb3V0ZXIgdjMuMS4yXG4gICogKGMpIDIwMTkgRXZhbiBZb3VcbiAgKiBAbGljZW5zZSBNSVRcbiAgKi9cbi8qICAqL1xuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcigoXCJbdnVlLXJvdXRlcl0gXCIgKyBtZXNzYWdlKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB3YXJuIChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmRpdGlvbikge1xuICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4oKFwiW3Z1ZS1yb3V0ZXJdIFwiICsgbWVzc2FnZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IgKGVycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGVycikuaW5kZXhPZignRXJyb3InKSA+IC0xXG59XG5cbmZ1bmN0aW9uIGlzRXh0ZW5kZWRFcnJvciAoY29uc3RydWN0b3IsIGVycikge1xuICByZXR1cm4gKFxuICAgIGVyciBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yIHx8XG4gICAgLy8gX25hbWUgaXMgdG8gc3VwcG9ydCBJRTkgdG9vXG4gICAgKGVyciAmJiAoZXJyLm5hbWUgPT09IGNvbnN0cnVjdG9yLm5hbWUgfHwgZXJyLl9uYW1lID09PSBjb25zdHJ1Y3Rvci5fbmFtZSkpXG4gIClcbn1cblxuZnVuY3Rpb24gZXh0ZW5kIChhLCBiKSB7XG4gIGZvciAodmFyIGtleSBpbiBiKSB7XG4gICAgYVtrZXldID0gYltrZXldO1xuICB9XG4gIHJldHVybiBhXG59XG5cbnZhciBWaWV3ID0ge1xuICBuYW1lOiAnUm91dGVyVmlldycsXG4gIGZ1bmN0aW9uYWw6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgbmFtZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnXG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoXywgcmVmKSB7XG4gICAgdmFyIHByb3BzID0gcmVmLnByb3BzO1xuICAgIHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjtcbiAgICB2YXIgcGFyZW50ID0gcmVmLnBhcmVudDtcbiAgICB2YXIgZGF0YSA9IHJlZi5kYXRhO1xuXG4gICAgLy8gdXNlZCBieSBkZXZ0b29scyB0byBkaXNwbGF5IGEgcm91dGVyLXZpZXcgYmFkZ2VcbiAgICBkYXRhLnJvdXRlclZpZXcgPSB0cnVlO1xuXG4gICAgLy8gZGlyZWN0bHkgdXNlIHBhcmVudCBjb250ZXh0J3MgY3JlYXRlRWxlbWVudCgpIGZ1bmN0aW9uXG4gICAgLy8gc28gdGhhdCBjb21wb25lbnRzIHJlbmRlcmVkIGJ5IHJvdXRlci12aWV3IGNhbiByZXNvbHZlIG5hbWVkIHNsb3RzXG4gICAgdmFyIGggPSBwYXJlbnQuJGNyZWF0ZUVsZW1lbnQ7XG4gICAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICAgIHZhciByb3V0ZSA9IHBhcmVudC4kcm91dGU7XG4gICAgdmFyIGNhY2hlID0gcGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgfHwgKHBhcmVudC5fcm91dGVyVmlld0NhY2hlID0ge30pO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGN1cnJlbnQgdmlldyBkZXB0aCwgYWxzbyBjaGVjayB0byBzZWUgaWYgdGhlIHRyZWVcbiAgICAvLyBoYXMgYmVlbiB0b2dnbGVkIGluYWN0aXZlIGJ1dCBrZXB0LWFsaXZlLlxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIGluYWN0aXZlID0gZmFsc2U7XG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuX3JvdXRlclJvb3QgIT09IHBhcmVudCkge1xuICAgICAgdmFyIHZub2RlRGF0YSA9IHBhcmVudC4kdm5vZGUgJiYgcGFyZW50LiR2bm9kZS5kYXRhO1xuICAgICAgaWYgKHZub2RlRGF0YSkge1xuICAgICAgICBpZiAodm5vZGVEYXRhLnJvdXRlclZpZXcpIHtcbiAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2bm9kZURhdGEua2VlcEFsaXZlICYmIHBhcmVudC5faW5hY3RpdmUpIHtcbiAgICAgICAgICBpbmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBkYXRhLnJvdXRlclZpZXdEZXB0aCA9IGRlcHRoO1xuXG4gICAgLy8gcmVuZGVyIHByZXZpb3VzIHZpZXcgaWYgdGhlIHRyZWUgaXMgaW5hY3RpdmUgYW5kIGtlcHQtYWxpdmVcbiAgICBpZiAoaW5hY3RpdmUpIHtcbiAgICAgIHJldHVybiBoKGNhY2hlW25hbWVdLCBkYXRhLCBjaGlsZHJlbilcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZCA9IHJvdXRlLm1hdGNoZWRbZGVwdGhdO1xuICAgIC8vIHJlbmRlciBlbXB0eSBub2RlIGlmIG5vIG1hdGNoZWQgcm91dGVcbiAgICBpZiAoIW1hdGNoZWQpIHtcbiAgICAgIGNhY2hlW25hbWVdID0gbnVsbDtcbiAgICAgIHJldHVybiBoKClcbiAgICB9XG5cbiAgICB2YXIgY29tcG9uZW50ID0gY2FjaGVbbmFtZV0gPSBtYXRjaGVkLmNvbXBvbmVudHNbbmFtZV07XG5cbiAgICAvLyBhdHRhY2ggaW5zdGFuY2UgcmVnaXN0cmF0aW9uIGhvb2tcbiAgICAvLyB0aGlzIHdpbGwgYmUgY2FsbGVkIGluIHRoZSBpbnN0YW5jZSdzIGluamVjdGVkIGxpZmVjeWNsZSBob29rc1xuICAgIGRhdGEucmVnaXN0ZXJSb3V0ZUluc3RhbmNlID0gZnVuY3Rpb24gKHZtLCB2YWwpIHtcbiAgICAgIC8vIHZhbCBjb3VsZCBiZSB1bmRlZmluZWQgZm9yIHVucmVnaXN0cmF0aW9uXG4gICAgICB2YXIgY3VycmVudCA9IG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdO1xuICAgICAgaWYgKFxuICAgICAgICAodmFsICYmIGN1cnJlbnQgIT09IHZtKSB8fFxuICAgICAgICAoIXZhbCAmJiBjdXJyZW50ID09PSB2bSlcbiAgICAgICkge1xuICAgICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhbHNvIHJlZ2lzdGVyIGluc3RhbmNlIGluIHByZXBhdGNoIGhvb2tcbiAgICAvLyBpbiBjYXNlIHRoZSBzYW1lIGNvbXBvbmVudCBpbnN0YW5jZSBpcyByZXVzZWQgYWNyb3NzIGRpZmZlcmVudCByb3V0ZXNcbiAgICA7KGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pKS5wcmVwYXRjaCA9IGZ1bmN0aW9uIChfLCB2bm9kZSkge1xuICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgLy8gcmVnaXN0ZXIgaW5zdGFuY2UgaW4gaW5pdCBob29rXG4gICAgLy8gaW4gY2FzZSBrZXB0LWFsaXZlIGNvbXBvbmVudCBiZSBhY3RpdmVkIHdoZW4gcm91dGVzIGNoYW5nZWRcbiAgICBkYXRhLmhvb2suaW5pdCA9IGZ1bmN0aW9uICh2bm9kZSkge1xuICAgICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlICYmXG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICE9PSBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXVxuICAgICAgKSB7XG4gICAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIHJlc29sdmUgcHJvcHNcbiAgICB2YXIgcHJvcHNUb1Bhc3MgPSBkYXRhLnByb3BzID0gcmVzb2x2ZVByb3BzKHJvdXRlLCBtYXRjaGVkLnByb3BzICYmIG1hdGNoZWQucHJvcHNbbmFtZV0pO1xuICAgIGlmIChwcm9wc1RvUGFzcykge1xuICAgICAgLy8gY2xvbmUgdG8gcHJldmVudCBtdXRhdGlvblxuICAgICAgcHJvcHNUb1Bhc3MgPSBkYXRhLnByb3BzID0gZXh0ZW5kKHt9LCBwcm9wc1RvUGFzcyk7XG4gICAgICAvLyBwYXNzIG5vbi1kZWNsYXJlZCBwcm9wcyBhcyBhdHRyc1xuICAgICAgdmFyIGF0dHJzID0gZGF0YS5hdHRycyA9IGRhdGEuYXR0cnMgfHwge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHNUb1Bhc3MpIHtcbiAgICAgICAgaWYgKCFjb21wb25lbnQucHJvcHMgfHwgIShrZXkgaW4gY29tcG9uZW50LnByb3BzKSkge1xuICAgICAgICAgIGF0dHJzW2tleV0gPSBwcm9wc1RvUGFzc1trZXldO1xuICAgICAgICAgIGRlbGV0ZSBwcm9wc1RvUGFzc1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGgoY29tcG9uZW50LCBkYXRhLCBjaGlsZHJlbilcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUHJvcHMgKHJvdXRlLCBjb25maWcpIHtcbiAgc3dpdGNoICh0eXBlb2YgY29uZmlnKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVyblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gY29uZmlnXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGNvbmZpZyhyb3V0ZSlcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBjb25maWcgPyByb3V0ZS5wYXJhbXMgOiB1bmRlZmluZWRcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBcInByb3BzIGluIFxcXCJcIiArIChyb3V0ZS5wYXRoKSArIFwiXFxcIiBpcyBhIFwiICsgKHR5cGVvZiBjb25maWcpICsgXCIsIFwiICtcbiAgICAgICAgICBcImV4cGVjdGluZyBhbiBvYmplY3QsIGZ1bmN0aW9uIG9yIGJvb2xlYW4uXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGVuY29kZVJlc2VydmVSRSA9IC9bIScoKSpdL2c7XG52YXIgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNik7IH07XG52YXIgY29tbWFSRSA9IC8lMkMvZztcblxuLy8gZml4ZWQgZW5jb2RlVVJJQ29tcG9uZW50IHdoaWNoIGlzIG1vcmUgY29uZm9ybWFudCB0byBSRkMzOTg2OlxuLy8gLSBlc2NhcGVzIFshJygpKl1cbi8vIC0gcHJlc2VydmUgY29tbWFzXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgLnJlcGxhY2UoZW5jb2RlUmVzZXJ2ZVJFLCBlbmNvZGVSZXNlcnZlUmVwbGFjZXIpXG4gIC5yZXBsYWNlKGNvbW1hUkUsICcsJyk7IH07XG5cbnZhciBkZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7XG5cbmZ1bmN0aW9uIHJlc29sdmVRdWVyeSAoXG4gIHF1ZXJ5LFxuICBleHRyYVF1ZXJ5LFxuICBfcGFyc2VRdWVyeVxuKSB7XG4gIGlmICggZXh0cmFRdWVyeSA9PT0gdm9pZCAwICkgZXh0cmFRdWVyeSA9IHt9O1xuXG4gIHZhciBwYXJzZSA9IF9wYXJzZVF1ZXJ5IHx8IHBhcnNlUXVlcnk7XG4gIHZhciBwYXJzZWRRdWVyeTtcbiAgdHJ5IHtcbiAgICBwYXJzZWRRdWVyeSA9IHBhcnNlKHF1ZXJ5IHx8ICcnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihmYWxzZSwgZS5tZXNzYWdlKTtcbiAgICBwYXJzZWRRdWVyeSA9IHt9O1xuICB9XG4gIGZvciAodmFyIGtleSBpbiBleHRyYVF1ZXJ5KSB7XG4gICAgcGFyc2VkUXVlcnlba2V5XSA9IGV4dHJhUXVlcnlba2V5XTtcbiAgfVxuICByZXR1cm4gcGFyc2VkUXVlcnlcbn1cblxuZnVuY3Rpb24gcGFyc2VRdWVyeSAocXVlcnkpIHtcbiAgdmFyIHJlcyA9IHt9O1xuXG4gIHF1ZXJ5ID0gcXVlcnkudHJpbSgpLnJlcGxhY2UoL14oXFw/fCN8JikvLCAnJyk7XG5cbiAgaWYgKCFxdWVyeSkge1xuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIHF1ZXJ5LnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgcGFydHMgPSBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKS5zcGxpdCgnPScpO1xuICAgIHZhciBrZXkgPSBkZWNvZGUocGFydHMuc2hpZnQoKSk7XG4gICAgdmFyIHZhbCA9IHBhcnRzLmxlbmd0aCA+IDBcbiAgICAgID8gZGVjb2RlKHBhcnRzLmpvaW4oJz0nKSlcbiAgICAgIDogbnVsbDtcblxuICAgIGlmIChyZXNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXNba2V5XSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzW2tleV0pKSB7XG4gICAgICByZXNba2V5XS5wdXNoKHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trZXldID0gW3Jlc1trZXldLCB2YWxdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlRdWVyeSAob2JqKSB7XG4gIHZhciByZXMgPSBvYmogPyBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHZhbCA9IG9ialtrZXldO1xuXG4gICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZW5jb2RlKGtleSlcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB2YWwuZm9yRWFjaChmdW5jdGlvbiAodmFsMikge1xuICAgICAgICBpZiAodmFsMiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbDIgPT09IG51bGwpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChlbmNvZGUoa2V5KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodmFsMikpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQuam9pbignJicpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbClcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Lmxlbmd0aCA+IDA7IH0pLmpvaW4oJyYnKSA6IG51bGw7XG4gIHJldHVybiByZXMgPyAoXCI/XCIgKyByZXMpIDogJydcbn1cblxuLyogICovXG5cbnZhciB0cmFpbGluZ1NsYXNoUkUgPSAvXFwvPyQvO1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZSAoXG4gIHJlY29yZCxcbiAgbG9jYXRpb24sXG4gIHJlZGlyZWN0ZWRGcm9tLFxuICByb3V0ZXJcbikge1xuICB2YXIgc3RyaW5naWZ5UXVlcnkkJDEgPSByb3V0ZXIgJiYgcm91dGVyLm9wdGlvbnMuc3RyaW5naWZ5UXVlcnk7XG5cbiAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnkgfHwge307XG4gIHRyeSB7XG4gICAgcXVlcnkgPSBjbG9uZShxdWVyeSk7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJvdXRlID0ge1xuICAgIG5hbWU6IGxvY2F0aW9uLm5hbWUgfHwgKHJlY29yZCAmJiByZWNvcmQubmFtZSksXG4gICAgbWV0YTogKHJlY29yZCAmJiByZWNvcmQubWV0YSkgfHwge30sXG4gICAgcGF0aDogbG9jYXRpb24ucGF0aCB8fCAnLycsXG4gICAgaGFzaDogbG9jYXRpb24uaGFzaCB8fCAnJyxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgcGFyYW1zOiBsb2NhdGlvbi5wYXJhbXMgfHwge30sXG4gICAgZnVsbFBhdGg6IGdldEZ1bGxQYXRoKGxvY2F0aW9uLCBzdHJpbmdpZnlRdWVyeSQkMSksXG4gICAgbWF0Y2hlZDogcmVjb3JkID8gZm9ybWF0TWF0Y2gocmVjb3JkKSA6IFtdXG4gIH07XG4gIGlmIChyZWRpcmVjdGVkRnJvbSkge1xuICAgIHJvdXRlLnJlZGlyZWN0ZWRGcm9tID0gZ2V0RnVsbFBhdGgocmVkaXJlY3RlZEZyb20sIHN0cmluZ2lmeVF1ZXJ5JCQxKTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShyb3V0ZSlcbn1cblxuZnVuY3Rpb24gY2xvbmUgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoY2xvbmUpXG4gIH0gZWxzZSBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgIHJlc1trZXldID0gY2xvbmUodmFsdWVba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxufVxuXG4vLyB0aGUgc3RhcnRpbmcgcm91dGUgdGhhdCByZXByZXNlbnRzIHRoZSBpbml0aWFsIHN0YXRlXG52YXIgU1RBUlQgPSBjcmVhdGVSb3V0ZShudWxsLCB7XG4gIHBhdGg6ICcvJ1xufSk7XG5cbmZ1bmN0aW9uIGZvcm1hdE1hdGNoIChyZWNvcmQpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB3aGlsZSAocmVjb3JkKSB7XG4gICAgcmVzLnVuc2hpZnQocmVjb3JkKTtcbiAgICByZWNvcmQgPSByZWNvcmQucGFyZW50O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0RnVsbFBhdGggKFxuICByZWYsXG4gIF9zdHJpbmdpZnlRdWVyeVxuKSB7XG4gIHZhciBwYXRoID0gcmVmLnBhdGg7XG4gIHZhciBxdWVyeSA9IHJlZi5xdWVyeTsgaWYgKCBxdWVyeSA9PT0gdm9pZCAwICkgcXVlcnkgPSB7fTtcbiAgdmFyIGhhc2ggPSByZWYuaGFzaDsgaWYgKCBoYXNoID09PSB2b2lkIDAgKSBoYXNoID0gJyc7XG5cbiAgdmFyIHN0cmluZ2lmeSA9IF9zdHJpbmdpZnlRdWVyeSB8fCBzdHJpbmdpZnlRdWVyeTtcbiAgcmV0dXJuIChwYXRoIHx8ICcvJykgKyBzdHJpbmdpZnkocXVlcnkpICsgaGFzaFxufVxuXG5mdW5jdGlvbiBpc1NhbWVSb3V0ZSAoYSwgYikge1xuICBpZiAoYiA9PT0gU1RBUlQpIHtcbiAgICByZXR1cm4gYSA9PT0gYlxuICB9IGVsc2UgaWYgKCFiKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAoYS5wYXRoICYmIGIucGF0aCkge1xuICAgIHJldHVybiAoXG4gICAgICBhLnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcnKSA9PT0gYi5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnJykgJiZcbiAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpXG4gICAgKVxuICB9IGVsc2UgaWYgKGEubmFtZSAmJiBiLm5hbWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5uYW1lID09PSBiLm5hbWUgJiZcbiAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucGFyYW1zLCBiLnBhcmFtcylcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNPYmplY3RFcXVhbCAoYSwgYikge1xuICBpZiAoIGEgPT09IHZvaWQgMCApIGEgPSB7fTtcbiAgaWYgKCBiID09PSB2b2lkIDAgKSBiID0ge307XG5cbiAgLy8gaGFuZGxlIG51bGwgdmFsdWUgIzE1NjZcbiAgaWYgKCFhIHx8ICFiKSB7IHJldHVybiBhID09PSBiIH1cbiAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBhVmFsID0gYVtrZXldO1xuICAgIHZhciBiVmFsID0gYltrZXldO1xuICAgIC8vIGNoZWNrIG5lc3RlZCBlcXVhbGl0eVxuICAgIGlmICh0eXBlb2YgYVZhbCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGJWYWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RFcXVhbChhVmFsLCBiVmFsKVxuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGFWYWwpID09PSBTdHJpbmcoYlZhbClcbiAgfSlcbn1cblxuZnVuY3Rpb24gaXNJbmNsdWRlZFJvdXRlIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgcmV0dXJuIChcbiAgICBjdXJyZW50LnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcvJykuaW5kZXhPZihcbiAgICAgIHRhcmdldC5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnLycpXG4gICAgKSA9PT0gMCAmJlxuICAgICghdGFyZ2V0Lmhhc2ggfHwgY3VycmVudC5oYXNoID09PSB0YXJnZXQuaGFzaCkgJiZcbiAgICBxdWVyeUluY2x1ZGVzKGN1cnJlbnQucXVlcnksIHRhcmdldC5xdWVyeSlcbiAgKVxufVxuXG5mdW5jdGlvbiBxdWVyeUluY2x1ZGVzIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgIGlmICghKGtleSBpbiBjdXJyZW50KSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlUGF0aCAoXG4gIHJlbGF0aXZlLFxuICBiYXNlLFxuICBhcHBlbmRcbikge1xuICB2YXIgZmlyc3RDaGFyID0gcmVsYXRpdmUuY2hhckF0KDApO1xuICBpZiAoZmlyc3RDaGFyID09PSAnLycpIHtcbiAgICByZXR1cm4gcmVsYXRpdmVcbiAgfVxuXG4gIGlmIChmaXJzdENoYXIgPT09ICc/JyB8fCBmaXJzdENoYXIgPT09ICcjJykge1xuICAgIHJldHVybiBiYXNlICsgcmVsYXRpdmVcbiAgfVxuXG4gIHZhciBzdGFjayA9IGJhc2Uuc3BsaXQoJy8nKTtcblxuICAvLyByZW1vdmUgdHJhaWxpbmcgc2VnbWVudCBpZjpcbiAgLy8gLSBub3QgYXBwZW5kaW5nXG4gIC8vIC0gYXBwZW5kaW5nIHRvIHRyYWlsaW5nIHNsYXNoIChsYXN0IHNlZ21lbnQgaXMgZW1wdHkpXG4gIGlmICghYXBwZW5kIHx8ICFzdGFja1tzdGFjay5sZW5ndGggLSAxXSkge1xuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgLy8gcmVzb2x2ZSByZWxhdGl2ZSBwYXRoXG4gIHZhciBzZWdtZW50cyA9IHJlbGF0aXZlLnJlcGxhY2UoL15cXC8vLCAnJykuc3BsaXQoJy8nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgaWYgKHNlZ21lbnQgPT09ICcuLicpIHtcbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gJy4nKSB7XG4gICAgICBzdGFjay5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVuc3VyZSBsZWFkaW5nIHNsYXNoXG4gIGlmIChzdGFja1swXSAhPT0gJycpIHtcbiAgICBzdGFjay51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIHJldHVybiBzdGFjay5qb2luKCcvJylcbn1cblxuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBxdWVyeSA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgaGFzaCA9IHBhdGguc2xpY2UoaGFzaEluZGV4KTtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHF1ZXJ5SW5kZXggPSBwYXRoLmluZGV4T2YoJz8nKTtcbiAgaWYgKHF1ZXJ5SW5kZXggPj0gMCkge1xuICAgIHF1ZXJ5ID0gcGF0aC5zbGljZShxdWVyeUluZGV4ICsgMSk7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgcXVlcnlJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIGhhc2g6IGhhc2hcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGVhblBhdGggKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXFwvXFwvL2csICcvJylcbn1cblxudmFyIGlzYXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xudmFyIHBhdGhUb1JlZ2V4cF8xID0gcGF0aFRvUmVnZXhwO1xudmFyIHBhcnNlXzEgPSBwYXJzZTtcbnZhciBjb21waWxlXzEgPSBjb21waWxlO1xudmFyIHRva2Vuc1RvRnVuY3Rpb25fMSA9IHRva2Vuc1RvRnVuY3Rpb247XG52YXIgdG9rZW5zVG9SZWdFeHBfMSA9IHRva2Vuc1RvUmVnRXhwO1xuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpO1xuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciBrZXkgPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcGF0aCA9ICcnO1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nO1xuICB2YXIgcmVzO1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF07XG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV07XG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleDtcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KTtcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoO1xuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXTtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdO1xuICAgIHZhciBwcmVmaXggPSByZXNbMl07XG4gICAgdmFyIG5hbWUgPSByZXNbM107XG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF07XG4gICAgdmFyIGdyb3VwID0gcmVzWzVdO1xuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XTtcbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN107XG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKTtcbiAgICAgIHBhdGggPSAnJztcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXg7XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJztcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKic7XG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyO1xuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cDtcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSk7XG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKTtcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJyc7XG4gICAgdmFyIGRhdGEgPSBvYmogfHwge307XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9O1xuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW47XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXTtcbiAgICAgIHZhciBzZWdtZW50O1xuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKTtcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpO1xuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzO1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZyk7XG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKTtcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSk7XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKTtcbiAgICBrZXlzID0gW107XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3Q7XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2U7XG4gIHZhciByb3V0ZSA9ICcnO1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KTtcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknO1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pO1xuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJztcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknO1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKTtcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXI7XG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPyc7XG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnO1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSc7XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucyk7XG4gICAga2V5cyA9IFtdO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxucGF0aFRvUmVnZXhwXzEucGFyc2UgPSBwYXJzZV8xO1xucGF0aFRvUmVnZXhwXzEuY29tcGlsZSA9IGNvbXBpbGVfMTtcbnBhdGhUb1JlZ2V4cF8xLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXzE7XG5wYXRoVG9SZWdleHBfMS50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXzE7XG5cbi8qICAqL1xuXG4vLyAkZmxvdy1kaXNhYmxlLWxpbmVcbnZhciByZWdleHBDb21waWxlQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBmaWxsUGFyYW1zIChcbiAgcGF0aCxcbiAgcGFyYW1zLFxuICByb3V0ZU1zZ1xuKSB7XG4gIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgdHJ5IHtcbiAgICB2YXIgZmlsbGVyID1cbiAgICAgIHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSB8fFxuICAgICAgKHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSA9IHBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUocGF0aCkpO1xuXG4gICAgLy8gRml4ICMyNTA1IHJlc29sdmluZyBhc3RlcmlzayByb3V0ZXMgeyBuYW1lOiAnbm90LWZvdW5kJywgcGFyYW1zOiB7IHBhdGhNYXRjaDogJy9ub3QtZm91bmQnIH19XG4gICAgaWYgKHBhcmFtcy5wYXRoTWF0Y2gpIHsgcGFyYW1zWzBdID0gcGFyYW1zLnBhdGhNYXRjaDsgfVxuXG4gICAgcmV0dXJuIGZpbGxlcihwYXJhbXMsIHsgcHJldHR5OiB0cnVlIH0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgKFwibWlzc2luZyBwYXJhbSBmb3IgXCIgKyByb3V0ZU1zZyArIFwiOiBcIiArIChlLm1lc3NhZ2UpKSk7XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9IGZpbmFsbHkge1xuICAgIC8vIGRlbGV0ZSB0aGUgMCBpZiBpdCB3YXMgYWRkZWRcbiAgICBkZWxldGUgcGFyYW1zWzBdO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVMb2NhdGlvbiAoXG4gIHJhdyxcbiAgY3VycmVudCxcbiAgYXBwZW5kLFxuICByb3V0ZXJcbikge1xuICB2YXIgbmV4dCA9IHR5cGVvZiByYXcgPT09ICdzdHJpbmcnID8geyBwYXRoOiByYXcgfSA6IHJhdztcbiAgLy8gbmFtZWQgdGFyZ2V0XG4gIGlmIChuZXh0Ll9ub3JtYWxpemVkKSB7XG4gICAgcmV0dXJuIG5leHRcbiAgfSBlbHNlIGlmIChuZXh0Lm5hbWUpIHtcbiAgICByZXR1cm4gZXh0ZW5kKHt9LCByYXcpXG4gIH1cblxuICAvLyByZWxhdGl2ZSBwYXJhbXNcbiAgaWYgKCFuZXh0LnBhdGggJiYgbmV4dC5wYXJhbXMgJiYgY3VycmVudCkge1xuICAgIG5leHQgPSBleHRlbmQoe30sIG5leHQpO1xuICAgIG5leHQuX25vcm1hbGl6ZWQgPSB0cnVlO1xuICAgIHZhciBwYXJhbXMgPSBleHRlbmQoZXh0ZW5kKHt9LCBjdXJyZW50LnBhcmFtcyksIG5leHQucGFyYW1zKTtcbiAgICBpZiAoY3VycmVudC5uYW1lKSB7XG4gICAgICBuZXh0Lm5hbWUgPSBjdXJyZW50Lm5hbWU7XG4gICAgICBuZXh0LnBhcmFtcyA9IHBhcmFtcztcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnQubWF0Y2hlZC5sZW5ndGgpIHtcbiAgICAgIHZhciByYXdQYXRoID0gY3VycmVudC5tYXRjaGVkW2N1cnJlbnQubWF0Y2hlZC5sZW5ndGggLSAxXS5wYXRoO1xuICAgICAgbmV4dC5wYXRoID0gZmlsbFBhcmFtcyhyYXdQYXRoLCBwYXJhbXMsIChcInBhdGggXCIgKyAoY3VycmVudC5wYXRoKSkpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgXCJyZWxhdGl2ZSBwYXJhbXMgbmF2aWdhdGlvbiByZXF1aXJlcyBhIGN1cnJlbnQgcm91dGUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dFxuICB9XG5cbiAgdmFyIHBhcnNlZFBhdGggPSBwYXJzZVBhdGgobmV4dC5wYXRoIHx8ICcnKTtcbiAgdmFyIGJhc2VQYXRoID0gKGN1cnJlbnQgJiYgY3VycmVudC5wYXRoKSB8fCAnLyc7XG4gIHZhciBwYXRoID0gcGFyc2VkUGF0aC5wYXRoXG4gICAgPyByZXNvbHZlUGF0aChwYXJzZWRQYXRoLnBhdGgsIGJhc2VQYXRoLCBhcHBlbmQgfHwgbmV4dC5hcHBlbmQpXG4gICAgOiBiYXNlUGF0aDtcblxuICB2YXIgcXVlcnkgPSByZXNvbHZlUXVlcnkoXG4gICAgcGFyc2VkUGF0aC5xdWVyeSxcbiAgICBuZXh0LnF1ZXJ5LFxuICAgIHJvdXRlciAmJiByb3V0ZXIub3B0aW9ucy5wYXJzZVF1ZXJ5XG4gICk7XG5cbiAgdmFyIGhhc2ggPSBuZXh0Lmhhc2ggfHwgcGFyc2VkUGF0aC5oYXNoO1xuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSB7XG4gICAgaGFzaCA9IFwiI1wiICsgaGFzaDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgcGF0aDogcGF0aCxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgaGFzaDogaGFzaFxuICB9XG59XG5cbi8qICAqL1xuXG4vLyB3b3JrIGFyb3VuZCB3ZWlyZCBmbG93IGJ1Z1xudmFyIHRvVHlwZXMgPSBbU3RyaW5nLCBPYmplY3RdO1xudmFyIGV2ZW50VHlwZXMgPSBbU3RyaW5nLCBBcnJheV07XG5cbnZhciBub29wID0gZnVuY3Rpb24gKCkge307XG5cbnZhciBMaW5rID0ge1xuICBuYW1lOiAnUm91dGVyTGluaycsXG4gIHByb3BzOiB7XG4gICAgdG86IHtcbiAgICAgIHR5cGU6IHRvVHlwZXMsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnYSdcbiAgICB9LFxuICAgIGV4YWN0OiBCb29sZWFuLFxuICAgIGFwcGVuZDogQm9vbGVhbixcbiAgICByZXBsYWNlOiBCb29sZWFuLFxuICAgIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgZXhhY3RBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGV2ZW50OiB7XG4gICAgICB0eXBlOiBldmVudFR5cGVzLFxuICAgICAgZGVmYXVsdDogJ2NsaWNrJ1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByb3V0ZXIgPSB0aGlzLiRyb3V0ZXI7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLiRyb3V0ZTtcbiAgICB2YXIgcmVmID0gcm91dGVyLnJlc29sdmUoXG4gICAgICB0aGlzLnRvLFxuICAgICAgY3VycmVudCxcbiAgICAgIHRoaXMuYXBwZW5kXG4gICAgKTtcbiAgICB2YXIgbG9jYXRpb24gPSByZWYubG9jYXRpb247XG4gICAgdmFyIHJvdXRlID0gcmVmLnJvdXRlO1xuICAgIHZhciBocmVmID0gcmVmLmhyZWY7XG5cbiAgICB2YXIgY2xhc3NlcyA9IHt9O1xuICAgIHZhciBnbG9iYWxBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtBY3RpdmVDbGFzcztcbiAgICB2YXIgZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtFeGFjdEFjdGl2ZUNsYXNzO1xuICAgIC8vIFN1cHBvcnQgZ2xvYmFsIGVtcHR5IGFjdGl2ZSBjbGFzc1xuICAgIHZhciBhY3RpdmVDbGFzc0ZhbGxiYWNrID1cbiAgICAgIGdsb2JhbEFjdGl2ZUNsYXNzID09IG51bGwgPyAncm91dGVyLWxpbmstYWN0aXZlJyA6IGdsb2JhbEFjdGl2ZUNsYXNzO1xuICAgIHZhciBleGFjdEFjdGl2ZUNsYXNzRmFsbGJhY2sgPVxuICAgICAgZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgID8gJ3JvdXRlci1saW5rLWV4YWN0LWFjdGl2ZSdcbiAgICAgICAgOiBnbG9iYWxFeGFjdEFjdGl2ZUNsYXNzO1xuICAgIHZhciBhY3RpdmVDbGFzcyA9XG4gICAgICB0aGlzLmFjdGl2ZUNsYXNzID09IG51bGwgPyBhY3RpdmVDbGFzc0ZhbGxiYWNrIDogdGhpcy5hY3RpdmVDbGFzcztcbiAgICB2YXIgZXhhY3RBY3RpdmVDbGFzcyA9XG4gICAgICB0aGlzLmV4YWN0QWN0aXZlQ2xhc3MgPT0gbnVsbFxuICAgICAgICA/IGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFja1xuICAgICAgICA6IHRoaXMuZXhhY3RBY3RpdmVDbGFzcztcblxuICAgIHZhciBjb21wYXJlVGFyZ2V0ID0gcm91dGUucmVkaXJlY3RlZEZyb21cbiAgICAgID8gY3JlYXRlUm91dGUobnVsbCwgbm9ybWFsaXplTG9jYXRpb24ocm91dGUucmVkaXJlY3RlZEZyb20pLCBudWxsLCByb3V0ZXIpXG4gICAgICA6IHJvdXRlO1xuXG4gICAgY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXSA9IGlzU2FtZVJvdXRlKGN1cnJlbnQsIGNvbXBhcmVUYXJnZXQpO1xuICAgIGNsYXNzZXNbYWN0aXZlQ2xhc3NdID0gdGhpcy5leGFjdFxuICAgICAgPyBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICA6IGlzSW5jbHVkZWRSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0KTtcblxuICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChndWFyZEV2ZW50KGUpKSB7XG4gICAgICAgIGlmICh0aGlzJDEucmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlci5yZXBsYWNlKGxvY2F0aW9uLCBub29wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXIucHVzaChsb2NhdGlvbiwgbm9vcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG9uID0geyBjbGljazogZ3VhcmRFdmVudCB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZXZlbnQpKSB7XG4gICAgICB0aGlzLmV2ZW50LmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgb25bZV0gPSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uW3RoaXMuZXZlbnRdID0gaGFuZGxlcjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHsgY2xhc3M6IGNsYXNzZXMgfTtcblxuICAgIHZhciBzY29wZWRTbG90ID1cbiAgICAgICF0aGlzLiRzY29wZWRTbG90cy4kaGFzTm9ybWFsICYmXG4gICAgICB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0ICYmXG4gICAgICB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0KHtcbiAgICAgICAgaHJlZjogaHJlZixcbiAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICBuYXZpZ2F0ZTogaGFuZGxlcixcbiAgICAgICAgaXNBY3RpdmU6IGNsYXNzZXNbYWN0aXZlQ2xhc3NdLFxuICAgICAgICBpc0V4YWN0QWN0aXZlOiBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICB9KTtcblxuICAgIGlmIChzY29wZWRTbG90KSB7XG4gICAgICBpZiAoc2NvcGVkU2xvdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHNjb3BlZFNsb3RbMF1cbiAgICAgIH0gZWxzZSBpZiAoc2NvcGVkU2xvdC5sZW5ndGggPiAxIHx8ICFzY29wZWRTbG90Lmxlbmd0aCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIChcIlJvdXRlckxpbmsgd2l0aCB0bz1cXFwiXCIgKyAodGhpcy5wcm9wcy50bykgKyBcIlxcXCIgaXMgdHJ5aW5nIHRvIHVzZSBhIHNjb3BlZCBzbG90IGJ1dCBpdCBkaWRuJ3QgcHJvdmlkZSBleGFjdGx5IG9uZSBjaGlsZC5cIilcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY29wZWRTbG90Lmxlbmd0aCA9PT0gMCA/IGgoKSA6IGgoJ3NwYW4nLCB7fSwgc2NvcGVkU2xvdClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy50YWcgPT09ICdhJykge1xuICAgICAgZGF0YS5vbiA9IG9uO1xuICAgICAgZGF0YS5hdHRycyA9IHsgaHJlZjogaHJlZiB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmaW5kIHRoZSBmaXJzdCA8YT4gY2hpbGQgYW5kIGFwcGx5IGxpc3RlbmVyIGFuZCBocmVmXG4gICAgICB2YXIgYSA9IGZpbmRBbmNob3IodGhpcy4kc2xvdHMuZGVmYXVsdCk7XG4gICAgICBpZiAoYSkge1xuICAgICAgICAvLyBpbiBjYXNlIHRoZSA8YT4gaXMgYSBzdGF0aWMgbm9kZVxuICAgICAgICBhLmlzU3RhdGljID0gZmFsc2U7XG4gICAgICAgIHZhciBhRGF0YSA9IChhLmRhdGEgPSBleHRlbmQoe30sIGEuZGF0YSkpO1xuICAgICAgICBhRGF0YS5vbiA9IG9uO1xuICAgICAgICB2YXIgYUF0dHJzID0gKGEuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYS5kYXRhLmF0dHJzKSk7XG4gICAgICAgIGFBdHRycy5ocmVmID0gaHJlZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRvZXNuJ3QgaGF2ZSA8YT4gY2hpbGQsIGFwcGx5IGxpc3RlbmVyIHRvIHNlbGZcbiAgICAgICAgZGF0YS5vbiA9IG9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoKHRoaXMudGFnLCBkYXRhLCB0aGlzLiRzbG90cy5kZWZhdWx0KVxuICB9XG59XG5cbmZ1bmN0aW9uIGd1YXJkRXZlbnQgKGUpIHtcbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgd2l0aCBjb250cm9sIGtleXNcbiAgaWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCB3aGVuIHByZXZlbnREZWZhdWx0IGNhbGxlZFxuICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IG9uIHJpZ2h0IGNsaWNrXG4gIGlmIChlLmJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIGUuYnV0dG9uICE9PSAwKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IGlmIGB0YXJnZXQ9XCJfYmxhbmtcImBcbiAgaWYgKGUuY3VycmVudFRhcmdldCAmJiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpO1xuICAgIGlmICgvXFxiX2JsYW5rXFxiL2kudGVzdCh0YXJnZXQpKSB7IHJldHVybiB9XG4gIH1cbiAgLy8gdGhpcyBtYXkgYmUgYSBXZWV4IGV2ZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0aGlzIG1ldGhvZFxuICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaW5kQW5jaG9yIChjaGlsZHJlbikge1xuICBpZiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgY2hpbGQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICdhJykge1xuICAgICAgICByZXR1cm4gY2hpbGRcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5jaGlsZHJlbiAmJiAoY2hpbGQgPSBmaW5kQW5jaG9yKGNoaWxkLmNoaWxkcmVuKSkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBfVnVlO1xuXG5mdW5jdGlvbiBpbnN0YWxsIChWdWUpIHtcbiAgaWYgKGluc3RhbGwuaW5zdGFsbGVkICYmIF9WdWUgPT09IFZ1ZSkgeyByZXR1cm4gfVxuICBpbnN0YWxsLmluc3RhbGxlZCA9IHRydWU7XG5cbiAgX1Z1ZSA9IFZ1ZTtcblxuICB2YXIgaXNEZWYgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gdiAhPT0gdW5kZWZpbmVkOyB9O1xuXG4gIHZhciByZWdpc3Rlckluc3RhbmNlID0gZnVuY3Rpb24gKHZtLCBjYWxsVmFsKSB7XG4gICAgdmFyIGkgPSB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gICAgaWYgKGlzRGVmKGkpICYmIGlzRGVmKGkgPSBpLmRhdGEpICYmIGlzRGVmKGkgPSBpLnJlZ2lzdGVyUm91dGVJbnN0YW5jZSkpIHtcbiAgICAgIGkodm0sIGNhbGxWYWwpO1xuICAgIH1cbiAgfTtcblxuICBWdWUubWl4aW4oe1xuICAgIGJlZm9yZUNyZWF0ZTogZnVuY3Rpb24gYmVmb3JlQ3JlYXRlICgpIHtcbiAgICAgIGlmIChpc0RlZih0aGlzLiRvcHRpb25zLnJvdXRlcikpIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JvdXRlciA9IHRoaXMuJG9wdGlvbnMucm91dGVyO1xuICAgICAgICB0aGlzLl9yb3V0ZXIuaW5pdCh0aGlzKTtcbiAgICAgICAgVnVlLnV0aWwuZGVmaW5lUmVhY3RpdmUodGhpcywgJ19yb3V0ZScsIHRoaXMuX3JvdXRlci5oaXN0b3J5LmN1cnJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9ICh0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50Ll9yb3V0ZXJSb290KSB8fCB0aGlzO1xuICAgICAgfVxuICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCB0aGlzKTtcbiAgICB9LFxuICAgIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRyb3V0ZXInLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGVyIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGUnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGUgfVxuICB9KTtcblxuICBWdWUuY29tcG9uZW50KCdSb3V0ZXJWaWV3JywgVmlldyk7XG4gIFZ1ZS5jb21wb25lbnQoJ1JvdXRlckxpbmsnLCBMaW5rKTtcblxuICB2YXIgc3RyYXRzID0gVnVlLmNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG4gIC8vIHVzZSB0aGUgc2FtZSBob29rIG1lcmdpbmcgc3RyYXRlZ3kgZm9yIHJvdXRlIGhvb2tzXG4gIHN0cmF0cy5iZWZvcmVSb3V0ZUVudGVyID0gc3RyYXRzLmJlZm9yZVJvdXRlTGVhdmUgPSBzdHJhdHMuYmVmb3JlUm91dGVVcGRhdGUgPSBzdHJhdHMuY3JlYXRlZDtcbn1cblxuLyogICovXG5cbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlTWFwIChcbiAgcm91dGVzLFxuICBvbGRQYXRoTGlzdCxcbiAgb2xkUGF0aE1hcCxcbiAgb2xkTmFtZU1hcFxuKSB7XG4gIC8vIHRoZSBwYXRoIGxpc3QgaXMgdXNlZCB0byBjb250cm9sIHBhdGggbWF0Y2hpbmcgcHJpb3JpdHlcbiAgdmFyIHBhdGhMaXN0ID0gb2xkUGF0aExpc3QgfHwgW107XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgcGF0aE1hcCA9IG9sZFBhdGhNYXAgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciBuYW1lTWFwID0gb2xkTmFtZU1hcCB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHJvdXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCByb3V0ZSk7XG4gIH0pO1xuXG4gIC8vIGVuc3VyZSB3aWxkY2FyZCByb3V0ZXMgYXJlIGFsd2F5cyBhdCB0aGUgZW5kXG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGF0aExpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHBhdGhMaXN0W2ldID09PSAnKicpIHtcbiAgICAgIHBhdGhMaXN0LnB1c2gocGF0aExpc3Quc3BsaWNlKGksIDEpWzBdKTtcbiAgICAgIGwtLTtcbiAgICAgIGktLTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhMaXN0OiBwYXRoTGlzdCxcbiAgICBwYXRoTWFwOiBwYXRoTWFwLFxuICAgIG5hbWVNYXA6IG5hbWVNYXBcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRSb3V0ZVJlY29yZCAoXG4gIHBhdGhMaXN0LFxuICBwYXRoTWFwLFxuICBuYW1lTWFwLFxuICByb3V0ZSxcbiAgcGFyZW50LFxuICBtYXRjaEFzXG4pIHtcbiAgdmFyIHBhdGggPSByb3V0ZS5wYXRoO1xuICB2YXIgbmFtZSA9IHJvdXRlLm5hbWU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHBhdGggIT0gbnVsbCwgXCJcXFwicGF0aFxcXCIgaXMgcmVxdWlyZWQgaW4gYSByb3V0ZSBjb25maWd1cmF0aW9uLlwiKTtcbiAgICBhc3NlcnQoXG4gICAgICB0eXBlb2Ygcm91dGUuY29tcG9uZW50ICE9PSAnc3RyaW5nJyxcbiAgICAgIFwicm91dGUgY29uZmlnIFxcXCJjb21wb25lbnRcXFwiIGZvciBwYXRoOiBcIiArIChTdHJpbmcoXG4gICAgICAgIHBhdGggfHwgbmFtZVxuICAgICAgKSkgKyBcIiBjYW5ub3QgYmUgYSBcIiArIFwic3RyaW5nIGlkLiBVc2UgYW4gYWN0dWFsIGNvbXBvbmVudCBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgfVxuXG4gIHZhciBwYXRoVG9SZWdleHBPcHRpb25zID1cbiAgICByb3V0ZS5wYXRoVG9SZWdleHBPcHRpb25zIHx8IHt9O1xuICB2YXIgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVQYXRoKHBhdGgsIHBhcmVudCwgcGF0aFRvUmVnZXhwT3B0aW9ucy5zdHJpY3QpO1xuXG4gIGlmICh0eXBlb2Ygcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcGF0aFRvUmVnZXhwT3B0aW9ucy5zZW5zaXRpdmUgPSByb3V0ZS5jYXNlU2Vuc2l0aXZlO1xuICB9XG5cbiAgdmFyIHJlY29yZCA9IHtcbiAgICBwYXRoOiBub3JtYWxpemVkUGF0aCxcbiAgICByZWdleDogY29tcGlsZVJvdXRlUmVnZXgobm9ybWFsaXplZFBhdGgsIHBhdGhUb1JlZ2V4cE9wdGlvbnMpLFxuICAgIGNvbXBvbmVudHM6IHJvdXRlLmNvbXBvbmVudHMgfHwgeyBkZWZhdWx0OiByb3V0ZS5jb21wb25lbnQgfSxcbiAgICBpbnN0YW5jZXM6IHt9LFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgbWF0Y2hBczogbWF0Y2hBcyxcbiAgICByZWRpcmVjdDogcm91dGUucmVkaXJlY3QsXG4gICAgYmVmb3JlRW50ZXI6IHJvdXRlLmJlZm9yZUVudGVyLFxuICAgIG1ldGE6IHJvdXRlLm1ldGEgfHwge30sXG4gICAgcHJvcHM6XG4gICAgICByb3V0ZS5wcm9wcyA9PSBudWxsXG4gICAgICAgID8ge31cbiAgICAgICAgOiByb3V0ZS5jb21wb25lbnRzXG4gICAgICAgICAgPyByb3V0ZS5wcm9wc1xuICAgICAgICAgIDogeyBkZWZhdWx0OiByb3V0ZS5wcm9wcyB9XG4gIH07XG5cbiAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgLy8gV2FybiBpZiByb3V0ZSBpcyBuYW1lZCwgZG9lcyBub3QgcmVkaXJlY3QgYW5kIGhhcyBhIGRlZmF1bHQgY2hpbGQgcm91dGUuXG4gICAgLy8gSWYgdXNlcnMgbmF2aWdhdGUgdG8gdGhpcyByb3V0ZSBieSBuYW1lLCB0aGUgZGVmYXVsdCBjaGlsZCB3aWxsXG4gICAgLy8gbm90IGJlIHJlbmRlcmVkIChHSCBJc3N1ZSAjNjI5KVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHJvdXRlLm5hbWUgJiZcbiAgICAgICAgIXJvdXRlLnJlZGlyZWN0ICYmXG4gICAgICAgIHJvdXRlLmNoaWxkcmVuLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiAvXlxcLz8kLy50ZXN0KGNoaWxkLnBhdGgpOyB9KVxuICAgICAgKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJOYW1lZCBSb3V0ZSAnXCIgKyAocm91dGUubmFtZSkgKyBcIicgaGFzIGEgZGVmYXVsdCBjaGlsZCByb3V0ZS4gXCIgK1xuICAgICAgICAgICAgXCJXaGVuIG5hdmlnYXRpbmcgdG8gdGhpcyBuYW1lZCByb3V0ZSAoOnRvPVxcXCJ7bmFtZTogJ1wiICsgKHJvdXRlLm5hbWUpICsgXCInXFxcIiksIFwiICtcbiAgICAgICAgICAgIFwidGhlIGRlZmF1bHQgY2hpbGQgcm91dGUgd2lsbCBub3QgYmUgcmVuZGVyZWQuIFJlbW92ZSB0aGUgbmFtZSBmcm9tIFwiICtcbiAgICAgICAgICAgIFwidGhpcyByb3V0ZSBhbmQgdXNlIHRoZSBuYW1lIG9mIHRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIGZvciBuYW1lZCBcIiArXG4gICAgICAgICAgICBcImxpbmtzIGluc3RlYWQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcm91dGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHZhciBjaGlsZE1hdGNoQXMgPSBtYXRjaEFzXG4gICAgICAgID8gY2xlYW5QYXRoKChtYXRjaEFzICsgXCIvXCIgKyAoY2hpbGQucGF0aCkpKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCBjaGlsZCwgcmVjb3JkLCBjaGlsZE1hdGNoQXMpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFwYXRoTWFwW3JlY29yZC5wYXRoXSkge1xuICAgIHBhdGhMaXN0LnB1c2gocmVjb3JkLnBhdGgpO1xuICAgIHBhdGhNYXBbcmVjb3JkLnBhdGhdID0gcmVjb3JkO1xuICB9XG5cbiAgaWYgKHJvdXRlLmFsaWFzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgYWxpYXNlcyA9IEFycmF5LmlzQXJyYXkocm91dGUuYWxpYXMpID8gcm91dGUuYWxpYXMgOiBbcm91dGUuYWxpYXNdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxpYXNlcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGFsaWFzID0gYWxpYXNlc1tpXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFsaWFzID09PSBwYXRoKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgKFwiRm91bmQgYW4gYWxpYXMgd2l0aCB0aGUgc2FtZSB2YWx1ZSBhcyB0aGUgcGF0aDogXFxcIlwiICsgcGF0aCArIFwiXFxcIi4gWW91IGhhdmUgdG8gcmVtb3ZlIHRoYXQgYWxpYXMuIEl0IHdpbGwgYmUgaWdub3JlZCBpbiBkZXZlbG9wbWVudC5cIilcbiAgICAgICAgKTtcbiAgICAgICAgLy8gc2tpcCBpbiBkZXYgdG8gbWFrZSBpdCB3b3JrXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciBhbGlhc1JvdXRlID0ge1xuICAgICAgICBwYXRoOiBhbGlhcyxcbiAgICAgICAgY2hpbGRyZW46IHJvdXRlLmNoaWxkcmVuXG4gICAgICB9O1xuICAgICAgYWRkUm91dGVSZWNvcmQoXG4gICAgICAgIHBhdGhMaXN0LFxuICAgICAgICBwYXRoTWFwLFxuICAgICAgICBuYW1lTWFwLFxuICAgICAgICBhbGlhc1JvdXRlLFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIHJlY29yZC5wYXRoIHx8ICcvJyAvLyBtYXRjaEFzXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChuYW1lKSB7XG4gICAgaWYgKCFuYW1lTWFwW25hbWVdKSB7XG4gICAgICBuYW1lTWFwW25hbWVdID0gcmVjb3JkO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhbWF0Y2hBcykge1xuICAgICAgd2FybihcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIFwiRHVwbGljYXRlIG5hbWVkIHJvdXRlcyBkZWZpbml0aW9uOiBcIiArXG4gICAgICAgICAgXCJ7IG5hbWU6IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIsIHBhdGg6IFxcXCJcIiArIChyZWNvcmQucGF0aCkgKyBcIlxcXCIgfVwiXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21waWxlUm91dGVSZWdleCAoXG4gIHBhdGgsXG4gIHBhdGhUb1JlZ2V4cE9wdGlvbnNcbikge1xuICB2YXIgcmVnZXggPSBwYXRoVG9SZWdleHBfMShwYXRoLCBbXSwgcGF0aFRvUmVnZXhwT3B0aW9ucyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHJlZ2V4LmtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB3YXJuKFxuICAgICAgICAha2V5c1trZXkubmFtZV0sXG4gICAgICAgIChcIkR1cGxpY2F0ZSBwYXJhbSBrZXlzIGluIHJvdXRlIHdpdGggcGF0aDogXFxcIlwiICsgcGF0aCArIFwiXFxcIlwiKVxuICAgICAgKTtcbiAgICAgIGtleXNba2V5Lm5hbWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVnZXhcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUGF0aCAoXG4gIHBhdGgsXG4gIHBhcmVudCxcbiAgc3RyaWN0XG4pIHtcbiAgaWYgKCFzdHJpY3QpIHsgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwvJC8sICcnKTsgfVxuICBpZiAocGF0aFswXSA9PT0gJy8nKSB7IHJldHVybiBwYXRoIH1cbiAgaWYgKHBhcmVudCA9PSBudWxsKSB7IHJldHVybiBwYXRoIH1cbiAgcmV0dXJuIGNsZWFuUGF0aCgoKHBhcmVudC5wYXRoKSArIFwiL1wiICsgcGF0aCkpXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gY3JlYXRlTWF0Y2hlciAoXG4gIHJvdXRlcyxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIHJlZiA9IGNyZWF0ZVJvdXRlTWFwKHJvdXRlcyk7XG4gIHZhciBwYXRoTGlzdCA9IHJlZi5wYXRoTGlzdDtcbiAgdmFyIHBhdGhNYXAgPSByZWYucGF0aE1hcDtcbiAgdmFyIG5hbWVNYXAgPSByZWYubmFtZU1hcDtcblxuICBmdW5jdGlvbiBhZGRSb3V0ZXMgKHJvdXRlcykge1xuICAgIGNyZWF0ZVJvdXRlTWFwKHJvdXRlcywgcGF0aExpc3QsIHBhdGhNYXAsIG5hbWVNYXApO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF0Y2ggKFxuICAgIHJhdyxcbiAgICBjdXJyZW50Um91dGUsXG4gICAgcmVkaXJlY3RlZEZyb21cbiAgKSB7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24ocmF3LCBjdXJyZW50Um91dGUsIGZhbHNlLCByb3V0ZXIpO1xuICAgIHZhciBuYW1lID0gbG9jYXRpb24ubmFtZTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YXIgcmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4ocmVjb3JkLCAoXCJSb3V0ZSB3aXRoIG5hbWUgJ1wiICsgbmFtZSArIFwiJyBkb2VzIG5vdCBleGlzdFwiKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlY29yZCkgeyByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKSB9XG4gICAgICB2YXIgcGFyYW1OYW1lcyA9IHJlY29yZC5yZWdleC5rZXlzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gIWtleS5vcHRpb25hbDsgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkubmFtZTsgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24ucGFyYW1zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBsb2NhdGlvbi5wYXJhbXMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRSb3V0ZSAmJiB0eXBlb2YgY3VycmVudFJvdXRlLnBhcmFtcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGN1cnJlbnRSb3V0ZS5wYXJhbXMpIHtcbiAgICAgICAgICBpZiAoIShrZXkgaW4gbG9jYXRpb24ucGFyYW1zKSAmJiBwYXJhbU5hbWVzLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5wYXJhbXNba2V5XSA9IGN1cnJlbnRSb3V0ZS5wYXJhbXNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbG9jYXRpb24ucGF0aCA9IGZpbGxQYXJhbXMocmVjb3JkLnBhdGgsIGxvY2F0aW9uLnBhcmFtcywgKFwibmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiKSk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aCkge1xuICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aExpc3RbaV07XG4gICAgICAgIHZhciByZWNvcmQkMSA9IHBhdGhNYXBbcGF0aF07XG4gICAgICAgIGlmIChtYXRjaFJvdXRlKHJlY29yZCQxLnJlZ2V4LCBsb2NhdGlvbi5wYXRoLCBsb2NhdGlvbi5wYXJhbXMpKSB7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShyZWNvcmQkMSwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG5vIG1hdGNoXG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZGlyZWN0IChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb25cbiAgKSB7XG4gICAgdmFyIG9yaWdpbmFsUmVkaXJlY3QgPSByZWNvcmQucmVkaXJlY3Q7XG4gICAgdmFyIHJlZGlyZWN0ID0gdHlwZW9mIG9yaWdpbmFsUmVkaXJlY3QgPT09ICdmdW5jdGlvbidcbiAgICAgID8gb3JpZ2luYWxSZWRpcmVjdChjcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCBudWxsLCByb3V0ZXIpKVxuICAgICAgOiBvcmlnaW5hbFJlZGlyZWN0O1xuXG4gICAgaWYgKHR5cGVvZiByZWRpcmVjdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlZGlyZWN0ID0geyBwYXRoOiByZWRpcmVjdCB9O1xuICAgIH1cblxuICAgIGlmICghcmVkaXJlY3QgfHwgdHlwZW9mIHJlZGlyZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSwgKFwiaW52YWxpZCByZWRpcmVjdCBvcHRpb246IFwiICsgKEpTT04uc3RyaW5naWZ5KHJlZGlyZWN0KSkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cblxuICAgIHZhciByZSA9IHJlZGlyZWN0O1xuICAgIHZhciBuYW1lID0gcmUubmFtZTtcbiAgICB2YXIgcGF0aCA9IHJlLnBhdGg7XG4gICAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnk7XG4gICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXJhbXMgPSBsb2NhdGlvbi5wYXJhbXM7XG4gICAgcXVlcnkgPSByZS5oYXNPd25Qcm9wZXJ0eSgncXVlcnknKSA/IHJlLnF1ZXJ5IDogcXVlcnk7XG4gICAgaGFzaCA9IHJlLmhhc093blByb3BlcnR5KCdoYXNoJykgPyByZS5oYXNoIDogaGFzaDtcbiAgICBwYXJhbXMgPSByZS5oYXNPd25Qcm9wZXJ0eSgncGFyYW1zJykgPyByZS5wYXJhbXMgOiBwYXJhbXM7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgLy8gcmVzb2x2ZWQgbmFtZWQgZGlyZWN0XG4gICAgICB2YXIgdGFyZ2V0UmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFzc2VydCh0YXJnZXRSZWNvcmQsIChcInJlZGlyZWN0IGZhaWxlZDogbmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBub3QgZm91bmQuXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaCh7XG4gICAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2gsXG4gICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKVxuICAgIH0gZWxzZSBpZiAocGF0aCkge1xuICAgICAgLy8gMS4gcmVzb2x2ZSByZWxhdGl2ZSByZWRpcmVjdFxuICAgICAgdmFyIHJhd1BhdGggPSByZXNvbHZlUmVjb3JkUGF0aChwYXRoLCByZWNvcmQpO1xuICAgICAgLy8gMi4gcmVzb2x2ZSBwYXJhbXNcbiAgICAgIHZhciByZXNvbHZlZFBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcywgKFwicmVkaXJlY3Qgcm91dGUgd2l0aCBwYXRoIFxcXCJcIiArIHJhd1BhdGggKyBcIlxcXCJcIikpO1xuICAgICAgLy8gMy4gcmVtYXRjaCB3aXRoIGV4aXN0aW5nIHF1ZXJ5IGFuZCBoYXNoXG4gICAgICByZXR1cm4gbWF0Y2goe1xuICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgICAgcGF0aDogcmVzb2x2ZWRQYXRoLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2hcbiAgICAgIH0sIHVuZGVmaW5lZCwgbG9jYXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oZmFsc2UsIChcImludmFsaWQgcmVkaXJlY3Qgb3B0aW9uOiBcIiArIChKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFsaWFzIChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb24sXG4gICAgbWF0Y2hBc1xuICApIHtcbiAgICB2YXIgYWxpYXNlZFBhdGggPSBmaWxsUGFyYW1zKG1hdGNoQXMsIGxvY2F0aW9uLnBhcmFtcywgKFwiYWxpYXNlZCByb3V0ZSB3aXRoIHBhdGggXFxcIlwiICsgbWF0Y2hBcyArIFwiXFxcIlwiKSk7XG4gICAgdmFyIGFsaWFzZWRNYXRjaCA9IG1hdGNoKHtcbiAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgcGF0aDogYWxpYXNlZFBhdGhcbiAgICB9KTtcbiAgICBpZiAoYWxpYXNlZE1hdGNoKSB7XG4gICAgICB2YXIgbWF0Y2hlZCA9IGFsaWFzZWRNYXRjaC5tYXRjaGVkO1xuICAgICAgdmFyIGFsaWFzZWRSZWNvcmQgPSBtYXRjaGVkW21hdGNoZWQubGVuZ3RoIC0gMV07XG4gICAgICBsb2NhdGlvbi5wYXJhbXMgPSBhbGlhc2VkTWF0Y2gucGFyYW1zO1xuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShhbGlhc2VkUmVjb3JkLCBsb2NhdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVSb3V0ZSAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLnJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gcmVkaXJlY3QocmVjb3JkLCByZWRpcmVjdGVkRnJvbSB8fCBsb2NhdGlvbilcbiAgICB9XG4gICAgaWYgKHJlY29yZCAmJiByZWNvcmQubWF0Y2hBcykge1xuICAgICAgcmV0dXJuIGFsaWFzKHJlY29yZCwgbG9jYXRpb24sIHJlY29yZC5tYXRjaEFzKVxuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20sIHJvdXRlcilcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWF0Y2g6IG1hdGNoLFxuICAgIGFkZFJvdXRlczogYWRkUm91dGVzXG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZSAoXG4gIHJlZ2V4LFxuICBwYXRoLFxuICBwYXJhbXNcbikge1xuICB2YXIgbSA9IHBhdGgubWF0Y2gocmVnZXgpO1xuXG4gIGlmICghbSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IG0ubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIga2V5ID0gcmVnZXgua2V5c1tpIC0gMV07XG4gICAgdmFyIHZhbCA9IHR5cGVvZiBtW2ldID09PSAnc3RyaW5nJyA/IGRlY29kZVVSSUNvbXBvbmVudChtW2ldKSA6IG1baV07XG4gICAgaWYgKGtleSkge1xuICAgICAgLy8gRml4ICMxOTk0OiB1c2luZyAqIHdpdGggcHJvcHM6IHRydWUgZ2VuZXJhdGVzIGEgcGFyYW0gbmFtZWQgMFxuICAgICAgcGFyYW1zW2tleS5uYW1lIHx8ICdwYXRoTWF0Y2gnXSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUmVjb3JkUGF0aCAocGF0aCwgcmVjb3JkKSB7XG4gIHJldHVybiByZXNvbHZlUGF0aChwYXRoLCByZWNvcmQucGFyZW50ID8gcmVjb3JkLnBhcmVudC5wYXRoIDogJy8nLCB0cnVlKVxufVxuXG4vKiAgKi9cblxudmFyIHBvc2l0aW9uU3RvcmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBzZXR1cFNjcm9sbCAoKSB7XG4gIC8vIEZpeCBmb3IgIzE1ODUgZm9yIEZpcmVmb3hcbiAgLy8gRml4IGZvciAjMjE5NSBBZGQgb3B0aW9uYWwgdGhpcmQgYXR0cmlidXRlIHRvIHdvcmthcm91bmQgYSBidWcgaW4gc2FmYXJpIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODI2NzhcbiAgLy8gRml4IGZvciAjMjc3NCBTdXBwb3J0IGZvciBhcHBzIGxvYWRlZCBmcm9tIFdpbmRvd3MgZmlsZSBzaGFyZXMgbm90IG1hcHBlZCB0byBuZXR3b3JrIGRyaXZlczogcmVwbGFjZWQgbG9jYXRpb24ub3JpZ2luIHdpdGhcbiAgLy8gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0XG4gIC8vIGxvY2F0aW9uLmhvc3QgY29udGFpbnMgdGhlIHBvcnQgYW5kIGxvY2F0aW9uLmhvc3RuYW1lIGRvZXNuJ3RcbiAgdmFyIHByb3RvY29sQW5kUGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyB3aW5kb3cubG9jYXRpb24uaG9zdDtcbiAgdmFyIGFic29sdXRlUGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UocHJvdG9jb2xBbmRQYXRoLCAnJyk7XG4gIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleTogZ2V0U3RhdGVLZXkoKSB9LCAnJywgYWJzb2x1dGVQYXRoKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzYXZlU2Nyb2xsUG9zaXRpb24oKTtcbiAgICBpZiAoZS5zdGF0ZSAmJiBlLnN0YXRlLmtleSkge1xuICAgICAgc2V0U3RhdGVLZXkoZS5zdGF0ZS5rZXkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVNjcm9sbCAoXG4gIHJvdXRlcixcbiAgdG8sXG4gIGZyb20sXG4gIGlzUG9wXG4pIHtcbiAgaWYgKCFyb3V0ZXIuYXBwKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmVoYXZpb3IgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgaWYgKCFiZWhhdmlvcikge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJlaGF2aW9yID09PSAnZnVuY3Rpb24nLCBcInNjcm9sbEJlaGF2aW9yIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIC8vIHdhaXQgdW50aWwgcmUtcmVuZGVyIGZpbmlzaGVzIGJlZm9yZSBzY3JvbGxpbmdcbiAgcm91dGVyLmFwcC4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBwb3NpdGlvbiA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgdmFyIHNob3VsZFNjcm9sbCA9IGJlaGF2aW9yLmNhbGwoXG4gICAgICByb3V0ZXIsXG4gICAgICB0byxcbiAgICAgIGZyb20sXG4gICAgICBpc1BvcCA/IHBvc2l0aW9uIDogbnVsbFxuICAgICk7XG5cbiAgICBpZiAoIXNob3VsZFNjcm9sbCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzaG91bGRTY3JvbGwudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc2hvdWxkU2Nyb2xsXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChzaG91bGRTY3JvbGwpIHtcbiAgICAgICAgICBzY3JvbGxUb1Bvc2l0aW9uKChzaG91bGRTY3JvbGwpLCBwb3NpdGlvbik7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGFzc2VydChmYWxzZSwgZXJyLnRvU3RyaW5nKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcm9sbFRvUG9zaXRpb24oc2hvdWxkU2Nyb2xsLCBwb3NpdGlvbik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uICgpIHtcbiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7XG4gIGlmIChrZXkpIHtcbiAgICBwb3NpdGlvblN0b3JlW2tleV0gPSB7XG4gICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBvc2l0aW9uICgpIHtcbiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7XG4gIGlmIChrZXkpIHtcbiAgICByZXR1cm4gcG9zaXRpb25TdG9yZVtrZXldXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFBvc2l0aW9uIChlbCwgb2Zmc2V0KSB7XG4gIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGRvY1JlY3QgPSBkb2NFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHg6IGVsUmVjdC5sZWZ0IC0gZG9jUmVjdC5sZWZ0IC0gb2Zmc2V0LngsXG4gICAgeTogZWxSZWN0LnRvcCAtIGRvY1JlY3QudG9wIC0gb2Zmc2V0LnlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUG9zaXRpb24gKG9iaikge1xuICByZXR1cm4gaXNOdW1iZXIob2JqLngpIHx8IGlzTnVtYmVyKG9iai55KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQb3NpdGlvbiAob2JqKSB7XG4gIHJldHVybiB7XG4gICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogaXNOdW1iZXIob2JqLnkpID8gb2JqLnkgOiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPZmZzZXQgKG9iaikge1xuICByZXR1cm4ge1xuICAgIHg6IGlzTnVtYmVyKG9iai54KSA/IG9iai54IDogMCxcbiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBpc051bWJlciAodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdudW1iZXInXG59XG5cbnZhciBoYXNoU3RhcnRzV2l0aE51bWJlclJFID0gL14jXFxkLztcblxuZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbiAoc2hvdWxkU2Nyb2xsLCBwb3NpdGlvbikge1xuICB2YXIgaXNPYmplY3QgPSB0eXBlb2Ygc2hvdWxkU2Nyb2xsID09PSAnb2JqZWN0JztcbiAgaWYgKGlzT2JqZWN0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwuc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZ2V0RWxlbWVudEJ5SWQgd291bGQgc3RpbGwgZmFpbCBpZiB0aGUgc2VsZWN0b3IgY29udGFpbnMgYSBtb3JlIGNvbXBsaWNhdGVkIHF1ZXJ5IGxpa2UgI21haW5bZGF0YS1hdHRyXVxuICAgIC8vIGJ1dCBhdCB0aGUgc2FtZSB0aW1lLCBpdCBkb2Vzbid0IG1ha2UgbXVjaCBzZW5zZSB0byBzZWxlY3QgYW4gZWxlbWVudCB3aXRoIGFuIGlkIGFuZCBhbiBleHRyYSBzZWxlY3RvclxuICAgIHZhciBlbCA9IGhhc2hTdGFydHNXaXRoTnVtYmVyUkUudGVzdChzaG91bGRTY3JvbGwuc2VsZWN0b3IpIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzaG91bGRTY3JvbGwuc2VsZWN0b3Iuc2xpY2UoMSkpIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNob3VsZFNjcm9sbC5zZWxlY3Rvcik7XG5cbiAgICBpZiAoZWwpIHtcbiAgICAgIHZhciBvZmZzZXQgPVxuICAgICAgICBzaG91bGRTY3JvbGwub2Zmc2V0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwub2Zmc2V0ID09PSAnb2JqZWN0J1xuICAgICAgICAgID8gc2hvdWxkU2Nyb2xsLm9mZnNldFxuICAgICAgICAgIDoge307XG4gICAgICBvZmZzZXQgPSBub3JtYWxpemVPZmZzZXQob2Zmc2V0KTtcbiAgICAgIHBvc2l0aW9uID0gZ2V0RWxlbWVudFBvc2l0aW9uKGVsLCBvZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICAgIHBvc2l0aW9uID0gbm9ybWFsaXplUG9zaXRpb24oc2hvdWxkU2Nyb2xsKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QgJiYgaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICBwb3NpdGlvbiA9IG5vcm1hbGl6ZVBvc2l0aW9uKHNob3VsZFNjcm9sbCk7XG4gIH1cblxuICBpZiAocG9zaXRpb24pIHtcbiAgICB3aW5kb3cuc2Nyb2xsVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBzdXBwb3J0c1B1c2hTdGF0ZSA9IGluQnJvd3NlciAmJiAoZnVuY3Rpb24gKCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAoXG4gICAgKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmXG4gICAgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJlxuICAgIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJlxuICAgIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTFcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnlcbn0pKCk7XG5cbi8vIHVzZSBVc2VyIFRpbWluZyBhcGkgKGlmIHByZXNlbnQpIGZvciBtb3JlIGFjY3VyYXRlIGtleSBwcmVjaXNpb25cbnZhciBUaW1lID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93XG4gID8gd2luZG93LnBlcmZvcm1hbmNlXG4gIDogRGF0ZTtcblxudmFyIF9rZXkgPSBnZW5LZXkoKTtcblxuZnVuY3Rpb24gZ2VuS2V5ICgpIHtcbiAgcmV0dXJuIFRpbWUubm93KCkudG9GaXhlZCgzKVxufVxuXG5mdW5jdGlvbiBnZXRTdGF0ZUtleSAoKSB7XG4gIHJldHVybiBfa2V5XG59XG5cbmZ1bmN0aW9uIHNldFN0YXRlS2V5IChrZXkpIHtcbiAgX2tleSA9IGtleTtcbn1cblxuZnVuY3Rpb24gcHVzaFN0YXRlICh1cmwsIHJlcGxhY2UpIHtcbiAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gIC8vIHRyeS4uLmNhdGNoIHRoZSBwdXNoU3RhdGUgY2FsbCB0byBnZXQgYXJvdW5kIFNhZmFyaVxuICAvLyBET00gRXhjZXB0aW9uIDE4IHdoZXJlIGl0IGxpbWl0cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzXG4gIHZhciBoaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHRyeSB7XG4gICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBfa2V5IH0sICcnLCB1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfa2V5ID0gZ2VuS2V5KCk7XG4gICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7IGtleTogX2tleSB9LCAnJywgdXJsKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB3aW5kb3cubG9jYXRpb25bcmVwbGFjZSA/ICdyZXBsYWNlJyA6ICdhc3NpZ24nXSh1cmwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VTdGF0ZSAodXJsKSB7XG4gIHB1c2hTdGF0ZSh1cmwsIHRydWUpO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcnVuUXVldWUgKHF1ZXVlLCBmbiwgY2IpIHtcbiAgdmFyIHN0ZXAgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPj0gcXVldWUubGVuZ3RoKSB7XG4gICAgICBjYigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocXVldWVbaW5kZXhdKSB7XG4gICAgICAgIGZuKHF1ZXVlW2luZGV4XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0ZXAoaW5kZXggKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGVwKGluZGV4ICsgMSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzdGVwKDApO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50cyAobWF0Y2hlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgdmFyIGhhc0FzeW5jID0gZmFsc2U7XG4gICAgdmFyIHBlbmRpbmcgPSAwO1xuICAgIHZhciBlcnJvciA9IG51bGw7XG5cbiAgICBmbGF0TWFwQ29tcG9uZW50cyhtYXRjaGVkLCBmdW5jdGlvbiAoZGVmLCBfLCBtYXRjaCwga2V5KSB7XG4gICAgICAvLyBpZiBpdCdzIGEgZnVuY3Rpb24gYW5kIGRvZXNuJ3QgaGF2ZSBjaWQgYXR0YWNoZWQsXG4gICAgICAvLyBhc3N1bWUgaXQncyBhbiBhc3luYyBjb21wb25lbnQgcmVzb2x2ZSBmdW5jdGlvbi5cbiAgICAgIC8vIHdlIGFyZSBub3QgdXNpbmcgVnVlJ3MgZGVmYXVsdCBhc3luYyByZXNvbHZpbmcgbWVjaGFuaXNtIGJlY2F1c2VcbiAgICAgIC8vIHdlIHdhbnQgdG8gaGFsdCB0aGUgbmF2aWdhdGlvbiB1bnRpbCB0aGUgaW5jb21pbmcgY29tcG9uZW50IGhhcyBiZWVuXG4gICAgICAvLyByZXNvbHZlZC5cbiAgICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGRlZi5jaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBoYXNBc3luYyA9IHRydWU7XG4gICAgICAgIHBlbmRpbmcrKztcblxuICAgICAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlc29sdmVkRGVmKSB7XG4gICAgICAgICAgaWYgKGlzRVNNb2R1bGUocmVzb2x2ZWREZWYpKSB7XG4gICAgICAgICAgICByZXNvbHZlZERlZiA9IHJlc29sdmVkRGVmLmRlZmF1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHNhdmUgcmVzb2x2ZWQgb24gYXN5bmMgZmFjdG9yeSBpbiBjYXNlIGl0J3MgdXNlZCBlbHNld2hlcmVcbiAgICAgICAgICBkZWYucmVzb2x2ZWQgPSB0eXBlb2YgcmVzb2x2ZWREZWYgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcmVzb2x2ZWREZWZcbiAgICAgICAgICAgIDogX1Z1ZS5leHRlbmQocmVzb2x2ZWREZWYpO1xuICAgICAgICAgIG1hdGNoLmNvbXBvbmVudHNba2V5XSA9IHJlc29sdmVkRGVmO1xuICAgICAgICAgIHBlbmRpbmctLTtcbiAgICAgICAgICBpZiAocGVuZGluZyA8PSAwKSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgcmVqZWN0ID0gb25jZShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgdmFyIG1zZyA9IFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50IFwiICsga2V5ICsgXCI6IFwiICsgcmVhc29uO1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihmYWxzZSwgbXNnKTtcbiAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICBlcnJvciA9IGlzRXJyb3IocmVhc29uKVxuICAgICAgICAgICAgICA/IHJlYXNvblxuICAgICAgICAgICAgICA6IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICAgICAgbmV4dChlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgcmVzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlcyA9IGRlZihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHJlcy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBuZXcgc3ludGF4IGluIFZ1ZSAyLjNcbiAgICAgICAgICAgIHZhciBjb21wID0gcmVzLmNvbXBvbmVudDtcbiAgICAgICAgICAgIGlmIChjb21wICYmIHR5cGVvZiBjb21wLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgY29tcC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIWhhc0FzeW5jKSB7IG5leHQoKTsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZsYXRNYXBDb21wb25lbnRzIChcbiAgbWF0Y2hlZCxcbiAgZm5cbikge1xuICByZXR1cm4gZmxhdHRlbihtYXRjaGVkLm1hcChmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhtLmNvbXBvbmVudHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmbihcbiAgICAgIG0uY29tcG9uZW50c1trZXldLFxuICAgICAgbS5pbnN0YW5jZXNba2V5XSxcbiAgICAgIG0sIGtleVxuICAgICk7IH0pXG4gIH0pKVxufVxuXG5mdW5jdGlvbiBmbGF0dGVuIChhcnIpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGFycilcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbmZ1bmN0aW9uIGlzRVNNb2R1bGUgKG9iaikge1xuICByZXR1cm4gb2JqLl9fZXNNb2R1bGUgfHwgKGhhc1N5bWJvbCAmJiBvYmpbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG59XG5cbi8vIGluIFdlYnBhY2sgMiwgcmVxdWlyZS5lbnN1cmUgbm93IGFsc28gcmV0dXJucyBhIFByb21pc2Vcbi8vIHNvIHRoZSByZXNvbHZlL3JlamVjdCBmdW5jdGlvbnMgbWF5IGdldCBjYWxsZWQgYW4gZXh0cmEgdGltZVxuLy8gaWYgdGhlIHVzZXIgdXNlcyBhbiBhcnJvdyBmdW5jdGlvbiBzaG9ydGhhbmQgdGhhdCBoYXBwZW5zIHRvXG4vLyByZXR1cm4gdGhhdCBQcm9taXNlLlxuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIGlmIChjYWxsZWQpIHsgcmV0dXJuIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmdzKVxuICB9XG59XG5cbnZhciBOYXZpZ2F0aW9uRHVwbGljYXRlZCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEVycm9yKSB7XG4gIGZ1bmN0aW9uIE5hdmlnYXRpb25EdXBsaWNhdGVkICgpIHtcbiAgICBFcnJvci5jYWxsKHRoaXMsICdOYXZpZ2F0aW5nIHRvIGN1cnJlbnQgbG9jYXRpb24gaXMgbm90IGFsbG93ZWQnKTtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLl9uYW1lID0gJ05hdmlnYXRpb25EdXBsaWNhdGVkJztcbiAgfVxuXG4gIGlmICggRXJyb3IgKSBOYXZpZ2F0aW9uRHVwbGljYXRlZC5fX3Byb3RvX18gPSBFcnJvcjtcbiAgTmF2aWdhdGlvbkR1cGxpY2F0ZWQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXJyb3IgJiYgRXJyb3IucHJvdG90eXBlICk7XG4gIE5hdmlnYXRpb25EdXBsaWNhdGVkLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE5hdmlnYXRpb25EdXBsaWNhdGVkO1xuXG4gIHJldHVybiBOYXZpZ2F0aW9uRHVwbGljYXRlZDtcbn0oRXJyb3IpKTtcblxuLy8gc3VwcG9ydCBJRTlcbk5hdmlnYXRpb25EdXBsaWNhdGVkLl9uYW1lID0gJ05hdmlnYXRpb25EdXBsaWNhdGVkJztcblxuLyogICovXG5cbnZhciBIaXN0b3J5ID0gZnVuY3Rpb24gSGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gIHRoaXMucm91dGVyID0gcm91dGVyO1xuICB0aGlzLmJhc2UgPSBub3JtYWxpemVCYXNlKGJhc2UpO1xuICAvLyBzdGFydCB3aXRoIGEgcm91dGUgb2JqZWN0IHRoYXQgc3RhbmRzIGZvciBcIm5vd2hlcmVcIlxuICB0aGlzLmN1cnJlbnQgPSBTVEFSVDtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICB0aGlzLnJlYWR5Q2JzID0gW107XG4gIHRoaXMucmVhZHlFcnJvckNicyA9IFtdO1xuICB0aGlzLmVycm9yQ2JzID0gW107XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4gKGNiKSB7XG4gIHRoaXMuY2IgPSBjYjtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICBpZiAodGhpcy5yZWFkeSkge1xuICAgIGNiKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWFkeUNicy5wdXNoKGNiKTtcbiAgICBpZiAoZXJyb3JDYikge1xuICAgICAgdGhpcy5yZWFkeUVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG4gICAgfVxuICB9XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS50cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiB0cmFuc2l0aW9uVG8gKFxuICBsb2NhdGlvbixcbiAgb25Db21wbGV0ZSxcbiAgb25BYm9ydFxuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHJvdXRlID0gdGhpcy5yb3V0ZXIubWF0Y2gobG9jYXRpb24sIHRoaXMuY3VycmVudCk7XG4gIHRoaXMuY29uZmlybVRyYW5zaXRpb24oXG4gICAgcm91dGUsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB0aGlzJDEuZW5zdXJlVVJMKCk7XG5cbiAgICAgIC8vIGZpcmUgcmVhZHkgY2JzIG9uY2VcbiAgICAgIGlmICghdGhpcyQxLnJlYWR5KSB7XG4gICAgICAgIHRoaXMkMS5yZWFkeSA9IHRydWU7XG4gICAgICAgIHRoaXMkMS5yZWFkeUNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIGNiKHJvdXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAob25BYm9ydCkge1xuICAgICAgICBvbkFib3J0KGVycik7XG4gICAgICB9XG4gICAgICBpZiAoZXJyICYmICF0aGlzJDEucmVhZHkpIHtcbiAgICAgICAgdGhpcyQxLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcyQxLnJlYWR5RXJyb3JDYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICBjYihlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5jb25maXJtVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uIChyb3V0ZSwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICB2YXIgYWJvcnQgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgLy8gYWZ0ZXIgbWVyZ2luZyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9wdWxsLzI3NzEgd2VcbiAgICAvLyBXaGVuIHRoZSB1c2VyIG5hdmlnYXRlcyB0aHJvdWdoIGhpc3RvcnkgdGhyb3VnaCBiYWNrL2ZvcndhcmQgYnV0dG9uc1xuICAgIC8vIHdlIGRvIG5vdCB3YW50IHRvIHRocm93IHRoZSBlcnJvci4gV2Ugb25seSB0aHJvdyBpdCBpZiBkaXJlY3RseSBjYWxsaW5nXG4gICAgLy8gcHVzaC9yZXBsYWNlLiBUaGF0J3Mgd2h5IGl0J3Mgbm90IGluY2x1ZGVkIGluIGlzRXJyb3JcbiAgICBpZiAoIWlzRXh0ZW5kZWRFcnJvcihOYXZpZ2F0aW9uRHVwbGljYXRlZCwgZXJyKSAmJiBpc0Vycm9yKGVycikpIHtcbiAgICAgIGlmICh0aGlzJDEuZXJyb3JDYnMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMkMS5lcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIGNiKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihmYWxzZSwgJ3VuY2F1Z2h0IGVycm9yIGR1cmluZyByb3V0ZSBuYXZpZ2F0aW9uOicpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9XG4gICAgfVxuICAgIG9uQWJvcnQgJiYgb25BYm9ydChlcnIpO1xuICB9O1xuICBpZiAoXG4gICAgaXNTYW1lUm91dGUocm91dGUsIGN1cnJlbnQpICYmXG4gICAgLy8gaW4gdGhlIGNhc2UgdGhlIHJvdXRlIG1hcCBoYXMgYmVlbiBkeW5hbWljYWxseSBhcHBlbmRlZCB0b1xuICAgIHJvdXRlLm1hdGNoZWQubGVuZ3RoID09PSBjdXJyZW50Lm1hdGNoZWQubGVuZ3RoXG4gICkge1xuICAgIHRoaXMuZW5zdXJlVVJMKCk7XG4gICAgcmV0dXJuIGFib3J0KG5ldyBOYXZpZ2F0aW9uRHVwbGljYXRlZChyb3V0ZSkpXG4gIH1cblxuICB2YXIgcmVmID0gcmVzb2x2ZVF1ZXVlKFxuICAgIHRoaXMuY3VycmVudC5tYXRjaGVkLFxuICAgIHJvdXRlLm1hdGNoZWRcbiAgKTtcbiAgICB2YXIgdXBkYXRlZCA9IHJlZi51cGRhdGVkO1xuICAgIHZhciBkZWFjdGl2YXRlZCA9IHJlZi5kZWFjdGl2YXRlZDtcbiAgICB2YXIgYWN0aXZhdGVkID0gcmVmLmFjdGl2YXRlZDtcblxuICB2YXIgcXVldWUgPSBbXS5jb25jYXQoXG4gICAgLy8gaW4tY29tcG9uZW50IGxlYXZlIGd1YXJkc1xuICAgIGV4dHJhY3RMZWF2ZUd1YXJkcyhkZWFjdGl2YXRlZCksXG4gICAgLy8gZ2xvYmFsIGJlZm9yZSBob29rc1xuICAgIHRoaXMucm91dGVyLmJlZm9yZUhvb2tzLFxuICAgIC8vIGluLWNvbXBvbmVudCB1cGRhdGUgaG9va3NcbiAgICBleHRyYWN0VXBkYXRlSG9va3ModXBkYXRlZCksXG4gICAgLy8gaW4tY29uZmlnIGVudGVyIGd1YXJkc1xuICAgIGFjdGl2YXRlZC5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0uYmVmb3JlRW50ZXI7IH0pLFxuICAgIC8vIGFzeW5jIGNvbXBvbmVudHNcbiAgICByZXNvbHZlQXN5bmNDb21wb25lbnRzKGFjdGl2YXRlZClcbiAgKTtcblxuICB0aGlzLnBlbmRpbmcgPSByb3V0ZTtcbiAgdmFyIGl0ZXJhdG9yID0gZnVuY3Rpb24gKGhvb2ssIG5leHQpIHtcbiAgICBpZiAodGhpcyQxLnBlbmRpbmcgIT09IHJvdXRlKSB7XG4gICAgICByZXR1cm4gYWJvcnQoKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgaG9vayhyb3V0ZSwgY3VycmVudCwgZnVuY3Rpb24gKHRvKSB7XG4gICAgICAgIGlmICh0byA9PT0gZmFsc2UgfHwgaXNFcnJvcih0bykpIHtcbiAgICAgICAgICAvLyBuZXh0KGZhbHNlKSAtPiBhYm9ydCBuYXZpZ2F0aW9uLCBlbnN1cmUgY3VycmVudCBVUkxcbiAgICAgICAgICB0aGlzJDEuZW5zdXJlVVJMKHRydWUpO1xuICAgICAgICAgIGFib3J0KHRvKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICB0eXBlb2YgdG8gPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgKHR5cGVvZiB0byA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICh0eXBlb2YgdG8ucGF0aCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRvLm5hbWUgPT09ICdzdHJpbmcnKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gbmV4dCgnLycpIG9yIG5leHQoeyBwYXRoOiAnLycgfSkgLT4gcmVkaXJlY3RcbiAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIGlmICh0eXBlb2YgdG8gPT09ICdvYmplY3QnICYmIHRvLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHRoaXMkMS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcyQxLnB1c2godG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjb25maXJtIHRyYW5zaXRpb24gYW5kIHBhc3Mgb24gdGhlIHZhbHVlXG4gICAgICAgICAgbmV4dCh0byk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGFib3J0KGUpO1xuICAgIH1cbiAgfTtcblxuICBydW5RdWV1ZShxdWV1ZSwgaXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zdEVudGVyQ2JzID0gW107XG4gICAgdmFyIGlzVmFsaWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuY3VycmVudCA9PT0gcm91dGU7IH07XG4gICAgLy8gd2FpdCB1bnRpbCBhc3luYyBjb21wb25lbnRzIGFyZSByZXNvbHZlZCBiZWZvcmVcbiAgICAvLyBleHRyYWN0aW5nIGluLWNvbXBvbmVudCBlbnRlciBndWFyZHNcbiAgICB2YXIgZW50ZXJHdWFyZHMgPSBleHRyYWN0RW50ZXJHdWFyZHMoYWN0aXZhdGVkLCBwb3N0RW50ZXJDYnMsIGlzVmFsaWQpO1xuICAgIHZhciBxdWV1ZSA9IGVudGVyR3VhcmRzLmNvbmNhdCh0aGlzJDEucm91dGVyLnJlc29sdmVIb29rcyk7XG4gICAgcnVuUXVldWUocXVldWUsIGl0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcyQxLnBlbmRpbmcgIT09IHJvdXRlKSB7XG4gICAgICAgIHJldHVybiBhYm9ydCgpXG4gICAgICB9XG4gICAgICB0aGlzJDEucGVuZGluZyA9IG51bGw7XG4gICAgICBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIGlmICh0aGlzJDEucm91dGVyLmFwcCkge1xuICAgICAgICB0aGlzJDEucm91dGVyLmFwcC4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBvc3RFbnRlckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudXBkYXRlUm91dGUgPSBmdW5jdGlvbiB1cGRhdGVSb3V0ZSAocm91dGUpIHtcbiAgdmFyIHByZXYgPSB0aGlzLmN1cnJlbnQ7XG4gIHRoaXMuY3VycmVudCA9IHJvdXRlO1xuICB0aGlzLmNiICYmIHRoaXMuY2Iocm91dGUpO1xuICB0aGlzLnJvdXRlci5hZnRlckhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICBob29rICYmIGhvb2socm91dGUsIHByZXYpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2UgKGJhc2UpIHtcbiAgaWYgKCFiYXNlKSB7XG4gICAgaWYgKGluQnJvd3Nlcikge1xuICAgICAgLy8gcmVzcGVjdCA8YmFzZT4gdGFnXG4gICAgICB2YXIgYmFzZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgICAgYmFzZSA9IChiYXNlRWwgJiYgYmFzZUVsLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB8fCAnLyc7XG4gICAgICAvLyBzdHJpcCBmdWxsIFVSTCBvcmlnaW5cbiAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UoL15odHRwcz86XFwvXFwvW15cXC9dKy8sICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZSA9ICcvJztcbiAgICB9XG4gIH1cbiAgLy8gbWFrZSBzdXJlIHRoZXJlJ3MgdGhlIHN0YXJ0aW5nIHNsYXNoXG4gIGlmIChiYXNlLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgYmFzZSA9ICcvJyArIGJhc2U7XG4gIH1cbiAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNsYXNoXG4gIHJldHVybiBiYXNlLnJlcGxhY2UoL1xcLyQvLCAnJylcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVF1ZXVlIChcbiAgY3VycmVudCxcbiAgbmV4dFxuKSB7XG4gIHZhciBpO1xuICB2YXIgbWF4ID0gTWF0aC5tYXgoY3VycmVudC5sZW5ndGgsIG5leHQubGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgaWYgKGN1cnJlbnRbaV0gIT09IG5leHRbaV0pIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdXBkYXRlZDogbmV4dC5zbGljZSgwLCBpKSxcbiAgICBhY3RpdmF0ZWQ6IG5leHQuc2xpY2UoaSksXG4gICAgZGVhY3RpdmF0ZWQ6IGN1cnJlbnQuc2xpY2UoaSlcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0R3VhcmRzIChcbiAgcmVjb3JkcyxcbiAgbmFtZSxcbiAgYmluZCxcbiAgcmV2ZXJzZVxuKSB7XG4gIHZhciBndWFyZHMgPSBmbGF0TWFwQ29tcG9uZW50cyhyZWNvcmRzLCBmdW5jdGlvbiAoZGVmLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSkge1xuICAgIHZhciBndWFyZCA9IGV4dHJhY3RHdWFyZChkZWYsIG5hbWUpO1xuICAgIGlmIChndWFyZCkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZ3VhcmQpXG4gICAgICAgID8gZ3VhcmQubWFwKGZ1bmN0aW9uIChndWFyZCkgeyByZXR1cm4gYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpOyB9KVxuICAgICAgICA6IGJpbmQoZ3VhcmQsIGluc3RhbmNlLCBtYXRjaCwga2V5KVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmbGF0dGVuKHJldmVyc2UgPyBndWFyZHMucmV2ZXJzZSgpIDogZ3VhcmRzKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0R3VhcmQgKFxuICBkZWYsXG4gIGtleVxuKSB7XG4gIGlmICh0eXBlb2YgZGVmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXh0ZW5kIG5vdyBzbyB0aGF0IGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQuXG4gICAgZGVmID0gX1Z1ZS5leHRlbmQoZGVmKTtcbiAgfVxuICByZXR1cm4gZGVmLm9wdGlvbnNba2V5XVxufVxuXG5mdW5jdGlvbiBleHRyYWN0TGVhdmVHdWFyZHMgKGRlYWN0aXZhdGVkKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKGRlYWN0aXZhdGVkLCAnYmVmb3JlUm91dGVMZWF2ZScsIGJpbmRHdWFyZCwgdHJ1ZSlcbn1cblxuZnVuY3Rpb24gZXh0cmFjdFVwZGF0ZUhvb2tzICh1cGRhdGVkKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKHVwZGF0ZWQsICdiZWZvcmVSb3V0ZVVwZGF0ZScsIGJpbmRHdWFyZClcbn1cblxuZnVuY3Rpb24gYmluZEd1YXJkIChndWFyZCwgaW5zdGFuY2UpIHtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJvdW5kUm91dGVHdWFyZCAoKSB7XG4gICAgICByZXR1cm4gZ3VhcmQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdEVudGVyR3VhcmRzIChcbiAgYWN0aXZhdGVkLFxuICBjYnMsXG4gIGlzVmFsaWRcbikge1xuICByZXR1cm4gZXh0cmFjdEd1YXJkcyhcbiAgICBhY3RpdmF0ZWQsXG4gICAgJ2JlZm9yZVJvdXRlRW50ZXInLFxuICAgIGZ1bmN0aW9uIChndWFyZCwgXywgbWF0Y2gsIGtleSkge1xuICAgICAgcmV0dXJuIGJpbmRFbnRlckd1YXJkKGd1YXJkLCBtYXRjaCwga2V5LCBjYnMsIGlzVmFsaWQpXG4gICAgfVxuICApXG59XG5cbmZ1bmN0aW9uIGJpbmRFbnRlckd1YXJkIChcbiAgZ3VhcmQsXG4gIG1hdGNoLFxuICBrZXksXG4gIGNicyxcbiAgaXNWYWxpZFxuKSB7XG4gIHJldHVybiBmdW5jdGlvbiByb3V0ZUVudGVyR3VhcmQgKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgcmV0dXJuIGd1YXJkKHRvLCBmcm9tLCBmdW5jdGlvbiAoY2IpIHtcbiAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2JzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vICM3NTBcbiAgICAgICAgICAvLyBpZiBhIHJvdXRlci12aWV3IGlzIHdyYXBwZWQgd2l0aCBhbiBvdXQtaW4gdHJhbnNpdGlvbixcbiAgICAgICAgICAvLyB0aGUgaW5zdGFuY2UgbWF5IG5vdCBoYXZlIGJlZW4gcmVnaXN0ZXJlZCBhdCB0aGlzIHRpbWUuXG4gICAgICAgICAgLy8gd2Ugd2lsbCBuZWVkIHRvIHBvbGwgZm9yIHJlZ2lzdHJhdGlvbiB1bnRpbCBjdXJyZW50IHJvdXRlXG4gICAgICAgICAgLy8gaXMgbm8gbG9uZ2VyIHZhbGlkLlxuICAgICAgICAgIHBvbGwoY2IsIG1hdGNoLmluc3RhbmNlcywga2V5LCBpc1ZhbGlkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBuZXh0KGNiKTtcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIHBvbGwgKFxuICBjYiwgLy8gc29tZWhvdyBmbG93IGNhbm5vdCBpbmZlciB0aGlzIGlzIGEgZnVuY3Rpb25cbiAgaW5zdGFuY2VzLFxuICBrZXksXG4gIGlzVmFsaWRcbikge1xuICBpZiAoXG4gICAgaW5zdGFuY2VzW2tleV0gJiZcbiAgICAhaW5zdGFuY2VzW2tleV0uX2lzQmVpbmdEZXN0cm95ZWQgLy8gZG8gbm90IHJldXNlIGJlaW5nIGRlc3Ryb3llZCBpbnN0YW5jZVxuICApIHtcbiAgICBjYihpbnN0YW5jZXNba2V5XSk7XG4gIH0gZWxzZSBpZiAoaXNWYWxpZCgpKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBwb2xsKGNiLCBpbnN0YW5jZXMsIGtleSwgaXNWYWxpZCk7XG4gICAgfSwgMTYpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgSFRNTDVIaXN0b3J5ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSGlzdG9yeSQkMSkge1xuICBmdW5jdGlvbiBIVE1MNUhpc3RvcnkgKHJvdXRlciwgYmFzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgSGlzdG9yeSQkMS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG5cbiAgICB2YXIgZXhwZWN0U2Nyb2xsID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICBzZXR1cFNjcm9sbCgpO1xuICAgIH1cblxuICAgIHZhciBpbml0TG9jYXRpb24gPSBnZXRMb2NhdGlvbih0aGlzLmJhc2UpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXMkMS5jdXJyZW50O1xuXG4gICAgICAvLyBBdm9pZGluZyBmaXJzdCBgcG9wc3RhdGVgIGV2ZW50IGRpc3BhdGNoZWQgaW4gc29tZSBicm93c2VycyBidXQgZmlyc3RcbiAgICAgIC8vIGhpc3Rvcnkgcm91dGUgbm90IHVwZGF0ZWQgc2luY2UgYXN5bmMgZ3VhcmQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKHRoaXMkMS5iYXNlKTtcbiAgICAgIGlmICh0aGlzJDEuY3VycmVudCA9PT0gU1RBUlQgJiYgbG9jYXRpb24gPT09IGluaXRMb2NhdGlvbikge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcyQxLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIGlmIChzdXBwb3J0c1Njcm9sbCkge1xuICAgICAgICAgIGhhbmRsZVNjcm9sbChyb3V0ZXIsIHJvdXRlLCBjdXJyZW50LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIEhpc3RvcnkkJDEgKSBIVE1MNUhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeSQkMTtcbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkkJDEgJiYgSGlzdG9yeSQkMS5wcm90b3R5cGUgKTtcbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhUTUw1SGlzdG9yeTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHB1c2hTdGF0ZShjbGVhblBhdGgodGhpcyQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICByZXBsYWNlU3RhdGUoY2xlYW5QYXRoKHRoaXMkMS5iYXNlICsgcm91dGUuZnVsbFBhdGgpKTtcbiAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZW5zdXJlVVJMID0gZnVuY3Rpb24gZW5zdXJlVVJMIChwdXNoKSB7XG4gICAgaWYgKGdldExvY2F0aW9uKHRoaXMuYmFzZSkgIT09IHRoaXMuY3VycmVudC5mdWxsUGF0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBjbGVhblBhdGgodGhpcy5iYXNlICsgdGhpcy5jdXJyZW50LmZ1bGxQYXRoKTtcbiAgICAgIHB1c2ggPyBwdXNoU3RhdGUoY3VycmVudCkgOiByZXBsYWNlU3RhdGUoY3VycmVudCk7XG4gICAgfVxuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0TG9jYXRpb24odGhpcy5iYXNlKVxuICB9O1xuXG4gIHJldHVybiBIVE1MNUhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuZnVuY3Rpb24gZ2V0TG9jYXRpb24gKGJhc2UpIHtcbiAgdmFyIHBhdGggPSBkZWNvZGVVUkkod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgaWYgKGJhc2UgJiYgcGF0aC5pbmRleE9mKGJhc2UpID09PSAwKSB7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoYmFzZS5sZW5ndGgpO1xuICB9XG4gIHJldHVybiAocGF0aCB8fCAnLycpICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIHdpbmRvdy5sb2NhdGlvbi5oYXNoXG59XG5cbi8qICAqL1xuXG52YXIgSGFzaEhpc3RvcnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChIaXN0b3J5JCQxKSB7XG4gIGZ1bmN0aW9uIEhhc2hIaXN0b3J5IChyb3V0ZXIsIGJhc2UsIGZhbGxiYWNrKSB7XG4gICAgSGlzdG9yeSQkMS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG4gICAgLy8gY2hlY2sgaGlzdG9yeSBmYWxsYmFjayBkZWVwbGlua2luZ1xuICAgIGlmIChmYWxsYmFjayAmJiBjaGVja0ZhbGxiYWNrKHRoaXMuYmFzZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBlbnN1cmVTbGFzaCgpO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5JCQxICkgSGFzaEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeSQkMTtcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSQkMSAmJiBIaXN0b3J5JCQxLnByb3RvdHlwZSApO1xuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIYXNoSGlzdG9yeTtcblxuICAvLyB0aGlzIGlzIGRlbGF5ZWQgdW50aWwgdGhlIGFwcCBtb3VudHNcbiAgLy8gdG8gYXZvaWQgdGhlIGhhc2hjaGFuZ2UgbGlzdGVuZXIgYmVpbmcgZmlyZWQgdG9vIGVhcmx5XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5zZXR1cExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByb3V0ZXIgPSB0aGlzLnJvdXRlcjtcbiAgICB2YXIgZXhwZWN0U2Nyb2xsID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICBzZXR1cFNjcm9sbCgpO1xuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgc3VwcG9ydHNQdXNoU3RhdGUgPyAncG9wc3RhdGUnIDogJ2hhc2hjaGFuZ2UnLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMkMS5jdXJyZW50O1xuICAgICAgICBpZiAoIWVuc3VyZVNsYXNoKCkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGdldEhhc2goKSwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICAgICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGN1cnJlbnQsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgICAgICAgICByZXBsYWNlSGFzaChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25UbyhcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIHB1c2hIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIH0sXG4gICAgICBvbkFib3J0XG4gICAgKTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8oXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICByZXBsYWNlSGFzaChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZW5zdXJlVVJMID0gZnVuY3Rpb24gZW5zdXJlVVJMIChwdXNoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQuZnVsbFBhdGg7XG4gICAgaWYgKGdldEhhc2goKSAhPT0gY3VycmVudCkge1xuICAgICAgcHVzaCA/IHB1c2hIYXNoKGN1cnJlbnQpIDogcmVwbGFjZUhhc2goY3VycmVudCk7XG4gICAgfVxuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24gKCkge1xuICAgIHJldHVybiBnZXRIYXNoKClcbiAgfTtcblxuICByZXR1cm4gSGFzaEhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuZnVuY3Rpb24gY2hlY2tGYWxsYmFjayAoYmFzZSkge1xuICB2YXIgbG9jYXRpb24gPSBnZXRMb2NhdGlvbihiYXNlKTtcbiAgaWYgKCEvXlxcLyMvLnRlc3QobG9jYXRpb24pKSB7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoY2xlYW5QYXRoKGJhc2UgKyAnLyMnICsgbG9jYXRpb24pKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVNsYXNoICgpIHtcbiAgdmFyIHBhdGggPSBnZXRIYXNoKCk7XG4gIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXBsYWNlSGFzaCgnLycgKyBwYXRoKTtcbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdldEhhc2ggKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBpbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICAvLyBlbXB0eSBwYXRoXG4gIGlmIChpbmRleCA8IDApIHsgcmV0dXJuICcnIH1cblxuICBocmVmID0gaHJlZi5zbGljZShpbmRleCArIDEpO1xuICAvLyBkZWNvZGUgdGhlIGhhc2ggYnV0IG5vdCB0aGUgc2VhcmNoIG9yIGhhc2hcbiAgLy8gYXMgc2VhcmNoKHF1ZXJ5KSBpcyBhbHJlYWR5IGRlY29kZWRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzI3MDhcbiAgdmFyIHNlYXJjaEluZGV4ID0gaHJlZi5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCA8IDApIHtcbiAgICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2hJbmRleCA+IC0xKSB7XG4gICAgICBocmVmID0gZGVjb2RlVVJJKGhyZWYuc2xpY2UoMCwgaGFzaEluZGV4KSkgKyBocmVmLnNsaWNlKGhhc2hJbmRleCk7XG4gICAgfSBlbHNlIHsgaHJlZiA9IGRlY29kZVVSSShocmVmKTsgfVxuICB9IGVsc2Uge1xuICAgIGlmIChzZWFyY2hJbmRleCA+IC0xKSB7XG4gICAgICBocmVmID0gZGVjb2RlVVJJKGhyZWYuc2xpY2UoMCwgc2VhcmNoSW5kZXgpKSArIGhyZWYuc2xpY2Uoc2VhcmNoSW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBocmVmXG59XG5cbmZ1bmN0aW9uIGdldFVybCAocGF0aCkge1xuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaSA9IGhyZWYuaW5kZXhPZignIycpO1xuICB2YXIgYmFzZSA9IGkgPj0gMCA/IGhyZWYuc2xpY2UoMCwgaSkgOiBocmVmO1xuICByZXR1cm4gKGJhc2UgKyBcIiNcIiArIHBhdGgpXG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoIChwYXRoKSB7XG4gIGlmIChzdXBwb3J0c1B1c2hTdGF0ZSkge1xuICAgIHB1c2hTdGF0ZShnZXRVcmwocGF0aCkpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaCAocGF0aCkge1xuICBpZiAoc3VwcG9ydHNQdXNoU3RhdGUpIHtcbiAgICByZXBsYWNlU3RhdGUoZ2V0VXJsKHBhdGgpKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShnZXRVcmwocGF0aCkpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgQWJzdHJhY3RIaXN0b3J5ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSGlzdG9yeSQkMSkge1xuICBmdW5jdGlvbiBBYnN0cmFjdEhpc3RvcnkgKHJvdXRlciwgYmFzZSkge1xuICAgIEhpc3RvcnkkJDEuY2FsbCh0aGlzLCByb3V0ZXIsIGJhc2UpO1xuICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICB0aGlzLmluZGV4ID0gLTE7XG4gIH1cblxuICBpZiAoIEhpc3RvcnkkJDEgKSBBYnN0cmFjdEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeSQkMTtcbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkkJDEgJiYgSGlzdG9yeSQkMS5wcm90b3R5cGUgKTtcbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFic3RyYWN0SGlzdG9yeTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy50cmFuc2l0aW9uVG8oXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICB0aGlzJDEuc3RhY2sgPSB0aGlzJDEuc3RhY2suc2xpY2UoMCwgdGhpcyQxLmluZGV4ICsgMSkuY29uY2F0KHJvdXRlKTtcbiAgICAgICAgdGhpcyQxLmluZGV4Kys7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgdGhpcyQxLnN0YWNrID0gdGhpcyQxLnN0YWNrLnNsaWNlKDAsIHRoaXMkMS5pbmRleCkuY29uY2F0KHJvdXRlKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIH0sXG4gICAgICBvbkFib3J0XG4gICAgKTtcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB0YXJnZXRJbmRleCA9IHRoaXMuaW5kZXggKyBuO1xuICAgIGlmICh0YXJnZXRJbmRleCA8IDAgfHwgdGFyZ2V0SW5kZXggPj0gdGhpcy5zdGFjay5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgcm91dGUgPSB0aGlzLnN0YWNrW3RhcmdldEluZGV4XTtcbiAgICB0aGlzLmNvbmZpcm1UcmFuc2l0aW9uKFxuICAgICAgcm91dGUsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMkMS5pbmRleCA9IHRhcmdldEluZGV4O1xuICAgICAgICB0aGlzJDEudXBkYXRlUm91dGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGlzRXh0ZW5kZWRFcnJvcihOYXZpZ2F0aW9uRHVwbGljYXRlZCwgZXJyKSkge1xuICAgICAgICAgIHRoaXMkMS5pbmRleCA9IHRhcmdldEluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIGN1cnJlbnQgPyBjdXJyZW50LmZ1bGxQYXRoIDogJy8nXG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKCkge1xuICAgIC8vIG5vb3BcbiAgfTtcblxuICByZXR1cm4gQWJzdHJhY3RIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbi8qICAqL1xuXG5cblxudmFyIFZ1ZVJvdXRlciA9IGZ1bmN0aW9uIFZ1ZVJvdXRlciAob3B0aW9ucykge1xuICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICB0aGlzLmFwcCA9IG51bGw7XG4gIHRoaXMuYXBwcyA9IFtdO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLmJlZm9yZUhvb2tzID0gW107XG4gIHRoaXMucmVzb2x2ZUhvb2tzID0gW107XG4gIHRoaXMuYWZ0ZXJIb29rcyA9IFtdO1xuICB0aGlzLm1hdGNoZXIgPSBjcmVhdGVNYXRjaGVyKG9wdGlvbnMucm91dGVzIHx8IFtdLCB0aGlzKTtcblxuICB2YXIgbW9kZSA9IG9wdGlvbnMubW9kZSB8fCAnaGFzaCc7XG4gIHRoaXMuZmFsbGJhY2sgPSBtb2RlID09PSAnaGlzdG9yeScgJiYgIXN1cHBvcnRzUHVzaFN0YXRlICYmIG9wdGlvbnMuZmFsbGJhY2sgIT09IGZhbHNlO1xuICBpZiAodGhpcy5mYWxsYmFjaykge1xuICAgIG1vZGUgPSAnaGFzaCc7XG4gIH1cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICBtb2RlID0gJ2Fic3RyYWN0JztcbiAgfVxuICB0aGlzLm1vZGUgPSBtb2RlO1xuXG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgJ2hpc3RvcnknOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhUTUw1SGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UpO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdoYXNoJzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBIYXNoSGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UsIHRoaXMuZmFsbGJhY2spO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdhYnN0cmFjdCc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgQWJzdHJhY3RIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7XG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIChcImludmFsaWQgbW9kZTogXCIgKyBtb2RlKSk7XG4gICAgICB9XG4gIH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGN1cnJlbnRSb3V0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2ggKFxuICByYXcsXG4gIGN1cnJlbnQsXG4gIHJlZGlyZWN0ZWRGcm9tXG4pIHtcbiAgcmV0dXJuIHRoaXMubWF0Y2hlci5tYXRjaChyYXcsIGN1cnJlbnQsIHJlZGlyZWN0ZWRGcm9tKVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLmN1cnJlbnRSb3V0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmhpc3RvcnkgJiYgdGhpcy5oaXN0b3J5LmN1cnJlbnRcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIGluaXQgKGFwcCAvKiBWdWUgY29tcG9uZW50IGluc3RhbmNlICovKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnQoXG4gICAgaW5zdGFsbC5pbnN0YWxsZWQsXG4gICAgXCJub3QgaW5zdGFsbGVkLiBNYWtlIHN1cmUgdG8gY2FsbCBgVnVlLnVzZShWdWVSb3V0ZXIpYCBcIiArXG4gICAgXCJiZWZvcmUgY3JlYXRpbmcgcm9vdCBpbnN0YW5jZS5cIlxuICApO1xuXG4gIHRoaXMuYXBwcy5wdXNoKGFwcCk7XG5cbiAgLy8gc2V0IHVwIGFwcCBkZXN0cm95ZWQgaGFuZGxlclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjYzOVxuICBhcHAuJG9uY2UoJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIGNsZWFuIG91dCBhcHAgZnJvbSB0aGlzLmFwcHMgYXJyYXkgb25jZSBkZXN0cm95ZWRcbiAgICB2YXIgaW5kZXggPSB0aGlzJDEuYXBwcy5pbmRleE9mKGFwcCk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHsgdGhpcyQxLmFwcHMuc3BsaWNlKGluZGV4LCAxKTsgfVxuICAgIC8vIGVuc3VyZSB3ZSBzdGlsbCBoYXZlIGEgbWFpbiBhcHAgb3IgbnVsbCBpZiBubyBhcHBzXG4gICAgLy8gd2UgZG8gbm90IHJlbGVhc2UgdGhlIHJvdXRlciBzbyBpdCBjYW4gYmUgcmV1c2VkXG4gICAgaWYgKHRoaXMkMS5hcHAgPT09IGFwcCkgeyB0aGlzJDEuYXBwID0gdGhpcyQxLmFwcHNbMF0gfHwgbnVsbDsgfVxuICB9KTtcblxuICAvLyBtYWluIGFwcCBwcmV2aW91c2x5IGluaXRpYWxpemVkXG4gIC8vIHJldHVybiBhcyB3ZSBkb24ndCBuZWVkIHRvIHNldCB1cCBuZXcgaGlzdG9yeSBsaXN0ZW5lclxuICBpZiAodGhpcy5hcHApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHRoaXMuYXBwID0gYXBwO1xuXG4gIHZhciBoaXN0b3J5ID0gdGhpcy5oaXN0b3J5O1xuXG4gIGlmIChoaXN0b3J5IGluc3RhbmNlb2YgSFRNTDVIaXN0b3J5KSB7XG4gICAgaGlzdG9yeS50cmFuc2l0aW9uVG8oaGlzdG9yeS5nZXRDdXJyZW50TG9jYXRpb24oKSk7XG4gIH0gZWxzZSBpZiAoaGlzdG9yeSBpbnN0YW5jZW9mIEhhc2hIaXN0b3J5KSB7XG4gICAgdmFyIHNldHVwSGFzaExpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaGlzdG9yeS5zZXR1cExpc3RlbmVycygpO1xuICAgIH07XG4gICAgaGlzdG9yeS50cmFuc2l0aW9uVG8oXG4gICAgICBoaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpLFxuICAgICAgc2V0dXBIYXNoTGlzdGVuZXIsXG4gICAgICBzZXR1cEhhc2hMaXN0ZW5lclxuICAgICk7XG4gIH1cblxuICBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAocm91dGUpIHtcbiAgICB0aGlzJDEuYXBwcy5mb3JFYWNoKGZ1bmN0aW9uIChhcHApIHtcbiAgICAgIGFwcC5fcm91dGUgPSByb3V0ZTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJlZm9yZUVhY2ggPSBmdW5jdGlvbiBiZWZvcmVFYWNoIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYmVmb3JlSG9va3MsIGZuKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5iZWZvcmVSZXNvbHZlID0gZnVuY3Rpb24gYmVmb3JlUmVzb2x2ZSAoZm4pIHtcbiAgcmV0dXJuIHJlZ2lzdGVySG9vayh0aGlzLnJlc29sdmVIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmFmdGVyRWFjaCA9IGZ1bmN0aW9uIGFmdGVyRWFjaCAoZm4pIHtcbiAgcmV0dXJuIHJlZ2lzdGVySG9vayh0aGlzLmFmdGVySG9va3MsIGZuKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5vblJlYWR5ID0gZnVuY3Rpb24gb25SZWFkeSAoY2IsIGVycm9yQ2IpIHtcbiAgdGhpcy5oaXN0b3J5Lm9uUmVhZHkoY2IsIGVycm9yQ2IpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmhpc3Rvcnkub25FcnJvcihlcnJvckNiKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghb25Db21wbGV0ZSAmJiAhb25BYm9ydCAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdGhpcyQxLmhpc3RvcnkucHVzaChsb2NhdGlvbiwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIHRoaXMuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KTtcbiAgfVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFvbkNvbXBsZXRlICYmICFvbkFib3J0ICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0aGlzJDEuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpO1xuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgdGhpcy5oaXN0b3J5LmdvKG4pO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5iYWNrID0gZnVuY3Rpb24gYmFjayAoKSB7XG4gIHRoaXMuZ28oLTEpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24gZm9yd2FyZCAoKSB7XG4gIHRoaXMuZ28oMSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmdldE1hdGNoZWRDb21wb25lbnRzID0gZnVuY3Rpb24gZ2V0TWF0Y2hlZENvbXBvbmVudHMgKHRvKSB7XG4gIHZhciByb3V0ZSA9IHRvXG4gICAgPyB0by5tYXRjaGVkXG4gICAgICA/IHRvXG4gICAgICA6IHRoaXMucmVzb2x2ZSh0bykucm91dGVcbiAgICA6IHRoaXMuY3VycmVudFJvdXRlO1xuICBpZiAoIXJvdXRlKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgcm91dGUubWF0Y2hlZC5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIG0uY29tcG9uZW50c1trZXldXG4gICAgfSlcbiAgfSkpXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlIChcbiAgdG8sXG4gIGN1cnJlbnQsXG4gIGFwcGVuZFxuKSB7XG4gIGN1cnJlbnQgPSBjdXJyZW50IHx8IHRoaXMuaGlzdG9yeS5jdXJyZW50O1xuICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVMb2NhdGlvbihcbiAgICB0byxcbiAgICBjdXJyZW50LFxuICAgIGFwcGVuZCxcbiAgICB0aGlzXG4gICk7XG4gIHZhciByb3V0ZSA9IHRoaXMubWF0Y2gobG9jYXRpb24sIGN1cnJlbnQpO1xuICB2YXIgZnVsbFBhdGggPSByb3V0ZS5yZWRpcmVjdGVkRnJvbSB8fCByb3V0ZS5mdWxsUGF0aDtcbiAgdmFyIGJhc2UgPSB0aGlzLmhpc3RvcnkuYmFzZTtcbiAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGJhc2UsIGZ1bGxQYXRoLCB0aGlzLm1vZGUpO1xuICByZXR1cm4ge1xuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICByb3V0ZTogcm91dGUsXG4gICAgaHJlZjogaHJlZixcbiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIG5vcm1hbGl6ZWRUbzogbG9jYXRpb24sXG4gICAgcmVzb2x2ZWQ6IHJvdXRlXG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYWRkUm91dGVzID0gZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgdGhpcy5tYXRjaGVyLmFkZFJvdXRlcyhyb3V0ZXMpO1xuICBpZiAodGhpcy5oaXN0b3J5LmN1cnJlbnQgIT09IFNUQVJUKSB7XG4gICAgdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVnVlUm91dGVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySG9vayAobGlzdCwgZm4pIHtcbiAgbGlzdC5wdXNoKGZuKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IGxpc3QuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkgeyBsaXN0LnNwbGljZShpLCAxKTsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhyZWYgKGJhc2UsIGZ1bGxQYXRoLCBtb2RlKSB7XG4gIHZhciBwYXRoID0gbW9kZSA9PT0gJ2hhc2gnID8gJyMnICsgZnVsbFBhdGggOiBmdWxsUGF0aDtcbiAgcmV0dXJuIGJhc2UgPyBjbGVhblBhdGgoYmFzZSArICcvJyArIHBhdGgpIDogcGF0aFxufVxuXG5WdWVSb3V0ZXIuaW5zdGFsbCA9IGluc3RhbGw7XG5WdWVSb3V0ZXIudmVyc2lvbiA9ICczLjEuMic7XG5cbmlmIChpbkJyb3dzZXIgJiYgd2luZG93LlZ1ZSkge1xuICB3aW5kb3cuVnVlLnVzZShWdWVSb3V0ZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWdWVSb3V0ZXI7XG4iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyoqXG4gKiB2dWV4IHYzLjEuMVxuICogKGMpIDIwMTkgRXZhbiBZb3VcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBhcHBseU1peGluIChWdWUpIHtcbiAgdmFyIHZlcnNpb24gPSBOdW1iZXIoVnVlLnZlcnNpb24uc3BsaXQoJy4nKVswXSk7XG5cbiAgaWYgKHZlcnNpb24gPj0gMikge1xuICAgIFZ1ZS5taXhpbih7IGJlZm9yZUNyZWF0ZTogdnVleEluaXQgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3ZlcnJpZGUgaW5pdCBhbmQgaW5qZWN0IHZ1ZXggaW5pdCBwcm9jZWR1cmVcbiAgICAvLyBmb3IgMS54IGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgIHZhciBfaW5pdCA9IFZ1ZS5wcm90b3R5cGUuX2luaXQ7XG4gICAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAgICAgb3B0aW9ucy5pbml0ID0gb3B0aW9ucy5pbml0XG4gICAgICAgID8gW3Z1ZXhJbml0XS5jb25jYXQob3B0aW9ucy5pbml0KVxuICAgICAgICA6IHZ1ZXhJbml0O1xuICAgICAgX2luaXQuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFZ1ZXggaW5pdCBob29rLCBpbmplY3RlZCBpbnRvIGVhY2ggaW5zdGFuY2VzIGluaXQgaG9va3MgbGlzdC5cbiAgICovXG5cbiAgZnVuY3Rpb24gdnVleEluaXQgKCkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgICAvLyBzdG9yZSBpbmplY3Rpb25cbiAgICBpZiAob3B0aW9ucy5zdG9yZSkge1xuICAgICAgdGhpcy4kc3RvcmUgPSB0eXBlb2Ygb3B0aW9ucy5zdG9yZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IG9wdGlvbnMuc3RvcmUoKVxuICAgICAgICA6IG9wdGlvbnMuc3RvcmU7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC4kc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gb3B0aW9ucy5wYXJlbnQuJHN0b3JlO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdGFyZ2V0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgPyB3aW5kb3dcbiAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xuICAgID8gZ2xvYmFsXG4gICAgOiB7fTtcbnZhciBkZXZ0b29sSG9vayA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG5mdW5jdGlvbiBkZXZ0b29sUGx1Z2luIChzdG9yZSkge1xuICBpZiAoIWRldnRvb2xIb29rKSB7IHJldHVybiB9XG5cbiAgc3RvcmUuX2RldnRvb2xIb29rID0gZGV2dG9vbEhvb2s7XG5cbiAgZGV2dG9vbEhvb2suZW1pdCgndnVleDppbml0Jywgc3RvcmUpO1xuXG4gIGRldnRvb2xIb29rLm9uKCd2dWV4OnRyYXZlbC10by1zdGF0ZScsIGZ1bmN0aW9uICh0YXJnZXRTdGF0ZSkge1xuICAgIHN0b3JlLnJlcGxhY2VTdGF0ZSh0YXJnZXRTdGF0ZSk7XG4gIH0pO1xuXG4gIHN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAobXV0YXRpb24sIHN0YXRlKSB7XG4gICAgZGV2dG9vbEhvb2suZW1pdCgndnVleDptdXRhdGlvbicsIG11dGF0aW9uLCBzdGF0ZSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgZmlyc3QgaXRlbSB0aGF0IHBhc3MgdGhlIHRlc3RcbiAqIGJ5IHNlY29uZCBhcmd1bWVudCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZcbiAqIEByZXR1cm4geyp9XG4gKi9cblxuLyoqXG4gKiBmb3JFYWNoIGZvciBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZm9yRWFjaFZhbHVlIChvYmosIGZuKSB7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmbihvYmpba2V5XSwga2V5KTsgfSk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gdmFsICYmIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbXNnKSB7XG4gIGlmICghY29uZGl0aW9uKSB7IHRocm93IG5ldyBFcnJvcigoXCJbdnVleF0gXCIgKyBtc2cpKSB9XG59XG5cbmZ1bmN0aW9uIHBhcnRpYWwgKGZuLCBhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm4oYXJnKVxuICB9XG59XG5cbi8vIEJhc2UgZGF0YSBzdHJ1Y3QgZm9yIHN0b3JlJ3MgbW9kdWxlLCBwYWNrYWdlIHdpdGggc29tZSBhdHRyaWJ1dGUgYW5kIG1ldGhvZFxudmFyIE1vZHVsZSA9IGZ1bmN0aW9uIE1vZHVsZSAocmF3TW9kdWxlLCBydW50aW1lKSB7XG4gIHRoaXMucnVudGltZSA9IHJ1bnRpbWU7XG4gIC8vIFN0b3JlIHNvbWUgY2hpbGRyZW4gaXRlbVxuICB0aGlzLl9jaGlsZHJlbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIFN0b3JlIHRoZSBvcmlnaW4gbW9kdWxlIG9iamVjdCB3aGljaCBwYXNzZWQgYnkgcHJvZ3JhbW1lclxuICB0aGlzLl9yYXdNb2R1bGUgPSByYXdNb2R1bGU7XG4gIHZhciByYXdTdGF0ZSA9IHJhd01vZHVsZS5zdGF0ZTtcblxuICAvLyBTdG9yZSB0aGUgb3JpZ2luIG1vZHVsZSdzIHN0YXRlXG4gIHRoaXMuc3RhdGUgPSAodHlwZW9mIHJhd1N0YXRlID09PSAnZnVuY3Rpb24nID8gcmF3U3RhdGUoKSA6IHJhd1N0YXRlKSB8fCB7fTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IG5hbWVzcGFjZWQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzLm5hbWVzcGFjZWQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISF0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZFxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uIGFkZENoaWxkIChrZXksIG1vZHVsZSkge1xuICB0aGlzLl9jaGlsZHJlbltrZXldID0gbW9kdWxlO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkIChrZXkpIHtcbiAgZGVsZXRlIHRoaXMuX2NoaWxkcmVuW2tleV07XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmdldENoaWxkID0gZnVuY3Rpb24gZ2V0Q2hpbGQgKGtleSkge1xuICByZXR1cm4gdGhpcy5fY2hpbGRyZW5ba2V5XVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKHJhd01vZHVsZSkge1xuICB0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZCA9IHJhd01vZHVsZS5uYW1lc3BhY2VkO1xuICBpZiAocmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucyA9IHJhd01vZHVsZS5hY3Rpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucyA9IHJhd01vZHVsZS5tdXRhdGlvbnM7XG4gIH1cbiAgaWYgKHJhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmdldHRlcnMgPSByYXdNb2R1bGUuZ2V0dGVycztcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoQ2hpbGQgPSBmdW5jdGlvbiBmb3JFYWNoQ2hpbGQgKGZuKSB7XG4gIGZvckVhY2hWYWx1ZSh0aGlzLl9jaGlsZHJlbiwgZm4pO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoR2V0dGVyID0gZnVuY3Rpb24gZm9yRWFjaEdldHRlciAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzLCBmbik7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEFjdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hBY3Rpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hNdXRhdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hNdXRhdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucywgZm4pO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTW9kdWxlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBNb2R1bGVDb2xsZWN0aW9uID0gZnVuY3Rpb24gTW9kdWxlQ29sbGVjdGlvbiAocmF3Um9vdE1vZHVsZSkge1xuICAvLyByZWdpc3RlciByb290IG1vZHVsZSAoVnVleC5TdG9yZSBvcHRpb25zKVxuICB0aGlzLnJlZ2lzdGVyKFtdLCByYXdSb290TW9kdWxlLCBmYWxzZSk7XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uIChtb2R1bGUsIGtleSkge1xuICAgIHJldHVybiBtb2R1bGUuZ2V0Q2hpbGQoa2V5KVxuICB9LCB0aGlzLnJvb3QpXG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXROYW1lc3BhY2UgPSBmdW5jdGlvbiBnZXROYW1lc3BhY2UgKHBhdGgpIHtcbiAgdmFyIG1vZHVsZSA9IHRoaXMucm9vdDtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGtleSkge1xuICAgIG1vZHVsZSA9IG1vZHVsZS5nZXRDaGlsZChrZXkpO1xuICAgIHJldHVybiBuYW1lc3BhY2UgKyAobW9kdWxlLm5hbWVzcGFjZWQgPyBrZXkgKyAnLycgOiAnJylcbiAgfSwgJycpXG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUkMSAocmF3Um9vdE1vZHVsZSkge1xuICB1cGRhdGUoW10sIHRoaXMucm9vdCwgcmF3Um9vdE1vZHVsZSk7XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyIChwYXRoLCByYXdNb2R1bGUsIHJ1bnRpbWUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICBpZiAoIHJ1bnRpbWUgPT09IHZvaWQgMCApIHJ1bnRpbWUgPSB0cnVlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIHJhd01vZHVsZSk7XG4gIH1cblxuICB2YXIgbmV3TW9kdWxlID0gbmV3IE1vZHVsZShyYXdNb2R1bGUsIHJ1bnRpbWUpO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICB0aGlzLnJvb3QgPSBuZXdNb2R1bGU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBwYXJlbnQuYWRkQ2hpbGQocGF0aFtwYXRoLmxlbmd0aCAtIDFdLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gcmVnaXN0ZXIgbmVzdGVkIG1vZHVsZXNcbiAgaWYgKHJhd01vZHVsZS5tb2R1bGVzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZS5tb2R1bGVzLCBmdW5jdGlvbiAocmF3Q2hpbGRNb2R1bGUsIGtleSkge1xuICAgICAgdGhpcyQxLnJlZ2lzdGVyKHBhdGguY29uY2F0KGtleSksIHJhd0NoaWxkTW9kdWxlLCBydW50aW1lKTtcbiAgICB9KTtcbiAgfVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIgKHBhdGgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgdmFyIGtleSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgaWYgKCFwYXJlbnQuZ2V0Q2hpbGQoa2V5KS5ydW50aW1lKSB7IHJldHVybiB9XG5cbiAgcGFyZW50LnJlbW92ZUNoaWxkKGtleSk7XG59O1xuXG5mdW5jdGlvbiB1cGRhdGUgKHBhdGgsIHRhcmdldE1vZHVsZSwgbmV3TW9kdWxlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIG5ld01vZHVsZSk7XG4gIH1cblxuICAvLyB1cGRhdGUgdGFyZ2V0IG1vZHVsZVxuICB0YXJnZXRNb2R1bGUudXBkYXRlKG5ld01vZHVsZSk7XG5cbiAgLy8gdXBkYXRlIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChuZXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvciAodmFyIGtleSBpbiBuZXdNb2R1bGUubW9kdWxlcykge1xuICAgICAgaWYgKCF0YXJnZXRNb2R1bGUuZ2V0Q2hpbGQoa2V5KSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiW3Z1ZXhdIHRyeWluZyB0byBhZGQgYSBuZXcgbW9kdWxlICdcIiArIGtleSArIFwiJyBvbiBob3QgcmVsb2FkaW5nLCBcIiArXG4gICAgICAgICAgICAnbWFudWFsIHJlbG9hZCBpcyBuZWVkZWQnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHVwZGF0ZShcbiAgICAgICAgcGF0aC5jb25jYXQoa2V5KSxcbiAgICAgICAgdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSksXG4gICAgICAgIG5ld01vZHVsZS5tb2R1bGVzW2tleV1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciBmdW5jdGlvbkFzc2VydCA9IHtcbiAgYXNzZXJ0OiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJzsgfSxcbiAgZXhwZWN0ZWQ6ICdmdW5jdGlvbidcbn07XG5cbnZhciBvYmplY3RBc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUuaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJyk7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggXCJoYW5kbGVyXCIgZnVuY3Rpb24nXG59O1xuXG52YXIgYXNzZXJ0VHlwZXMgPSB7XG4gIGdldHRlcnM6IGZ1bmN0aW9uQXNzZXJ0LFxuICBtdXRhdGlvbnM6IGZ1bmN0aW9uQXNzZXJ0LFxuICBhY3Rpb25zOiBvYmplY3RBc3NlcnRcbn07XG5cbmZ1bmN0aW9uIGFzc2VydFJhd01vZHVsZSAocGF0aCwgcmF3TW9kdWxlKSB7XG4gIE9iamVjdC5rZXlzKGFzc2VydFR5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIXJhd01vZHVsZVtrZXldKSB7IHJldHVybiB9XG5cbiAgICB2YXIgYXNzZXJ0T3B0aW9ucyA9IGFzc2VydFR5cGVzW2tleV07XG5cbiAgICBmb3JFYWNoVmFsdWUocmF3TW9kdWxlW2tleV0sIGZ1bmN0aW9uICh2YWx1ZSwgdHlwZSkge1xuICAgICAgYXNzZXJ0KFxuICAgICAgICBhc3NlcnRPcHRpb25zLmFzc2VydCh2YWx1ZSksXG4gICAgICAgIG1ha2VBc3NlcnRpb25NZXNzYWdlKHBhdGgsIGtleSwgdHlwZSwgdmFsdWUsIGFzc2VydE9wdGlvbnMuZXhwZWN0ZWQpXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFrZUFzc2VydGlvbk1lc3NhZ2UgKHBhdGgsIGtleSwgdHlwZSwgdmFsdWUsIGV4cGVjdGVkKSB7XG4gIHZhciBidWYgPSBrZXkgKyBcIiBzaG91bGQgYmUgXCIgKyBleHBlY3RlZCArIFwiIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIi5cIiArIHR5cGUgKyBcIlxcXCJcIjtcbiAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgIGJ1ZiArPSBcIiBpbiBtb2R1bGUgXFxcIlwiICsgKHBhdGguam9pbignLicpKSArIFwiXFxcIlwiO1xuICB9XG4gIGJ1ZiArPSBcIiBpcyBcIiArIChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpICsgXCIuXCI7XG4gIHJldHVybiBidWZcbn1cblxudmFyIFZ1ZTsgLy8gYmluZCBvbiBpbnN0YWxsXG5cbnZhciBTdG9yZSA9IGZ1bmN0aW9uIFN0b3JlIChvcHRpb25zKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAvLyBBdXRvIGluc3RhbGwgaWYgaXQgaXMgbm90IGRvbmUgeWV0IGFuZCBgd2luZG93YCBoYXMgYFZ1ZWAuXG4gIC8vIFRvIGFsbG93IHVzZXJzIHRvIGF2b2lkIGF1dG8taW5zdGFsbGF0aW9uIGluIHNvbWUgY2FzZXMsXG4gIC8vIHRoaXMgY29kZSBzaG91bGQgYmUgcGxhY2VkIGhlcmUuIFNlZSAjNzMxXG4gIGlmICghVnVlICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WdWUpIHtcbiAgICBpbnN0YWxsKHdpbmRvdy5WdWUpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQoVnVlLCBcIm11c3QgY2FsbCBWdWUudXNlKFZ1ZXgpIGJlZm9yZSBjcmVhdGluZyBhIHN0b3JlIGluc3RhbmNlLlwiKTtcbiAgICBhc3NlcnQodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnLCBcInZ1ZXggcmVxdWlyZXMgYSBQcm9taXNlIHBvbHlmaWxsIGluIHRoaXMgYnJvd3Nlci5cIik7XG4gICAgYXNzZXJ0KHRoaXMgaW5zdGFuY2VvZiBTdG9yZSwgXCJzdG9yZSBtdXN0IGJlIGNhbGxlZCB3aXRoIHRoZSBuZXcgb3BlcmF0b3IuXCIpO1xuICB9XG5cbiAgdmFyIHBsdWdpbnMgPSBvcHRpb25zLnBsdWdpbnM7IGlmICggcGx1Z2lucyA9PT0gdm9pZCAwICkgcGx1Z2lucyA9IFtdO1xuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3Q7IGlmICggc3RyaWN0ID09PSB2b2lkIDAgKSBzdHJpY3QgPSBmYWxzZTtcblxuICAvLyBzdG9yZSBpbnRlcm5hbCBzdGF0ZVxuICB0aGlzLl9jb21taXR0aW5nID0gZmFsc2U7XG4gIHRoaXMuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl9tdXRhdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl93cmFwcGVkR2V0dGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX21vZHVsZXMgPSBuZXcgTW9kdWxlQ29sbGVjdGlvbihvcHRpb25zKTtcbiAgdGhpcy5fbW9kdWxlc05hbWVzcGFjZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG4gIHRoaXMuX3dhdGNoZXJWTSA9IG5ldyBWdWUoKTtcblxuICAvLyBiaW5kIGNvbW1pdCBhbmQgZGlzcGF0Y2ggdG8gc2VsZlxuICB2YXIgc3RvcmUgPSB0aGlzO1xuICB2YXIgcmVmID0gdGhpcztcbiAgdmFyIGRpc3BhdGNoID0gcmVmLmRpc3BhdGNoO1xuICB2YXIgY29tbWl0ID0gcmVmLmNvbW1pdDtcbiAgdGhpcy5kaXNwYXRjaCA9IGZ1bmN0aW9uIGJvdW5kRGlzcGF0Y2ggKHR5cGUsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2guY2FsbChzdG9yZSwgdHlwZSwgcGF5bG9hZClcbiAgfTtcbiAgdGhpcy5jb21taXQgPSBmdW5jdGlvbiBib3VuZENvbW1pdCAodHlwZSwgcGF5bG9hZCwgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21taXQuY2FsbChzdG9yZSwgdHlwZSwgcGF5bG9hZCwgb3B0aW9ucylcbiAgfTtcblxuICAvLyBzdHJpY3QgbW9kZVxuICB0aGlzLnN0cmljdCA9IHN0cmljdDtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9tb2R1bGVzLnJvb3Quc3RhdGU7XG5cbiAgLy8gaW5pdCByb290IG1vZHVsZS5cbiAgLy8gdGhpcyBhbHNvIHJlY3Vyc2l2ZWx5IHJlZ2lzdGVycyBhbGwgc3ViLW1vZHVsZXNcbiAgLy8gYW5kIGNvbGxlY3RzIGFsbCBtb2R1bGUgZ2V0dGVycyBpbnNpZGUgdGhpcy5fd3JhcHBlZEdldHRlcnNcbiAgaW5zdGFsbE1vZHVsZSh0aGlzLCBzdGF0ZSwgW10sIHRoaXMuX21vZHVsZXMucm9vdCk7XG5cbiAgLy8gaW5pdGlhbGl6ZSB0aGUgc3RvcmUgdm0sIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgcmVhY3Rpdml0eVxuICAvLyAoYWxzbyByZWdpc3RlcnMgX3dyYXBwZWRHZXR0ZXJzIGFzIGNvbXB1dGVkIHByb3BlcnRpZXMpXG4gIHJlc2V0U3RvcmVWTSh0aGlzLCBzdGF0ZSk7XG5cbiAgLy8gYXBwbHkgcGx1Z2luc1xuICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikgeyByZXR1cm4gcGx1Z2luKHRoaXMkMSk7IH0pO1xuXG4gIHZhciB1c2VEZXZ0b29scyA9IG9wdGlvbnMuZGV2dG9vbHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGV2dG9vbHMgOiBWdWUuY29uZmlnLmRldnRvb2xzO1xuICBpZiAodXNlRGV2dG9vbHMpIHtcbiAgICBkZXZ0b29sUGx1Z2luKHRoaXMpO1xuICB9XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDEgPSB7IHN0YXRlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxLnN0YXRlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3ZtLl9kYXRhLiQkc3RhdGVcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxLnN0YXRlLnNldCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KGZhbHNlLCBcInVzZSBzdG9yZS5yZXBsYWNlU3RhdGUoKSB0byBleHBsaWNpdCByZXBsYWNlIHN0b3JlIHN0YXRlLlwiKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uIGNvbW1pdCAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBjb21taXRcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuICAgIHZhciBvcHRpb25zID0gcmVmLm9wdGlvbnM7XG5cbiAgdmFyIG11dGF0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX211dGF0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIG11dGF0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICBlbnRyeS5mb3JFYWNoKGZ1bmN0aW9uIGNvbW1pdEl0ZXJhdG9yIChoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVyKHBheWxvYWQpO1xuICAgIH0pO1xuICB9KTtcbiAgdGhpcy5fc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIobXV0YXRpb24sIHRoaXMkMS5zdGF0ZSk7IH0pO1xuXG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgb3B0aW9ucyAmJiBvcHRpb25zLnNpbGVudFxuICApIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBcIlt2dWV4XSBtdXRhdGlvbiB0eXBlOiBcIiArIHR5cGUgKyBcIi4gU2lsZW50IG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkLiBcIiArXG4gICAgICAnVXNlIHRoZSBmaWx0ZXIgZnVuY3Rpb25hbGl0eSBpbiB0aGUgdnVlLWRldnRvb2xzJ1xuICAgICk7XG4gIH1cbn07XG5cblN0b3JlLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoIChfdHlwZSwgX3BheWxvYWQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyBjaGVjayBvYmplY3Qtc3R5bGUgZGlzcGF0Y2hcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkKTtcbiAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgIHZhciBwYXlsb2FkID0gcmVmLnBheWxvYWQ7XG5cbiAgdmFyIGFjdGlvbiA9IHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCB9O1xuICB2YXIgZW50cnkgPSB0aGlzLl9hY3Rpb25zW3R5cGVdO1xuICBpZiAoIWVudHJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gYWN0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnNcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmJlZm9yZTsgfSlcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmUoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gYmVmb3JlIGFjdGlvbiBzdWJzY3JpYmVyczogXCIpO1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gZW50cnkubGVuZ3RoID4gMVxuICAgID8gUHJvbWlzZS5hbGwoZW50cnkubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBoYW5kbGVyKHBheWxvYWQpOyB9KSlcbiAgICA6IGVudHJ5WzBdKHBheWxvYWQpO1xuXG4gIHJldHVybiByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMkMS5fYWN0aW9uU3Vic2NyaWJlcnNcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYWZ0ZXI7IH0pXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5hZnRlcihhY3Rpb24sIHRoaXMkMS5zdGF0ZSk7IH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlt2dWV4XSBlcnJvciBpbiBhZnRlciBhY3Rpb24gc3Vic2NyaWJlcnM6IFwiKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9KVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZSAoZm4pIHtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoZm4sIHRoaXMuX3N1YnNjcmliZXJzKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZUFjdGlvbiA9IGZ1bmN0aW9uIHN1YnNjcmliZUFjdGlvbiAoZm4pIHtcbiAgdmFyIHN1YnMgPSB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgPyB7IGJlZm9yZTogZm4gfSA6IGZuO1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShzdWJzLCB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycylcbn07XG5cblN0b3JlLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uIHdhdGNoIChnZXR0ZXIsIGNiLCBvcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIGdldHRlciA9PT0gJ2Z1bmN0aW9uJywgXCJzdG9yZS53YXRjaCBvbmx5IGFjY2VwdHMgYSBmdW5jdGlvbi5cIik7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX3dhdGNoZXJWTS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0dGVyKHRoaXMkMS5zdGF0ZSwgdGhpcyQxLmdldHRlcnMpOyB9LCBjYiwgb3B0aW9ucylcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZXBsYWNlU3RhdGUgPSBmdW5jdGlvbiByZXBsYWNlU3RhdGUgKHN0YXRlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgdGhpcyQxLl92bS5fZGF0YS4kJHN0YXRlID0gc3RhdGU7XG4gIH0pO1xufTtcblxuU3RvcmUucHJvdG90eXBlLnJlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24gcmVnaXN0ZXJNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSwgb3B0aW9ucykge1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gICAgYXNzZXJ0KHBhdGgubGVuZ3RoID4gMCwgJ2Nhbm5vdCByZWdpc3RlciB0aGUgcm9vdCBtb2R1bGUgYnkgdXNpbmcgcmVnaXN0ZXJNb2R1bGUuJyk7XG4gIH1cblxuICB0aGlzLl9tb2R1bGVzLnJlZ2lzdGVyKHBhdGgsIHJhd01vZHVsZSk7XG4gIGluc3RhbGxNb2R1bGUodGhpcywgdGhpcy5zdGF0ZSwgcGF0aCwgdGhpcy5fbW9kdWxlcy5nZXQocGF0aCksIG9wdGlvbnMucHJlc2VydmVTdGF0ZSk7XG4gIC8vIHJlc2V0IHN0b3JlIHRvIHVwZGF0ZSBnZXR0ZXJzLi4uXG4gIHJlc2V0U3RvcmVWTSh0aGlzLCB0aGlzLnN0YXRlKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS51bnJlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24gdW5yZWdpc3Rlck1vZHVsZSAocGF0aCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gIH1cblxuICB0aGlzLl9tb2R1bGVzLnVucmVnaXN0ZXIocGF0aCk7XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnRTdGF0ZSA9IGdldE5lc3RlZFN0YXRlKHRoaXMkMS5zdGF0ZSwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIFZ1ZS5kZWxldGUocGFyZW50U3RhdGUsIHBhdGhbcGF0aC5sZW5ndGggLSAxXSk7XG4gIH0pO1xuICByZXNldFN0b3JlKHRoaXMpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLmhvdFVwZGF0ZSA9IGZ1bmN0aW9uIGhvdFVwZGF0ZSAobmV3T3B0aW9ucykge1xuICB0aGlzLl9tb2R1bGVzLnVwZGF0ZShuZXdPcHRpb25zKTtcbiAgcmVzZXRTdG9yZSh0aGlzLCB0cnVlKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5fd2l0aENvbW1pdCA9IGZ1bmN0aW9uIF93aXRoQ29tbWl0IChmbikge1xuICB2YXIgY29tbWl0dGluZyA9IHRoaXMuX2NvbW1pdHRpbmc7XG4gIHRoaXMuX2NvbW1pdHRpbmcgPSB0cnVlO1xuICBmbigpO1xuICB0aGlzLl9jb21taXR0aW5nID0gY29tbWl0dGluZztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBTdG9yZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxICk7XG5cbmZ1bmN0aW9uIGdlbmVyaWNTdWJzY3JpYmUgKGZuLCBzdWJzKSB7XG4gIGlmIChzdWJzLmluZGV4T2YoZm4pIDwgMCkge1xuICAgIHN1YnMucHVzaChmbik7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IHN1YnMuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkge1xuICAgICAgc3Vicy5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmUgKHN0b3JlLCBob3QpIHtcbiAgc3RvcmUuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc3RhdGUgPSBzdG9yZS5zdGF0ZTtcbiAgLy8gaW5pdCBhbGwgbW9kdWxlc1xuICBpbnN0YWxsTW9kdWxlKHN0b3JlLCBzdGF0ZSwgW10sIHN0b3JlLl9tb2R1bGVzLnJvb3QsIHRydWUpO1xuICAvLyByZXNldCB2bVxuICByZXNldFN0b3JlVk0oc3RvcmUsIHN0YXRlLCBob3QpO1xufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlVk0gKHN0b3JlLCBzdGF0ZSwgaG90KSB7XG4gIHZhciBvbGRWbSA9IHN0b3JlLl92bTtcblxuICAvLyBiaW5kIHN0b3JlIHB1YmxpYyBnZXR0ZXJzXG4gIHN0b3JlLmdldHRlcnMgPSB7fTtcbiAgdmFyIHdyYXBwZWRHZXR0ZXJzID0gc3RvcmUuX3dyYXBwZWRHZXR0ZXJzO1xuICB2YXIgY29tcHV0ZWQgPSB7fTtcbiAgZm9yRWFjaFZhbHVlKHdyYXBwZWRHZXR0ZXJzLCBmdW5jdGlvbiAoZm4sIGtleSkge1xuICAgIC8vIHVzZSBjb21wdXRlZCB0byBsZXZlcmFnZSBpdHMgbGF6eS1jYWNoaW5nIG1lY2hhbmlzbVxuICAgIC8vIGRpcmVjdCBpbmxpbmUgZnVuY3Rpb24gdXNlIHdpbGwgbGVhZCB0byBjbG9zdXJlIHByZXNlcnZpbmcgb2xkVm0uXG4gICAgLy8gdXNpbmcgcGFydGlhbCB0byByZXR1cm4gZnVuY3Rpb24gd2l0aCBvbmx5IGFyZ3VtZW50cyBwcmVzZXJ2ZWQgaW4gY2xvc3VyZSBlbnZpcm9tZW50LlxuICAgIGNvbXB1dGVkW2tleV0gPSBwYXJ0aWFsKGZuLCBzdG9yZSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN0b3JlLmdldHRlcnMsIGtleSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5fdm1ba2V5XTsgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUgLy8gZm9yIGxvY2FsIGdldHRlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gdXNlIGEgVnVlIGluc3RhbmNlIHRvIHN0b3JlIHRoZSBzdGF0ZSB0cmVlXG4gIC8vIHN1cHByZXNzIHdhcm5pbmdzIGp1c3QgaW4gY2FzZSB0aGUgdXNlciBoYXMgYWRkZWRcbiAgLy8gc29tZSBmdW5reSBnbG9iYWwgbWl4aW5zXG4gIHZhciBzaWxlbnQgPSBWdWUuY29uZmlnLnNpbGVudDtcbiAgVnVlLmNvbmZpZy5zaWxlbnQgPSB0cnVlO1xuICBzdG9yZS5fdm0gPSBuZXcgVnVlKHtcbiAgICBkYXRhOiB7XG4gICAgICAkJHN0YXRlOiBzdGF0ZVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IGNvbXB1dGVkXG4gIH0pO1xuICBWdWUuY29uZmlnLnNpbGVudCA9IHNpbGVudDtcblxuICAvLyBlbmFibGUgc3RyaWN0IG1vZGUgZm9yIG5ldyB2bVxuICBpZiAoc3RvcmUuc3RyaWN0KSB7XG4gICAgZW5hYmxlU3RyaWN0TW9kZShzdG9yZSk7XG4gIH1cblxuICBpZiAob2xkVm0pIHtcbiAgICBpZiAoaG90KSB7XG4gICAgICAvLyBkaXNwYXRjaCBjaGFuZ2VzIGluIGFsbCBzdWJzY3JpYmVkIHdhdGNoZXJzXG4gICAgICAvLyB0byBmb3JjZSBnZXR0ZXIgcmUtZXZhbHVhdGlvbiBmb3IgaG90IHJlbG9hZGluZy5cbiAgICAgIHN0b3JlLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2xkVm0uX2RhdGEuJCRzdGF0ZSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gICAgVnVlLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9sZFZtLiRkZXN0cm95KCk7IH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluc3RhbGxNb2R1bGUgKHN0b3JlLCByb290U3RhdGUsIHBhdGgsIG1vZHVsZSwgaG90KSB7XG4gIHZhciBpc1Jvb3QgPSAhcGF0aC5sZW5ndGg7XG4gIHZhciBuYW1lc3BhY2UgPSBzdG9yZS5fbW9kdWxlcy5nZXROYW1lc3BhY2UocGF0aCk7XG5cbiAgLy8gcmVnaXN0ZXIgaW4gbmFtZXNwYWNlIG1hcFxuICBpZiAobW9kdWxlLm5hbWVzcGFjZWQpIHtcbiAgICBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdID0gbW9kdWxlO1xuICB9XG5cbiAgLy8gc2V0IHN0YXRlXG4gIGlmICghaXNSb290ICYmICFob3QpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZShyb290U3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICB2YXIgbW9kdWxlTmFtZSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICBWdWUuc2V0KHBhcmVudFN0YXRlLCBtb2R1bGVOYW1lLCBtb2R1bGUuc3RhdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGxvY2FsID0gbW9kdWxlLmNvbnRleHQgPSBtYWtlTG9jYWxDb250ZXh0KHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpO1xuXG4gIG1vZHVsZS5mb3JFYWNoTXV0YXRpb24oZnVuY3Rpb24gKG11dGF0aW9uLCBrZXkpIHtcbiAgICB2YXIgbmFtZXNwYWNlZFR5cGUgPSBuYW1lc3BhY2UgKyBrZXk7XG4gICAgcmVnaXN0ZXJNdXRhdGlvbihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIG11dGF0aW9uLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQWN0aW9uKGZ1bmN0aW9uIChhY3Rpb24sIGtleSkge1xuICAgIHZhciB0eXBlID0gYWN0aW9uLnJvb3QgPyBrZXkgOiBuYW1lc3BhY2UgKyBrZXk7XG4gICAgdmFyIGhhbmRsZXIgPSBhY3Rpb24uaGFuZGxlciB8fCBhY3Rpb247XG4gICAgcmVnaXN0ZXJBY3Rpb24oc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hHZXR0ZXIoZnVuY3Rpb24gKGdldHRlciwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyR2V0dGVyKHN0b3JlLCBuYW1lc3BhY2VkVHlwZSwgZ2V0dGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkLCBrZXkpIHtcbiAgICBpbnN0YWxsTW9kdWxlKHN0b3JlLCByb290U3RhdGUsIHBhdGguY29uY2F0KGtleSksIGNoaWxkLCBob3QpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBtYWtlIGxvY2FsaXplZCBkaXNwYXRjaCwgY29tbWl0LCBnZXR0ZXJzIGFuZCBzdGF0ZVxuICogaWYgdGhlcmUgaXMgbm8gbmFtZXNwYWNlLCBqdXN0IHVzZSByb290IG9uZXNcbiAqL1xuZnVuY3Rpb24gbWFrZUxvY2FsQ29udGV4dCAoc3RvcmUsIG5hbWVzcGFjZSwgcGF0aCkge1xuICB2YXIgbm9OYW1lc3BhY2UgPSBuYW1lc3BhY2UgPT09ICcnO1xuXG4gIHZhciBsb2NhbCA9IHtcbiAgICBkaXNwYXRjaDogbm9OYW1lc3BhY2UgPyBzdG9yZS5kaXNwYXRjaCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RvcmUuX2FjdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIGFjdGlvbiB0eXBlOiBcIiArIChhcmdzLnR5cGUpICsgXCIsIGdsb2JhbCB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2godHlwZSwgcGF5bG9hZClcbiAgICB9LFxuXG4gICAgY29tbWl0OiBub05hbWVzcGFjZSA/IHN0b3JlLmNvbW1pdCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RvcmUuX211dGF0aW9uc1t0eXBlXSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbG9jYWwgbXV0YXRpb24gdHlwZTogXCIgKyAoYXJncy50eXBlKSArIFwiLCBnbG9iYWwgdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RvcmUuY29tbWl0KHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcblxuICAvLyBnZXR0ZXJzIGFuZCBzdGF0ZSBvYmplY3QgbXVzdCBiZSBnb3R0ZW4gbGF6aWx5XG4gIC8vIGJlY2F1c2UgdGhleSB3aWxsIGJlIGNoYW5nZWQgYnkgdm0gdXBkYXRlXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGxvY2FsLCB7XG4gICAgZ2V0dGVyczoge1xuICAgICAgZ2V0OiBub05hbWVzcGFjZVxuICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldHRlcnM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYWtlTG9jYWxHZXR0ZXJzKHN0b3JlLCBuYW1lc3BhY2UpOyB9XG4gICAgfSxcbiAgICBzdGF0ZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXROZXN0ZWRTdGF0ZShzdG9yZS5zdGF0ZSwgcGF0aCk7IH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBsb2NhbFxufVxuXG5mdW5jdGlvbiBtYWtlTG9jYWxHZXR0ZXJzIChzdG9yZSwgbmFtZXNwYWNlKSB7XG4gIHZhciBnZXR0ZXJzUHJveHkgPSB7fTtcblxuICB2YXIgc3BsaXRQb3MgPSBuYW1lc3BhY2UubGVuZ3RoO1xuICBPYmplY3Qua2V5cyhzdG9yZS5nZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgLy8gc2tpcCBpZiB0aGUgdGFyZ2V0IGdldHRlciBpcyBub3QgbWF0Y2ggdGhpcyBuYW1lc3BhY2VcbiAgICBpZiAodHlwZS5zbGljZSgwLCBzcGxpdFBvcykgIT09IG5hbWVzcGFjZSkgeyByZXR1cm4gfVxuXG4gICAgLy8gZXh0cmFjdCBsb2NhbCBnZXR0ZXIgdHlwZVxuICAgIHZhciBsb2NhbFR5cGUgPSB0eXBlLnNsaWNlKHNwbGl0UG9zKTtcblxuICAgIC8vIEFkZCBhIHBvcnQgdG8gdGhlIGdldHRlcnMgcHJveHkuXG4gICAgLy8gRGVmaW5lIGFzIGdldHRlciBwcm9wZXJ0eSBiZWNhdXNlXG4gICAgLy8gd2UgZG8gbm90IHdhbnQgdG8gZXZhbHVhdGUgdGhlIGdldHRlcnMgaW4gdGhpcyB0aW1lLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXR0ZXJzUHJveHksIGxvY2FsVHlwZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzW3R5cGVdOyB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZ2V0dGVyc1Byb3h5XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTXV0YXRpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fbXV0YXRpb25zW3R5cGVdIHx8IChzdG9yZS5fbXV0YXRpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRNdXRhdGlvbkhhbmRsZXIgKHBheWxvYWQpIHtcbiAgICBoYW5kbGVyLmNhbGwoc3RvcmUsIGxvY2FsLnN0YXRlLCBwYXlsb2FkKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQWN0aW9uIChzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpIHtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuX2FjdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9hY3Rpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRBY3Rpb25IYW5kbGVyIChwYXlsb2FkLCBjYikge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmNhbGwoc3RvcmUsIHtcbiAgICAgIGRpc3BhdGNoOiBsb2NhbC5kaXNwYXRjaCxcbiAgICAgIGNvbW1pdDogbG9jYWwuY29tbWl0LFxuICAgICAgZ2V0dGVyczogbG9jYWwuZ2V0dGVycyxcbiAgICAgIHN0YXRlOiBsb2NhbC5zdGF0ZSxcbiAgICAgIHJvb3RHZXR0ZXJzOiBzdG9yZS5nZXR0ZXJzLFxuICAgICAgcm9vdFN0YXRlOiBzdG9yZS5zdGF0ZVxuICAgIH0sIHBheWxvYWQsIGNiKTtcbiAgICBpZiAoIWlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUocmVzKTtcbiAgICB9XG4gICAgaWYgKHN0b3JlLl9kZXZ0b29sSG9vaykge1xuICAgICAgcmV0dXJuIHJlcy5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHN0b3JlLl9kZXZ0b29sSG9vay5lbWl0KCd2dWV4OmVycm9yJywgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJHZXR0ZXIgKHN0b3JlLCB0eXBlLCByYXdHZXR0ZXIsIGxvY2FsKSB7XG4gIGlmIChzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0pIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gZHVwbGljYXRlIGdldHRlciBrZXk6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0gPSBmdW5jdGlvbiB3cmFwcGVkR2V0dGVyIChzdG9yZSkge1xuICAgIHJldHVybiByYXdHZXR0ZXIoXG4gICAgICBsb2NhbC5zdGF0ZSwgLy8gbG9jYWwgc3RhdGVcbiAgICAgIGxvY2FsLmdldHRlcnMsIC8vIGxvY2FsIGdldHRlcnNcbiAgICAgIHN0b3JlLnN0YXRlLCAvLyByb290IHN0YXRlXG4gICAgICBzdG9yZS5nZXR0ZXJzIC8vIHJvb3QgZ2V0dGVyc1xuICAgIClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlU3RyaWN0TW9kZSAoc3RvcmUpIHtcbiAgc3RvcmUuX3ZtLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhLiQkc3RhdGUgfSwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBhc3NlcnQoc3RvcmUuX2NvbW1pdHRpbmcsIFwiZG8gbm90IG11dGF0ZSB2dWV4IHN0b3JlIHN0YXRlIG91dHNpZGUgbXV0YXRpb24gaGFuZGxlcnMuXCIpO1xuICAgIH1cbiAgfSwgeyBkZWVwOiB0cnVlLCBzeW5jOiB0cnVlIH0pO1xufVxuXG5mdW5jdGlvbiBnZXROZXN0ZWRTdGF0ZSAoc3RhdGUsIHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgubGVuZ3RoXG4gICAgPyBwYXRoLnJlZHVjZShmdW5jdGlvbiAoc3RhdGUsIGtleSkgeyByZXR1cm4gc3RhdGVba2V5XTsgfSwgc3RhdGUpXG4gICAgOiBzdGF0ZVxufVxuXG5mdW5jdGlvbiB1bmlmeU9iamVjdFN0eWxlICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdCh0eXBlKSAmJiB0eXBlLnR5cGUpIHtcbiAgICBvcHRpb25zID0gcGF5bG9hZDtcbiAgICBwYXlsb2FkID0gdHlwZTtcbiAgICB0eXBlID0gdHlwZS50eXBlO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnLCAoXCJleHBlY3RzIHN0cmluZyBhcyB0aGUgdHlwZSwgYnV0IGZvdW5kIFwiICsgKHR5cGVvZiB0eXBlKSArIFwiLlwiKSk7XG4gIH1cblxuICByZXR1cm4geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkLCBvcHRpb25zOiBvcHRpb25zIH1cbn1cblxuZnVuY3Rpb24gaW5zdGFsbCAoX1Z1ZSkge1xuICBpZiAoVnVlICYmIF9WdWUgPT09IFZ1ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAnW3Z1ZXhdIGFscmVhZHkgaW5zdGFsbGVkLiBWdWUudXNlKFZ1ZXgpIHNob3VsZCBiZSBjYWxsZWQgb25seSBvbmNlLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIFZ1ZSA9IF9WdWU7XG4gIGFwcGx5TWl4aW4oVnVlKTtcbn1cblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGdldHRpbmcgdGhlIHN0YXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gc3RhdGVzICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgc3RhdGUgYW5kIGdldHRlcnMgZm9yIHBhcmFtLCB5b3UgY2FuIGRvIHNvbWV0aGluZyBmb3Igc3RhdGUgYW5kIGdldHRlcnMgaW4gaXQuXG4gKiBAcGFyYW0ge09iamVjdH1cbiAqL1xudmFyIG1hcFN0YXRlID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIHN0YXRlcykge1xuICB2YXIgcmVzID0ge307XG4gIG5vcm1hbGl6ZU1hcChzdGF0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRTdGF0ZSAoKSB7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLiRzdG9yZS5zdGF0ZTtcbiAgICAgIHZhciBnZXR0ZXJzID0gdGhpcy4kc3RvcmUuZ2V0dGVycztcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwU3RhdGUnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gbW9kdWxlLmNvbnRleHQuc3RhdGU7XG4gICAgICAgIGdldHRlcnMgPSBtb2R1bGUuY29udGV4dC5nZXR0ZXJzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuY2FsbCh0aGlzLCBzdGF0ZSwgZ2V0dGVycylcbiAgICAgICAgOiBzdGF0ZVt2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBjb21taXR0aW5nIHRoZSBtdXRhdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gbXV0YXRpb25zICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgYGNvbW1pdGAgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IHBhcmFtLCBpdCBjYW4gYWNjZXB0IGFudGhvciBwYXJhbXMuIFlvdSBjYW4gY29tbWl0IG11dGF0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcE11dGF0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBtdXRhdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAobXV0YXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkTXV0YXRpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIEdldCB0aGUgY29tbWl0IG1ldGhvZCBmcm9tIHN0b3JlXG4gICAgICB2YXIgY29tbWl0ID0gdGhpcy4kc3RvcmUuY29tbWl0O1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBNdXRhdGlvbnMnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbW1pdCA9IG1vZHVsZS5jb250ZXh0LmNvbW1pdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtjb21taXRdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgOiBjb21taXQuYXBwbHkodGhpcy4kc3RvcmUsIFt2YWxdLmNvbmNhdChhcmdzKSlcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBnZXR0aW5nIHRoZSBnZXR0ZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBnZXR0ZXJzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBHZXR0ZXJzID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGdldHRlcnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAoZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICAvLyBUaGUgbmFtZXNwYWNlIGhhcyBiZWVuIG11dGF0ZWQgYnkgbm9ybWFsaXplTmFtZXNwYWNlXG4gICAgdmFsID0gbmFtZXNwYWNlICsgdmFsO1xuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkR2V0dGVyICgpIHtcbiAgICAgIGlmIChuYW1lc3BhY2UgJiYgIWdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwR2V0dGVycycsIG5hbWVzcGFjZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhKHZhbCBpbiB0aGlzLiRzdG9yZS5nZXR0ZXJzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGdldHRlcjogXCIgKyB2YWwpKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1t2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBkaXNwYXRjaCB0aGUgYWN0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBhY3Rpb25zICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgYGRpc3BhdGNoYCBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgcGFyYW0sIGl0IGNhbiBhY2NlcHQgYW50aG9yIHBhcmFtcy4gWW91IGNhbiBkaXNwYXRjaCBhY3Rpb24gYW5kIGRvIGFueSBvdGhlciB0aGluZ3MgaW4gdGhpcyBmdW5jdGlvbi4gc3BlY2lhbGx5LCBZb3UgbmVlZCB0byBwYXNzIGFudGhvciBwYXJhbXMgZnJvbSB0aGUgbWFwcGVkIGZ1bmN0aW9uLlxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgbWFwQWN0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBhY3Rpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRBY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIGdldCBkaXNwYXRjaCBmdW5jdGlvbiBmcm9tIHN0b3JlXG4gICAgICB2YXIgZGlzcGF0Y2ggPSB0aGlzLiRzdG9yZS5kaXNwYXRjaDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwQWN0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZGlzcGF0Y2ggPSBtb2R1bGUuY29udGV4dC5kaXNwYXRjaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtkaXNwYXRjaF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGRpc3BhdGNoLmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlYmluZGluZyBuYW1lc3BhY2UgcGFyYW0gZm9yIG1hcFhYWCBmdW5jdGlvbiBpbiBzcGVjaWFsIHNjb3BlZCwgYW5kIHJldHVybiB0aGVtIGJ5IHNpbXBsZSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSkgeyByZXR1cm4gKHtcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSlcbn0pOyB9O1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgbWFwXG4gKiBub3JtYWxpemVNYXAoWzEsIDIsIDNdKSA9PiBbIHsga2V5OiAxLCB2YWw6IDEgfSwgeyBrZXk6IDIsIHZhbDogMiB9LCB7IGtleTogMywgdmFsOiAzIH0gXVxuICogbm9ybWFsaXplTWFwKHthOiAxLCBiOiAyLCBjOiAzfSkgPT4gWyB7IGtleTogJ2EnLCB2YWw6IDEgfSwgeyBrZXk6ICdiJywgdmFsOiAyIH0sIHsga2V5OiAnYycsIHZhbDogMyB9IF1cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBtYXBcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTWFwIChtYXApIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWFwKVxuICAgID8gbWFwLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBrZXkgfSk7IH0pXG4gICAgOiBPYmplY3Qua2V5cyhtYXApLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBtYXBba2V5XSB9KTsgfSlcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBmdW5jdGlvbiBleHBlY3QgdHdvIHBhcmFtIGNvbnRhaW5zIG5hbWVzcGFjZSBhbmQgbWFwLiBpdCB3aWxsIG5vcm1hbGl6ZSB0aGUgbmFtZXNwYWNlIGFuZCB0aGVuIHRoZSBwYXJhbSdzIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHRoZSBuZXcgbmFtZXNwYWNlIGFuZCB0aGUgbWFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lc3BhY2UgKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmFtZXNwYWNlLCBtYXApIHtcbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG1hcCA9IG5hbWVzcGFjZTtcbiAgICAgIG5hbWVzcGFjZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAobmFtZXNwYWNlLmNoYXJBdChuYW1lc3BhY2UubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuICAgICAgbmFtZXNwYWNlICs9ICcvJztcbiAgICB9XG4gICAgcmV0dXJuIGZuKG5hbWVzcGFjZSwgbWFwKVxuICB9XG59XG5cbi8qKlxuICogU2VhcmNoIGEgc3BlY2lhbCBtb2R1bGUgZnJvbSBzdG9yZSBieSBuYW1lc3BhY2UuIGlmIG1vZHVsZSBub3QgZXhpc3QsIHByaW50IGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RvcmVcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWxwZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kdWxlQnlOYW1lc3BhY2UgKHN0b3JlLCBoZWxwZXIsIG5hbWVzcGFjZSkge1xuICB2YXIgbW9kdWxlID0gc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1vZHVsZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIG1vZHVsZSBuYW1lc3BhY2Ugbm90IGZvdW5kIGluIFwiICsgaGVscGVyICsgXCIoKTogXCIgKyBuYW1lc3BhY2UpKTtcbiAgfVxuICByZXR1cm4gbW9kdWxlXG59XG5cbnZhciBpbmRleF9lc20gPSB7XG4gIFN0b3JlOiBTdG9yZSxcbiAgaW5zdGFsbDogaW5zdGFsbCxcbiAgdmVyc2lvbjogJzMuMS4xJyxcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucyxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycyxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucyxcbiAgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnM6IGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleF9lc207XG5leHBvcnQgeyBTdG9yZSwgaW5zdGFsbCwgbWFwU3RhdGUsIG1hcE11dGF0aW9ucywgbWFwR2V0dGVycywgbWFwQWN0aW9ucywgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMgfTtcbiIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHNbXCJ2dWUtc2lkZWJhci1tZW51XCJdPWUoKTp0W1widnVlLXNpZGViYXItbWVudVwiXT1lKCl9KHdpbmRvdyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt2YXIgZT17fTtmdW5jdGlvbiBpKHMpe2lmKGVbc10pcmV0dXJuIGVbc10uZXhwb3J0czt2YXIgbz1lW3NdPXtpOnMsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtzXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyxpKSxvLmw9ITAsby5leHBvcnRzfXJldHVybiBpLm09dCxpLmM9ZSxpLmQ9ZnVuY3Rpb24odCxlLHMpe2kubyh0LGUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiEwLGdldDpzfSl9LGkucj1mdW5jdGlvbih0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxpLnQ9ZnVuY3Rpb24odCxlKXtpZigxJmUmJih0PWkodCkpLDgmZSlyZXR1cm4gdDtpZig0JmUmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0JiZ0Ll9fZXNNb2R1bGUpcmV0dXJuIHQ7dmFyIHM9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihpLnIocyksT2JqZWN0LmRlZmluZVByb3BlcnR5KHMsXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6dH0pLDImZSYmXCJzdHJpbmdcIiE9dHlwZW9mIHQpZm9yKHZhciBvIGluIHQpaS5kKHMsbyxmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0uYmluZChudWxsLG8pKTtyZXR1cm4gc30saS5uPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBpLmQoZSxcImFcIixlKSxlfSxpLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LGkucD1cIi9kaXN0L1wiLGkoaS5zPTYpfShbZnVuY3Rpb24odCxlLGkpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHModCxlLGkscyxvLG4sbCxhKXt2YXIgcixjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dC5vcHRpb25zOnQ7aWYoZSYmKGMucmVuZGVyPWUsYy5zdGF0aWNSZW5kZXJGbnM9aSxjLl9jb21waWxlZD0hMCkscyYmKGMuZnVuY3Rpb25hbD0hMCksbiYmKGMuX3Njb3BlSWQ9XCJkYXRhLXYtXCIrbiksbD8ocj1mdW5jdGlvbih0KXsodD10fHx0aGlzLiR2bm9kZSYmdGhpcy4kdm5vZGUuc3NyQ29udGV4dHx8dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LiR2bm9kZSYmdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpfHxcInVuZGVmaW5lZFwiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KHQ9X19WVUVfU1NSX0NPTlRFWFRfXyksbyYmby5jYWxsKHRoaXMsdCksdCYmdC5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJnQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChsKX0sYy5fc3NyUmVnaXN0ZXI9cik6byYmKHI9YT9mdW5jdGlvbigpe28uY2FsbCh0aGlzLHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCl9Om8pLHIpaWYoYy5mdW5jdGlvbmFsKXtjLl9pbmplY3RTdHlsZXM9cjt2YXIgaD1jLnJlbmRlcjtjLnJlbmRlcj1mdW5jdGlvbih0LGUpe3JldHVybiByLmNhbGwoZSksaCh0LGUpfX1lbHNle3ZhciBtPWMuYmVmb3JlQ3JlYXRlO2MuYmVmb3JlQ3JlYXRlPW0/W10uY29uY2F0KG0scik6W3JdfXJldHVybntleHBvcnRzOnQsb3B0aW9uczpjfX1pLmQoZSxcImFcIixmdW5jdGlvbigpe3JldHVybiBzfSl9LGZ1bmN0aW9uKHQsZSxpKXtcInVzZSBzdHJpY3RcIjtpLmQoZSxcImJcIixmdW5jdGlvbigpe3JldHVybiBzfSksaS5kKGUsXCJhXCIsZnVuY3Rpb24oKXtyZXR1cm4gb30pO3ZhciBzPXtkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2FjdGl2ZTohMSxjaGlsZEFjdGl2ZTohMSxpdGVtU2hvdzohMX19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuaW5pdEFjdGl2ZVN0YXRlKCksdGhpcy5pbml0U2hvd1N0YXRlKCksdGhpcy4kcm91dGVyfHx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIixmdW5jdGlvbigpe3QuaW5pdEFjdGl2ZVN0YXRlKCl9KX0sbWV0aG9kczp7aXNMaW5rQWN0aXZlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm1hdGNoUm91dGUodC5ocmVmKXx8dGhpcy5pc0FsaWFzQWN0aXZlKHQpfSxpc0NoaWxkQWN0aXZlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIHQuc29tZShmdW5jdGlvbih0KXtyZXR1cm4gZS5pc0xpbmtBY3RpdmUodCl8fCEhdC5jaGlsZCYmZS5pc0NoaWxkQWN0aXZlKHQuY2hpbGQpfSl9LGlzQWxpYXNBY3RpdmU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztyZXR1cm4hIXQuYWxpYXMmJihBcnJheS5pc0FycmF5KHQuYWxpYXMpP3QuYWxpYXMuc29tZShmdW5jdGlvbih0KXtyZXR1cm4gZS5tYXRjaFJvdXRlKHQpfSk6dGhpcy5tYXRjaFJvdXRlKHQuYWxpYXMpKX0sbWF0Y2hSb3V0ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy4kcm91dGU/dD09PXRoaXMuJHJvdXRlLmZ1bGxQYXRoOnQ9PT13aW5kb3cubG9jYXRpb24ucGF0aG5hbWUrd2luZG93LmxvY2F0aW9uLnNlYXJjaCt3aW5kb3cubG9jYXRpb24uaGFzaH0sY2xpY2tFdmVudDpmdW5jdGlvbih0KXtpZih0aGlzLmVtaXRJdGVtQ2xpY2sodCx0aGlzLml0ZW0pLCh0aGlzLml0ZW0uaHJlZnx8dGhpcy5pdGVtLmNoaWxkJiYhdGhpcy5tb2JpbGVJdGVtKSYmIXRoaXMuaXRlbS5kaXNhYmxlZCl7aWYoIXRoaXMubW9iaWxlSXRlbSYmdGhpcy5pc0NvbGxhcHNlZCYmdGhpcy5maXJzdEl0ZW0pe3ZhciBlPXRoaXMuaXRlbS5jaGlsZDt0aGlzLiRwYXJlbnQuJGVtaXQoXCJ0b3VjaENsaWNrSXRlbVwiLGUpfXZhciBpPXRoaXMuZmlyc3RJdGVtJiZ0aGlzLnNob3dPbmVDaGlsZCYmIXRoaXMuc2hvd0NoaWxkOyF0aGlzLm1vYmlsZUl0ZW0mJnRoaXMuaXRlbS5jaGlsZD8odGhpcy5pdGVtLmhyZWZ8fHQucHJldmVudERlZmF1bHQoKSxpP3RoaXMuYWN0aXZlU2hvdz09PXRoaXMuX3VpZD90aGlzLnNldEFjdGl2ZVNob3coITEpOnRoaXMuc2V0QWN0aXZlU2hvdyghMCx0aGlzLl91aWQpOnRoaXMuaXRlbVNob3c9IXRoaXMuaXRlbVNob3cpOiF0aGlzLm1vYmlsZUl0ZW0mJmkmJnRoaXMuZW1pdEFjdGl2ZVNob3cobnVsbCl9ZWxzZSB0LnByZXZlbnREZWZhdWx0KCl9LHNldEFjdGl2ZVNob3c6ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm51bGw7dGhpcy5lbWl0QWN0aXZlU2hvdyh0P2U6bnVsbCksdGhpcy5pdGVtU2hvdz10fSxpbml0QWN0aXZlU3RhdGU6ZnVuY3Rpb24oKXt0aGlzLmFjdGl2ZT0hKCF0aGlzLml0ZW18fCF0aGlzLml0ZW0uaHJlZikmJnRoaXMuaXNMaW5rQWN0aXZlKHRoaXMuaXRlbSksdGhpcy5jaGlsZEFjdGl2ZT0hKCF0aGlzLml0ZW18fCF0aGlzLml0ZW0uY2hpbGQpJiZ0aGlzLmlzQ2hpbGRBY3RpdmUodGhpcy5pdGVtLmNoaWxkKX0saW5pdFNob3dTdGF0ZTpmdW5jdGlvbigpe3RoaXMuaXRlbSYmdGhpcy5pdGVtLmNoaWxkJiYodGhpcy5pdGVtU2hvdz10aGlzLmlzTGlua0FjdGl2ZSh0aGlzLml0ZW0pfHx0aGlzLmlzQ2hpbGRBY3RpdmUodGhpcy5pdGVtLmNoaWxkKSx0aGlzLnNob3dPbmVDaGlsZCYmIXRoaXMuc2hvd0NoaWxkJiZ0aGlzLmZpcnN0SXRlbSYmKHRoaXMuYWN0aXZlfHx0aGlzLmNoaWxkQWN0aXZlKSYmdGhpcy5lbWl0QWN0aXZlU2hvdyh0aGlzLl91aWQpKX19LGNvbXB1dGVkOntpc1JvdXRlckxpbms6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kcm91dGVyJiZ0aGlzLml0ZW0mJnZvaWQgMCE9PXRoaXMuaXRlbS5ocmVmfSxzaG93OmZ1bmN0aW9uKCl7cmV0dXJuISghdGhpcy5pdGVtfHwhdGhpcy5pdGVtLmNoaWxkKSYmKHRoaXMuc2hvd0NoaWxkP3RoaXMuc2hvd0NoaWxkOnRoaXMuZmlyc3RJdGVtJiZ0aGlzLnNob3dPbmVDaGlsZD90aGlzLl91aWQ9PT10aGlzLmFjdGl2ZVNob3c6ISF0aGlzLm1vYmlsZUl0ZW18fHRoaXMuaXRlbVNob3cpfX0sd2F0Y2g6eyRyb3V0ZTpmdW5jdGlvbigpe3RoaXMuaW5pdEFjdGl2ZVN0YXRlKCl9fSxpbmplY3Q6W1wiZW1pdEFjdGl2ZVNob3dcIixcImVtaXRJdGVtQ2xpY2tcIl19LG89e21ldGhvZHM6e2V4cGFuZEVudGVyOmZ1bmN0aW9uKHQpe3Quc3R5bGUuaGVpZ2h0PXQuc2Nyb2xsSGVpZ2h0K1wicHhcIn0sZXhwYW5kQWZ0ZXJFbnRlcjpmdW5jdGlvbih0KXt0LnN0eWxlLmhlaWdodD1cImF1dG9cIn0sZXhwYW5kQmVmb3JlTGVhdmU6ZnVuY3Rpb24odCl7dGhpcy5pc0NvbGxhcHNlZD90LnN0eWxlLmRpc3BsYXk9XCJub25lXCI6dC5zdHlsZS5oZWlnaHQ9dC5zY3JvbGxIZWlnaHQrXCJweFwifX19fSxmdW5jdGlvbih0LGUsaSl7fSxmdW5jdGlvbih0LGUsaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHM9e3Byb3BzOntpdGVtczp7dHlwZTpBcnJheSxyZXF1aXJlZDohMH0sc2hvd0NoaWxkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scnRsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LGJlZm9yZUNyZWF0ZTpmdW5jdGlvbigpe3RoaXMuJG9wdGlvbnMuY29tcG9uZW50cy5JdGVtPWkoNCkuZGVmYXVsdH19LG89aSgwKSxuPU9iamVjdChvLmEpKHMsZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxpPXQuX3NlbGYuX2N8fGU7cmV0dXJuIGkoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2c20tbGlzdFwifSx0Ll9sKHQuaXRlbXMsZnVuY3Rpb24oZSxzKXtyZXR1cm4gaShcIml0ZW1cIix7a2V5OnMsYXR0cnM6e2l0ZW06ZSxcInNob3ctY2hpbGRcIjp0LnNob3dDaGlsZCxydGw6dC5ydGx9fSxbdC5fdChcImRyb3Bkb3duLWljb25cIixudWxsLHtzbG90OlwiZHJvcGRvd24taWNvblwifSldLDIpfSksMSl9LFtdLCExLG51bGwsbnVsbCxudWxsKTtuLm9wdGlvbnMuX19maWxlPVwiTGlzdEl0ZW0udnVlXCI7ZS5hPW4uZXhwb3J0c30sZnVuY3Rpb24odCxlLGkpe1widXNlIHN0cmljdFwiO2kucihlKTt2YXIgcz1pKDMpLG89aSgxKSxuPXtjb21wb25lbnRzOntMaXN0SXRlbTpzLmF9LG1peGluczpbby5iLG8uYV0scHJvcHM6e2l0ZW06e3R5cGU6T2JqZWN0LHJlcXVpcmVkOiEwfSxmaXJzdEl0ZW06e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxpc0NvbGxhcHNlZDp7dHlwZTpCb29sZWFufSxtb2JpbGVJdGVtOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sYWN0aXZlU2hvdzp7dHlwZTpOdW1iZXIsZGVmYXVsdDpudWxsfSxzaG93Q2hpbGQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxzaG93T25lQ2hpbGQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxydGw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sbWV0aG9kczp7bW91c2VFbnRlcjpmdW5jdGlvbih0KXt0aGlzLmlzQ29sbGFwc2VkJiZ0aGlzLmZpcnN0SXRlbSYmIXRoaXMubW9iaWxlSXRlbSYmIXRoaXMuaXRlbS5kaXNhYmxlZCYmdGhpcy4kcGFyZW50LiRlbWl0KFwibW91c2VFbnRlckl0ZW1cIix7aXRlbTp0aGlzLml0ZW0scG9zOnQuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AtdGhpcy4kcGFyZW50LiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AsaGVpZ2h0OnRoaXMuJGVsLm9mZnNldEhlaWdodH0pfX19LGw9aSgwKSxhPU9iamVjdChsLmEpKG4sZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxpPXQuX3NlbGYuX2N8fGU7cmV0dXJuIGkoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2c20taXRlbVwiLGNsYXNzOlt7XCJmaXJzdC1pdGVtXCI6dC5maXJzdEl0ZW19LHtcIm1vYmlsZS1pdGVtXCI6dC5tb2JpbGVJdGVtfSx7XCJvcGVuLWl0ZW1cIjp0LnNob3d9LHtcImFjdGl2ZS1pdGVtXCI6dC5hY3RpdmV9LHtcInBhcmVudC1hY3RpdmUtaXRlbVwiOnQuY2hpbGRBY3RpdmV9XSxvbjp7bW91c2VlbnRlcjpmdW5jdGlvbihlKXt0Lm1vdXNlRW50ZXIoZSl9fX0sW3QuaXNSb3V0ZXJMaW5rP1tpKFwicm91dGVyLWxpbmtcIix0Ll9iKHtzdGF0aWNDbGFzczpcInZzbS1saW5rXCIsY2xhc3M6dC5pdGVtLmNsYXNzLGF0dHJzOnt0bzp0Lml0ZW0uaHJlZixkaXNhYmxlZDp0Lml0ZW0uZGlzYWJsZWQsdGFiaW5kZXg6dC5pdGVtLmRpc2FibGVkPy0xOlwiXCJ9LG5hdGl2ZU9uOntjbGljazpmdW5jdGlvbihlKXtyZXR1cm4gdC5jbGlja0V2ZW50KGUpfX19LFwicm91dGVyLWxpbmtcIix0Lml0ZW0uYXR0cmlidXRlcywhMSksW3QuaXRlbS5pY29uP1tcInN0cmluZ1wiPT10eXBlb2YgdC5pdGVtLmljb258fHQuaXRlbS5pY29uIGluc3RhbmNlb2YgU3RyaW5nP2koXCJpXCIse3N0YXRpY0NsYXNzOlwidnNtLWljb25cIixjbGFzczp0Lml0ZW0uaWNvbn0pOmkodC5pdGVtLmljb24uZWxlbWVudD90Lml0ZW0uaWNvbi5lbGVtZW50OlwiaVwiLHQuX2Ioe3RhZzpcImNvbXBvbmVudFwiLHN0YXRpY0NsYXNzOlwidnNtLWljb25cIixjbGFzczp0Lml0ZW0uaWNvbi5jbGFzc30sXCJjb21wb25lbnRcIix0Lml0ZW0uaWNvbi5hdHRyaWJ1dGVzLCExKSxbdC5fdihcIlxcbiAgICAgICAgICBcIit0Ll9zKHQuaXRlbS5pY29uLnRleHQpK1wiXFxuICAgICAgICBcIildKV06dC5fZSgpLHQuX3YoXCIgXCIpLCF0LmlzQ29sbGFwc2VkfHx0Lm1vYmlsZUl0ZW0/W3QuaXRlbS5iYWRnZT9pKHQuaXRlbS5iYWRnZS5lbGVtZW50P3QuaXRlbS5iYWRnZS5lbGVtZW50Olwic3BhblwiLHQuX2Ioe3RhZzpcImNvbXBvbmVudFwiLHN0YXRpY0NsYXNzOlwidnNtLWJhZGdlXCIsY2xhc3M6dC5pdGVtLmJhZGdlLmNsYXNzLHN0eWxlOlt0LnJ0bD90Lml0ZW0uY2hpbGQ/e1wibWFyZ2luLWxlZnRcIjpcIjMwcHhcIn06XCJcIjp0Lml0ZW0uY2hpbGQ/e1wibWFyZ2luLXJpZ2h0XCI6XCIzMHB4XCJ9OlwiXCJdfSxcImNvbXBvbmVudFwiLHQuaXRlbS5iYWRnZS5hdHRyaWJ1dGVzLCExKSxbdC5fdihcIlxcbiAgICAgICAgICBcIit0Ll9zKHQuaXRlbS5iYWRnZS50ZXh0KStcIlxcbiAgICAgICAgXCIpXSk6dC5fZSgpLHQuX3YoXCIgXCIpLGkoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwidnNtLXRpdGxlXCJ9LFt0Ll92KHQuX3ModC5pdGVtLnRpdGxlKSldKSx0Ll92KFwiIFwiKSx0Lml0ZW0uY2hpbGQ/aShcImRpdlwiLHtzdGF0aWNDbGFzczpcInZzbS1hcnJvd1wiLGNsYXNzOlt7XCJvcGVuLWFycm93XCI6dC5zaG93fSx7XCJzbG90LWljb25cIjp0LiRzbG90c1tcImRyb3Bkb3duLWljb25cIl19XX0sW3QuX3QoXCJkcm9wZG93bi1pY29uXCIpXSwyKTp0Ll9lKCldOnQuX2UoKV0sMildOltpKFwiYVwiLHQuX2Ioe3N0YXRpY0NsYXNzOlwidnNtLWxpbmtcIixjbGFzczp0Lml0ZW0uY2xhc3MsYXR0cnM6e2hyZWY6dC5pdGVtLmhyZWY/dC5pdGVtLmhyZWY6XCIjXCIsZGlzYWJsZWQ6dC5pdGVtLmRpc2FibGVkLHRhYmluZGV4OnQuaXRlbS5kaXNhYmxlZD8tMTpcIlwifSxvbjp7Y2xpY2s6dC5jbGlja0V2ZW50fX0sXCJhXCIsdC5pdGVtLmF0dHJpYnV0ZXMsITEpLFt0Lml0ZW0uaWNvbj9bXCJzdHJpbmdcIj09dHlwZW9mIHQuaXRlbS5pY29ufHx0Lml0ZW0uaWNvbiBpbnN0YW5jZW9mIFN0cmluZz9pKFwiaVwiLHtzdGF0aWNDbGFzczpcInZzbS1pY29uXCIsY2xhc3M6dC5pdGVtLmljb259KTppKHQuaXRlbS5pY29uLmVsZW1lbnQ/dC5pdGVtLmljb24uZWxlbWVudDpcImlcIix0Ll9iKHt0YWc6XCJjb21wb25lbnRcIixzdGF0aWNDbGFzczpcInZzbS1pY29uXCIsY2xhc3M6dC5pdGVtLmljb24uY2xhc3N9LFwiY29tcG9uZW50XCIsdC5pdGVtLmljb24uYXR0cmlidXRlcywhMSksW3QuX3YoXCJcXG4gICAgICAgICAgXCIrdC5fcyh0Lml0ZW0uaWNvbi50ZXh0KStcIlxcbiAgICAgICAgXCIpXSldOnQuX2UoKSx0Ll92KFwiIFwiKSwhdC5pc0NvbGxhcHNlZHx8dC5tb2JpbGVJdGVtP1t0Lml0ZW0uYmFkZ2U/aSh0Lml0ZW0uYmFkZ2UuZWxlbWVudD90Lml0ZW0uYmFkZ2UuZWxlbWVudDpcInNwYW5cIix0Ll9iKHt0YWc6XCJjb21wb25lbnRcIixzdGF0aWNDbGFzczpcInZzbS1iYWRnZVwiLGNsYXNzOnQuaXRlbS5iYWRnZS5jbGFzcyxzdHlsZTpbdC5ydGw/dC5pdGVtLmNoaWxkP3tcIm1hcmdpbi1sZWZ0XCI6XCIzMHB4XCJ9OlwiXCI6dC5pdGVtLmNoaWxkP3tcIm1hcmdpbi1yaWdodFwiOlwiMzBweFwifTpcIlwiXX0sXCJjb21wb25lbnRcIix0Lml0ZW0uYmFkZ2UuYXR0cmlidXRlcywhMSksW3QuX3YodC5fcyh0Lml0ZW0uYmFkZ2UudGV4dCkpXSk6dC5fZSgpLHQuX3YoXCIgXCIpLGkoXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwidnNtLXRpdGxlXCJ9LFt0Ll92KHQuX3ModC5pdGVtLnRpdGxlKSldKSx0Ll92KFwiIFwiKSx0Lml0ZW0uY2hpbGQ/aShcImRpdlwiLHtzdGF0aWNDbGFzczpcInZzbS1hcnJvd1wiLGNsYXNzOlt7XCJvcGVuLWFycm93XCI6dC5zaG93fSx7XCJzbG90LWljb25cIjp0LiRzbG90c1tcImRyb3Bkb3duLWljb25cIl19XX0sW3QuX3QoXCJkcm9wZG93bi1pY29uXCIpXSwyKTp0Ll9lKCldOnQuX2UoKV0sMildLHQuX3YoXCIgXCIpLHQuaXRlbS5jaGlsZD9bdC5pc0NvbGxhcHNlZD90Ll9lKCk6W2koXCJ0cmFuc2l0aW9uXCIse2F0dHJzOntuYW1lOlwiZXhwYW5kXCJ9LG9uOntlbnRlcjp0LmV4cGFuZEVudGVyLGFmdGVyRW50ZXI6dC5leHBhbmRBZnRlckVudGVyLGJlZm9yZUxlYXZlOnQuZXhwYW5kQmVmb3JlTGVhdmV9fSxbdC5zaG93P2koXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2c20tZHJvcGRvd25cIn0sW2koXCJsaXN0SXRlbVwiLHthdHRyczp7aXRlbXM6dC5pdGVtLmNoaWxkLFwic2hvdy1jaGlsZFwiOnQuc2hvd0NoaWxkLHJ0bDp0LnJ0bH19LFt0Ll90KFwiZHJvcGRvd24taWNvblwiLG51bGwse3Nsb3Q6XCJkcm9wZG93bi1pY29uXCJ9KV0sMildLDEpOnQuX2UoKV0pXV06dC5fZSgpXSwyKX0sW10sITEsbnVsbCxudWxsLG51bGwpO2Eub3B0aW9ucy5fX2ZpbGU9XCJJdGVtLnZ1ZVwiO2UuZGVmYXVsdD1hLmV4cG9ydHN9LGZ1bmN0aW9uKHQsZSxpKXtcInVzZSBzdHJpY3RcIjt2YXIgcz1pKDIpO2kubihzKS5hfSxmdW5jdGlvbih0LGUsaSl7XCJ1c2Ugc3RyaWN0XCI7aS5yKGUpO3ZhciBzPWkoNCksbz1pKDMpLG49aSgxKSxsPXtuYW1lOlwiU2lkZWJhck1lbnVcIixjb21wb25lbnRzOntJdGVtOnMuZGVmYXVsdCxMaXN0SXRlbTpvLmF9LG1peGluczpbbi5hXSxwcm9wczp7bWVudTp7dHlwZTpBcnJheSxyZXF1aXJlZDohMH0sY29sbGFwc2VkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sd2lkdGg6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIzNTBweFwifSx3aWR0aENvbGxhcHNlZDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIjUwcHhcIn0sc2hvd0NoaWxkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sdGhlbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sc2hvd09uZUNoaWxkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scnRsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aXNDb2xsYXBzZWQ6dGhpcy5jb2xsYXBzZWQsbW9iaWxlSXRlbTpudWxsLG1vYmlsZUl0ZW1Qb3M6MCxtb2JpbGVJdGVtSGVpZ2h0OjAsY2xvc2VUaW1lb3V0Om51bGwsYWN0aXZlU2hvdzpudWxsLHNpZGViYXJIZWlnaHQ6MH19LGNvbXB1dGVkOntzaWRlYmFyV2lkdGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0NvbGxhcHNlZD90aGlzLndpZHRoQ29sbGFwc2VkOnRoaXMud2lkdGh9fSx3YXRjaDp7Y29sbGFwc2VkOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy5pc0NvbGxhcHNlZD10LHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7ZS5pbml0U2lkZWJhckhlaWdodCgpfSl9fSxjcmVhdGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRvbihcIm1vdXNlRW50ZXJJdGVtXCIsZnVuY3Rpb24oZSl7dC5tb2JpbGVJdGVtPW51bGwsdC4kbmV4dFRpY2soZnVuY3Rpb24oKXt0Lm1vYmlsZUl0ZW09ZS5pdGVtLHQubW9iaWxlSXRlbVBvcz1lLnBvcyx0Lm1vYmlsZUl0ZW1IZWlnaHQ9ZS5oZWlnaHR9KX0pLHRoaXMuJG9uKFwidG91Y2hDbGlja0l0ZW1cIixmdW5jdGlvbihlKXtlP2NsZWFyVGltZW91dCh0LmNsb3NlVGltZW91dCk6KHQuY2xvc2VUaW1lb3V0JiZjbGVhclRpbWVvdXQodC5jbG9zZVRpbWVvdXQpLHQuY2xvc2VUaW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXt0Lm1vdXNlTGVhdmUoKX0sNjAwKSl9KX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuaW5pdFNpZGViYXJIZWlnaHQoKX0sbWV0aG9kczp7bW91c2VMZWF2ZTpmdW5jdGlvbigpe3RoaXMubW9iaWxlSXRlbT1udWxsfSx0b2dnbGVDb2xsYXBzZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5pc0NvbGxhcHNlZD0hdGhpcy5pc0NvbGxhcHNlZCx0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3QuaW5pdFNpZGViYXJIZWlnaHQoKX0pLHRoaXMuJGVtaXQoXCJjb2xsYXBzZVwiLHRoaXMuaXNDb2xsYXBzZWQpfSxvbkFjdGl2ZVNob3c6ZnVuY3Rpb24odCl7dGhpcy5hY3RpdmVTaG93PXR9LG9uSXRlbUNsaWNrOmZ1bmN0aW9uKHQsZSl7dGhpcy4kZW1pdChcIml0ZW1DbGlja1wiLHQsZSksdGhpcy4kZW1pdChcIml0ZW0tY2xpY2tcIix0LGUpfSxpbml0U2lkZWJhckhlaWdodDpmdW5jdGlvbigpe3RoaXMuc2lkZWJhckhlaWdodD10aGlzLiRlbC5vZmZzZXRIZWlnaHR9fSxwcm92aWRlOmZ1bmN0aW9uKCl7cmV0dXJue2VtaXRBY3RpdmVTaG93OnRoaXMub25BY3RpdmVTaG93LGVtaXRJdGVtQ2xpY2s6dGhpcy5vbkl0ZW1DbGlja319fSxhPShpKDUpLGkoMCkpLHI9T2JqZWN0KGEuYSkobCxmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LGk9dC5fc2VsZi5fY3x8ZTtyZXR1cm4gaShcImRpdlwiLHtzdGF0aWNDbGFzczpcInYtc2lkZWJhci1tZW51XCIsY2xhc3M6W3QuaXNDb2xsYXBzZWQ/XCJ2c20tY29sbGFwc2VkXCI6XCJ2c20tZGVmYXVsdFwiLHQudGhlbWUsdC5ydGw/XCJydGxcIjpcIlwiXSxzdHlsZTp7d2lkdGg6dC5zaWRlYmFyV2lkdGh9LG9uOnttb3VzZWxlYXZlOnQubW91c2VMZWF2ZX19LFt0Ll90KFwiaGVhZGVyXCIpLHQuX3YoXCIgXCIpLGkoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2c20tbGlzdFwifSxbdC5fbCh0Lm1lbnUsZnVuY3Rpb24oZSxzKXtyZXR1cm5bZS5oZWFkZXI/WyFlLnZpc2libGVPbkNvbGxhcHNlJiZ0LmlzQ29sbGFwc2VkfHwhZS5jb21wb25lbnQ/ZS52aXNpYmxlT25Db2xsYXBzZXx8IXQuaXNDb2xsYXBzZWQ/W2koXCJkaXZcIix0Ll9iKHtrZXk6cyxzdGF0aWNDbGFzczpcInZzbS1oZWFkZXJcIixjbGFzczplLmNsYXNzfSxcImRpdlwiLGUuYXR0cmlidXRlcywhMSksW3QuX3YoXCJcXG4gICAgICAgICAgICBcIit0Ll9zKGUudGl0bGUpK1wiXFxuICAgICAgICAgIFwiKV0pXTp0Ll9lKCk6W2koZS5jb21wb25lbnQse2tleTpzLHRhZzpcImNvbXBvbmVudFwifSldXTppKFwiaXRlbVwiLHtrZXk6cyxhdHRyczp7aXRlbTplLFwiZmlyc3QtaXRlbVwiOiEwLFwiaXMtY29sbGFwc2VkXCI6dC5pc0NvbGxhcHNlZCxcImFjdGl2ZS1zaG93XCI6dC5hY3RpdmVTaG93LFwic2hvdy1vbmUtY2hpbGRcIjp0LnNob3dPbmVDaGlsZCxcInNob3ctY2hpbGRcIjp0LnNob3dDaGlsZCxydGw6dC5ydGx9fSxbdC5fdChcImRyb3Bkb3duLWljb25cIixudWxsLHtzbG90OlwiZHJvcGRvd24taWNvblwifSldLDIpXX0pXSwyKSx0Ll92KFwiIFwiKSx0LmlzQ29sbGFwc2VkP2koXCJkaXZcIix7c3R5bGU6W3twb3NpdGlvbjpcImFic29sdXRlXCJ9LHt0b3A6dC5tb2JpbGVJdGVtUG9zK1wicHhcIn0sdC5ydGw/e3JpZ2h0OlwiMHB4XCJ9OntsZWZ0OlwiMHB4XCJ9LHtcInotaW5kZXhcIjozMH0se3dpZHRoOnQud2lkdGh9XX0sW3QubW9iaWxlSXRlbT9pKFwiaXRlbVwiLHthdHRyczp7aXRlbTp0Lm1vYmlsZUl0ZW0sXCJtb2JpbGUtaXRlbVwiOiEwLFwiaXMtY29sbGFwc2VkXCI6dC5pc0NvbGxhcHNlZCxcInNob3ctY2hpbGRcIjp0LnNob3dDaGlsZCxydGw6dC5ydGx9fSxbdC5fdChcImRyb3Bkb3duLWljb25cIixudWxsLHtzbG90OlwiZHJvcGRvd24taWNvblwifSldLDIpOnQuX2UoKSx0Ll92KFwiIFwiKSxpKFwidHJhbnNpdGlvblwiLHthdHRyczp7bmFtZTpcInNsaWRlLWFuaW1hdGlvblwifX0sW3QubW9iaWxlSXRlbT9pKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwidnNtLW1vYmlsZS1iZ1wiLHN0eWxlOlt7cG9zaXRpb246XCJhYnNvbHV0ZVwifSx7bGVmdDpcIjBweFwifSx7cmlnaHQ6XCIwcHhcIn0se3RvcDpcIjBweFwifSx7aGVpZ2h0OnQubW9iaWxlSXRlbUhlaWdodCtcInB4XCJ9XX0pOnQuX2UoKV0pLHQuX3YoXCIgXCIpLGkoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJ2c20tZHJvcGRvd25cIixzdHlsZTpbe3Bvc2l0aW9uOlwiYWJzb2x1dGVcIn0se3RvcDp0Lm1vYmlsZUl0ZW1IZWlnaHQrXCJweFwifSx7bGVmdDp0LnJ0bD9cIjBweFwiOnQuc2lkZWJhcldpZHRofSx7cmlnaHQ6dC5ydGw/dC5zaWRlYmFyV2lkdGg6XCIwcHhcIn0se1wibWF4LWhlaWdodFwiOlwiY2FsYyhcIit0LnNpZGViYXJIZWlnaHQrXCJweCAtIFwiKyh0Lm1vYmlsZUl0ZW1Qb3MrdC5tb2JpbGVJdGVtSGVpZ2h0KStcInB4KVwifSx7XCJvdmVyZmxvdy15XCI6XCJhdXRvXCJ9XX0sW2koXCJ0cmFuc2l0aW9uXCIse2F0dHJzOntuYW1lOlwiZXhwYW5kXCJ9LG9uOntlbnRlcjp0LmV4cGFuZEVudGVyLGFmdGVyRW50ZXI6dC5leHBhbmRBZnRlckVudGVyLGJlZm9yZUxlYXZlOnQuZXhwYW5kQmVmb3JlTGVhdmV9fSxbdC5tb2JpbGVJdGVtJiZ0Lm1vYmlsZUl0ZW0uY2hpbGQ/aShcImxpc3RJdGVtXCIse2F0dHJzOntpdGVtczp0Lm1vYmlsZUl0ZW0uY2hpbGQsXCJzaG93LWNoaWxkXCI6dC5zaG93Q2hpbGQscnRsOnQucnRsfX0sW3QuX3QoXCJkcm9wZG93bi1pY29uXCIsbnVsbCx7c2xvdDpcImRyb3Bkb3duLWljb25cIn0pXSwyKTp0Ll9lKCldLDEpXSwxKV0sMSk6dC5fZSgpLHQuX3YoXCIgXCIpLHQuX3QoXCJmb290ZXJcIiksdC5fdihcIiBcIiksaShcImJ1dHRvblwiLHtzdGF0aWNDbGFzczpcImNvbGxhcHNlLWJ0blwiLGNsYXNzOntcInNsb3QtaWNvblwiOnQuJHNsb3RzW1wiY29sbGFwc2UtaWNvblwiXX0sb246e2NsaWNrOnQudG9nZ2xlQ29sbGFwc2V9fSxbdC5fdChcImNvbGxhcHNlLWljb25cIildLDIpXSwyKX0sW10sITEsbnVsbCxudWxsLG51bGwpO3Iub3B0aW9ucy5fX2ZpbGU9XCJTaWRlYmFyTWVudS52dWVcIjt2YXIgYz1yLmV4cG9ydHM7aS5kKGUsXCJTaWRlYmFyTWVudVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGN9KTtlLmRlZmF1bHQ9e2luc3RhbGw6ZnVuY3Rpb24odCl7dC5jb21wb25lbnQoXCJzaWRlYmFyLW1lbnVcIixjKX19fV0pfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12dWUtc2lkZWJhci1tZW51LmpzLm1hcCIsInZhciBjb25maWcgPSB7XG4gIGRlZmF1bHRDb250YWluZXJFbGVtZW50OiBudWxsLFxuICBkZWZhdWx0SWNvblBhY2s6ICdtZGknLFxuICBkZWZhdWx0SWNvbkNvbXBvbmVudDogbnVsbCxcbiAgZGVmYXVsdERpYWxvZ0NvbmZpcm1UZXh0OiBudWxsLFxuICBkZWZhdWx0RGlhbG9nQ2FuY2VsVGV4dDogbnVsbCxcbiAgZGVmYXVsdFNuYWNrYmFyRHVyYXRpb246IDM1MDAsXG4gIGRlZmF1bHRTbmFja2JhclBvc2l0aW9uOiBudWxsLFxuICBkZWZhdWx0VG9hc3REdXJhdGlvbjogMjAwMCxcbiAgZGVmYXVsdFRvYXN0UG9zaXRpb246IG51bGwsXG4gIGRlZmF1bHROb3RpZmljYXRpb25EdXJhdGlvbjogMjAwMCxcbiAgZGVmYXVsdE5vdGlmaWNhdGlvblBvc2l0aW9uOiBudWxsLFxuICBkZWZhdWx0VG9vbHRpcFR5cGU6ICdpcy1wcmltYXJ5JyxcbiAgZGVmYXVsdFRvb2x0aXBBbmltYXRlZDogZmFsc2UsXG4gIGRlZmF1bHRUb29sdGlwRGVsYXk6IDAsXG4gIGRlZmF1bHRJbnB1dEF1dG9jb21wbGV0ZTogJ29uJyxcbiAgZGVmYXVsdERhdGVGb3JtYXR0ZXI6IG51bGwsXG4gIGRlZmF1bHREYXRlUGFyc2VyOiBudWxsLFxuICBkZWZhdWx0RGF0ZUNyZWF0b3I6IG51bGwsXG4gIGRlZmF1bHREYXlOYW1lczogbnVsbCxcbiAgZGVmYXVsdE1vbnRoTmFtZXM6IG51bGwsXG4gIGRlZmF1bHRGaXJzdERheU9mV2VlazogbnVsbCxcbiAgZGVmYXVsdFVuc2VsZWN0YWJsZURheXNPZldlZWs6IG51bGwsXG4gIGRlZmF1bHRUaW1lRm9ybWF0dGVyOiBudWxsLFxuICBkZWZhdWx0VGltZVBhcnNlcjogbnVsbCxcbiAgZGVmYXVsdE1vZGFsQ2FuQ2FuY2VsOiBbJ2VzY2FwZScsICd4JywgJ291dHNpZGUnLCAnYnV0dG9uJ10sXG4gIGRlZmF1bHRNb2RhbFNjcm9sbDogbnVsbCxcbiAgZGVmYXVsdERhdGVwaWNrZXJNb2JpbGVOYXRpdmU6IHRydWUsXG4gIGRlZmF1bHRUaW1lcGlja2VyTW9iaWxlTmF0aXZlOiB0cnVlLFxuICBkZWZhdWx0Tm90aWNlUXVldWU6IHRydWUsXG4gIGRlZmF1bHRJbnB1dEhhc0NvdW50ZXI6IHRydWUsXG4gIGRlZmF1bHRUYWdpbnB1dEhhc0NvdW50ZXI6IHRydWUsXG4gIGRlZmF1bHRVc2VIdG1sNVZhbGlkYXRpb246IHRydWUsXG4gIGRlZmF1bHREcm9wZG93bk1vYmlsZU1vZGFsOiB0cnVlLFxuICBkZWZhdWx0RmllbGRMYWJlbFBvc2l0aW9uOiBudWxsLFxuICBkZWZhdWx0RGF0ZXBpY2tlclllYXJzUmFuZ2U6IFstMTAwLCAzXSxcbiAgZGVmYXVsdERhdGVwaWNrZXJOZWFyYnlNb250aERheXM6IHRydWUsXG4gIGRlZmF1bHREYXRlcGlja2VyTmVhcmJ5U2VsZWN0YWJsZU1vbnRoRGF5czogZmFsc2UsXG4gIGRlZmF1bHREYXRlcGlja2VyU2hvd1dlZWtOdW1iZXI6IGZhbHNlXG59O1xudmFyIGNvbmZpZyQxID0gY29uZmlnO1xudmFyIHNldE9wdGlvbnMgPSBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgY29uZmlnID0gb3B0aW9ucztcbn07XG5cbmV4cG9ydCB7IGNvbmZpZyQxIGFzIGMsIHNldE9wdGlvbnMgYXMgcyB9O1xuIiwiZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50KHRlbXBsYXRlLCBzdHlsZSwgc2NyaXB0LCBzY29wZUlkLCBpc0Z1bmN0aW9uYWxUZW1wbGF0ZSwgbW9kdWxlSWRlbnRpZmllclxuLyogc2VydmVyIG9ubHkgKi9cbiwgc2hhZG93TW9kZSwgY3JlYXRlSW5qZWN0b3IsIGNyZWF0ZUluamVjdG9yU1NSLCBjcmVhdGVJbmplY3RvclNoYWRvdykge1xuICBpZiAodHlwZW9mIHNoYWRvd01vZGUgIT09ICdib29sZWFuJykge1xuICAgIGNyZWF0ZUluamVjdG9yU1NSID0gY3JlYXRlSW5qZWN0b3I7XG4gICAgY3JlYXRlSW5qZWN0b3IgPSBzaGFkb3dNb2RlO1xuICAgIHNoYWRvd01vZGUgPSBmYWxzZTtcbiAgfSAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wLlxuXG5cbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0ID09PSAnZnVuY3Rpb24nID8gc2NyaXB0Lm9wdGlvbnMgOiBzY3JpcHQ7IC8vIHJlbmRlciBmdW5jdGlvbnNcblxuICBpZiAodGVtcGxhdGUgJiYgdGVtcGxhdGUucmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSB0ZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSB0ZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlOyAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG5cbiAgICBpZiAoaXNGdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWU7XG4gICAgfVxuICB9IC8vIHNjb3BlZElkXG5cblxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkO1xuICB9XG5cbiAgdmFyIGhvb2s7XG5cbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHtcbiAgICAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gaG9vayhjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID0gY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0OyAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcblxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfXztcbiAgICAgIH0gLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcblxuXG4gICAgICBpZiAoc3R5bGUpIHtcbiAgICAgICAgc3R5bGUuY2FsbCh0aGlzLCBjcmVhdGVJbmplY3RvclNTUihjb250ZXh0KSk7XG4gICAgICB9IC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJlbmNlXG5cblxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpO1xuICAgICAgfVxuICAgIH07IC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcblxuXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rO1xuICB9IGVsc2UgaWYgKHN0eWxlKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGUgPyBmdW5jdGlvbiAoKSB7XG4gICAgICBzdHlsZS5jYWxsKHRoaXMsIGNyZWF0ZUluamVjdG9yU2hhZG93KHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkpO1xuICAgIH0gOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgc3R5bGUuY2FsbCh0aGlzLCBjcmVhdGVJbmplY3Rvcihjb250ZXh0KSk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcblxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24oaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dCk7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZTtcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spIDogW2hvb2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzY3JpcHQ7XG59XG5cbnZhciBub3JtYWxpemVDb21wb25lbnRfMSA9IG5vcm1hbGl6ZUNvbXBvbmVudDtcblxudmFyIHVzZSA9IGZ1bmN0aW9uIHVzZShwbHVnaW4pIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WdWUpIHtcbiAgICB3aW5kb3cuVnVlLnVzZShwbHVnaW4pO1xuICB9XG59O1xudmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBjb21wb25lbnQpIHtcbiAgVnVlLmNvbXBvbmVudChjb21wb25lbnQubmFtZSwgY29tcG9uZW50KTtcbn07XG52YXIgcmVnaXN0ZXJDb21wb25lbnRQcm9ncmFtbWF0aWMgPSBmdW5jdGlvbiByZWdpc3RlckNvbXBvbmVudFByb2dyYW1tYXRpYyhWdWUsIHByb3BlcnR5LCBjb21wb25lbnQpIHtcbiAgaWYgKCFWdWUucHJvdG90eXBlLiRidWVmeSkgVnVlLnByb3RvdHlwZS4kYnVlZnkgPSB7fTtcbiAgVnVlLnByb3RvdHlwZS4kYnVlZnlbcHJvcGVydHldID0gY29tcG9uZW50O1xufTtcblxuZXhwb3J0IHsgbm9ybWFsaXplQ29tcG9uZW50XzEgYXMgXywgcmVnaXN0ZXJDb21wb25lbnRQcm9ncmFtbWF0aWMgYXMgYSwgcmVnaXN0ZXJDb21wb25lbnQgYXMgciwgdXNlIGFzIHUgfTtcbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbmV4cG9ydCB7IF9kZWZpbmVQcm9wZXJ0eSBhcyBfLCBfdHlwZW9mIGFzIGEsIF90b0NvbnN1bWFibGVBcnJheSBhcyBiIH07XG4iLCIvKipcclxuICogR2V0IHZhbHVlIG9mIGFuIG9iamVjdCBwcm9wZXJ0eS9wYXRoIGV2ZW4gaWYgaXQncyBuZXN0ZWRcclxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZUJ5UGF0aChvYmosIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gcGF0aC5zcGxpdCgnLicpLnJlZHVjZShmdW5jdGlvbiAobywgaSkge1xuICAgIHJldHVybiBvW2ldO1xuICB9LCBvYmopO1xuICByZXR1cm4gdmFsdWU7XG59XG4vKipcclxuICogRXh0ZW5zaW9uIG9mIGluZGV4T2YgbWV0aG9kIGJ5IGVxdWFsaXR5IGZ1bmN0aW9uIGlmIHNwZWNpZmllZFxyXG4gKi9cblxuZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgb2JqLCBmbikge1xuICBpZiAoIWFycmF5KSByZXR1cm4gLTE7XG4gIGlmICghZm4gfHwgdHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gYXJyYXkuaW5kZXhPZihvYmopO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZm4oYXJyYXlbaV0sIG9iaikpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cbi8qKlxyXG4gKiBNb2JpbGUgZGV0ZWN0aW9uXHJcbiAqIGh0dHBzOi8vd3d3LmFiZWF1dGlmdWxzaXRlLm5ldC9kZXRlY3RpbmctbW9iaWxlLWRldmljZXMtd2l0aC1qYXZhc2NyaXB0XHJcbiAqL1xuXG52YXIgaXNNb2JpbGUgPSB7XG4gIEFuZHJvaWQ6IGZ1bmN0aW9uIEFuZHJvaWQoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9BbmRyb2lkL2kpO1xuICB9LFxuICBCbGFja0JlcnJ5OiBmdW5jdGlvbiBCbGFja0JlcnJ5KCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQmxhY2tCZXJyeS9pKTtcbiAgfSxcbiAgaU9TOiBmdW5jdGlvbiBpT1MoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUGhvbmV8aVBhZHxpUG9kL2kpO1xuICB9LFxuICBPcGVyYTogZnVuY3Rpb24gT3BlcmEoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9PcGVyYSBNaW5pL2kpO1xuICB9LFxuICBXaW5kb3dzOiBmdW5jdGlvbiBXaW5kb3dzKCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvSUVNb2JpbGUvaSk7XG4gIH0sXG4gIGFueTogZnVuY3Rpb24gYW55KCkge1xuICAgIHJldHVybiBpc01vYmlsZS5BbmRyb2lkKCkgfHwgaXNNb2JpbGUuQmxhY2tCZXJyeSgpIHx8IGlzTW9iaWxlLmlPUygpIHx8IGlzTW9iaWxlLk9wZXJhKCkgfHwgaXNNb2JpbGUuV2luZG93cygpO1xuICB9XG59O1xuZnVuY3Rpb24gcmVtb3ZlRWxlbWVudChlbCkge1xuICBpZiAodHlwZW9mIGVsLnJlbW92ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbC5yZW1vdmUoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZWwucGFyZW50Tm9kZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfVxufVxuXG5leHBvcnQgeyBpbmRleE9mIGFzIGEsIGdldFZhbHVlQnlQYXRoIGFzIGcsIGlzTW9iaWxlIGFzIGksIHJlbW92ZUVsZW1lbnQgYXMgciB9O1xuIiwiaW1wb3J0IHsgYyBhcyBjb25maWcgfSBmcm9tICcuL2NodW5rLTllMzIwN2NjLmpzJztcblxudmFyIEZvcm1FbGVtZW50TWl4aW4gPSB7XG4gIHByb3BzOiB7XG4gICAgc2l6ZTogU3RyaW5nLFxuICAgIGV4cGFuZGVkOiBCb29sZWFuLFxuICAgIGxvYWRpbmc6IEJvb2xlYW4sXG4gICAgcm91bmRlZDogQm9vbGVhbixcbiAgICBpY29uOiBTdHJpbmcsXG4gICAgaWNvblBhY2s6IFN0cmluZyxcbiAgICAvLyBOYXRpdmUgb3B0aW9ucyB0byB1c2UgaW4gSFRNTDUgdmFsaWRhdGlvblxuICAgIGF1dG9jb21wbGV0ZTogU3RyaW5nLFxuICAgIG1heGxlbmd0aDogW051bWJlciwgU3RyaW5nXSxcbiAgICB1c2VIdG1sNVZhbGlkYXRpb246IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kZWZhdWx0VXNlSHRtbDVWYWxpZGF0aW9uO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGlvbk1lc3NhZ2U6IFN0cmluZ1xuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc1ZhbGlkOiB0cnVlLFxuICAgICAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgICAgIG5ld0ljb25QYWNrOiB0aGlzLmljb25QYWNrIHx8IGNvbmZpZy5kZWZhdWx0SWNvblBhY2tcbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIC8qKlxyXG4gICAgICogRmluZCBwYXJlbnQgRmllbGQsIG1heCAzIGxldmVscyBkZWVwLlxyXG4gICAgICovXG4gICAgcGFyZW50RmllbGQ6IGZ1bmN0aW9uIHBhcmVudEZpZWxkKCkge1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMuJHBhcmVudDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgaWYgKHBhcmVudCAmJiAhcGFyZW50LiRkYXRhLl9pc0ZpZWxkKSB7XG4gICAgICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIHR5cGUgcHJvcCBmcm9tIHBhcmVudCBpZiBpdCdzIGEgRmllbGQuXHJcbiAgICAgKi9cbiAgICBzdGF0dXNUeXBlOiBmdW5jdGlvbiBzdGF0dXNUeXBlKCkge1xuICAgICAgaWYgKCF0aGlzLnBhcmVudEZpZWxkKSByZXR1cm47XG4gICAgICBpZiAoIXRoaXMucGFyZW50RmllbGQubmV3VHlwZSkgcmV0dXJuO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMucGFyZW50RmllbGQubmV3VHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50RmllbGQubmV3VHlwZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnBhcmVudEZpZWxkLm5ld1R5cGUpIHtcbiAgICAgICAgICBpZiAodGhpcy5wYXJlbnRGaWVsZC5uZXdUeXBlW2tleV0pIHtcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBtZXNzYWdlIHByb3AgZnJvbSBwYXJlbnQgaWYgaXQncyBhIEZpZWxkLlxyXG4gICAgICovXG4gICAgc3RhdHVzTWVzc2FnZTogZnVuY3Rpb24gc3RhdHVzTWVzc2FnZSgpIHtcbiAgICAgIGlmICghdGhpcy5wYXJlbnRGaWVsZCkgcmV0dXJuO1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50RmllbGQubmV3TWVzc2FnZTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiBGaXggaWNvbiBzaXplIGZvciBpbnB1dHMsIGxhcmdlIHdhcyB0b28gYmlnXHJcbiAgICAgKi9cbiAgICBpY29uU2l6ZTogZnVuY3Rpb24gaWNvblNpemUoKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuc2l6ZSkge1xuICAgICAgICBjYXNlICdpcy1zbWFsbCc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcblxuICAgICAgICBjYXNlICdpcy1tZWRpdW0nOlxuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjYXNlICdpcy1sYXJnZSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubmV3SWNvblBhY2sgPT09ICdtZGknID8gJ2lzLW1lZGl1bScgOiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKipcclxuICAgICAqIEZvY3VzIG1ldGhvZCB0aGF0IHdvcmsgZHluYW1pY2FsbHkgZGVwZW5kaW5nIG9uIHRoZSBjb21wb25lbnQuXHJcbiAgICAgKi9cbiAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy4kZGF0YS5fZWxlbWVudFJlZiA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbCA9IF90aGlzLiRlbC5xdWVyeVNlbGVjdG9yKF90aGlzLiRkYXRhLl9lbGVtZW50UmVmKTtcblxuICAgICAgICBpZiAoZWwpIGVsLmZvY3VzKCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uQmx1cjogZnVuY3Rpb24gb25CbHVyKCRldmVudCkge1xuICAgICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuJGVtaXQoJ2JsdXInLCAkZXZlbnQpO1xuICAgICAgdGhpcy5jaGVja0h0bWw1VmFsaWRpdHkoKTtcbiAgICB9LFxuICAgIG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoJGV2ZW50KSB7XG4gICAgICB0aGlzLmlzRm9jdXNlZCA9IHRydWU7XG4gICAgICB0aGlzLiRlbWl0KCdmb2N1cycsICRldmVudCk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgSFRNTDUgdmFsaWRhdGlvbiwgc2V0IGlzVmFsaWQgcHJvcGVydHkuXHJcbiAgICAgKiBJZiB2YWxpZGF0aW9uIGZhaWwsIHNlbmQgJ2lzLWRhbmdlcicgdHlwZSxcclxuICAgICAqIGFuZCBlcnJvciBtZXNzYWdlIHRvIHBhcmVudCBpZiBpdCdzIGEgRmllbGQuXHJcbiAgICAgKi9cbiAgICBjaGVja0h0bWw1VmFsaWRpdHk6IGZ1bmN0aW9uIGNoZWNrSHRtbDVWYWxpZGl0eSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMudXNlSHRtbDVWYWxpZGF0aW9uKSByZXR1cm47XG4gICAgICBpZiAodGhpcy4kcmVmc1t0aGlzLiRkYXRhLl9lbGVtZW50UmVmXSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICB2YXIgZWwgPSB0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKHRoaXMuJGRhdGEuX2VsZW1lbnRSZWYpO1xuICAgICAgdmFyIHR5cGUgPSBudWxsO1xuICAgICAgdmFyIG1lc3NhZ2UgPSBudWxsO1xuICAgICAgdmFyIGlzVmFsaWQgPSB0cnVlO1xuXG4gICAgICBpZiAoIWVsLmNoZWNrVmFsaWRpdHkoKSkge1xuICAgICAgICB0eXBlID0gJ2lzLWRhbmdlcic7XG4gICAgICAgIG1lc3NhZ2UgPSB0aGlzLnZhbGlkYXRpb25NZXNzYWdlIHx8IGVsLnZhbGlkYXRpb25NZXNzYWdlO1xuICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNWYWxpZCA9IGlzVmFsaWQ7XG4gICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpczIucGFyZW50RmllbGQpIHtcbiAgICAgICAgICAvLyBTZXQgdHlwZSBvbmx5IGlmIG5vdCBkZWZpbmVkXG4gICAgICAgICAgaWYgKCFfdGhpczIucGFyZW50RmllbGQudHlwZSkge1xuICAgICAgICAgICAgX3RoaXMyLnBhcmVudEZpZWxkLm5ld1R5cGUgPSB0eXBlO1xuICAgICAgICAgIH0gLy8gU2V0IG1lc3NhZ2Ugb25seSBpZiBub3QgZGVmaW5lZFxuXG5cbiAgICAgICAgICBpZiAoIV90aGlzMi5wYXJlbnRGaWVsZC5tZXNzYWdlKSB7XG4gICAgICAgICAgICBfdGhpczIucGFyZW50RmllbGQubmV3TWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQ7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgeyBGb3JtRWxlbWVudE1peGluIGFzIEYgfTtcbiIsImltcG9ydCB7IGMgYXMgY29uZmlnIH0gZnJvbSAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fIH0gZnJvbSAnLi9jaHVuay1jY2E4OGRiOC5qcyc7XG5cbi8vXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQkljb24nLFxuICBwcm9wczoge1xuICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0sXG4gICAgcGFjazogU3RyaW5nLFxuICAgIGljb246IFN0cmluZyxcbiAgICBzaXplOiBTdHJpbmcsXG4gICAgY3VzdG9tU2l6ZTogU3RyaW5nLFxuICAgIGN1c3RvbUNsYXNzOiBTdHJpbmcsXG4gICAgYm90aDogQm9vbGVhbiAvLyBUaGlzIGlzIHVzZWQgaW50ZXJuYWxseSB0byBzaG93IGJvdGggTURJIGFuZCBGQSBpY29uXG5cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICAvKipcclxuICAgICogSW50ZXJuYWwgaWNvbiBuYW1lIGJhc2VkIG9uIHRoZSBwYWNrLlxyXG4gICAgKiBJZiBwYWNrIGlzICdmYScsIGdldHMgdGhlIGVxdWl2YWxlbnQgRkEgaWNvbiBuYW1lIG9mIHRoZSBNREksXHJcbiAgICAqIGludGVybmFsIGljb25zIGFyZSBhbHdheXMgTURJLlxyXG4gICAgKi9cbiAgICBuZXdJY29uOiBmdW5jdGlvbiBuZXdJY29uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubmV3UGFjayA9PT0gJ21kaScgPyBcIlwiLmNvbmNhdCh0aGlzLm5ld1BhY2ssIFwiLVwiKS5jb25jYXQodGhpcy5pY29uKSA6IHRoaXMuYWRkRkFQcmVmaXgodGhpcy5nZXRFcXVpdmFsZW50SWNvbk9mKHRoaXMuaWNvbikpO1xuICAgIH0sXG4gICAgbmV3UGFjazogZnVuY3Rpb24gbmV3UGFjaygpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhY2sgfHwgY29uZmlnLmRlZmF1bHRJY29uUGFjaztcbiAgICB9LFxuICAgIG5ld1R5cGU6IGZ1bmN0aW9uIG5ld1R5cGUoKSB7XG4gICAgICBpZiAoIXRoaXMudHlwZSkgcmV0dXJuO1xuICAgICAgdmFyIHNwbGl0VHlwZSA9IFtdO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3BsaXRUeXBlID0gdGhpcy50eXBlLnNwbGl0KCctJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy50eXBlKSB7XG4gICAgICAgICAgaWYgKHRoaXMudHlwZVtrZXldKSB7XG4gICAgICAgICAgICBzcGxpdFR5cGUgPSBrZXkuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3BsaXRUeXBlLmxlbmd0aCA8PSAxKSByZXR1cm47XG4gICAgICByZXR1cm4gXCJoYXMtdGV4dC1cIi5jb25jYXQoc3BsaXRUeXBlWzFdKTtcbiAgICB9LFxuICAgIG5ld0N1c3RvbVNpemU6IGZ1bmN0aW9uIG5ld0N1c3RvbVNpemUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXN0b21TaXplIHx8IHRoaXMuY3VzdG9tU2l6ZUJ5UGFjaztcbiAgICB9LFxuICAgIGN1c3RvbVNpemVCeVBhY2s6IGZ1bmN0aW9uIGN1c3RvbVNpemVCeVBhY2soKSB7XG4gICAgICB2YXIgZGVmYXVsdFNpemUgPSB0aGlzLm5ld1BhY2sgPT09ICdtZGknID8gJ21kaS0yNHB4JyA6IHRoaXMuYWRkRkFQcmVmaXgoJ2xnJyk7XG4gICAgICB2YXIgbWVkaXVtU2l6ZSA9IHRoaXMubmV3UGFjayA9PT0gJ21kaScgPyAnbWRpLTM2cHgnIDogdGhpcy5hZGRGQVByZWZpeCgnMngnKTtcbiAgICAgIHZhciBsYXJnZVNpemUgPSB0aGlzLm5ld1BhY2sgPT09ICdtZGknID8gJ21kaS00OHB4JyA6IHRoaXMuYWRkRkFQcmVmaXgoJzN4Jyk7XG5cbiAgICAgIHN3aXRjaCAodGhpcy5zaXplKSB7XG4gICAgICAgIGNhc2UgJ2lzLXNtYWxsJzpcbiAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY2FzZSAnaXMtbWVkaXVtJzpcbiAgICAgICAgICByZXR1cm4gbWVkaXVtU2l6ZTtcblxuICAgICAgICBjYXNlICdpcy1sYXJnZSc6XG4gICAgICAgICAgcmV0dXJuIGxhcmdlU2l6ZTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBkZWZhdWx0U2l6ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZUljb25Db21wb25lbnQ6IGZ1bmN0aW9uIHVzZUljb25Db21wb25lbnQoKSB7XG4gICAgICByZXR1cm4gY29uZmlnLmRlZmF1bHRJY29uQ29tcG9uZW50O1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGFkZEZBUHJlZml4OiBmdW5jdGlvbiBhZGRGQVByZWZpeCh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMudXNlSWNvbkNvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcImZhLVwiLmNvbmNhdCh2YWx1ZSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBFcXVpdmFsZW50IEZBIGljb24gbmFtZSBvZiB0aGUgTURJLlxyXG4gICAgKi9cbiAgICBnZXRFcXVpdmFsZW50SWNvbk9mOiBmdW5jdGlvbiBnZXRFcXVpdmFsZW50SWNvbk9mKHZhbHVlKSB7XG4gICAgICAvLyBPbmx5IHRyYW5zZm9ybSB0aGUgY2xhc3MgaWYgdGhlIGJvdGggcHJvcCBpcyBzZXQgdG8gdHJ1ZVxuICAgICAgaWYgKCF0aGlzLmJvdGgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ2NoZWNrJzpcbiAgICAgICAgICByZXR1cm4gJ2NoZWNrJztcblxuICAgICAgICBjYXNlICdpbmZvcm1hdGlvbic6XG4gICAgICAgICAgcmV0dXJuICdpbmZvLWNpcmNsZSc7XG5cbiAgICAgICAgY2FzZSAnY2hlY2stY2lyY2xlJzpcbiAgICAgICAgICByZXR1cm4gJ2NoZWNrLWNpcmNsZSc7XG5cbiAgICAgICAgY2FzZSAnYWxlcnQnOlxuICAgICAgICAgIHJldHVybiAnZXhjbGFtYXRpb24tdHJpYW5nbGUnO1xuXG4gICAgICAgIGNhc2UgJ2FsZXJ0LWNpcmNsZSc6XG4gICAgICAgICAgcmV0dXJuICdleGNsYW1hdGlvbi1jaXJjbGUnO1xuXG4gICAgICAgIGNhc2UgJ2Fycm93LXVwJzpcbiAgICAgICAgICByZXR1cm4gJ2Fycm93LXVwJztcblxuICAgICAgICBjYXNlICdjaGV2cm9uLXJpZ2h0JzpcbiAgICAgICAgICByZXR1cm4gJ2FuZ2xlLXJpZ2h0JztcblxuICAgICAgICBjYXNlICdjaGV2cm9uLWxlZnQnOlxuICAgICAgICAgIHJldHVybiAnYW5nbGUtbGVmdCc7XG5cbiAgICAgICAgY2FzZSAnY2hldnJvbi1kb3duJzpcbiAgICAgICAgICByZXR1cm4gJ2FuZ2xlLWRvd24nO1xuXG4gICAgICAgIGNhc2UgJ2V5ZSc6XG4gICAgICAgICAgcmV0dXJuICdleWUnO1xuXG4gICAgICAgIGNhc2UgJ2V5ZS1vZmYnOlxuICAgICAgICAgIHJldHVybiAnZXllLXNsYXNoJztcblxuICAgICAgICBjYXNlICdtZW51LWRvd24nOlxuICAgICAgICAgIHJldHVybiAnY2FyZXQtZG93bic7XG5cbiAgICAgICAgY2FzZSAnbWVudS11cCc6XG4gICAgICAgICAgcmV0dXJuICdjYXJldC11cCc7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fID0gc2NyaXB0O1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiaWNvblwiLGNsYXNzOltfdm0ubmV3VHlwZSwgX3ZtLnNpemVdfSxbKCFfdm0udXNlSWNvbkNvbXBvbmVudCk/X2MoJ2knLHtjbGFzczpbX3ZtLm5ld1BhY2ssIF92bS5uZXdJY29uLCBfdm0ubmV3Q3VzdG9tU2l6ZSwgX3ZtLmN1c3RvbUNsYXNzXX0pOl9jKF92bS51c2VJY29uQ29tcG9uZW50LHt0YWc6XCJjb21wb25lbnRcIixjbGFzczpbX3ZtLmN1c3RvbUNsYXNzXSxhdHRyczp7XCJpY29uXCI6W192bS5uZXdQYWNrLCBfdm0ubmV3SWNvbl0sXCJzaXplXCI6X3ZtLm5ld0N1c3RvbVNpemV9fSldLDEpfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyA9IHVuZGVmaW5lZDtcbiAgLyogc2NvcGVkICovXG4gIGNvbnN0IF9fdnVlX3Njb3BlX2lkX18gPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fID0gZmFsc2U7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIEljb24gPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbmV4cG9ydCB7IEljb24gYXMgSSB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfZGVmaW5lUHJvcGVydHkgfSBmcm9tICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCB7IGMgYXMgY29uZmlnIH0gZnJvbSAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgeyBGIGFzIEZvcm1FbGVtZW50TWl4aW4gfSBmcm9tICcuL2NodW5rLTEwYzg1NTI5LmpzJztcbmltcG9ydCB7IEkgYXMgSWNvbiB9IGZyb20gJy4vY2h1bmstZTg0YjQwNDcuanMnO1xuaW1wb3J0IHsgXyBhcyBfX3Z1ZV9ub3JtYWxpemVfXyB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQklucHV0JyxcbiAgY29tcG9uZW50czogX2RlZmluZVByb3BlcnR5KHt9LCBJY29uLm5hbWUsIEljb24pLFxuICBtaXhpbnM6IFtGb3JtRWxlbWVudE1peGluXSxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZTogW051bWJlciwgU3RyaW5nXSxcbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAndGV4dCdcbiAgICB9LFxuICAgIHBhc3N3b3JkUmV2ZWFsOiBCb29sZWFuLFxuICAgIGhhc0NvdW50ZXI6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kZWZhdWx0SW5wdXRIYXNDb3VudGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgY3VzdG9tQ2xhc3M6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuZXdWYWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIG5ld1R5cGU6IHRoaXMudHlwZSxcbiAgICAgIG5ld0F1dG9jb21wbGV0ZTogdGhpcy5hdXRvY29tcGxldGUgfHwgY29uZmlnLmRlZmF1bHRJbnB1dEF1dG9jb21wbGV0ZSxcbiAgICAgIGlzUGFzc3dvcmRWaXNpYmxlOiBmYWxzZSxcbiAgICAgIF9lbGVtZW50UmVmOiB0aGlzLnR5cGUgPT09ICd0ZXh0YXJlYScgPyAndGV4dGFyZWEnIDogJ2lucHV0J1xuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgY29tcHV0ZWRWYWx1ZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ld1ZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMubmV3VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB2YWx1ZSk7XG4gICAgICAgICF0aGlzLmlzVmFsaWQgJiYgdGhpcy5jaGVja0h0bWw1VmFsaWRpdHkoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJvb3RDbGFzc2VzOiBmdW5jdGlvbiByb290Q2xhc3NlcygpIHtcbiAgICAgIHJldHVybiBbdGhpcy5pY29uUG9zaXRpb24sIHRoaXMuc2l6ZSwge1xuICAgICAgICAnaXMtZXhwYW5kZWQnOiB0aGlzLmV4cGFuZGVkLFxuICAgICAgICAnaXMtbG9hZGluZyc6IHRoaXMubG9hZGluZyxcbiAgICAgICAgJ2lzLWNsZWFyZml4JzogIXRoaXMuaGFzTWVzc2FnZVxuICAgICAgfV07XG4gICAgfSxcbiAgICBpbnB1dENsYXNzZXM6IGZ1bmN0aW9uIGlucHV0Q2xhc3NlcygpIHtcbiAgICAgIHJldHVybiBbdGhpcy5zdGF0dXNUeXBlLCB0aGlzLnNpemUsIHtcbiAgICAgICAgJ2lzLXJvdW5kZWQnOiB0aGlzLnJvdW5kZWRcbiAgICAgIH1dO1xuICAgIH0sXG4gICAgaGFzSWNvblJpZ2h0OiBmdW5jdGlvbiBoYXNJY29uUmlnaHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXNzd29yZFJldmVhbCB8fCB0aGlzLmxvYWRpbmcgfHwgdGhpcy5zdGF0dXNUeXBlSWNvbjtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIFBvc2l0aW9uIG9mIHRoZSBpY29uIG9yIGlmIGl0J3MgYm90aCBzaWRlcy5cclxuICAgICovXG4gICAgaWNvblBvc2l0aW9uOiBmdW5jdGlvbiBpY29uUG9zaXRpb24oKSB7XG4gICAgICBpZiAodGhpcy5pY29uICYmIHRoaXMuaGFzSWNvblJpZ2h0KSB7XG4gICAgICAgIHJldHVybiAnaGFzLWljb25zLWxlZnQgaGFzLWljb25zLXJpZ2h0JztcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaWNvbiAmJiB0aGlzLmhhc0ljb25SaWdodCkge1xuICAgICAgICByZXR1cm4gJ2hhcy1pY29ucy1yaWdodCc7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaWNvbikge1xuICAgICAgICByZXR1cm4gJ2hhcy1pY29ucy1sZWZ0JztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIEljb24gbmFtZSAoTURJKSBiYXNlZCBvbiB0aGUgdHlwZS5cclxuICAgICovXG4gICAgc3RhdHVzVHlwZUljb246IGZ1bmN0aW9uIHN0YXR1c1R5cGVJY29uKCkge1xuICAgICAgc3dpdGNoICh0aGlzLnN0YXR1c1R5cGUpIHtcbiAgICAgICAgY2FzZSAnaXMtc3VjY2Vzcyc6XG4gICAgICAgICAgcmV0dXJuICdjaGVjayc7XG5cbiAgICAgICAgY2FzZSAnaXMtZGFuZ2VyJzpcbiAgICAgICAgICByZXR1cm4gJ2FsZXJ0LWNpcmNsZSc7XG5cbiAgICAgICAgY2FzZSAnaXMtaW5mbyc6XG4gICAgICAgICAgcmV0dXJuICdpbmZvcm1hdGlvbic7XG5cbiAgICAgICAgY2FzZSAnaXMtd2FybmluZyc6XG4gICAgICAgICAgcmV0dXJuICdhbGVydCc7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBDaGVjayBpZiBoYXZlIGFueSBtZXNzYWdlIHByb3AgZnJvbSBwYXJlbnQgaWYgaXQncyBhIEZpZWxkLlxyXG4gICAgKi9cbiAgICBoYXNNZXNzYWdlOiBmdW5jdGlvbiBoYXNNZXNzYWdlKCkge1xuICAgICAgcmV0dXJuICEhdGhpcy5zdGF0dXNNZXNzYWdlO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogQ3VycmVudCBwYXNzd29yZC1yZXZlYWwgaWNvbiBuYW1lLlxyXG4gICAgKi9cbiAgICBwYXNzd29yZFZpc2libGVJY29uOiBmdW5jdGlvbiBwYXNzd29yZFZpc2libGVJY29uKCkge1xuICAgICAgcmV0dXJuICF0aGlzLmlzUGFzc3dvcmRWaXNpYmxlID8gJ2V5ZScgOiAnZXllLW9mZic7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBHZXQgdmFsdWUgbGVuZ3RoXHJcbiAgICAqL1xuICAgIHZhbHVlTGVuZ3RoOiBmdW5jdGlvbiB2YWx1ZUxlbmd0aCgpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5jb21wdXRlZFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlZFZhbHVlLmxlbmd0aDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuY29tcHV0ZWRWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZWRWYWx1ZS50b1N0cmluZygpLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIC8qKlxyXG4gICAgKiBXaGVuIHYtbW9kZWwgaXMgY2hhbmdlZDpcclxuICAgICogICAxLiBTZXQgaW50ZXJuYWwgdmFsdWUuXHJcbiAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShfdmFsdWUpIHtcbiAgICAgIHRoaXMubmV3VmFsdWUgPSBfdmFsdWU7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqXHJcbiAgICAqIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eSBvZiBhIHBhc3N3b3JkLXJldmVhbCBpbnB1dFxyXG4gICAgKiBieSBjaGFuZ2luZyB0aGUgdHlwZSBhbmQgZm9jdXMgdGhlIGlucHV0IHJpZ2h0IGF3YXkuXHJcbiAgICAqL1xuICAgIHRvZ2dsZVBhc3N3b3JkVmlzaWJpbGl0eTogZnVuY3Rpb24gdG9nZ2xlUGFzc3dvcmRWaXNpYmlsaXR5KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5pc1Bhc3N3b3JkVmlzaWJsZSA9ICF0aGlzLmlzUGFzc3dvcmRWaXNpYmxlO1xuICAgICAgdGhpcy5uZXdUeXBlID0gdGhpcy5pc1Bhc3N3b3JkVmlzaWJsZSA/ICd0ZXh0JyA6ICdwYXNzd29yZCc7XG4gICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLiRyZWZzLmlucHV0LmZvY3VzKCk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIElucHV0J3MgJ2lucHV0JyBldmVudCBsaXN0ZW5lciwgJ25leHRUaWNrJyBpcyB1c2VkIHRvIHByZXZlbnQgZXZlbnQgZmlyaW5nXHJcbiAgICAqIGJlZm9yZSB1aSB1cGRhdGUsIGhlbHBzIHdoZW4gdXNpbmcgbWFza3MgKENsZWF2ZWpzIGFuZCBwb3RlbnRpYWxseSBvdGhlcnMpLlxyXG4gICAgKi9cbiAgICBvbklucHV0OiBmdW5jdGlvbiBvbklucHV0KGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgICAgX3RoaXMyLmNvbXB1dGVkVmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29udHJvbFwiLGNsYXNzOl92bS5yb290Q2xhc3Nlc30sWyhfdm0udHlwZSAhPT0gJ3RleHRhcmVhJyk/X2MoJ2lucHV0Jyxfdm0uX2Ioe3JlZjpcImlucHV0XCIsc3RhdGljQ2xhc3M6XCJpbnB1dFwiLGNsYXNzOltfdm0uaW5wdXRDbGFzc2VzLCBfdm0uY3VzdG9tQ2xhc3NdLGF0dHJzOntcInR5cGVcIjpfdm0ubmV3VHlwZSxcImF1dG9jb21wbGV0ZVwiOl92bS5uZXdBdXRvY29tcGxldGUsXCJtYXhsZW5ndGhcIjpfdm0ubWF4bGVuZ3RofSxkb21Qcm9wczp7XCJ2YWx1ZVwiOl92bS5jb21wdXRlZFZhbHVlfSxvbjp7XCJpbnB1dFwiOl92bS5vbklucHV0LFwiYmx1clwiOl92bS5vbkJsdXIsXCJmb2N1c1wiOl92bS5vbkZvY3VzfX0sJ2lucHV0Jyxfdm0uJGF0dHJzLGZhbHNlKSk6X2MoJ3RleHRhcmVhJyxfdm0uX2Ioe3JlZjpcInRleHRhcmVhXCIsc3RhdGljQ2xhc3M6XCJ0ZXh0YXJlYVwiLGNsYXNzOltfdm0uaW5wdXRDbGFzc2VzLCBfdm0uY3VzdG9tQ2xhc3NdLGF0dHJzOntcIm1heGxlbmd0aFwiOl92bS5tYXhsZW5ndGh9LGRvbVByb3BzOntcInZhbHVlXCI6X3ZtLmNvbXB1dGVkVmFsdWV9LG9uOntcImlucHV0XCI6X3ZtLm9uSW5wdXQsXCJibHVyXCI6X3ZtLm9uQmx1cixcImZvY3VzXCI6X3ZtLm9uRm9jdXN9fSwndGV4dGFyZWEnLF92bS4kYXR0cnMsZmFsc2UpKSxfdm0uX3YoXCIgXCIpLChfdm0uaWNvbik/X2MoJ2ItaWNvbicse3N0YXRpY0NsYXNzOlwiaXMtbGVmdFwiLGF0dHJzOntcImljb25cIjpfdm0uaWNvbixcInBhY2tcIjpfdm0uaWNvblBhY2ssXCJzaXplXCI6X3ZtLmljb25TaXplfX0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksKCFfdm0ubG9hZGluZyAmJiAoX3ZtLnBhc3N3b3JkUmV2ZWFsIHx8IF92bS5zdGF0dXNUeXBlSWNvbikpP19jKCdiLWljb24nLHtzdGF0aWNDbGFzczpcImlzLXJpZ2h0XCIsY2xhc3M6eyAnaXMtY2xpY2thYmxlJzogX3ZtLnBhc3N3b3JkUmV2ZWFsIH0sYXR0cnM6e1wiaWNvblwiOl92bS5wYXNzd29yZFJldmVhbCA/IF92bS5wYXNzd29yZFZpc2libGVJY29uIDogX3ZtLnN0YXR1c1R5cGVJY29uLFwicGFja1wiOl92bS5pY29uUGFjayxcInNpemVcIjpfdm0uaWNvblNpemUsXCJ0eXBlXCI6IV92bS5wYXNzd29yZFJldmVhbCA/IF92bS5zdGF0dXNUeXBlIDogJ2lzLXByaW1hcnknLFwiYm90aFwiOlwiXCJ9LG5hdGl2ZU9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0udG9nZ2xlUGFzc3dvcmRWaXNpYmlsaXR5KCRldmVudCk7fX19KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLChfdm0ubWF4bGVuZ3RoICYmIF92bS5oYXNDb3VudGVyICYmIF92bS50eXBlICE9PSAnbnVtYmVyJyk/X2MoJ3NtYWxsJyx7c3RhdGljQ2xhc3M6XCJoZWxwIGNvdW50ZXJcIixjbGFzczp7ICdpcy1pbnZpc2libGUnOiAhX3ZtLmlzRm9jdXNlZCB9fSxbX3ZtLl92KFwiXFxuICAgICAgICBcIitfdm0uX3MoX3ZtLnZhbHVlTGVuZ3RoKStcIiAvIFwiK192bS5fcyhfdm0ubWF4bGVuZ3RoKStcIlxcbiAgICBcIildKTpfdm0uX2UoKV0sMSl9O1xudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgSW5wdXQgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbmV4cG9ydCB7IElucHV0IGFzIEkgfTtcbiIsImltcG9ydCB7IF8gYXMgX2RlZmluZVByb3BlcnR5LCBhIGFzIF90eXBlb2YgfSBmcm9tICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCB7IGcgYXMgZ2V0VmFsdWVCeVBhdGggfSBmcm9tICcuL2NodW5rLWU1ZmNlNDhmLmpzJztcbmltcG9ydCB7IEYgYXMgRm9ybUVsZW1lbnRNaXhpbiB9IGZyb20gJy4vY2h1bmstMTBjODU1MjkuanMnO1xuaW1wb3J0IHsgXyBhcyBfX3Z1ZV9ub3JtYWxpemVfXyB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IHsgSSBhcyBJbnB1dCB9IGZyb20gJy4vY2h1bmstOThlODZmNDAuanMnO1xuXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQkF1dG9jb21wbGV0ZScsXG4gIGNvbXBvbmVudHM6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgSW5wdXQubmFtZSwgSW5wdXQpLFxuICBtaXhpbnM6IFtGb3JtRWxlbWVudE1peGluXSxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkYXRhOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfSxcbiAgICBmaWVsZDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3ZhbHVlJ1xuICAgIH0sXG4gICAga2VlcEZpcnN0OiBCb29sZWFuLFxuICAgIGNsZWFyT25TZWxlY3Q6IEJvb2xlYW4sXG4gICAgb3Blbk9uRm9jdXM6IEJvb2xlYW4sXG4gICAgY3VzdG9tRm9ybWF0dGVyOiBGdW5jdGlvblxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RlZDogbnVsbCxcbiAgICAgIGhvdmVyZWQ6IG51bGwsXG4gICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgICBuZXdWYWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIG5ld0F1dG9jb21wbGV0ZTogdGhpcy5hdXRvY29tcGxldGUgfHwgJ29mZicsXG4gICAgICBpc0xpc3RJblZpZXdwb3J0VmVydGljYWxseTogdHJ1ZSxcbiAgICAgIGhhc0ZvY3VzOiBmYWxzZSxcbiAgICAgIF9pc0F1dG9jb21wbGV0ZTogdHJ1ZSxcbiAgICAgIF9lbGVtZW50UmVmOiAnaW5wdXQnXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICAvKipcclxuICAgICAqIFdoaXRlLWxpc3RlZCBpdGVtcyB0byBub3QgY2xvc2Ugd2hlbiBjbGlja2VkLlxyXG4gICAgICogQWRkIGlucHV0LCBkcm9wZG93biBhbmQgYWxsIGNoaWxkcmVuLlxyXG4gICAgICovXG4gICAgd2hpdGVMaXN0OiBmdW5jdGlvbiB3aGl0ZUxpc3QoKSB7XG4gICAgICB2YXIgd2hpdGVMaXN0ID0gW107XG4gICAgICB3aGl0ZUxpc3QucHVzaCh0aGlzLiRyZWZzLmlucHV0LiRlbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpKTtcbiAgICAgIHdoaXRlTGlzdC5wdXNoKHRoaXMuJHJlZnMuZHJvcGRvd24pOyAvLyBBZGQgYWxsIGNoaWRyZW4gZnJvbSBkcm9wZG93blxuXG4gICAgICBpZiAodGhpcy4kcmVmcy5kcm9wZG93biAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHJlZnMuZHJvcGRvd24ucXVlcnlTZWxlY3RvckFsbCgnKicpO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBjaGlsZHJlbltTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgd2hpdGVMaXN0LnB1c2goY2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2hpdGVMaXN0O1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGV4aXN0cyBkZWZhdWx0IHNsb3RcclxuICAgICAqL1xuICAgIGhhc0RlZmF1bHRTbG90OiBmdW5jdGlvbiBoYXNEZWZhdWx0U2xvdCgpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuJHNjb3BlZFNsb3RzLmRlZmF1bHQ7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgZXhpc3RzIFwiZW1wdHlcIiBzbG90XHJcbiAgICAgKi9cbiAgICBoYXNFbXB0eVNsb3Q6IGZ1bmN0aW9uIGhhc0VtcHR5U2xvdCgpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuJHNsb3RzLmVtcHR5O1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGV4aXN0cyBcImhlYWRlclwiIHNsb3RcclxuICAgICAqL1xuICAgIGhhc0hlYWRlclNsb3Q6IGZ1bmN0aW9uIGhhc0hlYWRlclNsb3QoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLiRzbG90cy5oZWFkZXI7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgZXhpc3RzIFwiZm9vdGVyXCIgc2xvdFxyXG4gICAgICovXG4gICAgaGFzRm9vdGVyU2xvdDogZnVuY3Rpb24gaGFzRm9vdGVyU2xvdCgpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuJHNsb3RzLmZvb3RlcjtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIGRyb3Bkb3duIGlzIHRvZ2dsZWQsIGNoZWNrIHRoZSB2aXNpYmlsaXR5IHRvIGtub3cgd2hlblxyXG4gICAgICogdG8gb3BlbiB1cHdhcmRzLlxyXG4gICAgICovXG4gICAgaXNBY3RpdmU6IGZ1bmN0aW9uIGlzQWN0aXZlKGFjdGl2ZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICB0aGlzLmNhbGNEcm9wZG93bkluVmlld3BvcnRWZXJ0aWNhbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5zZXRIb3ZlcmVkKG51bGwpO1xuICAgICAgICB9KTsgLy8gVGltZW91dCB0byB3YWl0IGZvciB0aGUgYW5pbWF0aW9uIHRvIGZpbmlzaCBiZWZvcmUgcmVjYWxjdWxhdGluZ1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLmNhbGNEcm9wZG93bkluVmlld3BvcnRWZXJ0aWNhbCgpO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqIFdoZW4gdXBkYXRpbmcgaW5wdXQncyB2YWx1ZVxyXG4gICAgICogICAxLiBFbWl0IGNoYW5nZXNcclxuICAgICAqICAgMi4gSWYgdmFsdWUgaXNuJ3QgdGhlIHNhbWUgYXMgc2VsZWN0ZWQsIHNldCBudWxsXHJcbiAgICAgKiAgIDMuIENsb3NlIGRyb3Bkb3duIGlmIHZhbHVlIGlzIGNsZWFyIG9yIGVsc2Ugb3BlbiBpdFxyXG4gICAgICovXG4gICAgbmV3VmFsdWU6IGZ1bmN0aW9uIG5ld1ZhbHVlKHZhbHVlKSB7XG4gICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHZhbHVlKTsgLy8gQ2hlY2sgaWYgc2VsZWN0ZWQgaXMgaW52YWxpZFxuXG4gICAgICB2YXIgY3VycmVudFZhbHVlID0gdGhpcy5nZXRWYWx1ZSh0aGlzLnNlbGVjdGVkKTtcblxuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWQobnVsbCwgZmFsc2UpO1xuICAgICAgfSAvLyBDbG9zZSBkcm9wZG93biBpZiBpbnB1dCBpcyBjbGVhciBvciBlbHNlIG9wZW4gaXRcblxuXG4gICAgICBpZiAodGhpcy5oYXNGb2N1cyAmJiAoIXRoaXMub3Blbk9uRm9jdXMgfHwgdmFsdWUpKSB7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSAhIXZhbHVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqIFdoZW4gdi1tb2RlbCBpcyBjaGFuZ2VkOlxyXG4gICAgICogICAxLiBVcGRhdGUgaW50ZXJuYWwgdmFsdWUuXHJcbiAgICAgKiAgIDIuIElmIGl0J3MgaW52YWxpZCwgdmFsaWRhdGUgYWdhaW4uXHJcbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoX3ZhbHVlKSB7XG4gICAgICB0aGlzLm5ld1ZhbHVlID0gX3ZhbHVlO1xuICAgICAgIXRoaXMuaXNWYWxpZCAmJiB0aGlzLiRyZWZzLmlucHV0LmNoZWNrSHRtbDVWYWxpZGl0eSgpO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqIFNlbGVjdCBmaXJzdCBvcHRpb24gaWYgXCJrZWVwLWZpcnN0XHJcbiAgICAgKi9cbiAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKHZhbHVlKSB7XG4gICAgICAvLyBLZWVwIGZpcnN0IG9wdGlvbiBhbHdheXMgcHJlLXNlbGVjdGVkXG4gICAgICBpZiAodGhpcy5rZWVwRmlyc3QpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RGaXJzdE9wdGlvbih2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqXHJcbiAgICAgKiBTZXQgd2hpY2ggb3B0aW9uIGlzIGN1cnJlbnRseSBob3ZlcmVkLlxyXG4gICAgICovXG4gICAgc2V0SG92ZXJlZDogZnVuY3Rpb24gc2V0SG92ZXJlZChvcHRpb24pIHtcbiAgICAgIGlmIChvcHRpb24gPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgdGhpcy5ob3ZlcmVkID0gb3B0aW9uO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqIFNldCB3aGljaCBvcHRpb24gaXMgY3VycmVudGx5IHNlbGVjdGVkLCB1cGRhdGUgdi1tb2RlbCxcclxuICAgICAqIHVwZGF0ZSBpbnB1dCB2YWx1ZSBhbmQgY2xvc2UgZHJvcGRvd24uXHJcbiAgICAgKi9cbiAgICBzZXRTZWxlY3RlZDogZnVuY3Rpb24gc2V0U2VsZWN0ZWQob3B0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGNsb3NlRHJvcGRvd24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICBpZiAob3B0aW9uID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBvcHRpb247XG4gICAgICB0aGlzLiRlbWl0KCdzZWxlY3QnLCB0aGlzLnNlbGVjdGVkKTtcblxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5uZXdWYWx1ZSA9IHRoaXMuY2xlYXJPblNlbGVjdCA/ICcnIDogdGhpcy5nZXRWYWx1ZSh0aGlzLnNlbGVjdGVkKTtcbiAgICAgIH1cblxuICAgICAgY2xvc2VEcm9wZG93biAmJiB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogU2VsZWN0IGZpcnN0IG9wdGlvblxyXG4gICAgICovXG4gICAgc2VsZWN0Rmlyc3RPcHRpb246IGZ1bmN0aW9uIHNlbGVjdEZpcnN0T3B0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgIC8vIElmIGhhcyB2aXNpYmxlIGRhdGEgb3Igb3BlbiBvbiBmb2N1cywga2VlcCB1cGRhdGluZyB0aGUgaG92ZXJlZFxuICAgICAgICAgIGlmIChfdGhpczMub3Blbk9uRm9jdXMgfHwgX3RoaXMzLm5ld1ZhbHVlICE9PSAnJyAmJiBfdGhpczMuaG92ZXJlZCAhPT0gb3B0aW9uc1swXSkge1xuICAgICAgICAgICAgX3RoaXMzLnNldEhvdmVyZWQob3B0aW9uc1swXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMy5zZXRIb3ZlcmVkKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiBFbnRlciBrZXkgbGlzdGVuZXIuXHJcbiAgICAgKiBTZWxlY3QgdGhlIGhvdmVyZWQgb3B0aW9uLlxyXG4gICAgICovXG4gICAgZW50ZXJQcmVzc2VkOiBmdW5jdGlvbiBlbnRlclByZXNzZWQoKSB7XG4gICAgICBpZiAodGhpcy5ob3ZlcmVkID09PSBudWxsKSByZXR1cm47XG4gICAgICB0aGlzLnNldFNlbGVjdGVkKHRoaXMuaG92ZXJlZCk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogVGFiIGtleSBsaXN0ZW5lci5cclxuICAgICAqIFNlbGVjdCBob3ZlcmVkIG9wdGlvbiBpZiBpdCBleGlzdHMsIGNsb3NlIGRyb3Bkb3duLCB0aGVuIGFsbG93XHJcbiAgICAgKiBuYXRpdmUgaGFuZGxpbmcgdG8gbW92ZSB0byBuZXh0IHRhYmJhYmxlIGVsZW1lbnQuXHJcbiAgICAgKi9cbiAgICB0YWJQcmVzc2VkOiBmdW5jdGlvbiB0YWJQcmVzc2VkKCkge1xuICAgICAgaWYgKHRoaXMuaG92ZXJlZCA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTZWxlY3RlZCh0aGlzLmhvdmVyZWQpO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqIENsb3NlIGRyb3Bkb3duIGlmIGNsaWNrZWQgb3V0c2lkZS5cclxuICAgICAqL1xuICAgIGNsaWNrZWRPdXRzaWRlOiBmdW5jdGlvbiBjbGlja2VkT3V0c2lkZShldmVudCkge1xuICAgICAgaWYgKHRoaXMud2hpdGVMaXN0LmluZGV4T2YoZXZlbnQudGFyZ2V0KSA8IDApIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gZGlzcGxheSB0ZXh0IGZvciB0aGUgaW5wdXQuXHJcbiAgICAgKiBJZiBvYmplY3QsIGdldCB2YWx1ZSBmcm9tIHBhdGgsIG9yIGVsc2UganVzdCB0aGUgdmFsdWUuXHJcbiAgICAgKi9cbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUob3B0aW9uKSB7XG4gICAgICBpZiAoIW9wdGlvbikgcmV0dXJuO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuY3VzdG9tRm9ybWF0dGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXN0b21Gb3JtYXR0ZXIob3B0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF90eXBlb2Yob3B0aW9uKSA9PT0gJ29iamVjdCcgPyBnZXRWYWx1ZUJ5UGF0aChvcHRpb24sIHRoaXMuZmllbGQpIDogb3B0aW9uO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZSBpZiB0aGUgZHJvcGRvd24gaXMgdmVydGljYWxseSB2aXNpYmxlIHdoZW4gYWN0aXZhdGVkLFxyXG4gICAgICogb3RoZXJ3aXNlIGl0IGlzIG9wZW5lbmVkIHVwd2FyZHMuXHJcbiAgICAgKi9cbiAgICBjYWxjRHJvcGRvd25JblZpZXdwb3J0VmVydGljYWw6IGZ1bmN0aW9uIGNhbGNEcm9wZG93bkluVmlld3BvcnRWZXJ0aWNhbCgpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxyXG4gICAgICAgICogdGhpcy4kcmVmcy5kcm9wZG93biBtYXkgYmUgdW5kZWZpbmVkXHJcbiAgICAgICAgKiB3aGVuIEF1dG9jb21wbGV0ZSBpcyBjb25kaXRpb25hbCByZW5kZXJlZFxyXG4gICAgICAgICovXG4gICAgICAgIGlmIChfdGhpczQuJHJlZnMuZHJvcGRvd24gPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgICAgIHZhciByZWN0ID0gX3RoaXM0LiRyZWZzLmRyb3Bkb3duLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIF90aGlzNC5pc0xpc3RJblZpZXdwb3J0VmVydGljYWxseSA9IHJlY3QudG9wID49IDAgJiYgcmVjdC5ib3R0b20gPD0gKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqIEFycm93cyBrZXlzIGxpc3RlbmVyLlxyXG4gICAgICogSWYgZHJvcGRvd24gaXMgYWN0aXZlLCBzZXQgaG92ZXJlZCBvcHRpb24sIG9yIGVsc2UganVzdCBvcGVuLlxyXG4gICAgICovXG4gICAga2V5QXJyb3dzOiBmdW5jdGlvbiBrZXlBcnJvd3MoZGlyZWN0aW9uKSB7XG4gICAgICB2YXIgc3VtID0gZGlyZWN0aW9uID09PSAnZG93bicgPyAxIDogLTE7XG5cbiAgICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuZGF0YS5pbmRleE9mKHRoaXMuaG92ZXJlZCkgKyBzdW07XG4gICAgICAgIGluZGV4ID0gaW5kZXggPiB0aGlzLmRhdGEubGVuZ3RoIC0gMSA/IHRoaXMuZGF0YS5sZW5ndGggOiBpbmRleDtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyAwIDogaW5kZXg7XG4gICAgICAgIHRoaXMuc2V0SG92ZXJlZCh0aGlzLmRhdGFbaW5kZXhdKTtcbiAgICAgICAgdmFyIGxpc3QgPSB0aGlzLiRyZWZzLmRyb3Bkb3duLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wZG93bi1jb250ZW50Jyk7XG4gICAgICAgIHZhciBlbGVtZW50ID0gbGlzdC5xdWVyeVNlbGVjdG9yQWxsKCdhLmRyb3Bkb3duLWl0ZW06bm90KC5pcy1kaXNhYmxlZCknKVtpbmRleF07XG4gICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuO1xuICAgICAgICB2YXIgdmlzTWluID0gbGlzdC5zY3JvbGxUb3A7XG4gICAgICAgIHZhciB2aXNNYXggPSBsaXN0LnNjcm9sbFRvcCArIGxpc3QuY2xpZW50SGVpZ2h0IC0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQub2Zmc2V0VG9wIDwgdmlzTWluKSB7XG4gICAgICAgICAgbGlzdC5zY3JvbGxUb3AgPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50Lm9mZnNldFRvcCA+PSB2aXNNYXgpIHtcbiAgICAgICAgICBsaXN0LnNjcm9sbFRvcCA9IGVsZW1lbnQub2Zmc2V0VG9wIC0gbGlzdC5jbGllbnRIZWlnaHQgKyBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogRm9jdXMgbGlzdGVuZXIuXHJcbiAgICAgKiBJZiB2YWx1ZSBpcyB0aGUgc2FtZSBhcyBzZWxlY3RlZCwgc2VsZWN0IGFsbCB0ZXh0LlxyXG4gICAgICovXG4gICAgZm9jdXNlZDogZnVuY3Rpb24gZm9jdXNlZChldmVudCkge1xuICAgICAgaWYgKHRoaXMuZ2V0VmFsdWUodGhpcy5zZWxlY3RlZCkgPT09IHRoaXMubmV3VmFsdWUpIHtcbiAgICAgICAgdGhpcy4kZWwucXVlcnlTZWxlY3RvcignaW5wdXQnKS5zZWxlY3QoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3Blbk9uRm9jdXMpIHtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMua2VlcEZpcnN0KSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RGaXJzdE9wdGlvbih0aGlzLmRhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaGFzRm9jdXMgPSB0cnVlO1xuICAgICAgdGhpcy4kZW1pdCgnZm9jdXMnLCBldmVudCk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBCbHVyIGxpc3RlbmVyLlxyXG4gICAgKi9cbiAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cihldmVudCkge1xuICAgICAgdGhpcy5oYXNGb2N1cyA9IGZhbHNlO1xuICAgICAgdGhpcy4kZW1pdCgnYmx1cicsIGV2ZW50KTtcbiAgICB9LFxuICAgIG9uSW5wdXQ6IGZ1bmN0aW9uIG9uSW5wdXQoZXZlbnQpIHtcbiAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB0aGlzLmdldFZhbHVlKHRoaXMuc2VsZWN0ZWQpO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUgPT09IHRoaXMubmV3VmFsdWUpIHJldHVybjtcbiAgICAgIHRoaXMuJGVtaXQoJ3R5cGluZycsIHRoaXMubmV3VmFsdWUpO1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja2VkT3V0c2lkZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5jYWxjRHJvcGRvd25JblZpZXdwb3J0VmVydGljYWwpO1xuICAgIH1cbiAgfSxcbiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja2VkT3V0c2lkZSk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5jYWxjRHJvcGRvd25JblZpZXdwb3J0VmVydGljYWwpO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYXV0b2NvbXBsZXRlIGNvbnRyb2xcIixjbGFzczp7J2lzLWV4cGFuZGVkJzogX3ZtLmV4cGFuZGVkfX0sW19jKCdiLWlucHV0Jyxfdm0uX2Ioe3JlZjpcImlucHV0XCIsYXR0cnM6e1widHlwZVwiOlwidGV4dFwiLFwic2l6ZVwiOl92bS5zaXplLFwibG9hZGluZ1wiOl92bS5sb2FkaW5nLFwicm91bmRlZFwiOl92bS5yb3VuZGVkLFwiaWNvblwiOl92bS5pY29uLFwiaWNvbi1wYWNrXCI6X3ZtLmljb25QYWNrLFwibWF4bGVuZ3RoXCI6X3ZtLm1heGxlbmd0aCxcImF1dG9jb21wbGV0ZVwiOl92bS5uZXdBdXRvY29tcGxldGUsXCJ1c2UtaHRtbDUtdmFsaWRhdGlvblwiOl92bS51c2VIdG1sNVZhbGlkYXRpb259LG9uOntcImlucHV0XCI6X3ZtLm9uSW5wdXQsXCJmb2N1c1wiOl92bS5mb2N1c2VkLFwiYmx1clwiOl92bS5vbkJsdXJ9LG5hdGl2ZU9uOntcImtleXVwXCI6ZnVuY3Rpb24oJGV2ZW50KXtpZighKCdidXR0b24nIGluICRldmVudCkmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImVzY1wiLDI3LCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH0kZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0uaXNBY3RpdmUgPSBmYWxzZTt9LFwia2V5ZG93blwiOltmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwidGFiXCIsOSwkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9X3ZtLnRhYlByZXNzZWQoJGV2ZW50KTt9LGZ1bmN0aW9uKCRldmVudCl7aWYoISgnYnV0dG9uJyBpbiAkZXZlbnQpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJlbnRlclwiLDEzLCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH0kZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0uZW50ZXJQcmVzc2VkKCRldmVudCk7fSxmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwidXBcIiwzOCwkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLmtleUFycm93cygndXAnKTt9LGZ1bmN0aW9uKCRldmVudCl7aWYoISgnYnV0dG9uJyBpbiAkZXZlbnQpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJkb3duXCIsNDAsJGV2ZW50LmtleSkpeyByZXR1cm4gbnVsbDsgfSRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5rZXlBcnJvd3MoJ2Rvd24nKTt9XX0sbW9kZWw6e3ZhbHVlOihfdm0ubmV3VmFsdWUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0ubmV3VmFsdWU9JCR2O30sZXhwcmVzc2lvbjpcIm5ld1ZhbHVlXCJ9fSwnYi1pbnB1dCcsX3ZtLiRhdHRycyxmYWxzZSkpLF92bS5fdihcIiBcIiksX2MoJ3RyYW5zaXRpb24nLHthdHRyczp7XCJuYW1lXCI6XCJmYWRlXCJ9fSxbX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTooX3ZtLmlzQWN0aXZlICYmIChfdm0uZGF0YS5sZW5ndGggPiAwIHx8IF92bS5oYXNFbXB0eVNsb3QgfHwgX3ZtLmhhc0hlYWRlclNsb3QpKSxleHByZXNzaW9uOlwiaXNBY3RpdmUgJiYgKGRhdGEubGVuZ3RoID4gMCB8fCBoYXNFbXB0eVNsb3QgfHwgaGFzSGVhZGVyU2xvdClcIn1dLHJlZjpcImRyb3Bkb3duXCIsc3RhdGljQ2xhc3M6XCJkcm9wZG93bi1tZW51XCIsY2xhc3M6eyAnaXMtb3BlbmVkLXRvcCc6ICFfdm0uaXNMaXN0SW5WaWV3cG9ydFZlcnRpY2FsbHkgfX0sW19jKCdkaXYnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KF92bS5pc0FjdGl2ZSksZXhwcmVzc2lvbjpcImlzQWN0aXZlXCJ9XSxzdGF0aWNDbGFzczpcImRyb3Bkb3duLWNvbnRlbnRcIn0sWyhfdm0uaGFzSGVhZGVyU2xvdCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZHJvcGRvd24taXRlbVwifSxbX3ZtLl90KFwiaGVhZGVyXCIpXSwyKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5fbCgoX3ZtLmRhdGEpLGZ1bmN0aW9uKG9wdGlvbixpbmRleCl7cmV0dXJuIF9jKCdhJyx7a2V5OmluZGV4LHN0YXRpY0NsYXNzOlwiZHJvcGRvd24taXRlbVwiLGNsYXNzOnsgJ2lzLWhvdmVyZWQnOiBvcHRpb24gPT09IF92bS5ob3ZlcmVkIH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5zZXRTZWxlY3RlZChvcHRpb24pO319fSxbKF92bS5oYXNEZWZhdWx0U2xvdCk/X3ZtLl90KFwiZGVmYXVsdFwiLG51bGwse29wdGlvbjpvcHRpb24saW5kZXg6aW5kZXh9KTpfYygnc3BhbicsW192bS5fdihcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiK192bS5fcyhfdm0uZ2V0VmFsdWUob3B0aW9uLCB0cnVlKSkrXCJcXG4gICAgICAgICAgICAgICAgICAgIFwiKV0pXSwyKX0pLF92bS5fdihcIiBcIiksKF92bS5kYXRhLmxlbmd0aCA9PT0gMCAmJiBfdm0uaGFzRW1wdHlTbG90KT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJkcm9wZG93bi1pdGVtIGlzLWRpc2FibGVkXCJ9LFtfdm0uX3QoXCJlbXB0eVwiKV0sMik6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoX3ZtLmhhc0Zvb3RlclNsb3QpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImRyb3Bkb3duLWl0ZW1cIn0sW192bS5fdChcImZvb3RlclwiKV0sMik6X3ZtLl9lKCldLDIpXSldKV0sMSl9O1xudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgQXV0b2NvbXBsZXRlID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG5leHBvcnQgeyBBdXRvY29tcGxldGUgYXMgQSB9O1xuIiwiaW1wb3J0ICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCAnLi9jaHVuay1lNWZjZTQ4Zi5qcyc7XG5pbXBvcnQgJy4vY2h1bmstOWUzMjA3Y2MuanMnO1xuaW1wb3J0ICcuL2NodW5rLTEwYzg1NTI5LmpzJztcbmltcG9ydCAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0ICcuL2NodW5rLTk4ZTg2ZjQwLmpzJztcbmltcG9ydCB7IEEgYXMgQXV0b2NvbXBsZXRlIH0gZnJvbSAnLi9jaHVuay05MmFjYzIxZi5qcyc7XG5leHBvcnQgeyBBIGFzIEF1dG9jb21wbGV0ZSB9IGZyb20gJy4vY2h1bmstOTJhY2MyMWYuanMnO1xuXG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgQXV0b2NvbXBsZXRlKTtcbiAgfVxufTtcbnVzZShQbHVnaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBQbHVnaW47XG4iLCJpbXBvcnQgeyBfIGFzIF9kZWZpbmVQcm9wZXJ0eSB9IGZyb20gJy4vY2h1bmstZDYyMDAwODcuanMnO1xuaW1wb3J0ICcuL2NodW5rLTllMzIwN2NjLmpzJztcbmltcG9ydCB7IEkgYXMgSWNvbiB9IGZyb20gJy4vY2h1bmstZTg0YjQwNDcuanMnO1xuaW1wb3J0IHsgXyBhcyBfX3Z1ZV9ub3JtYWxpemVfXywgciBhcyByZWdpc3RlckNvbXBvbmVudCwgdSBhcyB1c2UgfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcblxudmFyIHNjcmlwdCA9IHtcbiAgbmFtZTogJ0JCdXR0b24nLFxuICBjb21wb25lbnRzOiBfZGVmaW5lUHJvcGVydHkoe30sIEljb24ubmFtZSwgSWNvbiksXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiB7XG4gICAgdHlwZTogW1N0cmluZywgT2JqZWN0XSxcbiAgICBzaXplOiBTdHJpbmcsXG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICBpY29uUGFjazogU3RyaW5nLFxuICAgIGljb25MZWZ0OiBTdHJpbmcsXG4gICAgaWNvblJpZ2h0OiBTdHJpbmcsXG4gICAgcm91bmRlZDogQm9vbGVhbixcbiAgICBsb2FkaW5nOiBCb29sZWFuLFxuICAgIG91dGxpbmVkOiBCb29sZWFuLFxuICAgIGludmVydGVkOiBCb29sZWFuLFxuICAgIGZvY3VzZWQ6IEJvb2xlYW4sXG4gICAgYWN0aXZlOiBCb29sZWFuLFxuICAgIGhvdmVyZWQ6IEJvb2xlYW4sXG4gICAgc2VsZWN0ZWQ6IEJvb2xlYW4sXG4gICAgbmF0aXZlVHlwZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2J1dHRvbicsXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gWydidXR0b24nLCAnc3VibWl0JywgJ3Jlc2V0J10uaW5kZXhPZih2YWx1ZSkgPj0gMDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2J1dHRvbicsXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gWydidXR0b24nLCAnYScsICdpbnB1dCcsICdyb3V0ZXItbGluaycsICdudXh0LWxpbmsnLCAnbi1saW5rJywgJ051eHRMaW5rJywgJ05MaW5rJ10uaW5kZXhPZih2YWx1ZSkgPj0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgaWNvblNpemU6IGZ1bmN0aW9uIGljb25TaXplKCkge1xuICAgICAgaWYgKCF0aGlzLnNpemUgfHwgdGhpcy5zaXplID09PSAnaXMtbWVkaXVtJykge1xuICAgICAgICByZXR1cm4gJ2lzLXNtYWxsJztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zaXplID09PSAnaXMtbGFyZ2UnKSB7XG4gICAgICAgIHJldHVybiAnaXMtbWVkaXVtJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKF92bS50YWcsX3ZtLl9iKHt0YWc6XCJjb21wb25lbnRcIixzdGF0aWNDbGFzczpcImJ1dHRvblwiLGNsYXNzOltfdm0uc2l6ZSwgX3ZtLnR5cGUsIHtcbiAgICAgICAgJ2lzLXJvdW5kZWQnOiBfdm0ucm91bmRlZCxcbiAgICAgICAgJ2lzLWxvYWRpbmcnOiBfdm0ubG9hZGluZyxcbiAgICAgICAgJ2lzLW91dGxpbmVkJzogX3ZtLm91dGxpbmVkLFxuICAgICAgICAnaXMtaW52ZXJ0ZWQnOiBfdm0uaW52ZXJ0ZWQsXG4gICAgICAgICdpcy1mb2N1c2VkJzogX3ZtLmZvY3VzZWQsXG4gICAgICAgICdpcy1hY3RpdmUnOiBfdm0uYWN0aXZlLFxuICAgICAgICAnaXMtaG92ZXJlZCc6IF92bS5ob3ZlcmVkLFxuICAgICAgICAnaXMtc2VsZWN0ZWQnOiBfdm0uc2VsZWN0ZWRcbiAgICB9XSxhdHRyczp7XCJ0eXBlXCI6X3ZtLm5hdGl2ZVR5cGV9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uJGVtaXQoJ2NsaWNrJywgJGV2ZW50KTt9fX0sJ2NvbXBvbmVudCcsX3ZtLiRhdHRycyxmYWxzZSksWyhfdm0uaWNvbkxlZnQpP19jKCdiLWljb24nLHthdHRyczp7XCJwYWNrXCI6X3ZtLmljb25QYWNrLFwiaWNvblwiOl92bS5pY29uTGVmdCxcInNpemVcIjpfdm0uaWNvblNpemV9fSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoX3ZtLmxhYmVsKT9fYygnc3BhbicsW192bS5fdihfdm0uX3MoX3ZtLmxhYmVsKSldKTooX3ZtLiRzbG90cy5kZWZhdWx0KT9fYygnc3BhbicsW192bS5fdChcImRlZmF1bHRcIildLDIpOl92bS5fZSgpLF92bS5fdihcIiBcIiksKF92bS5pY29uUmlnaHQpP19jKCdiLWljb24nLHthdHRyczp7XCJwYWNrXCI6X3ZtLmljb25QYWNrLFwiaWNvblwiOl92bS5pY29uUmlnaHQsXCJzaXplXCI6X3ZtLmljb25TaXplfX0pOl92bS5fZSgpXSwxKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBCdXR0b24gPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBCdXR0b24pO1xuICB9XG59O1xudXNlKFBsdWdpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbjtcbmV4cG9ydCB7IEJ1dHRvbiB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfX3Z1ZV9ub3JtYWxpemVfXyB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xudmFyIHNjcmlwdCA9IHtcbiAgbmFtZTogJ0JDaGVja2JveCcsXG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IFtTdHJpbmcsIE51bWJlciwgQm9vbGVhbiwgRnVuY3Rpb24sIE9iamVjdCwgQXJyYXldLFxuICAgIG5hdGl2ZVZhbHVlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIEZ1bmN0aW9uLCBPYmplY3QsIEFycmF5XSxcbiAgICBpbmRldGVybWluYXRlOiBCb29sZWFuLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICByZXF1aXJlZDogQm9vbGVhbixcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgc2l6ZTogU3RyaW5nLFxuICAgIHRydWVWYWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyLCBCb29sZWFuLCBGdW5jdGlvbiwgT2JqZWN0LCBBcnJheV0sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBmYWxzZVZhbHVlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIEZ1bmN0aW9uLCBPYmplY3QsIEFycmF5XSxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuZXdWYWx1ZTogdGhpcy52YWx1ZVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgY29tcHV0ZWRWYWx1ZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ld1ZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMubmV3VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIC8qKlxyXG4gICAgICogV2hlbiB2LW1vZGVsIGNoYW5nZSwgc2V0IGludGVybmFsIHZhbHVlLlxyXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKF92YWx1ZSkge1xuICAgICAgdGhpcy5uZXdWYWx1ZSA9IF92YWx1ZTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAvLyBNYWNPUyBGaXJlRm94IGFuZCBTYWZhcmkgZG8gbm90IGZvY3VzIHdoZW4gY2xpY2tlZFxuICAgICAgdGhpcy4kcmVmcy5pbnB1dC5mb2N1cygpO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2xhYmVsJyx7cmVmOlwibGFiZWxcIixzdGF0aWNDbGFzczpcImItY2hlY2tib3ggY2hlY2tib3hcIixjbGFzczpbX3ZtLnNpemUsIHsgJ2lzLWRpc2FibGVkJzogX3ZtLmRpc2FibGVkIH1dLGF0dHJzOntcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkfSxvbjp7XCJjbGlja1wiOl92bS5mb2N1cyxcImtleWRvd25cIjpmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLiRyZWZzLmxhYmVsLmNsaWNrKCk7fX19LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcIm1vZGVsXCIscmF3TmFtZTpcInYtbW9kZWxcIix2YWx1ZTooX3ZtLmNvbXB1dGVkVmFsdWUpLGV4cHJlc3Npb246XCJjb21wdXRlZFZhbHVlXCJ9XSxyZWY6XCJpbnB1dFwiLGF0dHJzOntcInR5cGVcIjpcImNoZWNrYm94XCIsXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcInJlcXVpcmVkXCI6X3ZtLnJlcXVpcmVkLFwibmFtZVwiOl92bS5uYW1lLFwidHJ1ZS12YWx1ZVwiOl92bS50cnVlVmFsdWUsXCJmYWxzZS12YWx1ZVwiOl92bS5mYWxzZVZhbHVlfSxkb21Qcm9wczp7XCJpbmRldGVybWluYXRlXCI6X3ZtLmluZGV0ZXJtaW5hdGUsXCJ2YWx1ZVwiOl92bS5uYXRpdmVWYWx1ZSxcImNoZWNrZWRcIjpBcnJheS5pc0FycmF5KF92bS5jb21wdXRlZFZhbHVlKT9fdm0uX2koX3ZtLmNvbXB1dGVkVmFsdWUsX3ZtLm5hdGl2ZVZhbHVlKT4tMTpfdm0uX3EoX3ZtLmNvbXB1dGVkVmFsdWUsX3ZtLnRydWVWYWx1ZSl9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7fSxcImNoYW5nZVwiOmZ1bmN0aW9uKCRldmVudCl7dmFyICQkYT1fdm0uY29tcHV0ZWRWYWx1ZSwkJGVsPSRldmVudC50YXJnZXQsJCRjPSQkZWwuY2hlY2tlZD8oX3ZtLnRydWVWYWx1ZSk6KF92bS5mYWxzZVZhbHVlKTtpZihBcnJheS5pc0FycmF5KCQkYSkpe3ZhciAkJHY9X3ZtLm5hdGl2ZVZhbHVlLCQkaT1fdm0uX2koJCRhLCQkdik7aWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKF92bS5jb21wdXRlZFZhbHVlPSQkYS5jb25jYXQoWyQkdl0pKTt9ZWxzZXskJGk+LTEmJihfdm0uY29tcHV0ZWRWYWx1ZT0kJGEuc2xpY2UoMCwkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpKzEpKSk7fX1lbHNle192bS5jb21wdXRlZFZhbHVlPSQkYzt9fX19KSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJjaGVja1wiLGNsYXNzOl92bS50eXBlfSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiY29udHJvbC1sYWJlbFwifSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMildKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBDaGVja2JveCA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHsgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyxcbiAgICBfX3Z1ZV9zY3JpcHRfXyxcbiAgICBfX3Z1ZV9zY29wZV9pZF9fLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxuZXhwb3J0IHsgQ2hlY2tib3ggYXMgQyB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfX3Z1ZV9ub3JtYWxpemVfXywgciBhcyByZWdpc3RlckNvbXBvbmVudCwgdSBhcyB1c2UgfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcbmltcG9ydCB7IEMgYXMgQ2hlY2tib3ggfSBmcm9tICcuL2NodW5rLTlhNzc2Njk3LmpzJztcbmV4cG9ydCB7IEMgYXMgQ2hlY2tib3ggfSBmcm9tICcuL2NodW5rLTlhNzc2Njk3LmpzJztcblxuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdCQ2hlY2tib3hCdXR0b24nLFxuICBwcm9wczoge1xuICAgIHZhbHVlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIEZ1bmN0aW9uLCBPYmplY3QsIEFycmF5XSxcbiAgICBuYXRpdmVWYWx1ZTogW1N0cmluZywgTnVtYmVyLCBCb29sZWFuLCBGdW5jdGlvbiwgT2JqZWN0LCBBcnJheV0sXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgcmVxdWlyZWQ6IEJvb2xlYW4sXG4gICAgbmFtZTogU3RyaW5nLFxuICAgIHNpemU6IFN0cmluZyxcbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaXMtcHJpbWFyeSdcbiAgICB9XG4gIH0sXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5ld1ZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgaXNGb2N1c2VkOiBmYWxzZVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgY29tcHV0ZWRWYWx1ZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ld1ZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMubmV3VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGVja2VkOiBmdW5jdGlvbiBjaGVja2VkKCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5uZXdWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV3VmFsdWUuaW5kZXhPZih0aGlzLm5hdGl2ZVZhbHVlKSA+PSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5uZXdWYWx1ZSA9PT0gdGhpcy5uYXRpdmVWYWx1ZTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIHYtbW9kZWwgY2hhbmdlLCBzZXQgaW50ZXJuYWwgdmFsdWUuXHJcbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoX3ZhbHVlKSB7XG4gICAgICB0aGlzLm5ld1ZhbHVlID0gX3ZhbHVlO1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgIC8vIE1hY09TIEZpcmVGb3ggYW5kIFNhZmFyaSBkbyBub3QgZm9jdXMgd2hlbiBjbGlja2VkXG4gICAgICB0aGlzLiRyZWZzLmlucHV0LmZvY3VzKCk7XG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fID0gc2NyaXB0O1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjb250cm9sXCJ9LFtfYygnbGFiZWwnLHtyZWY6XCJsYWJlbFwiLHN0YXRpY0NsYXNzOlwiYi1jaGVja2JveCBjaGVja2JveCBidXR0b25cIixjbGFzczpbX3ZtLmNoZWNrZWQgPyBfdm0udHlwZSA6IG51bGwsIF92bS5zaXplLCB7XG4gICAgICAgICAgICAnaXMtZGlzYWJsZWQnOiBfdm0uZGlzYWJsZWQsXG4gICAgICAgICAgICAnaXMtZm9jdXNlZCc6IF92bS5pc0ZvY3VzZWRcbiAgICAgICAgfV0sYXR0cnM6e1wiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWR9LG9uOntcImNsaWNrXCI6X3ZtLmZvY3VzLFwia2V5ZG93blwiOmZ1bmN0aW9uKCRldmVudCl7aWYoISgnYnV0dG9uJyBpbiAkZXZlbnQpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJlbnRlclwiLDEzLCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH0kZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0uJHJlZnMubGFiZWwuY2xpY2soKTt9fX0sW192bS5fdChcImRlZmF1bHRcIiksX3ZtLl92KFwiIFwiKSxfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcIm1vZGVsXCIscmF3TmFtZTpcInYtbW9kZWxcIix2YWx1ZTooX3ZtLmNvbXB1dGVkVmFsdWUpLGV4cHJlc3Npb246XCJjb21wdXRlZFZhbHVlXCJ9XSxyZWY6XCJpbnB1dFwiLGF0dHJzOntcInR5cGVcIjpcImNoZWNrYm94XCIsXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcInJlcXVpcmVkXCI6X3ZtLnJlcXVpcmVkLFwibmFtZVwiOl92bS5uYW1lfSxkb21Qcm9wczp7XCJ2YWx1ZVwiOl92bS5uYXRpdmVWYWx1ZSxcImNoZWNrZWRcIjpBcnJheS5pc0FycmF5KF92bS5jb21wdXRlZFZhbHVlKT9fdm0uX2koX3ZtLmNvbXB1dGVkVmFsdWUsX3ZtLm5hdGl2ZVZhbHVlKT4tMTooX3ZtLmNvbXB1dGVkVmFsdWUpfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO30sXCJmb2N1c1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmlzRm9jdXNlZCA9IHRydWU7fSxcImJsdXJcIjpmdW5jdGlvbigkZXZlbnQpe192bS5pc0ZvY3VzZWQgPSBmYWxzZTt9LFwiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXt2YXIgJCRhPV92bS5jb21wdXRlZFZhbHVlLCQkZWw9JGV2ZW50LnRhcmdldCwkJGM9JCRlbC5jaGVja2VkPyh0cnVlKTooZmFsc2UpO2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7dmFyICQkdj1fdm0ubmF0aXZlVmFsdWUsJCRpPV92bS5faSgkJGEsJCR2KTtpZigkJGVsLmNoZWNrZWQpeyQkaTwwJiYoX3ZtLmNvbXB1dGVkVmFsdWU9JCRhLmNvbmNhdChbJCR2XSkpO31lbHNleyQkaT4tMSYmKF92bS5jb21wdXRlZFZhbHVlPSQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpKTt9fWVsc2V7X3ZtLmNvbXB1dGVkVmFsdWU9JCRjO319fX0pXSwyKV0pfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyA9IHVuZGVmaW5lZDtcbiAgLyogc2NvcGVkICovXG4gIGNvbnN0IF9fdnVlX3Njb3BlX2lkX18gPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fID0gZmFsc2U7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIENoZWNrYm94QnV0dG9uID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgQ2hlY2tib3gpO1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgQ2hlY2tib3hCdXR0b24pO1xuICB9XG59O1xudXNlKFBsdWdpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbjtcbmV4cG9ydCB7IENoZWNrYm94QnV0dG9uIH07XG4iLCJpbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdCQ29sbGFwc2UnLFxuICBwcm9wczoge1xuICAgIG9wZW46IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBhbmltYXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdmYWRlJ1xuICAgIH0sXG4gICAgYXJpYUlkOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNPcGVuOiB0aGlzLm9wZW5cbiAgICB9O1xuICB9LFxuICB3YXRjaDoge1xuICAgIG9wZW46IGZ1bmN0aW9uIG9wZW4odmFsdWUpIHtcbiAgICAgIHRoaXMuaXNPcGVuID0gdmFsdWU7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqXHJcbiAgICAqIFRvZ2dsZSBhbmQgZW1pdCBldmVudHNcclxuICAgICovXG4gICAgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICB0aGlzLmlzT3BlbiA9ICF0aGlzLmlzT3BlbjtcbiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTpvcGVuJywgdGhpcy5pc09wZW4pO1xuICAgICAgdGhpcy4kZW1pdCh0aGlzLmlzT3BlbiA/ICdvcGVuJyA6ICdjbG9zZScpO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29sbGFwc2VcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImNvbGxhcHNlLXRyaWdnZXJcIixvbjp7XCJjbGlja1wiOl92bS50b2dnbGV9fSxbX3ZtLl90KFwidHJpZ2dlclwiLG51bGwse29wZW46X3ZtLmlzT3Blbn0pXSwyKSxfdm0uX3YoXCIgXCIpLF9jKCd0cmFuc2l0aW9uJyx7YXR0cnM6e1wibmFtZVwiOl92bS5hbmltYXRpb259fSxbX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTooX3ZtLmlzT3BlbiksZXhwcmVzc2lvbjpcImlzT3BlblwifV0sc3RhdGljQ2xhc3M6XCJjb2xsYXBzZS1jb250ZW50XCIsYXR0cnM6e1wiaWRcIjpfdm0uYXJpYUlkLFwiYXJpYS1leHBhbmRlZFwiOl92bS5pc09wZW59fSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMildKV0sMSl9O1xudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgQ29sbGFwc2UgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBDb2xsYXBzZSk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuZXhwb3J0IHsgQ29sbGFwc2UgfTtcbiIsImltcG9ydCB7IGkgYXMgaXNNb2JpbGUgfSBmcm9tICcuL2NodW5rLWU1ZmNlNDhmLmpzJztcbmltcG9ydCB7IGMgYXMgY29uZmlnIH0gZnJvbSAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgeyBGIGFzIEZvcm1FbGVtZW50TWl4aW4gfSBmcm9tICcuL2NodW5rLTEwYzg1NTI5LmpzJztcblxudmFyIEFNID0gJ0FNJztcbnZhciBQTSA9ICdQTSc7XG52YXIgSE9VUl9GT1JNQVRfMjQgPSAnMjQnO1xudmFyIEhPVVJfRk9STUFUXzEyID0gJzEyJztcblxudmFyIGRlZmF1bHRUaW1lRm9ybWF0dGVyID0gZnVuY3Rpb24gZGVmYXVsdFRpbWVGb3JtYXR0ZXIoZGF0ZSwgdm0pIHtcbiAgdmFyIGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuICB2YXIgbWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpO1xuICB2YXIgc2Vjb25kcyA9IGRhdGUuZ2V0U2Vjb25kcygpO1xuICB2YXIgcGVyaW9kID0gJyc7XG5cbiAgaWYgKHZtLmhvdXJGb3JtYXQgPT09IEhPVVJfRk9STUFUXzEyKSB7XG4gICAgcGVyaW9kID0gJyAnICsgKGhvdXJzIDwgMTIgPyBBTSA6IFBNKTtcblxuICAgIGlmIChob3VycyA+IDEyKSB7XG4gICAgICBob3VycyAtPSAxMjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBob3VycyA9IDEyO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2bS5wYWQoaG91cnMpICsgJzonICsgdm0ucGFkKG1pbnV0ZXMpICsgKHZtLmVuYWJsZVNlY29uZHMgPyAnOicgKyB2bS5wYWQoc2Vjb25kcykgOiAnJykgKyBwZXJpb2Q7XG59O1xuXG52YXIgZGVmYXVsdFRpbWVQYXJzZXIgPSBmdW5jdGlvbiBkZWZhdWx0VGltZVBhcnNlcih0aW1lU3RyaW5nLCB2bSkge1xuICBpZiAodGltZVN0cmluZykge1xuICAgIHZhciBhbSA9IGZhbHNlO1xuXG4gICAgaWYgKHZtLmhvdXJGb3JtYXQgPT09IEhPVVJfRk9STUFUXzEyKSB7XG4gICAgICB2YXIgZGF0ZVN0cmluZzEyID0gdGltZVN0cmluZy5zcGxpdCgnICcpO1xuICAgICAgdGltZVN0cmluZyA9IGRhdGVTdHJpbmcxMlswXTtcbiAgICAgIGFtID0gZGF0ZVN0cmluZzEyWzFdID09PSBBTTtcbiAgICB9XG5cbiAgICB2YXIgdGltZSA9IHRpbWVTdHJpbmcuc3BsaXQoJzonKTtcbiAgICB2YXIgaG91cnMgPSBwYXJzZUludCh0aW1lWzBdLCAxMCk7XG4gICAgdmFyIG1pbnV0ZXMgPSBwYXJzZUludCh0aW1lWzFdLCAxMCk7XG4gICAgdmFyIHNlY29uZHMgPSB2bS5lbmFibGVTZWNvbmRzID8gcGFyc2VJbnQodGltZVsyXSwgMTApIDogMDtcblxuICAgIGlmIChpc05hTihob3VycykgfHwgaG91cnMgPCAwIHx8IGhvdXJzID4gMjMgfHwgdm0uaG91ckZvcm1hdCA9PT0gSE9VUl9GT1JNQVRfMTIgJiYgKGhvdXJzIDwgMSB8fCBob3VycyA+IDEyKSB8fCBpc05hTihtaW51dGVzKSB8fCBtaW51dGVzIDwgMCB8fCBtaW51dGVzID4gNTkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBkID0gbnVsbDtcblxuICAgIGlmICh2bS5jb21wdXRlZFZhbHVlICYmICFpc05hTih2bS5jb21wdXRlZFZhbHVlKSkge1xuICAgICAgZCA9IG5ldyBEYXRlKHZtLmNvbXB1dGVkVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkID0gbmV3IERhdGUoKTtcbiAgICAgIGQuc2V0TWlsbGlzZWNvbmRzKDApO1xuICAgIH1cblxuICAgIGQuc2V0U2Vjb25kcyhzZWNvbmRzKTtcbiAgICBkLnNldE1pbnV0ZXMobWludXRlcyk7XG5cbiAgICBpZiAodm0uaG91ckZvcm1hdCA9PT0gSE9VUl9GT1JNQVRfMTIpIHtcbiAgICAgIGlmIChhbSAmJiBob3VycyA9PT0gMTIpIHtcbiAgICAgICAgaG91cnMgPSAwO1xuICAgICAgfSBlbHNlIGlmICghYW0gJiYgaG91cnMgIT09IDEyKSB7XG4gICAgICAgIGhvdXJzICs9IDEyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGQuc2V0SG91cnMoaG91cnMpO1xuICAgIHJldHVybiBuZXcgRGF0ZShkLmdldFRpbWUoKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBUaW1lcGlja2VyTWl4aW4gPSB7XG4gIG1peGluczogW0Zvcm1FbGVtZW50TWl4aW5dLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczoge1xuICAgIHZhbHVlOiBEYXRlLFxuICAgIGlubGluZTogQm9vbGVhbixcbiAgICBtaW5UaW1lOiBEYXRlLFxuICAgIG1heFRpbWU6IERhdGUsXG4gICAgcGxhY2Vob2xkZXI6IFN0cmluZyxcbiAgICBlZGl0YWJsZTogQm9vbGVhbixcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBob3VyRm9ybWF0OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBIT1VSX0ZPUk1BVF8yNCxcbiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gSE9VUl9GT1JNQVRfMjQgfHwgdmFsdWUgPT09IEhPVVJfRk9STUFUXzEyO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5jcmVtZW50TWludXRlczoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgaW5jcmVtZW50U2Vjb25kczoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgdGltZUZvcm1hdHRlcjoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdChkYXRlLCB2bSkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWZhdWx0VGltZUZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBjb25maWcuZGVmYXVsdFRpbWVGb3JtYXR0ZXIoZGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRUaW1lRm9ybWF0dGVyKGRhdGUsIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdGltZVBhcnNlcjoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdChkYXRlLCB2bSkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWZhdWx0VGltZVBhcnNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBjb25maWcuZGVmYXVsdFRpbWVQYXJzZXIoZGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRUaW1lUGFyc2VyKGRhdGUsIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbW9iaWxlTmF0aXZlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiBjb25maWcuZGVmYXVsdFRpbWVwaWNrZXJNb2JpbGVOYXRpdmU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwb3NpdGlvbjogU3RyaW5nLFxuICAgIHVuc2VsZWN0YWJsZVRpbWVzOiBBcnJheSxcbiAgICBvcGVuT25Gb2N1czogQm9vbGVhbixcbiAgICBlbmFibGVTZWNvbmRzOiBCb29sZWFuLFxuICAgIGRlZmF1bHRNaW51dGVzOiBOdW1iZXIsXG4gICAgZGVmYXVsdFNlY29uZHM6IE51bWJlclxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkYXRlU2VsZWN0ZWQ6IHRoaXMudmFsdWUsXG4gICAgICBob3Vyc1NlbGVjdGVkOiBudWxsLFxuICAgICAgbWludXRlc1NlbGVjdGVkOiBudWxsLFxuICAgICAgc2Vjb25kc1NlbGVjdGVkOiBudWxsLFxuICAgICAgbWVyaWRpZW5TZWxlY3RlZDogbnVsbCxcbiAgICAgIF9lbGVtZW50UmVmOiAnaW5wdXQnLFxuICAgICAgQU06IEFNLFxuICAgICAgUE06IFBNLFxuICAgICAgSE9VUl9GT1JNQVRfMjQ6IEhPVVJfRk9STUFUXzI0LFxuICAgICAgSE9VUl9GT1JNQVRfMTI6IEhPVVJfRk9STUFUXzEyXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBjb21wdXRlZFZhbHVlOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZVNlbGVjdGVkO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGF0ZVNlbGVjdGVkID0gdmFsdWU7XG4gICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaG91cnM6IGZ1bmN0aW9uIGhvdXJzKCkge1xuICAgICAgdmFyIGhvdXJzID0gW107XG4gICAgICB2YXIgbnVtYmVyT2ZIb3VycyA9IHRoaXMuaXNIb3VyRm9ybWF0MjQgPyAyNCA6IDEyO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlck9mSG91cnM7IGkrKykge1xuICAgICAgICB2YXIgdmFsdWUgPSBpO1xuICAgICAgICB2YXIgbGFiZWwgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNIb3VyRm9ybWF0MjQpIHtcbiAgICAgICAgICB2YWx1ZSA9IGkgKyAxO1xuICAgICAgICAgIGxhYmVsID0gdmFsdWU7XG5cbiAgICAgICAgICBpZiAodGhpcy5tZXJpZGllblNlbGVjdGVkID09PSB0aGlzLkFNKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IDEyKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWVyaWRpZW5TZWxlY3RlZCA9PT0gdGhpcy5QTSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAxMikge1xuICAgICAgICAgICAgICB2YWx1ZSArPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBob3Vycy5wdXNoKHtcbiAgICAgICAgICBsYWJlbDogdGhpcy5mb3JtYXROdW1iZXIobGFiZWwpLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhvdXJzO1xuICAgIH0sXG4gICAgbWludXRlczogZnVuY3Rpb24gbWludXRlcygpIHtcbiAgICAgIHZhciBtaW51dGVzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjA7IGkgKz0gdGhpcy5pbmNyZW1lbnRNaW51dGVzKSB7XG4gICAgICAgIG1pbnV0ZXMucHVzaCh7XG4gICAgICAgICAgbGFiZWw6IHRoaXMuZm9ybWF0TnVtYmVyKGksIHRydWUpLFxuICAgICAgICAgIHZhbHVlOiBpXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWludXRlcztcbiAgICB9LFxuICAgIHNlY29uZHM6IGZ1bmN0aW9uIHNlY29uZHMoKSB7XG4gICAgICB2YXIgc2Vjb25kcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDYwOyBpICs9IHRoaXMuaW5jcmVtZW50U2Vjb25kcykge1xuICAgICAgICBzZWNvbmRzLnB1c2goe1xuICAgICAgICAgIGxhYmVsOiB0aGlzLmZvcm1hdE51bWJlcihpLCB0cnVlKSxcbiAgICAgICAgICB2YWx1ZTogaVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlY29uZHM7XG4gICAgfSxcbiAgICBtZXJpZGllbnM6IGZ1bmN0aW9uIG1lcmlkaWVucygpIHtcbiAgICAgIHJldHVybiBbQU0sIFBNXTtcbiAgICB9LFxuICAgIGlzTW9iaWxlOiBmdW5jdGlvbiBpc01vYmlsZSQxKCkge1xuICAgICAgcmV0dXJuIHRoaXMubW9iaWxlTmF0aXZlICYmIGlzTW9iaWxlLmFueSgpO1xuICAgIH0sXG4gICAgaXNIb3VyRm9ybWF0MjQ6IGZ1bmN0aW9uIGlzSG91ckZvcm1hdDI0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaG91ckZvcm1hdCA9PT0gSE9VUl9GT1JNQVRfMjQ7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIGhvdXJGb3JtYXQ6IGZ1bmN0aW9uIGhvdXJGb3JtYXQoKSB7XG4gICAgICBpZiAodGhpcy5ob3Vyc1NlbGVjdGVkICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMubWVyaWRpZW5TZWxlY3RlZCA9IHRoaXMuaG91cnNTZWxlY3RlZCA+PSAxMiA/IFBNIDogQU07XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogV2hlbiB2LW1vZGVsIGlzIGNoYW5nZWQ6XHJcbiAgICAgKiAgIDEuIFVwZGF0ZSBpbnRlcm5hbCB2YWx1ZS5cclxuICAgICAqICAgMi4gSWYgaXQncyBpbnZhbGlkLCB2YWxpZGF0ZSBhZ2Fpbi5cclxuICAgICAqL1xuICAgIHZhbHVlOiB7XG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7XG4gICAgICAgICF0aGlzLmlzVmFsaWQgJiYgdGhpcy4kcmVmcy5pbnB1dC5jaGVja0h0bWw1VmFsaWRpdHkoKTtcbiAgICAgIH0sXG4gICAgICBpbW1lZGlhdGU6IHRydWVcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBvbk1lcmlkaWVuQ2hhbmdlOiBmdW5jdGlvbiBvbk1lcmlkaWVuQ2hhbmdlKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5ob3Vyc1NlbGVjdGVkICE9PSBudWxsKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gUE0pIHtcbiAgICAgICAgICB0aGlzLmhvdXJzU2VsZWN0ZWQgKz0gMTI7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IEFNKSB7XG4gICAgICAgICAgdGhpcy5ob3Vyc1NlbGVjdGVkIC09IDEyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlRGF0ZVNlbGVjdGVkKHRoaXMuaG91cnNTZWxlY3RlZCwgdGhpcy5taW51dGVzU2VsZWN0ZWQsIHRoaXMuZW5hYmxlU2Vjb25kcyA/IHRoaXMuc2Vjb25kc1NlbGVjdGVkIDogMCwgdmFsdWUpO1xuICAgIH0sXG4gICAgb25Ib3Vyc0NoYW5nZTogZnVuY3Rpb24gb25Ib3Vyc0NoYW5nZSh2YWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLm1pbnV0ZXNTZWxlY3RlZCAmJiB0aGlzLmRlZmF1bHRNaW51dGVzKSB7XG4gICAgICAgIHRoaXMubWludXRlc1NlbGVjdGVkID0gdGhpcy5kZWZhdWx0TWludXRlcztcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnNlY29uZHNTZWxlY3RlZCAmJiB0aGlzLmRlZmF1bHRTZWNvbmRzKSB7XG4gICAgICAgIHRoaXMuc2Vjb25kc1NlbGVjdGVkID0gdGhpcy5kZWZhdWx0U2Vjb25kcztcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGVEYXRlU2VsZWN0ZWQocGFyc2VJbnQodmFsdWUsIDEwKSwgdGhpcy5taW51dGVzU2VsZWN0ZWQsIHRoaXMuZW5hYmxlU2Vjb25kcyA/IHRoaXMuc2Vjb25kc1NlbGVjdGVkIDogMCwgdGhpcy5tZXJpZGllblNlbGVjdGVkKTtcbiAgICB9LFxuICAgIG9uTWludXRlc0NoYW5nZTogZnVuY3Rpb24gb25NaW51dGVzQ2hhbmdlKHZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMuc2Vjb25kc1NlbGVjdGVkICYmIHRoaXMuZGVmYXVsdFNlY29uZHMpIHtcbiAgICAgICAgdGhpcy5zZWNvbmRzU2VsZWN0ZWQgPSB0aGlzLmRlZmF1bHRTZWNvbmRzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVwZGF0ZURhdGVTZWxlY3RlZCh0aGlzLmhvdXJzU2VsZWN0ZWQsIHBhcnNlSW50KHZhbHVlLCAxMCksIHRoaXMuZW5hYmxlU2Vjb25kcyA/IHRoaXMuc2Vjb25kc1NlbGVjdGVkIDogMCwgdGhpcy5tZXJpZGllblNlbGVjdGVkKTtcbiAgICB9LFxuICAgIG9uU2Vjb25kc0NoYW5nZTogZnVuY3Rpb24gb25TZWNvbmRzQ2hhbmdlKHZhbHVlKSB7XG4gICAgICB0aGlzLnVwZGF0ZURhdGVTZWxlY3RlZCh0aGlzLmhvdXJzU2VsZWN0ZWQsIHRoaXMubWludXRlc1NlbGVjdGVkLCBwYXJzZUludCh2YWx1ZSwgMTApLCB0aGlzLm1lcmlkaWVuU2VsZWN0ZWQpO1xuICAgIH0sXG4gICAgdXBkYXRlRGF0ZVNlbGVjdGVkOiBmdW5jdGlvbiB1cGRhdGVEYXRlU2VsZWN0ZWQoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1lcmlkaWVucykge1xuICAgICAgaWYgKGhvdXJzICE9IG51bGwgJiYgbWludXRlcyAhPSBudWxsICYmICghdGhpcy5pc0hvdXJGb3JtYXQyNCAmJiBtZXJpZGllbnMgIT09IG51bGwgfHwgdGhpcy5pc0hvdXJGb3JtYXQyNCkpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBudWxsO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbXB1dGVkVmFsdWUgJiYgIWlzTmFOKHRoaXMuY29tcHV0ZWRWYWx1ZSkpIHtcbiAgICAgICAgICB0aW1lID0gbmV3IERhdGUodGhpcy5jb21wdXRlZFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgICB0aW1lLnNldE1pbGxpc2Vjb25kcygwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUuc2V0SG91cnMoaG91cnMpO1xuICAgICAgICB0aW1lLnNldE1pbnV0ZXMobWludXRlcyk7XG4gICAgICAgIHRpbWUuc2V0U2Vjb25kcyhzZWNvbmRzKTtcbiAgICAgICAgdGhpcy5jb21wdXRlZFZhbHVlID0gbmV3IERhdGUodGltZS5nZXRUaW1lKCkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXBkYXRlSW50ZXJuYWxTdGF0ZTogZnVuY3Rpb24gdXBkYXRlSW50ZXJuYWxTdGF0ZSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaG91cnNTZWxlY3RlZCA9IHZhbHVlLmdldEhvdXJzKCk7XG4gICAgICAgIHRoaXMubWludXRlc1NlbGVjdGVkID0gdmFsdWUuZ2V0TWludXRlcygpO1xuICAgICAgICB0aGlzLnNlY29uZHNTZWxlY3RlZCA9IHZhbHVlLmdldFNlY29uZHMoKTtcbiAgICAgICAgdGhpcy5tZXJpZGllblNlbGVjdGVkID0gdmFsdWUuZ2V0SG91cnMoKSA+PSAxMiA/IFBNIDogQU07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhvdXJzU2VsZWN0ZWQgPSBudWxsO1xuICAgICAgICB0aGlzLm1pbnV0ZXNTZWxlY3RlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2Vjb25kc1NlbGVjdGVkID0gbnVsbDtcbiAgICAgICAgdGhpcy5tZXJpZGllblNlbGVjdGVkID0gQU07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGF0ZVNlbGVjdGVkID0gdmFsdWU7XG4gICAgfSxcbiAgICBpc0hvdXJEaXNhYmxlZDogZnVuY3Rpb24gaXNIb3VyRGlzYWJsZWQoaG91cikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLm1pblRpbWUpIHtcbiAgICAgICAgdmFyIG1pbkhvdXJzID0gdGhpcy5taW5UaW1lLmdldEhvdXJzKCk7XG4gICAgICAgIGRpc2FibGVkID0gaG91ciA8IG1pbkhvdXJzO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5tYXhUaW1lKSB7XG4gICAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgICB2YXIgbWF4SG91cnMgPSB0aGlzLm1heFRpbWUuZ2V0SG91cnMoKTtcbiAgICAgICAgICBkaXNhYmxlZCA9IGhvdXIgPiBtYXhIb3VycztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy51bnNlbGVjdGFibGVUaW1lcykge1xuICAgICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgICAgdmFyIHVuc2VsZWN0YWJsZSA9IHRoaXMudW5zZWxlY3RhYmxlVGltZXMuZmlsdGVyKGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuZW5hYmxlU2Vjb25kcyAmJiBfdGhpcy5zZWNvbmRzU2VsZWN0ZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRpbWUuZ2V0SG91cnMoKSA9PT0gaG91ciAmJiB0aW1lLmdldE1pbnV0ZXMoKSA9PT0gX3RoaXMubWludXRlc1NlbGVjdGVkICYmIHRpbWUuZ2V0U2Vjb25kcygpID09PSBfdGhpcy5zZWNvbmRzU2VsZWN0ZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzLm1pbnV0ZXNTZWxlY3RlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGltZS5nZXRIb3VycygpID09PSBob3VyICYmIHRpbWUuZ2V0TWludXRlcygpID09PSBfdGhpcy5taW51dGVzU2VsZWN0ZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gdGltZS5nZXRIb3VycygpID09PSBob3VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRpc2FibGVkID0gdW5zZWxlY3RhYmxlLmxlbmd0aCA+IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRpc2FibGVkO1xuICAgIH0sXG4gICAgaXNNaW51dGVEaXNhYmxlZDogZnVuY3Rpb24gaXNNaW51dGVEaXNhYmxlZChtaW51dGUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuaG91cnNTZWxlY3RlZCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAodGhpcy5pc0hvdXJEaXNhYmxlZCh0aGlzLmhvdXJzU2VsZWN0ZWQpKSB7XG4gICAgICAgICAgZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLm1pblRpbWUpIHtcbiAgICAgICAgICAgIHZhciBtaW5Ib3VycyA9IHRoaXMubWluVGltZS5nZXRIb3VycygpO1xuICAgICAgICAgICAgdmFyIG1pbk1pbnV0ZXMgPSB0aGlzLm1pblRpbWUuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgZGlzYWJsZWQgPSB0aGlzLmhvdXJzU2VsZWN0ZWQgPT09IG1pbkhvdXJzICYmIG1pbnV0ZSA8IG1pbk1pbnV0ZXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMubWF4VGltZSkge1xuICAgICAgICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICAgICAgICB2YXIgbWF4SG91cnMgPSB0aGlzLm1heFRpbWUuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgICAgdmFyIG1heE1pbnV0ZXMgPSB0aGlzLm1heFRpbWUuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICBkaXNhYmxlZCA9IHRoaXMuaG91cnNTZWxlY3RlZCA9PT0gbWF4SG91cnMgJiYgbWludXRlID4gbWF4TWludXRlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy51bnNlbGVjdGFibGVUaW1lcykge1xuICAgICAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHZhciB1bnNlbGVjdGFibGUgPSB0aGlzLnVuc2VsZWN0YWJsZVRpbWVzLmZpbHRlcihmdW5jdGlvbiAodGltZSkge1xuICAgICAgICAgICAgICBpZiAoX3RoaXMyLmVuYWJsZVNlY29uZHMgJiYgX3RoaXMyLnNlY29uZHNTZWxlY3RlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aW1lLmdldEhvdXJzKCkgPT09IF90aGlzMi5ob3Vyc1NlbGVjdGVkICYmIHRpbWUuZ2V0TWludXRlcygpID09PSBtaW51dGUgJiYgdGltZS5nZXRTZWNvbmRzKCkgPT09IF90aGlzMi5zZWNvbmRzU2VsZWN0ZWQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpbWUuZ2V0SG91cnMoKSA9PT0gX3RoaXMyLmhvdXJzU2VsZWN0ZWQgJiYgdGltZS5nZXRNaW51dGVzKCkgPT09IG1pbnV0ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkaXNhYmxlZCA9IHVuc2VsZWN0YWJsZS5sZW5ndGggPiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGlzYWJsZWQ7XG4gICAgfSxcbiAgICBpc1NlY29uZERpc2FibGVkOiBmdW5jdGlvbiBpc1NlY29uZERpc2FibGVkKHNlY29uZCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAodGhpcy5taW51dGVzU2VsZWN0ZWQgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNNaW51dGVEaXNhYmxlZCh0aGlzLm1pbnV0ZXNTZWxlY3RlZCkpIHtcbiAgICAgICAgICBkaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMubWluVGltZSkge1xuICAgICAgICAgICAgdmFyIG1pbkhvdXJzID0gdGhpcy5taW5UaW1lLmdldEhvdXJzKCk7XG4gICAgICAgICAgICB2YXIgbWluTWludXRlcyA9IHRoaXMubWluVGltZS5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICB2YXIgbWluU2Vjb25kcyA9IHRoaXMubWluVGltZS5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICBkaXNhYmxlZCA9IHRoaXMuaG91cnNTZWxlY3RlZCA9PT0gbWluSG91cnMgJiYgdGhpcy5taW51dGVzU2VsZWN0ZWQgPT09IG1pbk1pbnV0ZXMgJiYgc2Vjb25kIDwgbWluU2Vjb25kcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5tYXhUaW1lKSB7XG4gICAgICAgICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgICAgICAgIHZhciBtYXhIb3VycyA9IHRoaXMubWF4VGltZS5nZXRIb3VycygpO1xuICAgICAgICAgICAgICB2YXIgbWF4TWludXRlcyA9IHRoaXMubWF4VGltZS5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICAgIHZhciBtYXhTZWNvbmRzID0gdGhpcy5tYXhUaW1lLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgICAgZGlzYWJsZWQgPSB0aGlzLmhvdXJzU2VsZWN0ZWQgPT09IG1heEhvdXJzICYmIHRoaXMubWludXRlc1NlbGVjdGVkID09PSBtYXhNaW51dGVzICYmIHNlY29uZCA+IG1heFNlY29uZHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudW5zZWxlY3RhYmxlVGltZXMpIHtcbiAgICAgICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgICAgICB2YXIgdW5zZWxlY3RhYmxlID0gdGhpcy51bnNlbGVjdGFibGVUaW1lcy5maWx0ZXIoZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRpbWUuZ2V0SG91cnMoKSA9PT0gX3RoaXMzLmhvdXJzU2VsZWN0ZWQgJiYgdGltZS5nZXRNaW51dGVzKCkgPT09IF90aGlzMy5taW51dGVzU2VsZWN0ZWQgJiYgdGltZS5nZXRTZWNvbmRzKCkgPT09IHNlY29uZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGlzYWJsZWQgPSB1bnNlbGVjdGFibGUubGVuZ3RoID4gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRpc2FibGVkO1xuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBQYXJzZSBzdHJpbmcgaW50byBkYXRlXHJcbiAgICAqL1xuICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkge1xuICAgICAgdmFyIGRhdGUgPSB0aGlzLnRpbWVQYXJzZXIodmFsdWUsIHRoaXMpO1xuICAgICAgdGhpcy51cGRhdGVJbnRlcm5hbFN0YXRlKGRhdGUpO1xuXG4gICAgICBpZiAoZGF0ZSAmJiAhaXNOYU4oZGF0ZSkpIHtcbiAgICAgICAgdGhpcy5jb21wdXRlZFZhbHVlID0gZGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvcmNlIHJlZnJlc2ggaW5wdXQgdmFsdWUgd2hlbiBub3QgdmFsaWQgZGF0ZVxuICAgICAgICB0aGlzLmNvbXB1dGVkVmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLiRyZWZzLmlucHV0Lm5ld1ZhbHVlID0gdGhpcy5jb21wdXRlZFZhbHVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBUb2dnbGUgdGltZXBpY2tlclxyXG4gICAgKi9cbiAgICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZShhY3RpdmUpIHtcbiAgICAgIGlmICh0aGlzLiRyZWZzLmRyb3Bkb3duKSB7XG4gICAgICAgIHRoaXMuJHJlZnMuZHJvcGRvd24uaXNBY3RpdmUgPSB0eXBlb2YgYWN0aXZlID09PSAnYm9vbGVhbicgPyBhY3RpdmUgOiAhdGhpcy4kcmVmcy5kcm9wZG93bi5pc0FjdGl2ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLypcclxuICAgICogQ2xvc2UgdGltZXBpY2tlclxyXG4gICAgKi9cbiAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICB0aGlzLnRvZ2dsZShmYWxzZSk7XG4gICAgfSxcblxuICAgIC8qXHJcbiAgICAqIENhbGwgZGVmYXVsdCBvbkZvY3VzIG1ldGhvZCBhbmQgc2hvdyB0aW1lcGlja2VyXHJcbiAgICAqL1xuICAgIGhhbmRsZU9uRm9jdXM6IGZ1bmN0aW9uIGhhbmRsZU9uRm9jdXMoKSB7XG4gICAgICB0aGlzLm9uRm9jdXMoKTtcblxuICAgICAgaWYgKHRoaXMub3Blbk9uRm9jdXMpIHtcbiAgICAgICAgdGhpcy50b2dnbGUodHJ1ZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qXHJcbiAgICAqIEZvcm1hdCBkYXRlIGludG8gc3RyaW5nICdISC1NTS1TUydcclxuICAgICovXG4gICAgZm9ybWF0SEhNTVNTOiBmdW5jdGlvbiBmb3JtYXRISE1NU1ModmFsdWUpIHtcbiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUodmFsdWUpO1xuXG4gICAgICBpZiAodmFsdWUgJiYgIWlzTmFOKGRhdGUpKSB7XG4gICAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgPSBkYXRlLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgdmFyIHNlY29uZHMgPSBkYXRlLmdldFNlY29uZHMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0TnVtYmVyKGhvdXJzLCB0cnVlKSArICc6JyArIHRoaXMuZm9ybWF0TnVtYmVyKG1pbnV0ZXMsIHRydWUpICsgJzonICsgdGhpcy5mb3JtYXROdW1iZXIoc2Vjb25kcywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnJztcbiAgICB9LFxuXG4gICAgLypcclxuICAgICogUGFyc2UgdGltZSBmcm9tIHN0cmluZ1xyXG4gICAgKi9cbiAgICBvbkNoYW5nZU5hdGl2ZVBpY2tlcjogZnVuY3Rpb24gb25DaGFuZ2VOYXRpdmVQaWNrZXIoZXZlbnQpIHtcbiAgICAgIHZhciBkYXRlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXG4gICAgICBpZiAoZGF0ZSkge1xuICAgICAgICB2YXIgdGltZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuY29tcHV0ZWRWYWx1ZSAmJiAhaXNOYU4odGhpcy5jb21wdXRlZFZhbHVlKSkge1xuICAgICAgICAgIHRpbWUgPSBuZXcgRGF0ZSh0aGlzLmNvbXB1dGVkVmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIHRpbWUuc2V0TWlsbGlzZWNvbmRzKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHQgPSBkYXRlLnNwbGl0KCc6Jyk7XG4gICAgICAgIHRpbWUuc2V0SG91cnMocGFyc2VJbnQodFswXSwgMTApKTtcbiAgICAgICAgdGltZS5zZXRNaW51dGVzKHBhcnNlSW50KHRbMV0sIDEwKSk7XG4gICAgICAgIHRpbWUuc2V0U2Vjb25kcyh0WzJdID8gcGFyc2VJbnQodFsyXSwgMTApIDogMCk7XG4gICAgICAgIHRoaXMuY29tcHV0ZWRWYWx1ZSA9IG5ldyBEYXRlKHRpbWUuZ2V0VGltZSgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29tcHV0ZWRWYWx1ZSA9IG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICBmb3JtYXROdW1iZXI6IGZ1bmN0aW9uIGZvcm1hdE51bWJlcih2YWx1ZSwgcHJlcGVuZFplcm8pIHtcbiAgICAgIHJldHVybiB0aGlzLmlzSG91ckZvcm1hdDI0IHx8IHByZXBlbmRaZXJvID8gdGhpcy5wYWQodmFsdWUpIDogdmFsdWU7XG4gICAgfSxcbiAgICBwYWQ6IGZ1bmN0aW9uIHBhZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA8IDEwID8gJzAnIDogJycpICsgdmFsdWU7XG4gICAgfSxcblxuICAgIC8qXHJcbiAgICAqIEZvcm1hdCBkYXRlIGludG8gc3RyaW5nXHJcbiAgICAqL1xuICAgIGZvcm1hdFZhbHVlOiBmdW5jdGlvbiBmb3JtYXRWYWx1ZShkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSAmJiAhaXNOYU4oZGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZUZvcm1hdHRlcihkYXRlLCB0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqIEtleXByZXNzIGV2ZW50IHRoYXQgaXMgYm91bmQgdG8gdGhlIGRvY3VtZW50LlxyXG4gICAgICovXG4gICAga2V5UHJlc3M6IGZ1bmN0aW9uIGtleVByZXNzKGV2ZW50KSB7XG4gICAgICAvLyBFc2Mga2V5XG4gICAgICBpZiAodGhpcy4kcmVmcy5kcm9wZG93biAmJiB0aGlzLiRyZWZzLmRyb3Bkb3duLmlzQWN0aXZlICYmIGV2ZW50LmtleUNvZGUgPT09IDI3KSB7XG4gICAgICAgIHRoaXMudG9nZ2xlKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMua2V5UHJlc3MpO1xuICAgIH1cbiAgfSxcbiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5rZXlQcmVzcyk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgeyBUaW1lcGlja2VyTWl4aW4gYXMgVCB9O1xuIiwiaW1wb3J0IHsgYyBhcyBjb25maWcgfSBmcm9tICcuL2NodW5rLTllMzIwN2NjLmpzJztcbmltcG9ydCB7IF8gYXMgX192dWVfbm9ybWFsaXplX18gfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcblxuLy9cbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdCRHJvcGRvd24nLFxuICBwcm9wczoge1xuICAgIHZhbHVlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIE9iamVjdCwgQXJyYXksIEZ1bmN0aW9uXSxcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9LFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGhvdmVyYWJsZTogQm9vbGVhbixcbiAgICBpbmxpbmU6IEJvb2xlYW4sXG4gICAgcG9zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbJ2lzLXRvcC1yaWdodCcsICdpcy10b3AtbGVmdCcsICdpcy1ib3R0b20tbGVmdCddLmluZGV4T2YodmFsdWUpID4gLTE7XG4gICAgICB9XG4gICAgfSxcbiAgICBtb2JpbGVNb2RhbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gY29uZmlnLmRlZmF1bHREcm9wZG93bk1vYmlsZU1vZGFsO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXJpYVJvbGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICBhbmltYXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdmYWRlJ1xuICAgIH0sXG4gICAgbXVsdGlwbGU6IEJvb2xlYW4sXG4gICAgY2xvc2VPbkNsaWNrOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0ZWQ6IHRoaXMudmFsdWUsXG4gICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgICBpc0hvdmVyYWJsZTogdGhpcy5ob3ZlcmFibGUsXG4gICAgICBfaXNEcm9wZG93bjogdHJ1ZSAvLyBVc2VkIGludGVybmFsbHkgYnkgRHJvcGRvd25JdGVtXG5cbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIHJvb3RDbGFzc2VzOiBmdW5jdGlvbiByb290Q2xhc3NlcygpIHtcbiAgICAgIHJldHVybiBbdGhpcy5wb3NpdGlvbiwge1xuICAgICAgICAnaXMtZGlzYWJsZWQnOiB0aGlzLmRpc2FibGVkLFxuICAgICAgICAnaXMtaG92ZXJhYmxlJzogdGhpcy5ob3ZlcmFibGUsXG4gICAgICAgICdpcy1pbmxpbmUnOiB0aGlzLmlubGluZSxcbiAgICAgICAgJ2lzLWFjdGl2ZSc6IHRoaXMuaXNBY3RpdmUgfHwgdGhpcy5pbmxpbmUsXG4gICAgICAgICdpcy1tb2JpbGUtbW9kYWwnOiB0aGlzLmlzTW9iaWxlTW9kYWxcbiAgICAgIH1dO1xuICAgIH0sXG4gICAgaXNNb2JpbGVNb2RhbDogZnVuY3Rpb24gaXNNb2JpbGVNb2RhbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1vYmlsZU1vZGFsICYmICF0aGlzLmlubGluZSAmJiAhdGhpcy5ob3ZlcmFibGU7XG4gICAgfSxcbiAgICBhcmlhUm9sZU1lbnU6IGZ1bmN0aW9uIGFyaWFSb2xlTWVudSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmFyaWFSb2xlID09PSAnbWVudScgfHwgdGhpcy5hcmlhUm9sZSA9PT0gJ2xpc3QnID8gdGhpcy5hcmlhUm9sZSA6IG51bGw7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIC8qKlxyXG4gICAgKiBXaGVuIHYtbW9kZWwgaXMgY2hhbmdlZCBzZXQgdGhlIG5ldyBzZWxlY3RlZCBpdGVtLlxyXG4gICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoX3ZhbHVlKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gX3ZhbHVlO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogRW1pdCBldmVudCB3aGVuIGlzQWN0aXZlIHZhbHVlIGlzIGNoYW5nZWQuXHJcbiAgICAqL1xuICAgIGlzQWN0aXZlOiBmdW5jdGlvbiBpc0FjdGl2ZSh2YWx1ZSkge1xuICAgICAgdGhpcy4kZW1pdCgnYWN0aXZlLWNoYW5nZScsIHZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKipcclxuICAgICogQ2xpY2sgbGlzdGVuZXIgZnJvbSBEcm9wZG93bkl0ZW0uXHJcbiAgICAqICAgMS4gU2V0IG5ldyBzZWxlY3RlZCBpdGVtLlxyXG4gICAgKiAgIDIuIEVtaXQgaW5wdXQgZXZlbnQgdG8gdXBkYXRlIHRoZSB1c2VyIHYtbW9kZWwuXHJcbiAgICAqICAgMy4gQ2xvc2UgdGhlIGRyb3Bkb3duLlxyXG4gICAgKi9cbiAgICBzZWxlY3RJdGVtOiBmdW5jdGlvbiBzZWxlY3RJdGVtKHZhbHVlKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5tdWx0aXBsZSkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZCkge1xuICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuc2VsZWN0ZWQuaW5kZXhPZih2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkLnB1c2godmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBbdmFsdWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgdGhpcy5zZWxlY3RlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgdGhpcy5zZWxlY3RlZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB0aGlzLnNlbGVjdGVkKTtcblxuICAgICAgaWYgKCF0aGlzLm11bHRpcGxlKSB7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSAhdGhpcy5jbG9zZU9uQ2xpY2s7XG5cbiAgICAgICAgaWYgKHRoaXMuaG92ZXJhYmxlICYmIHRoaXMuY2xvc2VPbkNsaWNrKSB7XG4gICAgICAgICAgdGhpcy5pc0hvdmVyYWJsZSA9IGZhbHNlOyAvLyBUaW1lb3V0IGZvciB0aGUgYW5pbWF0aW9uIGNvbXBsZXRlIGJlZm9yZSBkZXN0cm95aW5nXG5cbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmlzSG92ZXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgICB9LCAyNTApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBXaGl0ZS1saXN0ZWQgaXRlbXMgdG8gbm90IGNsb3NlIHdoZW4gY2xpY2tlZC5cclxuICAgICovXG4gICAgaXNJbldoaXRlTGlzdDogZnVuY3Rpb24gaXNJbldoaXRlTGlzdChlbCkge1xuICAgICAgaWYgKGVsID09PSB0aGlzLiRyZWZzLmRyb3Bkb3duTWVudSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoZWwgPT09IHRoaXMuJHJlZnMudHJpZ2dlcikgcmV0dXJuIHRydWU7IC8vIEFsbCBjaGlkcmVuIGZyb20gZHJvcGRvd25cblxuICAgICAgaWYgKHRoaXMuJHJlZnMuZHJvcGRvd25NZW51ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kcmVmcy5kcm9wZG93bk1lbnUucXVlcnlTZWxlY3RvckFsbCgnKicpO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBjaGlsZHJlbltTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoZWwgPT09IGNoaWxkKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyBBbGwgY2hpbGRyZW4gZnJvbSB0cmlnZ2VyXG5cblxuICAgICAgaWYgKHRoaXMuJHJlZnMudHJpZ2dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBfY2hpbGRyZW4gPSB0aGlzLiRyZWZzLnRyaWdnZXIucXVlcnlTZWxlY3RvckFsbCgnKicpO1xuXG4gICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBfY2hpbGRyZW5bU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgICAgIHZhciBfY2hpbGQgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChlbCA9PT0gX2NoaWxkKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogQ2xvc2UgZHJvcGRvd24gaWYgY2xpY2tlZCBvdXRzaWRlLlxyXG4gICAgKi9cbiAgICBjbGlja2VkT3V0c2lkZTogZnVuY3Rpb24gY2xpY2tlZE91dHNpZGUoZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLmlubGluZSkgcmV0dXJuO1xuICAgICAgaWYgKCF0aGlzLmlzSW5XaGl0ZUxpc3QoZXZlbnQudGFyZ2V0KSkgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogVG9nZ2xlIGRyb3Bkb3duIGlmIGl0J3Mgbm90IGRpc2FibGVkLlxyXG4gICAgKi9cbiAgICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAoIXRoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgLy8gaWYgbm90IGFjdGl2ZSwgdG9nZ2xlIGFmdGVyIGNsaWNrT3V0c2lkZSBldmVudFxuICAgICAgICAvLyB0aGlzIGZpeGVzIHRvZ2dsaW5nIHByb2dyYW1tYXRpY1xuICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gIV90aGlzMi5pc0FjdGl2ZTtcbiAgICAgICAgICBfdGhpczIuaXNBY3RpdmUgPSB2YWx1ZTsgLy8gVnVlIDIuNi54ID8/P1xuXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLmlzQWN0aXZlID0gdmFsdWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9ICF0aGlzLmlzQWN0aXZlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja2VkT3V0c2lkZSk7XG4gICAgfVxuICB9LFxuICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrZWRPdXRzaWRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImRyb3Bkb3duXCIsY2xhc3M6X3ZtLnJvb3RDbGFzc2VzfSxbKCFfdm0uaW5saW5lKT9fYygnZGl2Jyx7cmVmOlwidHJpZ2dlclwiLHN0YXRpY0NsYXNzOlwiZHJvcGRvd24tdHJpZ2dlclwiLGF0dHJzOntcInJvbGVcIjpcImJ1dHRvblwiLFwiYXJpYS1oYXNwb3B1cFwiOlwidHJ1ZVwifSxvbjp7XCJjbGlja1wiOl92bS50b2dnbGV9fSxbX3ZtLl90KFwidHJpZ2dlclwiKV0sMik6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygndHJhbnNpdGlvbicse2F0dHJzOntcIm5hbWVcIjpfdm0uYW5pbWF0aW9ufX0sWyhfdm0uaXNNb2JpbGVNb2RhbCk/X2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTooX3ZtLmlzQWN0aXZlKSxleHByZXNzaW9uOlwiaXNBY3RpdmVcIn1dLHN0YXRpY0NsYXNzOlwiYmFja2dyb3VuZFwiLGF0dHJzOntcImFyaWEtaGlkZGVuXCI6IV92bS5pc0FjdGl2ZX19KTpfdm0uX2UoKV0pLF92bS5fdihcIiBcIiksX2MoJ3RyYW5zaXRpb24nLHthdHRyczp7XCJuYW1lXCI6X3ZtLmFuaW1hdGlvbn19LFtfYygnZGl2Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOigoIV92bS5kaXNhYmxlZCAmJiAoX3ZtLmlzQWN0aXZlIHx8IF92bS5pc0hvdmVyYWJsZSkpIHx8IF92bS5pbmxpbmUpLGV4cHJlc3Npb246XCIoIWRpc2FibGVkICYmIChpc0FjdGl2ZSB8fCBpc0hvdmVyYWJsZSkpIHx8IGlubGluZVwifV0scmVmOlwiZHJvcGRvd25NZW51XCIsc3RhdGljQ2xhc3M6XCJkcm9wZG93bi1tZW51XCIsYXR0cnM6e1wiYXJpYS1oaWRkZW5cIjohX3ZtLmlzQWN0aXZlfX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImRyb3Bkb3duLWNvbnRlbnRcIixhdHRyczp7XCJyb2xlXCI6X3ZtLmFyaWFSb2xlTWVudX19LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKV0pXSldLDEpfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyA9IHVuZGVmaW5lZDtcbiAgLyogc2NvcGVkICovXG4gIGNvbnN0IF9fdnVlX3Njb3BlX2lkX18gPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fID0gZmFsc2U7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIERyb3Bkb3duID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG52YXIgc2NyaXB0JDEgPSB7XG4gIG5hbWU6ICdCRHJvcGRvd25JdGVtJyxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyLCBCb29sZWFuLCBPYmplY3QsIEFycmF5LCBGdW5jdGlvbl0sXG4gICAgICBkZWZhdWx0OiBudWxsXG4gICAgfSxcbiAgICBzZXBhcmF0b3I6IEJvb2xlYW4sXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgY3VzdG9tOiBCb29sZWFuLFxuICAgIGZvY3VzYWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIHBhZGRpbmdsZXNzOiBCb29sZWFuLFxuICAgIGhhc0xpbms6IEJvb2xlYW4sXG4gICAgYXJpYVJvbGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGFuY2hvckNsYXNzZXM6IGZ1bmN0aW9uIGFuY2hvckNsYXNzZXMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnaXMtZGlzYWJsZWQnOiB0aGlzLiRwYXJlbnQuZGlzYWJsZWQgfHwgdGhpcy5kaXNhYmxlZCxcbiAgICAgICAgJ2lzLXBhZGRpbmdsZXNzJzogdGhpcy5wYWRkaW5nbGVzcyxcbiAgICAgICAgJ2lzLWFjdGl2ZSc6IHRoaXMuaXNBY3RpdmVcbiAgICAgIH07XG4gICAgfSxcbiAgICBpdGVtQ2xhc3NlczogZnVuY3Rpb24gaXRlbUNsYXNzZXMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnZHJvcGRvd24taXRlbSc6ICF0aGlzLmhhc0xpbmssXG4gICAgICAgICdpcy1kaXNhYmxlZCc6IHRoaXMuZGlzYWJsZWQsXG4gICAgICAgICdpcy1wYWRkaW5nbGVzcyc6IHRoaXMucGFkZGluZ2xlc3MsXG4gICAgICAgICdpcy1hY3RpdmUnOiB0aGlzLmlzQWN0aXZlLFxuICAgICAgICAnaGFzLWxpbmsnOiB0aGlzLmhhc0xpbmtcbiAgICAgIH07XG4gICAgfSxcbiAgICBhcmlhUm9sZUl0ZW06IGZ1bmN0aW9uIGFyaWFSb2xlSXRlbSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmFyaWFSb2xlID09PSAnbWVudWl0ZW0nIHx8IHRoaXMuYXJpYVJvbGUgPT09ICdsaXN0aXRlbScgPyB0aGlzLmFyaWFSb2xlIDogbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIENoZWNrIGlmIGl0ZW0gY2FuIGJlIGNsaWNrYWJsZS5cclxuICAgICovXG4gICAgaXNDbGlja2FibGU6IGZ1bmN0aW9uIGlzQ2xpY2thYmxlKCkge1xuICAgICAgcmV0dXJuICF0aGlzLiRwYXJlbnQuZGlzYWJsZWQgJiYgIXRoaXMuc2VwYXJhdG9yICYmICF0aGlzLmRpc2FibGVkICYmICF0aGlzLmN1c3RvbTtcbiAgICB9LFxuICAgIGlzQWN0aXZlOiBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICAgIGlmICh0aGlzLiRwYXJlbnQuc2VsZWN0ZWQgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICh0aGlzLiRwYXJlbnQubXVsdGlwbGUpIHJldHVybiB0aGlzLiRwYXJlbnQuc2VsZWN0ZWQuaW5kZXhPZih0aGlzLnZhbHVlKSA+PSAwO1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IHRoaXMuJHBhcmVudC5zZWxlY3RlZDtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKipcclxuICAgICogQ2xpY2sgbGlzdGVuZXIsIHNlbGVjdCB0aGUgaXRlbS5cclxuICAgICovXG4gICAgc2VsZWN0SXRlbTogZnVuY3Rpb24gc2VsZWN0SXRlbSgpIHtcbiAgICAgIGlmICghdGhpcy5pc0NsaWNrYWJsZSkgcmV0dXJuO1xuICAgICAgdGhpcy4kcGFyZW50LnNlbGVjdEl0ZW0odGhpcy52YWx1ZSk7XG4gICAgICB0aGlzLiRlbWl0KCdjbGljaycpO1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHtcbiAgICBpZiAoIXRoaXMuJHBhcmVudC4kZGF0YS5faXNEcm9wZG93bikge1xuICAgICAgdGhpcy4kZGVzdHJveSgpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3Ugc2hvdWxkIHdyYXAgYkRyb3Bkb3duSXRlbSBvbiBhIGJEcm9wZG93bicpO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyQxID0gc2NyaXB0JDE7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18kMSA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gKF92bS5zZXBhcmF0b3IpP19jKCdocicse3N0YXRpY0NsYXNzOlwiZHJvcGRvd24tZGl2aWRlclwifSk6KCFfdm0uY3VzdG9tICYmICFfdm0uaGFzTGluayk/X2MoJ2EnLHtzdGF0aWNDbGFzczpcImRyb3Bkb3duLWl0ZW1cIixjbGFzczpfdm0uYW5jaG9yQ2xhc3NlcyxhdHRyczp7XCJyb2xlXCI6X3ZtLmFyaWFSb2xlSXRlbSxcInRhYmluZGV4XCI6X3ZtLmZvY3VzYWJsZSA/IDAgOiBudWxsfSxvbjp7XCJjbGlja1wiOl92bS5zZWxlY3RJdGVtfX0sW192bS5fdChcImRlZmF1bHRcIildLDIpOl9jKCdkaXYnLHtjbGFzczpfdm0uaXRlbUNsYXNzZXMsYXR0cnM6e1wicm9sZVwiOl92bS5hcmlhUm9sZUl0ZW0sXCJ0YWJpbmRleFwiOl92bS5mb2N1c2FibGUgPyAwIDogbnVsbH0sb246e1wiY2xpY2tcIjpfdm0uc2VsZWN0SXRlbX19LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kMSA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDEgPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgRHJvcGRvd25JdGVtID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fJDEsIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18kMSB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyQxLFxuICAgIF9fdnVlX3NjcmlwdF9fJDEsXG4gICAgX192dWVfc2NvcGVfaWRfXyQxLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQxLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMSxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbmV4cG9ydCB7IERyb3Bkb3duIGFzIEQsIERyb3Bkb3duSXRlbSBhcyBhIH07XG4iLCJpbXBvcnQgeyBfIGFzIF9kZWZpbmVQcm9wZXJ0eSB9IGZyb20gJy4vY2h1bmstZDYyMDAwODcuanMnO1xuaW1wb3J0IHsgYyBhcyBjb25maWcgfSBmcm9tICcuL2NodW5rLTllMzIwN2NjLmpzJztcbmltcG9ydCB7IF8gYXMgX192dWVfbm9ybWFsaXplX18gfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcblxudmFyIHNjcmlwdCA9IHtcbiAgbmFtZTogJ0JGaWVsZEJvZHknLFxuICBwcm9wczoge1xuICAgIG1lc3NhZ2U6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG4gICAgdHlwZToge1xuICAgICAgdHlwZTogW1N0cmluZywgT2JqZWN0XVxuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoY3JlYXRlRWxlbWVudCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgYXR0cnM6IHtcbiAgICAgICAgJ2NsYXNzJzogJ2ZpZWxkLWJvZHknXG4gICAgICB9XG4gICAgfSwgdGhpcy4kc2xvdHMuZGVmYXVsdC5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIC8vIHNraXAgcmV0dXJucyBhbmQgY29tbWVudHNcbiAgICAgIGlmICghZWxlbWVudC50YWcpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5tZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdiLWZpZWxkJywge1xuICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICBtZXNzYWdlOiBfdGhpcy5tZXNzYWdlLFxuICAgICAgICAgICAgJ3R5cGUnOiBfdGhpcy50eXBlXG4gICAgICAgICAgfVxuICAgICAgICB9LCBbZWxlbWVudF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnYi1maWVsZCcsIHtcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAndHlwZSc6IF90aGlzLnR5cGVcbiAgICAgICAgfVxuICAgICAgfSwgW2VsZW1lbnRdKTtcbiAgICB9KSk7XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSB1bmRlZmluZWQ7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIEZpZWxkQm9keSA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHt9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyxcbiAgICBfX3Z1ZV9zY3JpcHRfXyxcbiAgICBfX3Z1ZV9zY29wZV9pZF9fLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxudmFyIHNjcmlwdCQxID0ge1xuICBuYW1lOiAnQkZpZWxkJyxcbiAgY29tcG9uZW50czogX2RlZmluZVByb3BlcnR5KHt9LCBGaWVsZEJvZHkubmFtZSwgRmllbGRCb2R5KSxcbiAgcHJvcHM6IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBPYmplY3RdLFxuICAgIGxhYmVsOiBTdHJpbmcsXG4gICAgbGFiZWxGb3I6IFN0cmluZyxcbiAgICBtZXNzYWdlOiBbU3RyaW5nLCBBcnJheSwgT2JqZWN0XSxcbiAgICBncm91cGVkOiBCb29sZWFuLFxuICAgIGdyb3VwTXVsdGlsaW5lOiBCb29sZWFuLFxuICAgIHBvc2l0aW9uOiBTdHJpbmcsXG4gICAgZXhwYW5kZWQ6IEJvb2xlYW4sXG4gICAgaG9yaXpvbnRhbDogQm9vbGVhbixcbiAgICBhZGRvbnM6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBjdXN0b21DbGFzczogU3RyaW5nLFxuICAgIGxhYmVsUG9zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gY29uZmlnLmRlZmF1bHRGaWVsZExhYmVsUG9zaXRpb247XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuZXdUeXBlOiB0aGlzLnR5cGUsXG4gICAgICBuZXdNZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBmaWVsZExhYmVsU2l6ZTogbnVsbCxcbiAgICAgIF9pc0ZpZWxkOiB0cnVlIC8vIFVzZWQgaW50ZXJuYWxseSBieSBJbnB1dCBhbmQgU2VsZWN0XG5cbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIHJvb3RDbGFzc2VzOiBmdW5jdGlvbiByb290Q2xhc3NlcygpIHtcbiAgICAgIHJldHVybiBbdGhpcy5uZXdQb3NpdGlvbiwge1xuICAgICAgICAnaXMtZXhwYW5kZWQnOiB0aGlzLmV4cGFuZGVkLFxuICAgICAgICAnaXMtZ3JvdXBlZC1tdWx0aWxpbmUnOiB0aGlzLmdyb3VwTXVsdGlsaW5lLFxuICAgICAgICAnaXMtaG9yaXpvbnRhbCc6IHRoaXMuaG9yaXpvbnRhbCxcbiAgICAgICAgJ2lzLWZsb2F0aW5nLWluLWxhYmVsJzogdGhpcy5oYXNMYWJlbCAmJiAhdGhpcy5ob3Jpem9udGFsICYmIHRoaXMubGFiZWxQb3NpdGlvbiA9PT0gJ2luc2lkZScsXG4gICAgICAgICdpcy1mbG9hdGluZy1sYWJlbCc6IHRoaXMuaGFzTGFiZWwgJiYgIXRoaXMuaG9yaXpvbnRhbCAmJiB0aGlzLmxhYmVsUG9zaXRpb24gPT09ICdvbi1ib3JkZXInXG4gICAgICB9LCB0aGlzLm51bWJlcklucHV0Q2xhc3Nlc107XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBDb3JyZWN0IEJ1bG1hIGNsYXNzIGZvciB0aGUgc2lkZSBvZiB0aGUgYWRkb24gb3IgZ3JvdXAuXHJcbiAgICAqXHJcbiAgICAqIFRoaXMgaXMgbm90IGtlcHQgbGlrZSB0aGUgb3RoZXJzIChpcy1zbWFsbCwgZXRjLiksXHJcbiAgICAqIGJlY2F1c2Ugc2luY2UgJ2hhcy1hZGRvbnMnIGlzIHNldCBhdXRvbWF0aWNhbGx5IGl0XHJcbiAgICAqIGRvZXNuJ3QgbWFrZSBzZW5zZSB0byB0ZWFjaCB1c2VycyB3aGF0IGFkZG9ucyBhcmUgZXhhY3RseS5cclxuICAgICovXG4gICAgbmV3UG9zaXRpb246IGZ1bmN0aW9uIG5ld1Bvc2l0aW9uKCkge1xuICAgICAgaWYgKHRoaXMucG9zaXRpb24gPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi5zcGxpdCgnLScpO1xuICAgICAgaWYgKHBvc2l0aW9uLmxlbmd0aCA8IDEpIHJldHVybjtcbiAgICAgIHZhciBwcmVmaXggPSB0aGlzLmdyb3VwZWQgPyAnaXMtZ3JvdXBlZC0nIDogJ2hhcy1hZGRvbnMtJztcbiAgICAgIGlmICh0aGlzLnBvc2l0aW9uKSByZXR1cm4gcHJlZml4ICsgcG9zaXRpb25bMV07XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBGb3JtYXR0ZWQgbWVzc2FnZSBpbiBjYXNlIGl0J3MgYW4gYXJyYXlcclxuICAgICogKGVhY2ggZWxlbWVudCBpcyBzZXBhcmF0ZWQgYnkgPGJyPiB0YWcpXHJcbiAgICAqL1xuICAgIGZvcm1hdHRlZE1lc3NhZ2U6IGZ1bmN0aW9uIGZvcm1hdHRlZE1lc3NhZ2UoKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMubmV3TWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV3TWVzc2FnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtZXNzYWdlcyA9IFtdO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMubmV3TWVzc2FnZSkpIHtcbiAgICAgICAgICB0aGlzLm5ld01lc3NhZ2UuZm9yRWFjaChmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZVtrZXldKSB7XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMubmV3TWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubmV3TWVzc2FnZVtrZXldKSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWVzc2FnZXMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgaWYgKG0pIHJldHVybiBtO1xuICAgICAgICB9KS5qb2luKCcgPGJyPiAnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGhhc0xhYmVsOiBmdW5jdGlvbiBoYXNMYWJlbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhYmVsIHx8IHRoaXMuJHNsb3RzLmxhYmVsO1xuICAgIH0sXG4gICAgbnVtYmVySW5wdXRDbGFzc2VzOiBmdW5jdGlvbiBudW1iZXJJbnB1dENsYXNzZXMoKSB7XG4gICAgICBpZiAodGhpcy4kc2xvdHMuZGVmYXVsdCkge1xuICAgICAgICB2YXIgbnVtYmVyaW5wdXQgPSB0aGlzLiRzbG90cy5kZWZhdWx0LmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlLnRhZyAmJiBub2RlLnRhZy50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ251bWJlcmlucHV0JykgPj0gMDtcbiAgICAgICAgfSlbMF07XG5cbiAgICAgICAgaWYgKG51bWJlcmlucHV0KSB7XG4gICAgICAgICAgdmFyIGNsYXNzZXMgPSBbJ2hhcy1udW1iZXJpbnB1dCddO1xuICAgICAgICAgIHZhciBjb250cm9sc1Bvc2l0aW9uID0gbnVtYmVyaW5wdXQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGEuY29udHJvbHNQb3NpdGlvbjtcbiAgICAgICAgICB2YXIgc2l6ZSA9IG51bWJlcmlucHV0LmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhLnNpemU7XG5cbiAgICAgICAgICBpZiAoY29udHJvbHNQb3NpdGlvbikge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKFwiaGFzLW51bWJlcmlucHV0LVwiLmNvbmNhdChjb250cm9sc1Bvc2l0aW9uKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaChcImhhcy1udW1iZXJpbnB1dC1cIi5jb25jYXQoc2l6ZSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICAvKipcclxuICAgICogU2V0IGludGVybmFsIHR5cGUgd2hlbiBwcm9wIGNoYW5nZS5cclxuICAgICovXG4gICAgdHlwZTogZnVuY3Rpb24gdHlwZSh2YWx1ZSkge1xuICAgICAgdGhpcy5uZXdUeXBlID0gdmFsdWU7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBTZXQgaW50ZXJuYWwgbWVzc2FnZSB3aGVuIHByb3AgY2hhbmdlLlxyXG4gICAgKi9cbiAgICBtZXNzYWdlOiBmdW5jdGlvbiBtZXNzYWdlKHZhbHVlKSB7XG4gICAgICB0aGlzLm5ld01lc3NhZ2UgPSB2YWx1ZTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKipcclxuICAgICogRmllbGQgaGFzIGFkZG9ucyBpZiB0aGVyZSBhcmUgbW9yZSB0aGFuIG9uZSBzbG90XHJcbiAgICAqIChlbGVtZW50IC8gY29tcG9uZW50KSBpbiB0aGUgRmllbGQuXHJcbiAgICAqIE9yIGlzIGdyb3VwZWQgd2hlbiBwcm9wIGlzIHNldC5cclxuICAgICogSXMgYSBtZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gY29tcG9uZW50IHJlLXJlbmRlci5cclxuICAgICovXG4gICAgZmllbGRUeXBlOiBmdW5jdGlvbiBmaWVsZFR5cGUoKSB7XG4gICAgICBpZiAodGhpcy5ncm91cGVkKSByZXR1cm4gJ2lzLWdyb3VwZWQnO1xuICAgICAgdmFyIHJlbmRlcmVkTm9kZSA9IDA7XG5cbiAgICAgIGlmICh0aGlzLiRzbG90cy5kZWZhdWx0KSB7XG4gICAgICAgIHJlbmRlcmVkTm9kZSA9IHRoaXMuJHNsb3RzLmRlZmF1bHQucmVkdWNlKGZ1bmN0aW9uIChpLCBub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUudGFnID8gaSArIDEgOiBpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlcmVkTm9kZSA+IDEgJiYgdGhpcy5hZGRvbnMgJiYgIXRoaXMuaG9yaXpvbnRhbCkge1xuICAgICAgICByZXR1cm4gJ2hhcy1hZGRvbnMnO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICBpZiAodGhpcy5ob3Jpem9udGFsKSB7XG4gICAgICAvLyBCdWxtYSBkb2NzOiAuaXMtbm9ybWFsIGZvciBhbnkgLmlucHV0IG9yIC5idXR0b25cbiAgICAgIHZhciBlbGVtZW50cyA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dCwgLnNlbGVjdCwgLmJ1dHRvbiwgLnRleHRhcmVhLCAuYi1zbGlkZXInKTtcblxuICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5maWVsZExhYmVsU2l6ZSA9ICdpcy1ub3JtYWwnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyQxID0gc2NyaXB0JDE7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZpZWxkXCIsY2xhc3M6W192bS5yb290Q2xhc3NlcywgX3ZtLmZpZWxkVHlwZSgpXX0sWyhfdm0uaG9yaXpvbnRhbCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmllbGQtbGFiZWxcIixjbGFzczpbX3ZtLmN1c3RvbUNsYXNzLCBfdm0uZmllbGRMYWJlbFNpemVdfSxbKF92bS5oYXNMYWJlbCk/X2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6XCJsYWJlbFwiLGNsYXNzOl92bS5jdXN0b21DbGFzcyxhdHRyczp7XCJmb3JcIjpfdm0ubGFiZWxGb3J9fSxbKF92bS4kc2xvdHMubGFiZWwpP192bS5fdChcImxhYmVsXCIpOltfdm0uX3YoX3ZtLl9zKF92bS5sYWJlbCkpXV0sMik6X3ZtLl9lKCldKTpbKF92bS5oYXNMYWJlbCk/X2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6XCJsYWJlbFwiLGNsYXNzOl92bS5jdXN0b21DbGFzcyxhdHRyczp7XCJmb3JcIjpfdm0ubGFiZWxGb3J9fSxbKF92bS4kc2xvdHMubGFiZWwpP192bS5fdChcImxhYmVsXCIpOltfdm0uX3YoX3ZtLl9zKF92bS5sYWJlbCkpXV0sMik6X3ZtLl9lKCldLF92bS5fdihcIiBcIiksKF92bS5ob3Jpem9udGFsKT9fYygnYi1maWVsZC1ib2R5Jyx7YXR0cnM6e1wibWVzc2FnZVwiOl92bS5uZXdNZXNzYWdlID8gX3ZtLmZvcm1hdHRlZE1lc3NhZ2UgOiAnJyxcInR5cGVcIjpfdm0ubmV3VHlwZX19LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKTpbX3ZtLl90KFwiZGVmYXVsdFwiKV0sX3ZtLl92KFwiIFwiKSwoX3ZtLm5ld01lc3NhZ2UgJiYgIV92bS5ob3Jpem9udGFsKT9fYygncCcse3N0YXRpY0NsYXNzOlwiaGVscFwiLGNsYXNzOl92bS5uZXdUeXBlLGRvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhfdm0uZm9ybWF0dGVkTWVzc2FnZSl9fSk6X3ZtLl9lKCldLDIpfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDEgPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgRmllbGQgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kMSxcbiAgICBfX3Z1ZV9zY3JpcHRfXyQxLFxuICAgIF9fdnVlX3Njb3BlX2lkX18kMSxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEsXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG5leHBvcnQgeyBGaWVsZCBhcyBGIH07XG4iLCJpbXBvcnQgeyBfIGFzIF9kZWZpbmVQcm9wZXJ0eSB9IGZyb20gJy4vY2h1bmstZDYyMDAwODcuanMnO1xuaW1wb3J0ICcuL2NodW5rLWU1ZmNlNDhmLmpzJztcbmltcG9ydCAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgJy4vY2h1bmstMTBjODU1MjkuanMnO1xuaW1wb3J0IHsgSSBhcyBJY29uIH0gZnJvbSAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IHsgSSBhcyBJbnB1dCB9IGZyb20gJy4vY2h1bmstOThlODZmNDAuanMnO1xuaW1wb3J0IHsgVCBhcyBUaW1lcGlja2VyTWl4aW4gfSBmcm9tICcuL2NodW5rLTA3ZTE5NDQ2LmpzJztcbmltcG9ydCB7IEQgYXMgRHJvcGRvd24sIGEgYXMgRHJvcGRvd25JdGVtIH0gZnJvbSAnLi9jaHVuay0wMGUzZTY3Zi5qcyc7XG5pbXBvcnQgeyBGIGFzIEZpZWxkIH0gZnJvbSAnLi9jaHVuay01MzFiODI3NC5qcyc7XG5cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vIFRoZXNlIHNob3VsZCBtYXRjaCB0aGUgdmFyaWFibGVzIGluIGNsb2NrcGlja2VyLnNjc3NcbnZhciBpbmRpY2F0b3JTaXplID0gNDA7XG52YXIgcGFkZGluZ0lubmVyID0gNTtcbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdCQ2xvY2twaWNrZXJGYWNlJyxcbiAgcHJvcHM6IHtcbiAgICBwaWNrZXJTaXplOiBOdW1iZXIsXG4gICAgbWluOiBOdW1iZXIsXG4gICAgbWF4OiBOdW1iZXIsXG4gICAgZG91YmxlOiBCb29sZWFuLFxuICAgIHZhbHVlOiBOdW1iZXIsXG4gICAgZmFjZU51bWJlcnM6IEFycmF5LFxuICAgIGRpc2FibGVkVmFsdWVzOiBGdW5jdGlvblxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICAgIGlucHV0VmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICBwcmV2QW5nbGU6IDcyMFxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgLyoqXHJcbiAgICAqIEhvdyBtYW55IG51bWJlciBpbmRpY2F0b3JzIGFyZSBzaG93biBvbiB0aGUgZmFjZVxyXG4gICAgKi9cbiAgICBjb3VudDogZnVuY3Rpb24gY291bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXggLSB0aGlzLm1pbiArIDE7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBIb3cgbWFueSBudW1iZXIgaW5kaWNhdG9ycyBhcmUgc2hvd24gcGVyIHJpbmcgb24gdGhlIGZhY2VcclxuICAgICovXG4gICAgY291bnRQZXJSaW5nOiBmdW5jdGlvbiBjb3VudFBlclJpbmcoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb3VibGUgPyB0aGlzLmNvdW50IC8gMiA6IHRoaXMuY291bnQ7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBSYWRpdXMgb2YgdGhlIGNsb2NrIGZhY2VcclxuICAgICovXG4gICAgcmFkaXVzOiBmdW5jdGlvbiByYWRpdXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5waWNrZXJTaXplIC8gMjtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIFJhZGl1cyBvZiB0aGUgb3V0ZXIgcmluZyBvZiBudW1iZXIgaW5kaWNhdG9yc1xyXG4gICAgKi9cbiAgICBvdXRlclJhZGl1czogZnVuY3Rpb24gb3V0ZXJSYWRpdXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yYWRpdXMgLSBwYWRkaW5nSW5uZXIgLSBpbmRpY2F0b3JTaXplIC8gMjtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIFJhZGl1cyBvZiB0aGUgaW5uZXIgcmluZyBvZiBudW1iZXIgaW5kaWNhdG9yc1xyXG4gICAgKi9cbiAgICBpbm5lclJhZGl1czogZnVuY3Rpb24gaW5uZXJSYWRpdXMoKSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5vdXRlclJhZGl1cyAqIDAuNiwgdGhpcy5vdXRlclJhZGl1cyAtIHBhZGRpbmdJbm5lciAtIGluZGljYXRvclNpemUpOyAvLyA0OHB4IGdpdmVzIGVub3VnaCByb29tIGZvciB0aGUgb3V0ZXIgcmluZyBvZiBudW1iZXJzXG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBUaGUgYW5nbGUgZm9yIGVhY2ggc2VsZWN0YWJsZSB2YWx1ZVxyXG4gICAgKiBGb3IgaG91cnMgdGhpcyBlbmRzIHVwIGJlaW5nIDMwIGRlZ3JlZXMsIGZvciBtaW51dGVzIDYgZGVncmVlc1xyXG4gICAgKi9cbiAgICBkZWdyZWVzUGVyVW5pdDogZnVuY3Rpb24gZGVncmVlc1BlclVuaXQoKSB7XG4gICAgICByZXR1cm4gMzYwIC8gdGhpcy5jb3VudFBlclJpbmc7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBVc2VkIGZvciBjYWxjdWxhdGluZyB4L3kgZ3JpZCBsb2NhdGlvbiBiYXNlZCBvbiBkZWdyZWVzXHJcbiAgICAqL1xuICAgIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWdyZWVzUGVyVW5pdCAqIE1hdGguUEkgLyAxODA7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBDYWxjdWxhdGVzIHRoZSBhbmdsZSB0aGUgY2xvY2sgaGFuZCBzaG91bGQgYmUgcm90YXRlZCBmb3IgdGhlXHJcbiAgICAqIHNlbGVjdGVkIHZhbHVlXHJcbiAgICAqL1xuICAgIGhhbmRSb3RhdGVBbmdsZTogZnVuY3Rpb24gaGFuZFJvdGF0ZUFuZ2xlKCkge1xuICAgICAgdmFyIGN1cnJlbnRBbmdsZSA9IHRoaXMucHJldkFuZ2xlO1xuXG4gICAgICB3aGlsZSAoY3VycmVudEFuZ2xlIDwgMCkge1xuICAgICAgICBjdXJyZW50QW5nbGUgKz0gMzYwO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0QW5nbGUgPSB0aGlzLmNhbGNIYW5kQW5nbGUodGhpcy5kaXNwbGF5ZWRWYWx1ZSk7XG4gICAgICB2YXIgZGVncmVlc0RpZmYgPSB0aGlzLnNob3J0ZXN0RGlzdGFuY2VEZWdyZWVzKGN1cnJlbnRBbmdsZSwgdGFyZ2V0QW5nbGUpO1xuICAgICAgdmFyIGFuZ2xlID0gdGhpcy5wcmV2QW5nbGUgKyBkZWdyZWVzRGlmZjtcbiAgICAgIHJldHVybiBhbmdsZTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIERldGVybWluZXMgaG93IGxvbmcgdGhlIHNlbGVjdG9yIGhhbmQgaXMgYmFzZWQgb24gaWYgdGhlXHJcbiAgICAqIHNlbGVjdGVkIHZhbHVlIGlzIGxvY2F0ZWQgYWxvbmcgdGhlIG91dGVyIG9yIGlubmVyIHJpbmdcclxuICAgICovXG4gICAgaGFuZFNjYWxlOiBmdW5jdGlvbiBoYW5kU2NhbGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxjSGFuZFNjYWxlKHRoaXMuZGlzcGxheWVkVmFsdWUpO1xuICAgIH0sXG4gICAgaGFuZFN0eWxlOiBmdW5jdGlvbiBoYW5kU3R5bGUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0cmFuc2Zvcm06IFwicm90YXRlKFwiLmNvbmNhdCh0aGlzLmhhbmRSb3RhdGVBbmdsZSwgXCJkZWcpIHNjYWxlWShcIikuY29uY2F0KHRoaXMuaGFuZFNjYWxlLCBcIilcIiksXG4gICAgICAgIHRyYW5zaXRpb246ICcuM3MgY3ViaWMtYmV6aWVyKC4yNSwuOCwuNTAsMSknXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogVGhlIHZhbHVlIHRoZSBoYW5kIHNob3VsZCBiZSBwb2ludGluZyBhdFxyXG4gICAgKi9cbiAgICBkaXNwbGF5ZWRWYWx1ZTogZnVuY3Rpb24gZGlzcGxheWVkVmFsdWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dFZhbHVlID09IG51bGwgPyB0aGlzLm1pbiA6IHRoaXMuaW5wdXRWYWx1ZTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKF92YWx1ZSkge1xuICAgICAgaWYgKF92YWx1ZSAhPT0gdGhpcy5pbnB1dFZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJldkFuZ2xlID0gdGhpcy5oYW5kUm90YXRlQW5nbGU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5wdXRWYWx1ZSA9IF92YWx1ZTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBpc0Rpc2FibGVkOiBmdW5jdGlvbiBpc0Rpc2FibGVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5kaXNhYmxlZFZhbHVlcyAmJiB0aGlzLmRpc2FibGVkVmFsdWVzKHZhbHVlKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIENhbGN1bGF0ZXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50c1xyXG4gICAgKi9cbiAgICBldWNsaWRlYW46IGZ1bmN0aW9uIGV1Y2xpZGVhbihwMCwgcDEpIHtcbiAgICAgIHZhciBkeCA9IHAxLnggLSBwMC54O1xuICAgICAgdmFyIGR5ID0gcDEueSAtIHAwLnk7XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICB9LFxuICAgIHNob3J0ZXN0RGlzdGFuY2VEZWdyZWVzOiBmdW5jdGlvbiBzaG9ydGVzdERpc3RhbmNlRGVncmVlcyhzdGFydCwgc3RvcCkge1xuICAgICAgdmFyIG1vZERpZmYgPSAoc3RvcCAtIHN0YXJ0KSAlIDM2MDtcbiAgICAgIHZhciBzaG9ydGVzdERpc3RhbmNlID0gMTgwIC0gTWF0aC5hYnMoTWF0aC5hYnMobW9kRGlmZikgLSAxODApO1xuICAgICAgcmV0dXJuIChtb2REaWZmICsgMzYwKSAlIDM2MCA8IDE4MCA/IHNob3J0ZXN0RGlzdGFuY2UgKiAxIDogc2hvcnRlc3REaXN0YW5jZSAqIC0xO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogQ2FsY3VsYXRlcyB0aGUgYW5nbGUgb2YgdGhlIGxpbmUgZnJvbSB0aGUgY2VudGVyIHBvaW50XHJcbiAgICAqIHRvIHRoZSBnaXZlbiBwb2ludC5cclxuICAgICovXG4gICAgY29vcmRUb0FuZ2xlOiBmdW5jdGlvbiBjb29yZFRvQW5nbGUoY2VudGVyLCBwMSkge1xuICAgICAgdmFyIHZhbHVlID0gMiAqIE1hdGguYXRhbjIocDEueSAtIGNlbnRlci55IC0gdGhpcy5ldWNsaWRlYW4oY2VudGVyLCBwMSksIHAxLnggLSBjZW50ZXIueCk7XG4gICAgICByZXR1cm4gTWF0aC5hYnModmFsdWUgKiAxODAgLyBNYXRoLlBJKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIEdlbmVyYXRlcyB0aGUgaW5saW5lIHN0eWxlIHRyYW5zbGF0ZSgpIHByb3BlcnR5IGZvciBhXHJcbiAgICAqIG51bWJlciBpbmRpY2F0b3IsIHdoaWNoIGRldGVybWluZXMgaXQncyBsb2NhdGlvbiBvbiB0aGVcclxuICAgICogY2xvY2sgZmFjZVxyXG4gICAgKi9cbiAgICBnZXROdW1iZXJUcmFuc2xhdGU6IGZ1bmN0aW9uIGdldE51bWJlclRyYW5zbGF0ZSh2YWx1ZSkge1xuICAgICAgdmFyIF90aGlzJGdldE51bWJlckNvb3JkcyA9IHRoaXMuZ2V0TnVtYmVyQ29vcmRzKHZhbHVlKSxcbiAgICAgICAgICB4ID0gX3RoaXMkZ2V0TnVtYmVyQ29vcmRzLngsXG4gICAgICAgICAgeSA9IF90aGlzJGdldE51bWJlckNvb3Jkcy55O1xuXG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHgsIFwicHgsIFwiKS5jb25jYXQoeSwgXCJweClcIik7XG4gICAgfSxcblxuICAgIC8qKipcclxuICAgICogQ2FsY3VsYXRlcyB0aGUgY29vcmRpbmF0ZXMgb24gdGhlIGNsb2NrIGZhY2UgZm9yIGEgbnVtYmVyXHJcbiAgICAqIGluZGljYXRvciB2YWx1ZVxyXG4gICAgKi9cbiAgICBnZXROdW1iZXJDb29yZHM6IGZ1bmN0aW9uIGdldE51bWJlckNvb3Jkcyh2YWx1ZSkge1xuICAgICAgdmFyIHJhZGl1cyA9IHRoaXMuaXNJbm5lclJpbmcodmFsdWUpID8gdGhpcy5pbm5lclJhZGl1cyA6IHRoaXMub3V0ZXJSYWRpdXM7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiBNYXRoLnJvdW5kKHJhZGl1cyAqIE1hdGguc2luKCh2YWx1ZSAtIHRoaXMubWluKSAqIHRoaXMuZGVncmVlcykpLFxuICAgICAgICB5OiBNYXRoLnJvdW5kKC1yYWRpdXMgKiBNYXRoLmNvcygodmFsdWUgLSB0aGlzLm1pbikgKiB0aGlzLmRlZ3JlZXMpKVxuICAgICAgfTtcbiAgICB9LFxuICAgIGdldEZhY2VOdW1iZXJDbGFzc2VzOiBmdW5jdGlvbiBnZXRGYWNlTnVtYmVyQ2xhc3NlcyhudW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdhY3RpdmUnOiBudW0udmFsdWUgPT09IHRoaXMuZGlzcGxheWVkVmFsdWUsXG4gICAgICAgICdkaXNhYmxlZCc6IHRoaXMuaXNEaXNhYmxlZChudW0udmFsdWUpXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIHJlc2lkZXMgb24gdGhlIGlubmVyIHJpbmdcclxuICAgICovXG4gICAgaXNJbm5lclJpbmc6IGZ1bmN0aW9uIGlzSW5uZXJSaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb3VibGUgJiYgdmFsdWUgLSB0aGlzLm1pbiA+PSB0aGlzLmNvdW50UGVyUmluZztcbiAgICB9LFxuICAgIGNhbGNIYW5kQW5nbGU6IGZ1bmN0aW9uIGNhbGNIYW5kQW5nbGUodmFsdWUpIHtcbiAgICAgIHZhciBhbmdsZSA9IHRoaXMuZGVncmVlc1BlclVuaXQgKiAodmFsdWUgLSB0aGlzLm1pbik7XG4gICAgICBpZiAodGhpcy5pc0lubmVyUmluZyh2YWx1ZSkpIGFuZ2xlIC09IDM2MDtcbiAgICAgIHJldHVybiBhbmdsZTtcbiAgICB9LFxuICAgIGNhbGNIYW5kU2NhbGU6IGZ1bmN0aW9uIGNhbGNIYW5kU2NhbGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzSW5uZXJSaW5nKHZhbHVlKSA/IHRoaXMuaW5uZXJSYWRpdXMgLyB0aGlzLm91dGVyUmFkaXVzIDogMTtcbiAgICB9LFxuICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbiBvbk1vdXNlRG93bihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5vbkRyYWdNb3ZlKGUpO1xuICAgIH0sXG4gICAgb25Nb3VzZVVwOiBmdW5jdGlvbiBvbk1vdXNlVXAoKSB7XG4gICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcblxuICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQodGhpcy5pbnB1dFZhbHVlKSkge1xuICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLmlucHV0VmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25EcmFnTW92ZTogZnVuY3Rpb24gb25EcmFnTW92ZShlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoIXRoaXMuaXNEcmFnZ2luZyAmJiBlLnR5cGUgIT09ICdjbGljaycpIHJldHVybjtcblxuICAgICAgdmFyIF90aGlzJCRyZWZzJGNsb2NrJGdldCA9IHRoaXMuJHJlZnMuY2xvY2suZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgd2lkdGggPSBfdGhpcyQkcmVmcyRjbG9jayRnZXQud2lkdGgsXG4gICAgICAgICAgdG9wID0gX3RoaXMkJHJlZnMkY2xvY2skZ2V0LnRvcCxcbiAgICAgICAgICBsZWZ0ID0gX3RoaXMkJHJlZnMkY2xvY2skZ2V0LmxlZnQ7XG5cbiAgICAgIHZhciBfcmVmID0gJ3RvdWNoZXMnIGluIGUgPyBlLnRvdWNoZXNbMF0gOiBlLFxuICAgICAgICAgIGNsaWVudFggPSBfcmVmLmNsaWVudFgsXG4gICAgICAgICAgY2xpZW50WSA9IF9yZWYuY2xpZW50WTtcblxuICAgICAgdmFyIGNlbnRlciA9IHtcbiAgICAgICAgeDogd2lkdGggLyAyLFxuICAgICAgICB5OiAtd2lkdGggLyAyXG4gICAgICB9O1xuICAgICAgdmFyIGNvb3JkcyA9IHtcbiAgICAgICAgeDogY2xpZW50WCAtIGxlZnQsXG4gICAgICAgIHk6IHRvcCAtIGNsaWVudFlcbiAgICAgIH07XG4gICAgICB2YXIgaGFuZEFuZ2xlID0gTWF0aC5yb3VuZCh0aGlzLmNvb3JkVG9BbmdsZShjZW50ZXIsIGNvb3JkcykgKyAzNjApICUgMzYwO1xuICAgICAgdmFyIGluc2lkZUNsaWNrID0gdGhpcy5kb3VibGUgJiYgdGhpcy5ldWNsaWRlYW4oY2VudGVyLCBjb29yZHMpIDwgKHRoaXMub3V0ZXJSYWRpdXMgKyB0aGlzLmlubmVyUmFkaXVzKSAvIDIgLSAxNjtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgucm91bmQoaGFuZEFuZ2xlIC8gdGhpcy5kZWdyZWVzUGVyVW5pdCkgKyB0aGlzLm1pbiArIChpbnNpZGVDbGljayA/IHRoaXMuY291bnRQZXJSaW5nIDogMCk7IC8vIE5lY2Vzc2FyeSB0byBmaXggZWRnZSBjYXNlIHdoZW4gc2VsZWN0aW5nIGxlZnQgcGFydCBvZiBtYXggdmFsdWVcblxuICAgICAgaWYgKGhhbmRBbmdsZSA+PSAzNjAgLSB0aGlzLmRlZ3JlZXNQZXJVbml0IC8gMikge1xuICAgICAgICB2YWx1ZSA9IGluc2lkZUNsaWNrID8gdGhpcy5tYXggOiB0aGlzLm1pbjtcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGUodmFsdWUpO1xuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmlucHV0VmFsdWUgIT09IHZhbHVlICYmICF0aGlzLmlzRGlzYWJsZWQodmFsdWUpKSB7XG4gICAgICAgIHRoaXMucHJldkFuZ2xlID0gdGhpcy5oYW5kUm90YXRlQW5nbGU7XG4gICAgICAgIHRoaXMuaW5wdXRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImItY2xvY2twaWNrZXItZmFjZVwiLG9uOntcIm1vdXNlZG93blwiOl92bS5vbk1vdXNlRG93bixcIm1vdXNldXBcIjpfdm0ub25Nb3VzZVVwLFwibW91c2Vtb3ZlXCI6X3ZtLm9uRHJhZ01vdmUsXCJ0b3VjaHN0YXJ0XCI6X3ZtLm9uTW91c2VEb3duLFwidG91Y2hlbmRcIjpfdm0ub25Nb3VzZVVwLFwidG91Y2htb3ZlXCI6X3ZtLm9uRHJhZ01vdmV9fSxbX2MoJ2Rpdicse3JlZjpcImNsb2NrXCIsc3RhdGljQ2xhc3M6XCJiLWNsb2NrcGlja2VyLWZhY2Utb3V0ZXItcmluZ1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYi1jbG9ja3BpY2tlci1mYWNlLWhhbmRcIixzdHlsZTooX3ZtLmhhbmRTdHlsZSl9KSxfdm0uX3YoXCIgXCIpLF92bS5fbCgoX3ZtLmZhY2VOdW1iZXJzKSxmdW5jdGlvbihudW0saW5kZXgpe3JldHVybiBfYygnc3Bhbicse2tleTppbmRleCxzdGF0aWNDbGFzczpcImItY2xvY2twaWNrZXItZmFjZS1udW1iZXJcIixjbGFzczpfdm0uZ2V0RmFjZU51bWJlckNsYXNzZXMobnVtKSxzdHlsZTooeyB0cmFuc2Zvcm06IF92bS5nZXROdW1iZXJUcmFuc2xhdGUobnVtLnZhbHVlKSB9KX0sW19jKCdzcGFuJyxbX3ZtLl92KF92bS5fcyhudW0ubGFiZWwpKV0pXSl9KV0sMildKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBDbG9ja3BpY2tlckZhY2UgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBfY29tcG9uZW50cztcbnZhciBvdXRlclBhZGRpbmcgPSAxMjtcbnZhciBzY3JpcHQkMSA9IHtcbiAgbmFtZTogJ0JDbG9ja3BpY2tlcicsXG4gIGNvbXBvbmVudHM6IChfY29tcG9uZW50cyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NvbXBvbmVudHMsIENsb2NrcGlja2VyRmFjZS5uYW1lLCBDbG9ja3BpY2tlckZhY2UpLCBfZGVmaW5lUHJvcGVydHkoX2NvbXBvbmVudHMsIElucHV0Lm5hbWUsIElucHV0KSwgX2RlZmluZVByb3BlcnR5KF9jb21wb25lbnRzLCBGaWVsZC5uYW1lLCBGaWVsZCksIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgSWNvbi5uYW1lLCBJY29uKSwgX2RlZmluZVByb3BlcnR5KF9jb21wb25lbnRzLCBEcm9wZG93bi5uYW1lLCBEcm9wZG93biksIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgRHJvcGRvd25JdGVtLm5hbWUsIERyb3Bkb3duSXRlbSksIF9jb21wb25lbnRzKSxcbiAgbWl4aW5zOiBbVGltZXBpY2tlck1peGluXSxcbiAgcHJvcHM6IHtcbiAgICBwaWNrZXJTaXplOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAyOTBcbiAgICB9LFxuICAgIGhvdXJGb3JtYXQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcxMicsXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09ICcyNCcgfHwgdmFsdWUgPT09ICcxMic7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbmNyZW1lbnRNaW51dGVzOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiA1XG4gICAgfSxcbiAgICBhdXRvU3dpdGNoOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgdHlwZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2lzLXByaW1hcnknXG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc1NlbGVjdGluZ0hvdXI6IHRydWUsXG4gICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICAgIF9pc0Nsb2NrcGlja2VyOiB0cnVlXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBob3Vyc0Rpc3BsYXk6IGZ1bmN0aW9uIGhvdXJzRGlzcGxheSgpIHtcbiAgICAgIGlmICh0aGlzLmhvdXJzU2VsZWN0ZWQgPT0gbnVsbCkgcmV0dXJuICctLSc7XG4gICAgICBpZiAodGhpcy5pc0hvdXJGb3JtYXQyNCkgcmV0dXJuIHRoaXMucGFkKHRoaXMuaG91cnNTZWxlY3RlZCk7XG4gICAgICB2YXIgZGlzcGxheSA9IHRoaXMuaG91cnNTZWxlY3RlZDtcbiAgICAgIGlmICh0aGlzLm1lcmlkaWVuU2VsZWN0ZWQgPT09IHRoaXMuUE0pIGRpc3BsYXkgLT0gMTI7XG4gICAgICBpZiAoZGlzcGxheSA9PT0gMCkgZGlzcGxheSA9IDEyO1xuICAgICAgcmV0dXJuIGRpc3BsYXk7XG4gICAgfSxcbiAgICBtaW51dGVzRGlzcGxheTogZnVuY3Rpb24gbWludXRlc0Rpc3BsYXkoKSB7XG4gICAgICByZXR1cm4gdGhpcy5taW51dGVzU2VsZWN0ZWQgPT0gbnVsbCA/ICctLScgOiB0aGlzLnBhZCh0aGlzLm1pbnV0ZXNTZWxlY3RlZCk7XG4gICAgfSxcbiAgICBtaW5GYWNlVmFsdWU6IGZ1bmN0aW9uIG1pbkZhY2VWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzU2VsZWN0aW5nSG91ciAmJiAhdGhpcy5pc0hvdXJGb3JtYXQyNCAmJiB0aGlzLm1lcmlkaWVuU2VsZWN0ZWQgPT09IHRoaXMuUE0gPyAxMiA6IDA7XG4gICAgfSxcbiAgICBtYXhGYWNlVmFsdWU6IGZ1bmN0aW9uIG1heEZhY2VWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzU2VsZWN0aW5nSG91ciA/ICF0aGlzLmlzSG91ckZvcm1hdDI0ICYmIHRoaXMubWVyaWRpZW5TZWxlY3RlZCA9PT0gdGhpcy5BTSA/IDExIDogMjMgOiA1OTtcbiAgICB9LFxuICAgIGZhY2VTaXplOiBmdW5jdGlvbiBmYWNlU2l6ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnBpY2tlclNpemUgLSBvdXRlclBhZGRpbmcgKiAyO1xuICAgIH0sXG4gICAgZmFjZURpc2FibGVkVmFsdWVzOiBmdW5jdGlvbiBmYWNlRGlzYWJsZWRWYWx1ZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1NlbGVjdGluZ0hvdXIgPyB0aGlzLmlzSG91ckRpc2FibGVkIDogdGhpcy5pc01pbnV0ZURpc2FibGVkO1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIG9uQ2xvY2tJbnB1dDogZnVuY3Rpb24gb25DbG9ja0lucHV0KHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5pc1NlbGVjdGluZ0hvdXIpIHtcbiAgICAgICAgdGhpcy5ob3Vyc1NlbGVjdGVkID0gdmFsdWU7XG4gICAgICAgIHRoaXMub25Ib3Vyc0NoYW5nZSh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1pbnV0ZXNTZWxlY3RlZCA9IHZhbHVlO1xuICAgICAgICB0aGlzLm9uTWludXRlc0NoYW5nZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkNsb2NrQ2hhbmdlOiBmdW5jdGlvbiBvbkNsb2NrQ2hhbmdlKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5hdXRvU3dpdGNoICYmIHRoaXMuaXNTZWxlY3RpbmdIb3VyKSB7XG4gICAgICAgIHRoaXMuaXNTZWxlY3RpbmdIb3VyID0gIXRoaXMuaXNTZWxlY3RpbmdIb3VyO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25NZXJpZGllbkNsaWNrOiBmdW5jdGlvbiBvbk1lcmlkaWVuQ2xpY2sodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLm1lcmlkaWVuU2VsZWN0ZWQgIT09IHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWVyaWRpZW5TZWxlY3RlZCA9IHZhbHVlO1xuICAgICAgICB0aGlzLm9uTWVyaWRpZW5DaGFuZ2UodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyQxID0gc2NyaXB0JDE7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18kMSA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYi1jbG9ja3BpY2tlciBjb250cm9sXCIsY2xhc3M6W192bS5zaXplLCBfdm0udHlwZSwgeydpcy1leHBhbmRlZCc6IF92bS5leHBhbmRlZH1dfSxbKCFfdm0uaXNNb2JpbGUgfHwgX3ZtLmlubGluZSk/X2MoJ2ItZHJvcGRvd24nLHtyZWY6XCJkcm9wZG93blwiLGF0dHJzOntcInBvc2l0aW9uXCI6X3ZtLnBvc2l0aW9uLFwiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWQsXCJpbmxpbmVcIjpfdm0uaW5saW5lfX0sWyghX3ZtLmlubGluZSk/X2MoJ2ItaW5wdXQnLF92bS5fYih7cmVmOlwiaW5wdXRcIixhdHRyczp7XCJzbG90XCI6XCJ0cmlnZ2VyXCIsXCJhdXRvY29tcGxldGVcIjpcIm9mZlwiLFwidmFsdWVcIjpfdm0uZm9ybWF0VmFsdWUoX3ZtLmNvbXB1dGVkVmFsdWUpLFwicGxhY2Vob2xkZXJcIjpfdm0ucGxhY2Vob2xkZXIsXCJzaXplXCI6X3ZtLnNpemUsXCJpY29uXCI6X3ZtLmljb24sXCJpY29uLXBhY2tcIjpfdm0uaWNvblBhY2ssXCJsb2FkaW5nXCI6X3ZtLmxvYWRpbmcsXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcInJlYWRvbmx5XCI6IV92bS5lZGl0YWJsZSxcInJvdW5kZWRcIjpfdm0ucm91bmRlZCxcInVzZS1odG1sNS12YWxpZGF0aW9uXCI6X3ZtLnVzZUh0bWw1VmFsaWRhdGlvbn0sb246e1wiZm9jdXNcIjpfdm0uaGFuZGxlT25Gb2N1cyxcImJsdXJcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vbkJsdXIoKSAmJiBfdm0uY2hlY2tIdG1sNVZhbGlkaXR5KCk7fX0sbmF0aXZlT246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtfdm0udG9nZ2xlKHRydWUpO30sXCJrZXl1cFwiOmZ1bmN0aW9uKCRldmVudCl7aWYoISgnYnV0dG9uJyBpbiAkZXZlbnQpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJlbnRlclwiLDEzLCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH1fdm0udG9nZ2xlKHRydWUpO30sXCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vbkNoYW5nZU5hdGl2ZVBpY2tlcigkZXZlbnQpO319LHNsb3Q6XCJ0cmlnZ2VyXCJ9LCdiLWlucHV0Jyxfdm0uJGF0dHJzLGZhbHNlKSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjYXJkXCIsYXR0cnM6e1wiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWQsXCJjdXN0b21cIjpcIlwifX0sWyhfdm0uaW5saW5lKT9fYygnaGVhZGVyJyx7c3RhdGljQ2xhc3M6XCJjYXJkLWhlYWRlclwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYi1jbG9ja3BpY2tlci1oZWFkZXIgY2FyZC1oZWFkZXItdGl0bGVcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImItY2xvY2twaWNrZXItdGltZVwifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImItY2xvY2twaWNrZXItYnRuXCIsY2xhc3M6eyBhY3RpdmU6IF92bS5pc1NlbGVjdGluZ0hvdXIgfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmlzU2VsZWN0aW5nSG91ciA9IHRydWU7fX19LFtfdm0uX3YoX3ZtLl9zKF92bS5ob3Vyc0Rpc3BsYXkpKV0pLF92bS5fdihcIiBcIiksX2MoJ3NwYW4nLFtfdm0uX3YoXCI6XCIpXSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiYi1jbG9ja3BpY2tlci1idG5cIixjbGFzczp7IGFjdGl2ZTogIV92bS5pc1NlbGVjdGluZ0hvdXIgfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmlzU2VsZWN0aW5nSG91ciA9IGZhbHNlO319fSxbX3ZtLl92KF92bS5fcyhfdm0ubWludXRlc0Rpc3BsYXkpKV0pXSksX3ZtLl92KFwiIFwiKSwoIV92bS5pc0hvdXJGb3JtYXQyNCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYi1jbG9ja3BpY2tlci1wZXJpb2RcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImItY2xvY2twaWNrZXItYnRuXCIsY2xhc3M6eyBhY3RpdmU6IF92bS5tZXJpZGllblNlbGVjdGVkID09IF92bS5BTSB9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub25NZXJpZGllbkNsaWNrKF92bS5BTSk7fX19LFtfdm0uX3YoXCJhbVwiKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYi1jbG9ja3BpY2tlci1idG5cIixjbGFzczp7IGFjdGl2ZTogX3ZtLm1lcmlkaWVuU2VsZWN0ZWQgPT0gX3ZtLlBNIH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vbk1lcmlkaWVuQ2xpY2soX3ZtLlBNKTt9fX0sW192bS5fdihcInBtXCIpXSldKTpfdm0uX2UoKV0pXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjYXJkLWNvbnRlbnRcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImItY2xvY2twaWNrZXItYm9keVwiLHN0eWxlOih7IHdpZHRoOiBfdm0uZmFjZVNpemUgKyAncHgnLCBoZWlnaHQ6IF92bS5mYWNlU2l6ZSArICdweCcgfSl9LFsoIV92bS5pbmxpbmUpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImItY2xvY2twaWNrZXItdGltZVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYi1jbG9ja3BpY2tlci1idG5cIixjbGFzczp7IGFjdGl2ZTogX3ZtLmlzU2VsZWN0aW5nSG91ciB9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaXNTZWxlY3RpbmdIb3VyID0gdHJ1ZTt9fX0sW192bS5fdihcIkhvdXJzXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiYi1jbG9ja3BpY2tlci1idG5cIixjbGFzczp7IGFjdGl2ZTogIV92bS5pc1NlbGVjdGluZ0hvdXIgfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmlzU2VsZWN0aW5nSG91ciA9IGZhbHNlO319fSxbX3ZtLl92KFwiTWluXCIpXSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLCghX3ZtLmlzSG91ckZvcm1hdDI0ICYmICFfdm0uaW5saW5lKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJiLWNsb2NrcGlja2VyLXBlcmlvZFwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYi1jbG9ja3BpY2tlci1idG5cIixjbGFzczp7IGFjdGl2ZTogX3ZtLm1lcmlkaWVuU2VsZWN0ZWQgPT0gX3ZtLkFNIH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vbk1lcmlkaWVuQ2xpY2soX3ZtLkFNKTt9fX0sW192bS5fdihfdm0uX3MoX3ZtLkFNKSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImItY2xvY2twaWNrZXItYnRuXCIsY2xhc3M6eyBhY3RpdmU6IF92bS5tZXJpZGllblNlbGVjdGVkID09IF92bS5QTSB9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub25NZXJpZGllbkNsaWNrKF92bS5QTSk7fX19LFtfdm0uX3YoX3ZtLl9zKF92bS5QTSkpXSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWNsb2NrcGlja2VyLWZhY2UnLHthdHRyczp7XCJwaWNrZXItc2l6ZVwiOl92bS5mYWNlU2l6ZSxcIm1pblwiOl92bS5taW5GYWNlVmFsdWUsXCJtYXhcIjpfdm0ubWF4RmFjZVZhbHVlLFwiZmFjZS1udW1iZXJzXCI6X3ZtLmlzU2VsZWN0aW5nSG91ciA/IF92bS5ob3VycyA6IF92bS5taW51dGVzLFwiZGlzYWJsZWQtdmFsdWVzXCI6X3ZtLmZhY2VEaXNhYmxlZFZhbHVlcyxcImRvdWJsZVwiOl92bS5pc1NlbGVjdGluZ0hvdXIgJiYgX3ZtLmlzSG91ckZvcm1hdDI0LFwidmFsdWVcIjpfdm0uaXNTZWxlY3RpbmdIb3VyID8gX3ZtLmhvdXJzU2VsZWN0ZWQgOiBfdm0ubWludXRlc1NlbGVjdGVkfSxvbjp7XCJpbnB1dFwiOl92bS5vbkNsb2NrSW5wdXQsXCJjaGFuZ2VcIjpfdm0ub25DbG9ja0NoYW5nZX19KV0sMSldKSxfdm0uX3YoXCIgXCIpLChfdm0uJHNsb3RzLmRlZmF1bHQgIT09IHVuZGVmaW5lZCAmJiBfdm0uJHNsb3RzLmRlZmF1bHQubGVuZ3RoKT9fYygnZm9vdGVyJyx7c3RhdGljQ2xhc3M6XCJiLWNsb2NrcGlja2VyLWZvb3RlciBjYXJkLWZvb3RlclwifSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMik6X3ZtLl9lKCldKV0sMSk6X2MoJ2ItaW5wdXQnLF92bS5fYih7cmVmOlwiaW5wdXRcIixhdHRyczp7XCJ0eXBlXCI6XCJ0aW1lXCIsXCJhdXRvY29tcGxldGVcIjpcIm9mZlwiLFwidmFsdWVcIjpfdm0uZm9ybWF0SEhNTVNTKF92bS5jb21wdXRlZFZhbHVlKSxcInBsYWNlaG9sZGVyXCI6X3ZtLnBsYWNlaG9sZGVyLFwic2l6ZVwiOl92bS5zaXplLFwiaWNvblwiOl92bS5pY29uLFwiaWNvbi1wYWNrXCI6X3ZtLmljb25QYWNrLFwibG9hZGluZ1wiOl92bS5sb2FkaW5nLFwibWF4XCI6X3ZtLmZvcm1hdEhITU1TUyhfdm0ubWF4VGltZSksXCJtaW5cIjpfdm0uZm9ybWF0SEhNTVNTKF92bS5taW5UaW1lKSxcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkLFwicmVhZG9ubHlcIjpmYWxzZSxcInVzZS1odG1sNS12YWxpZGF0aW9uXCI6X3ZtLnVzZUh0bWw1VmFsaWRhdGlvbn0sb246e1wiZm9jdXNcIjpfdm0uaGFuZGxlT25Gb2N1cyxcImJsdXJcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vbkJsdXIoKSAmJiBfdm0uY2hlY2tIdG1sNVZhbGlkaXR5KCk7fX0sbmF0aXZlT246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtfdm0udG9nZ2xlKHRydWUpO30sXCJrZXl1cFwiOmZ1bmN0aW9uKCRldmVudCl7aWYoISgnYnV0dG9uJyBpbiAkZXZlbnQpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJlbnRlclwiLDEzLCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH1fdm0udG9nZ2xlKHRydWUpO30sXCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vbkNoYW5nZU5hdGl2ZVBpY2tlcigkZXZlbnQpO319fSwnYi1pbnB1dCcsX3ZtLiRhdHRycyxmYWxzZSkpXSwxKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kMSA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDEgPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgQ2xvY2twaWNrZXIgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18kMSwgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQxIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fJDEsXG4gICAgX192dWVfc2NyaXB0X18kMSxcbiAgICBfX3Z1ZV9zY29wZV9pZF9fJDEsXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDEsXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQxLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxudmFyIFBsdWdpbiA9IHtcbiAgaW5zdGFsbDogZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcbiAgICByZWdpc3RlckNvbXBvbmVudChWdWUsIENsb2NrcGlja2VyKTtcbiAgfVxufTtcbnVzZShQbHVnaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBQbHVnaW47XG5leHBvcnQgeyBDbG9ja3BpY2tlciB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfZGVmaW5lUHJvcGVydHkgfSBmcm9tICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCB7IEYgYXMgRm9ybUVsZW1lbnRNaXhpbiB9IGZyb20gJy4vY2h1bmstMTBjODU1MjkuanMnO1xuaW1wb3J0IHsgSSBhcyBJY29uIH0gZnJvbSAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fIH0gZnJvbSAnLi9jaHVuay1jY2E4OGRiOC5qcyc7XG5cbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdCU2VsZWN0JyxcbiAgY29tcG9uZW50czogX2RlZmluZVByb3BlcnR5KHt9LCBJY29uLm5hbWUsIEljb24pLFxuICBtaXhpbnM6IFtGb3JtRWxlbWVudE1peGluXSxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyLCBCb29sZWFuLCBPYmplY3QsIEFycmF5LCBGdW5jdGlvbl0sXG4gICAgICBkZWZhdWx0OiBudWxsXG4gICAgfSxcbiAgICBwbGFjZWhvbGRlcjogU3RyaW5nLFxuICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgIG5hdGl2ZVNpemU6IFtTdHJpbmcsIE51bWJlcl1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0ZWQ6IHRoaXMudmFsdWUsXG4gICAgICBfZWxlbWVudFJlZjogJ3NlbGVjdCdcbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGNvbXB1dGVkVmFsdWU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gdmFsdWU7XG4gICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdmFsdWUpO1xuICAgICAgICAhdGhpcy5pc1ZhbGlkICYmIHRoaXMuY2hlY2tIdG1sNVZhbGlkaXR5KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzcGFuQ2xhc3NlczogZnVuY3Rpb24gc3BhbkNsYXNzZXMoKSB7XG4gICAgICByZXR1cm4gW3RoaXMuc2l6ZSwgdGhpcy5zdGF0dXNUeXBlLCB7XG4gICAgICAgICdpcy1mdWxsd2lkdGgnOiB0aGlzLmV4cGFuZGVkLFxuICAgICAgICAnaXMtbG9hZGluZyc6IHRoaXMubG9hZGluZyxcbiAgICAgICAgJ2lzLW11bHRpcGxlJzogdGhpcy5tdWx0aXBsZSxcbiAgICAgICAgJ2lzLXJvdW5kZWQnOiB0aGlzLnJvdW5kZWQsXG4gICAgICAgICdpcy1lbXB0eSc6IHRoaXMuc2VsZWN0ZWQgPT09IG51bGxcbiAgICAgIH1dO1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICAvKipcclxuICAgICogV2hlbiB2LW1vZGVsIGlzIGNoYW5nZWQ6XHJcbiAgICAqICAgMS4gU2V0IHRoZSBzZWxlY3RlZCBvcHRpb24uXHJcbiAgICAqICAgMi4gSWYgaXQncyBpbnZhbGlkLCB2YWxpZGF0ZSBhZ2Fpbi5cclxuICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKF92YWx1ZSkge1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IF92YWx1ZTtcbiAgICAgICF0aGlzLmlzVmFsaWQgJiYgdGhpcy5jaGVja0h0bWw1VmFsaWRpdHkoKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImNvbnRyb2xcIixjbGFzczp7ICdpcy1leHBhbmRlZCc6IF92bS5leHBhbmRlZCwgJ2hhcy1pY29ucy1sZWZ0JzogX3ZtLmljb24gfX0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJzZWxlY3RcIixjbGFzczpfdm0uc3BhbkNsYXNzZXN9LFtfYygnc2VsZWN0Jyxfdm0uX2Ioe2RpcmVjdGl2ZXM6W3tuYW1lOlwibW9kZWxcIixyYXdOYW1lOlwidi1tb2RlbFwiLHZhbHVlOihfdm0uY29tcHV0ZWRWYWx1ZSksZXhwcmVzc2lvbjpcImNvbXB1dGVkVmFsdWVcIn1dLHJlZjpcInNlbGVjdFwiLGF0dHJzOntcIm11bHRpcGxlXCI6X3ZtLm11bHRpcGxlLFwic2l6ZVwiOl92bS5uYXRpdmVTaXplfSxvbjp7XCJibHVyXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uJGVtaXQoJ2JsdXInLCAkZXZlbnQpICYmIF92bS5jaGVja0h0bWw1VmFsaWRpdHkoKTt9LFwiZm9jdXNcIjpmdW5jdGlvbigkZXZlbnQpe192bS4kZW1pdCgnZm9jdXMnLCAkZXZlbnQpO30sXCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe3ZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucyxmdW5jdGlvbihvKXtyZXR1cm4gby5zZWxlY3RlZH0pLm1hcChmdW5jdGlvbihvKXt2YXIgdmFsID0gXCJfdmFsdWVcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlO3JldHVybiB2YWx9KTsgX3ZtLmNvbXB1dGVkVmFsdWU9JGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdO319fSwnc2VsZWN0Jyxfdm0uJGF0dHJzLGZhbHNlKSxbKF92bS5wbGFjZWhvbGRlcik/Wyhfdm0uY29tcHV0ZWRWYWx1ZSA9PSBudWxsKT9fYygnb3B0aW9uJyx7YXR0cnM6e1wiZGlzYWJsZWRcIjpcIlwiLFwiaGlkZGVuXCI6XCJcIn0sZG9tUHJvcHM6e1widmFsdWVcIjpudWxsfX0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgICAgICAgXCIrX3ZtLl9zKF92bS5wbGFjZWhvbGRlcikrXCJcXG4gICAgICAgICAgICAgICAgXCIpXSk6X3ZtLl9lKCldOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLl90KFwiZGVmYXVsdFwiKV0sMildKSxfdm0uX3YoXCIgXCIpLChfdm0uaWNvbik/X2MoJ2ItaWNvbicse3N0YXRpY0NsYXNzOlwiaXMtbGVmdFwiLGF0dHJzOntcImljb25cIjpfdm0uaWNvbixcInBhY2tcIjpfdm0uaWNvblBhY2ssXCJzaXplXCI6X3ZtLmljb25TaXplfX0pOl92bS5fZSgpXSwxKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBTZWxlY3QgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbmV4cG9ydCB7IFNlbGVjdCBhcyBTIH07XG4iLCJpbXBvcnQgeyBfIGFzIF9kZWZpbmVQcm9wZXJ0eSB9IGZyb20gJy4vY2h1bmstZDYyMDAwODcuanMnO1xuaW1wb3J0IHsgaSBhcyBpc01vYmlsZSB9IGZyb20gJy4vY2h1bmstZTVmY2U0OGYuanMnO1xuaW1wb3J0IHsgYyBhcyBjb25maWcgfSBmcm9tICcuL2NodW5rLTllMzIwN2NjLmpzJztcbmltcG9ydCB7IEYgYXMgRm9ybUVsZW1lbnRNaXhpbiB9IGZyb20gJy4vY2h1bmstMTBjODU1MjkuanMnO1xuaW1wb3J0IHsgSSBhcyBJY29uIH0gZnJvbSAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IHsgSSBhcyBJbnB1dCB9IGZyb20gJy4vY2h1bmstOThlODZmNDAuanMnO1xuaW1wb3J0IHsgRCBhcyBEcm9wZG93biwgYSBhcyBEcm9wZG93bkl0ZW0gfSBmcm9tICcuL2NodW5rLTAwZTNlNjdmLmpzJztcbmltcG9ydCB7IEYgYXMgRmllbGQgfSBmcm9tICcuL2NodW5rLTUzMWI4Mjc0LmpzJztcbmltcG9ydCB7IFMgYXMgU2VsZWN0IH0gZnJvbSAnLi9jaHVuay05MTJlZDcxNS5qcyc7XG5cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xudmFyIHNjcmlwdCA9IHtcbiAgbmFtZTogJ0JEYXRlcGlja2VyVGFibGVSb3cnLFxuICBwcm9wczoge1xuICAgIHNlbGVjdGVkRGF0ZToge1xuICAgICAgdHlwZTogW0RhdGUsIEFycmF5XVxuICAgIH0sXG4gICAgaG92ZXJlZERhdGVSYW5nZTogQXJyYXksXG4gICAgd2Vlazoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgbW9udGg6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBtaW5EYXRlOiBEYXRlLFxuICAgIG1heERhdGU6IERhdGUsXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgdW5zZWxlY3RhYmxlRGF0ZXM6IEFycmF5LFxuICAgIHVuc2VsZWN0YWJsZURheXNPZldlZWs6IEFycmF5LFxuICAgIHNlbGVjdGFibGVEYXRlczogQXJyYXksXG4gICAgZXZlbnRzOiBBcnJheSxcbiAgICBpbmRpY2F0b3JzOiBTdHJpbmcsXG4gICAgZGF0ZUNyZWF0b3I6IEZ1bmN0aW9uLFxuICAgIG5lYXJieU1vbnRoRGF5czogQm9vbGVhbixcbiAgICBuZWFyYnlTZWxlY3RhYmxlTW9udGhEYXlzOiBCb29sZWFuLFxuICAgIHNob3dXZWVrTnVtYmVyOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJ1bGVzRm9yRmlyc3RXZWVrOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIDQ7XG4gICAgICB9XG4gICAgfSxcbiAgICBmaXJzdERheU9mV2VlazogTnVtYmVyXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBmaXJzdFdlZWtPZmZzZXQ6IGZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICB2YXIgZndkID0gNyArIGRvdyAtIGRveTsgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuXG4gICAgICB2YXIgZmlyc3RKYW51YXJ5ID0gbmV3IERhdGUoeWVhciwgMCwgZndkKTtcbiAgICAgIHZhciBmd2RsdyA9ICg3ICsgZmlyc3RKYW51YXJ5LmdldERheSgpIC0gZG93KSAlIDc7XG4gICAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbiAgICB9LFxuICAgIGRheXNJblllYXI6IGZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgICAgcmV0dXJuIHRoaXMuaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbiAgICB9LFxuICAgIGlzTGVhcFllYXI6IGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgICAgcmV0dXJuIHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMDtcbiAgICB9LFxuICAgIGdldFNldERheU9mWWVhcjogZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyKGlucHV0KSB7XG4gICAgICB2YXIgZGF5T2ZZZWFyID0gTWF0aC5yb3VuZCgoaW5wdXQgLSBuZXcgRGF0ZShpbnB1dC5nZXRGdWxsWWVhcigpLCAwLCAxKSkgLyA4NjRlNSkgKyAxO1xuICAgICAgcmV0dXJuIGRheU9mWWVhcjtcbiAgICB9LFxuICAgIHdlZWtzSW5ZZWFyOiBmdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgICAgdmFyIHdlZWtPZmZzZXQgPSB0aGlzLmZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSk7XG4gICAgICB2YXIgd2Vla09mZnNldE5leHQgPSB0aGlzLmZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZG93LCBkb3kpO1xuICAgICAgcmV0dXJuICh0aGlzLmRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gNztcbiAgICB9LFxuICAgIGdldFdlZWtOdW1iZXI6IGZ1bmN0aW9uIGdldFdlZWtOdW1iZXIobW9tKSB7XG4gICAgICB2YXIgZG93ID0gdGhpcy5maXJzdERheU9mV2VlazsgLy8gZmlyc3QgZGF5IG9mIHdlZWtcbiAgICAgIC8vIFJ1bGVzIGZvciB0aGUgZmlyc3Qgd2VlayA6IDEgZm9yIHRoZSAxc3QgSmFudWFyeSwgNCBmb3IgdGhlIDR0aCBKYW51YXJ5XG5cbiAgICAgIHZhciBkb3kgPSB0aGlzLnJ1bGVzRm9yRmlyc3RXZWVrO1xuICAgICAgdmFyIHdlZWtPZmZzZXQgPSB0aGlzLmZpcnN0V2Vla09mZnNldChtb20uZ2V0RnVsbFllYXIoKSwgZG93LCBkb3kpO1xuICAgICAgdmFyIHdlZWsgPSBNYXRoLmZsb29yKCh0aGlzLmdldFNldERheU9mWWVhcihtb20pIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxO1xuICAgICAgdmFyIHJlc1dlZWs7XG4gICAgICB2YXIgcmVzWWVhcjtcblxuICAgICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgIHJlc1llYXIgPSBtb20uZ2V0RnVsbFllYXIoKSAtIDE7XG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrICsgdGhpcy53ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgICB9IGVsc2UgaWYgKHdlZWsgPiB0aGlzLndlZWtzSW5ZZWFyKG1vbS5nZXRGdWxsWWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB0aGlzLndlZWtzSW5ZZWFyKG1vbS5nZXRGdWxsWWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgIHJlc1llYXIgPSBtb20uZ2V0RnVsbFllYXIoKSArIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNZZWFyID0gbW9tLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzV2VlaztcbiAgICB9LFxuXG4gICAgLypcclxuICAgICogQ2hlY2sgdGhhdCBzZWxlY3RlZCBkYXkgaXMgd2l0aGluIGVhcmxpZXN0L2xhdGVzdCBwYXJhbXMgYW5kXHJcbiAgICAqIGlzIHdpdGhpbiB0aGlzIG1vbnRoXHJcbiAgICAqL1xuICAgIHNlbGVjdGFibGVEYXRlOiBmdW5jdGlvbiBzZWxlY3RhYmxlRGF0ZShkYXkpIHtcbiAgICAgIHZhciB2YWxpZGl0eSA9IFtdO1xuXG4gICAgICBpZiAodGhpcy5taW5EYXRlKSB7XG4gICAgICAgIHZhbGlkaXR5LnB1c2goZGF5ID49IHRoaXMubWluRGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1heERhdGUpIHtcbiAgICAgICAgdmFsaWRpdHkucHVzaChkYXkgPD0gdGhpcy5tYXhEYXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubmVhcmJ5TW9udGhEYXlzICYmICF0aGlzLm5lYXJieVNlbGVjdGFibGVNb250aERheXMpIHtcbiAgICAgICAgdmFsaWRpdHkucHVzaChkYXkuZ2V0TW9udGgoKSA9PT0gdGhpcy5tb250aCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNlbGVjdGFibGVEYXRlcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2VsZWN0YWJsZURhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGVuYWJsZWREYXRlID0gdGhpcy5zZWxlY3RhYmxlRGF0ZXNbaV07XG5cbiAgICAgICAgICBpZiAoZGF5LmdldERhdGUoKSA9PT0gZW5hYmxlZERhdGUuZ2V0RGF0ZSgpICYmIGRheS5nZXRGdWxsWWVhcigpID09PSBlbmFibGVkRGF0ZS5nZXRGdWxsWWVhcigpICYmIGRheS5nZXRNb250aCgpID09PSBlbmFibGVkRGF0ZS5nZXRNb250aCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsaWRpdHkucHVzaChmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnVuc2VsZWN0YWJsZURhdGVzKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aGlzLnVuc2VsZWN0YWJsZURhdGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgIHZhciBkaXNhYmxlZERhdGUgPSB0aGlzLnVuc2VsZWN0YWJsZURhdGVzW19pXTtcbiAgICAgICAgICB2YWxpZGl0eS5wdXNoKGRheS5nZXREYXRlKCkgIT09IGRpc2FibGVkRGF0ZS5nZXREYXRlKCkgfHwgZGF5LmdldEZ1bGxZZWFyKCkgIT09IGRpc2FibGVkRGF0ZS5nZXRGdWxsWWVhcigpIHx8IGRheS5nZXRNb250aCgpICE9PSBkaXNhYmxlZERhdGUuZ2V0TW9udGgoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudW5zZWxlY3RhYmxlRGF5c09mV2Vlaykge1xuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB0aGlzLnVuc2VsZWN0YWJsZURheXNPZldlZWsubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgIHZhciBkYXlPZldlZWsgPSB0aGlzLnVuc2VsZWN0YWJsZURheXNPZldlZWtbX2kyXTtcbiAgICAgICAgICB2YWxpZGl0eS5wdXNoKGRheS5nZXREYXkoKSAhPT0gZGF5T2ZXZWVrKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsaWRpdHkuaW5kZXhPZihmYWxzZSkgPCAwO1xuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBFbWl0IHNlbGVjdCBldmVudCB3aXRoIGNob3NlbiBkYXRlIGFzIHBheWxvYWRcclxuICAgICovXG4gICAgZW1pdENob3NlbkRhdGU6IGZ1bmN0aW9uIGVtaXRDaG9zZW5EYXRlKGRheSkge1xuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcblxuICAgICAgaWYgKHRoaXMuc2VsZWN0YWJsZURhdGUoZGF5KSkge1xuICAgICAgICB0aGlzLiRlbWl0KCdzZWxlY3QnLCBkYXkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXZlbnRzRGF0ZU1hdGNoOiBmdW5jdGlvbiBldmVudHNEYXRlTWF0Y2goZGF5KSB7XG4gICAgICBpZiAoIXRoaXMuZXZlbnRzIHx8ICF0aGlzLmV2ZW50cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciBkYXlFdmVudHMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5ldmVudHNbaV0uZGF0ZS5nZXREYXkoKSA9PT0gZGF5LmdldERheSgpKSB7XG4gICAgICAgICAgZGF5RXZlbnRzLnB1c2godGhpcy5ldmVudHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghZGF5RXZlbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXlFdmVudHM7XG4gICAgfSxcblxuICAgIC8qXHJcbiAgICAqIEJ1aWxkIGNsYXNzT2JqZWN0IGZvciBjZWxsIHVzaW5nIHZhbGlkYXRpb25zXHJcbiAgICAqL1xuICAgIGNsYXNzT2JqZWN0OiBmdW5jdGlvbiBjbGFzc09iamVjdChkYXkpIHtcbiAgICAgIGZ1bmN0aW9uIGRhdGVNYXRjaChkYXRlT25lLCBkYXRlVHdvKSB7XG4gICAgICAgIC8vIGlmIGVpdGhlciBkYXRlIGlzIG51bGwgb3IgdW5kZWZpbmVkLCByZXR1cm4gZmFsc2VcbiAgICAgICAgaWYgKCFkYXRlT25lIHx8ICFkYXRlVHdvKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0ZVR3bykpIHtcbiAgICAgICAgICByZXR1cm4gZGF0ZVR3by5zb21lKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZU9uZS5nZXREYXRlKCkgPT09IGRhdGUuZ2V0RGF0ZSgpICYmIGRhdGVPbmUuZ2V0RnVsbFllYXIoKSA9PT0gZGF0ZS5nZXRGdWxsWWVhcigpICYmIGRhdGVPbmUuZ2V0TW9udGgoKSA9PT0gZGF0ZS5nZXRNb250aCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGVPbmUuZ2V0RGF0ZSgpID09PSBkYXRlVHdvLmdldERhdGUoKSAmJiBkYXRlT25lLmdldEZ1bGxZZWFyKCkgPT09IGRhdGVUd28uZ2V0RnVsbFllYXIoKSAmJiBkYXRlT25lLmdldE1vbnRoKCkgPT09IGRhdGVUd28uZ2V0TW9udGgoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGF0ZVdpdGhpbihkYXRlT25lLCBkYXRlcykge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0ZXMpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGVPbmUgPiBkYXRlc1swXSAmJiBkYXRlT25lIDwgZGF0ZXNbMV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICdpcy1zZWxlY3RlZCc6IGRhdGVNYXRjaChkYXksIHRoaXMuc2VsZWN0ZWREYXRlKSB8fCBkYXRlV2l0aGluKGRheSwgdGhpcy5zZWxlY3RlZERhdGUpLFxuICAgICAgICAnaXMtZmlyc3Qtc2VsZWN0ZWQnOiBkYXRlTWF0Y2goZGF5LCBBcnJheS5pc0FycmF5KHRoaXMuc2VsZWN0ZWREYXRlKSAmJiB0aGlzLnNlbGVjdGVkRGF0ZVswXSksXG4gICAgICAgICdpcy13aXRoaW4tc2VsZWN0ZWQnOiBkYXRlV2l0aGluKGRheSwgdGhpcy5zZWxlY3RlZERhdGUpLFxuICAgICAgICAnaXMtbGFzdC1zZWxlY3RlZCc6IGRhdGVNYXRjaChkYXksIEFycmF5LmlzQXJyYXkodGhpcy5zZWxlY3RlZERhdGUpICYmIHRoaXMuc2VsZWN0ZWREYXRlWzFdKSxcbiAgICAgICAgJ2lzLXdpdGhpbi1ob3ZlcmVkLXJhbmdlJzogdGhpcy5ob3ZlcmVkRGF0ZVJhbmdlICYmIHRoaXMuaG92ZXJlZERhdGVSYW5nZS5sZW5ndGggPT09IDIgJiYgKGRhdGVNYXRjaChkYXksIHRoaXMuaG92ZXJlZERhdGVSYW5nZSkgfHwgZGF0ZVdpdGhpbihkYXksIHRoaXMuaG92ZXJlZERhdGVSYW5nZSkpLFxuICAgICAgICAnaXMtZmlyc3QtaG92ZXJlZCc6IGRhdGVNYXRjaChkYXksIEFycmF5LmlzQXJyYXkodGhpcy5ob3ZlcmVkRGF0ZVJhbmdlKSAmJiB0aGlzLmhvdmVyZWREYXRlUmFuZ2VbMF0pLFxuICAgICAgICAnaXMtd2l0aGluLWhvdmVyZWQnOiBkYXRlV2l0aGluKGRheSwgdGhpcy5ob3ZlcmVkRGF0ZVJhbmdlKSxcbiAgICAgICAgJ2lzLWxhc3QtaG92ZXJlZCc6IGRhdGVNYXRjaChkYXksIEFycmF5LmlzQXJyYXkodGhpcy5ob3ZlcmVkRGF0ZVJhbmdlKSAmJiB0aGlzLmhvdmVyZWREYXRlUmFuZ2VbMV0pLFxuICAgICAgICAnaXMtdG9kYXknOiBkYXRlTWF0Y2goZGF5LCB0aGlzLmRhdGVDcmVhdG9yKCkpLFxuICAgICAgICAnaXMtc2VsZWN0YWJsZSc6IHRoaXMuc2VsZWN0YWJsZURhdGUoZGF5KSAmJiAhdGhpcy5kaXNhYmxlZCxcbiAgICAgICAgJ2lzLXVuc2VsZWN0YWJsZSc6ICF0aGlzLnNlbGVjdGFibGVEYXRlKGRheSkgfHwgdGhpcy5kaXNhYmxlZCxcbiAgICAgICAgJ2lzLWludmlzaWJsZSc6ICF0aGlzLm5lYXJieU1vbnRoRGF5cyAmJiBkYXkuZ2V0TW9udGgoKSAhPT0gdGhpcy5tb250aCxcbiAgICAgICAgJ2lzLW5lYXJieSc6IHRoaXMubmVhcmJ5U2VsZWN0YWJsZU1vbnRoRGF5cyAmJiBkYXkuZ2V0TW9udGgoKSAhPT0gdGhpcy5tb250aFxuICAgICAgfTtcbiAgICB9LFxuICAgIHNldFJhbmdlSG92ZXJFbmREYXRlOiBmdW5jdGlvbiBzZXRSYW5nZUhvdmVyRW5kRGF0ZShkYXkpIHtcbiAgICAgIHZhciBpc1JhbmdlSW5wdXQgPSBBcnJheS5pc0FycmF5KHRoaXMuc2VsZWN0ZWREYXRlKTtcblxuICAgICAgaWYgKGlzUmFuZ2VJbnB1dCkge1xuICAgICAgICB0aGlzLiRlbWl0KCdyYW5nZUhvdmVyRW5kRGF0ZScsIGRheSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fID0gc2NyaXB0O1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJkYXRlcGlja2VyLXJvd1wifSxbKF92bS5zaG93V2Vla051bWJlcik/X2MoJ2EnLHtzdGF0aWNDbGFzczpcImRhdGVwaWNrZXItY2VsbCBpcy13ZWVrLW51bWJlclwifSxbX3ZtLl92KFwiXFxuICAgICAgICBcIitfdm0uX3MoX3ZtLmdldFdlZWtOdW1iZXIoX3ZtLndlZWtbNl0pKStcIlxcbiAgICBcIildKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5fbCgoX3ZtLndlZWspLGZ1bmN0aW9uKGRheSxpbmRleCl7cmV0dXJuIFsoX3ZtLnNlbGVjdGFibGVEYXRlKGRheSkgJiYgIV92bS5kaXNhYmxlZCk/X2MoJ2EnLHtrZXk6aW5kZXgsc3RhdGljQ2xhc3M6XCJkYXRlcGlja2VyLWNlbGxcIixjbGFzczpbX3ZtLmNsYXNzT2JqZWN0KGRheSksIHsnaGFzLWV2ZW50JzogX3ZtLmV2ZW50c0RhdGVNYXRjaChkYXkpfSwgX3ZtLmluZGljYXRvcnNdLGF0dHJzOntcInJvbGVcIjpcImJ1dHRvblwiLFwiaHJlZlwiOlwiI1wiLFwiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWR9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0uZW1pdENob3NlbkRhdGUoZGF5KTt9LFwia2V5ZG93blwiOltmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLmVtaXRDaG9zZW5EYXRlKGRheSk7fSxmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwic3BhY2VcIiwzMiwkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLmVtaXRDaG9zZW5EYXRlKGRheSk7fV0sXCJtb3VzZWVudGVyXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uc2V0UmFuZ2VIb3ZlckVuZERhdGUoZGF5KTt9fX0sW192bS5fdihcIlxcbiAgICAgICAgICAgIFwiK192bS5fcyhkYXkuZ2V0RGF0ZSgpKStcIlxcbiAgICAgICAgICAgIFwiKSwoX3ZtLmV2ZW50c0RhdGVNYXRjaChkYXkpKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJldmVudHNcIn0sX3ZtLl9sKChfdm0uZXZlbnRzRGF0ZU1hdGNoKGRheSkpLGZ1bmN0aW9uKGV2ZW50LGluZGV4KXtyZXR1cm4gX2MoJ2Rpdicse2tleTppbmRleCxzdGF0aWNDbGFzczpcImV2ZW50XCIsY2xhc3M6ZXZlbnQudHlwZX0pfSkpOl92bS5fZSgpXSk6X2MoJ2Rpdicse2tleTppbmRleCxzdGF0aWNDbGFzczpcImRhdGVwaWNrZXItY2VsbFwiLGNsYXNzOl92bS5jbGFzc09iamVjdChkYXkpfSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgXCIrX3ZtLl9zKGRheS5nZXREYXRlKCkpK1wiXFxuICAgICAgICBcIildKV19KV0sMil9O1xudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgRGF0ZXBpY2tlclRhYmxlUm93ID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgaXNEZWZpbmVkID0gZnVuY3Rpb24gaXNEZWZpbmVkKGQpIHtcbiAgcmV0dXJuIGQgIT09IHVuZGVmaW5lZDtcbn07XG5cbnZhciBzY3JpcHQkMSA9IHtcbiAgbmFtZTogJ0JEYXRlcGlja2VyVGFibGUnLFxuICBjb21wb25lbnRzOiBfZGVmaW5lUHJvcGVydHkoe30sIERhdGVwaWNrZXJUYWJsZVJvdy5uYW1lLCBEYXRlcGlja2VyVGFibGVSb3cpLFxuICBwcm9wczoge1xuICAgIHZhbHVlOiB7XG4gICAgICB0eXBlOiBbRGF0ZSwgQXJyYXldXG4gICAgfSxcbiAgICBkYXlOYW1lczogQXJyYXksXG4gICAgbW9udGhOYW1lczogQXJyYXksXG4gICAgZmlyc3REYXlPZldlZWs6IE51bWJlcixcbiAgICBldmVudHM6IEFycmF5LFxuICAgIGluZGljYXRvcnM6IFN0cmluZyxcbiAgICBtaW5EYXRlOiBEYXRlLFxuICAgIG1heERhdGU6IERhdGUsXG4gICAgZm9jdXNlZDogT2JqZWN0LFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGRhdGVDcmVhdG9yOiBGdW5jdGlvbixcbiAgICB1bnNlbGVjdGFibGVEYXRlczogQXJyYXksXG4gICAgdW5zZWxlY3RhYmxlRGF5c09mV2VlazogQXJyYXksXG4gICAgc2VsZWN0YWJsZURhdGVzOiBBcnJheSxcbiAgICBuZWFyYnlNb250aERheXM6IEJvb2xlYW4sXG4gICAgbmVhcmJ5U2VsZWN0YWJsZU1vbnRoRGF5czogQm9vbGVhbixcbiAgICBzaG93V2Vla051bWJlcjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBydWxlc0ZvckZpcnN0V2Vlazoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiA0O1xuICAgICAgfVxuICAgIH0sXG4gICAgcmFuZ2U6IEJvb2xlYW5cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0ZWRCZWdpbkRhdGU6IHVuZGVmaW5lZCxcbiAgICAgIHNlbGVjdGVkRW5kRGF0ZTogdW5kZWZpbmVkLFxuICAgICAgaG92ZXJlZEVuZERhdGU6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgdmlzaWJsZURheU5hbWVzOiBmdW5jdGlvbiB2aXNpYmxlRGF5TmFtZXMoKSB7XG4gICAgICB2YXIgdmlzaWJsZURheU5hbWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgICB3aGlsZSAodmlzaWJsZURheU5hbWVzLmxlbmd0aCA8IHRoaXMuZGF5TmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjdXJyZW50RGF5TmFtZSA9IHRoaXMuZGF5TmFtZXNbaW5kZXggJSB0aGlzLmRheU5hbWVzLmxlbmd0aF07XG4gICAgICAgIHZpc2libGVEYXlOYW1lcy5wdXNoKGN1cnJlbnREYXlOYW1lKTtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2hvd1dlZWtOdW1iZXIpIHZpc2libGVEYXlOYW1lcy51bnNoaWZ0KCcnKTtcbiAgICAgIHJldHVybiB2aXNpYmxlRGF5TmFtZXM7XG4gICAgfSxcbiAgICBoYXNFdmVudHM6IGZ1bmN0aW9uIGhhc0V2ZW50cygpIHtcbiAgICAgIHJldHVybiB0aGlzLmV2ZW50cyAmJiB0aGlzLmV2ZW50cy5sZW5ndGg7XG4gICAgfSxcblxuICAgIC8qXHJcbiAgICAqIFJldHVybiBhcnJheSBvZiBhbGwgZXZlbnRzIGluIHRoZSBzcGVjaWZpZWQgbW9udGhcclxuICAgICovXG4gICAgZXZlbnRzSW5UaGlzTW9udGg6IGZ1bmN0aW9uIGV2ZW50c0luVGhpc01vbnRoKCkge1xuICAgICAgaWYgKCF0aGlzLmV2ZW50cykgcmV0dXJuIFtdO1xuICAgICAgdmFyIG1vbnRoRXZlbnRzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5ldmVudHNbaV07XG5cbiAgICAgICAgaWYgKCFldmVudC5oYXNPd25Qcm9wZXJ0eSgnZGF0ZScpKSB7XG4gICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICBkYXRlOiBldmVudFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWV2ZW50Lmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICBldmVudC50eXBlID0gJ2lzLXByaW1hcnknO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LmRhdGUuZ2V0TW9udGgoKSA9PT0gdGhpcy5mb2N1c2VkLm1vbnRoICYmIGV2ZW50LmRhdGUuZ2V0RnVsbFllYXIoKSA9PT0gdGhpcy5mb2N1c2VkLnllYXIpIHtcbiAgICAgICAgICBtb250aEV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9udGhFdmVudHM7XG4gICAgfSxcblxuICAgIC8qXHJcbiAgICAqIFJldHVybiBhcnJheSBvZiBhbGwgd2Vla3MgaW4gdGhlIHNwZWNpZmllZCBtb250aFxyXG4gICAgKi9cbiAgICB3ZWVrc0luVGhpc01vbnRoOiBmdW5jdGlvbiB3ZWVrc0luVGhpc01vbnRoKCkge1xuICAgICAgdmFyIG1vbnRoID0gdGhpcy5mb2N1c2VkLm1vbnRoO1xuICAgICAgdmFyIHllYXIgPSB0aGlzLmZvY3VzZWQueWVhcjtcbiAgICAgIHZhciB3ZWVrc0luVGhpc01vbnRoID0gW107XG4gICAgICB2YXIgZGF5c0luVGhpc01vbnRoID0gbmV3IERhdGUoeWVhciwgbW9udGggKyAxLCAwKS5nZXREYXRlKCk7XG4gICAgICB2YXIgc3RhcnRpbmdEYXkgPSAxO1xuXG4gICAgICB3aGlsZSAoc3RhcnRpbmdEYXkgPD0gZGF5c0luVGhpc01vbnRoICsgNikge1xuICAgICAgICB2YXIgbmV3V2VlayA9IHRoaXMud2Vla0J1aWxkZXIoc3RhcnRpbmdEYXksIG1vbnRoLCB5ZWFyKTtcbiAgICAgICAgdmFyIHdlZWtWYWxpZCA9IGZhbHNlO1xuICAgICAgICBuZXdXZWVrLmZvckVhY2goZnVuY3Rpb24gKGRheSkge1xuICAgICAgICAgIGlmIChkYXkuZ2V0TW9udGgoKSA9PT0gbW9udGgpIHtcbiAgICAgICAgICAgIHdlZWtWYWxpZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAod2Vla1ZhbGlkKSB7XG4gICAgICAgICAgd2Vla3NJblRoaXNNb250aC5wdXNoKG5ld1dlZWspO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnRpbmdEYXkgKz0gNztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdlZWtzSW5UaGlzTW9udGg7XG4gICAgfSxcbiAgICBob3ZlcmVkRGF0ZVJhbmdlOiBmdW5jdGlvbiBob3ZlcmVkRGF0ZVJhbmdlKCkge1xuICAgICAgaWYgKCF0aGlzLnJhbmdlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTih0aGlzLnNlbGVjdGVkRW5kRGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5ob3ZlcmVkRW5kRGF0ZSA8IHRoaXMuc2VsZWN0ZWRCZWdpbkRhdGUpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmhvdmVyZWRFbmREYXRlLCB0aGlzLnNlbGVjdGVkQmVnaW5EYXRlXS5maWx0ZXIoaXNEZWZpbmVkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFt0aGlzLnNlbGVjdGVkQmVnaW5EYXRlLCB0aGlzLmhvdmVyZWRFbmREYXRlXS5maWx0ZXIoaXNEZWZpbmVkKTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKlxyXG4gICAgKiBFbWl0IGlucHV0IGV2ZW50IHdpdGggc2VsZWN0ZWQgZGF0ZSBhcyBwYXlsb2FkIGZvciB2LW1vZGVsIGluIHBhcmVudFxyXG4gICAgKi9cbiAgICB1cGRhdGVTZWxlY3RlZERhdGU6IGZ1bmN0aW9uIHVwZGF0ZVNlbGVjdGVkRGF0ZShkYXRlKSB7XG4gICAgICBpZiAoIXRoaXMucmFuZ2UpIHtcbiAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCBkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGFuZGxlU2VsZWN0UmFuZ2VEYXRlKGRhdGUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBJZiBib3RoIGJlZ2luIGFuZCBlbmQgZGF0ZXMgYXJlIHNldCwgcmVzZXQgdGhlIGVuZCBkYXRlIGFuZCBzZXQgdGhlIGJlZ2luIGRhdGUuXHJcbiAgICAqIElmIG9ubHkgYmVnaW4gZGF0ZSBpcyBzZWxlY3RlZCwgZW1pdCBhbiBhcnJheSBvZiB0aGUgYmVnaW4gZGF0ZSBhbmQgdGhlIG5ldyBkYXRlLlxyXG4gICAgKiBJZiBub3Qgc2V0LCBvbmx5IHNldCB0aGUgYmVnaW4gZGF0ZS5cclxuICAgICovXG4gICAgaGFuZGxlU2VsZWN0UmFuZ2VEYXRlOiBmdW5jdGlvbiBoYW5kbGVTZWxlY3RSYW5nZURhdGUoZGF0ZSkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRCZWdpbkRhdGUgJiYgdGhpcy5zZWxlY3RlZEVuZERhdGUpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEJlZ2luRGF0ZSA9IGRhdGU7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRFbmREYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGVkQmVnaW5EYXRlICYmICF0aGlzLnNlbGVjdGVkRW5kRGF0ZSkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEJlZ2luRGF0ZSA+IGRhdGUpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkRW5kRGF0ZSA9IHRoaXMuc2VsZWN0ZWRCZWdpbkRhdGU7XG4gICAgICAgICAgdGhpcy5zZWxlY3RlZEJlZ2luRGF0ZSA9IGRhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RlZEVuZERhdGUgPSBkYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCBbdGhpcy5zZWxlY3RlZEJlZ2luRGF0ZSwgdGhpcy5zZWxlY3RlZEVuZERhdGVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRCZWdpbkRhdGUgPSBkYXRlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBSZXR1cm4gYXJyYXkgb2YgYWxsIGRheXMgaW4gdGhlIHdlZWsgdGhhdCB0aGUgc3RhcnRpbmdEYXRlIGlzIHdpdGhpblxyXG4gICAgKi9cbiAgICB3ZWVrQnVpbGRlcjogZnVuY3Rpb24gd2Vla0J1aWxkZXIoc3RhcnRpbmdEYXRlLCBtb250aCwgeWVhcikge1xuICAgICAgdmFyIHRoaXNNb250aCA9IG5ldyBEYXRlKHllYXIsIG1vbnRoKTtcbiAgICAgIHZhciB0aGlzV2VlayA9IFtdO1xuICAgICAgdmFyIGRheU9mV2VlayA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCBzdGFydGluZ0RhdGUpLmdldERheSgpO1xuICAgICAgdmFyIGVuZCA9IGRheU9mV2VlayA+PSB0aGlzLmZpcnN0RGF5T2ZXZWVrID8gZGF5T2ZXZWVrIC0gdGhpcy5maXJzdERheU9mV2VlayA6IDcgLSB0aGlzLmZpcnN0RGF5T2ZXZWVrICsgZGF5T2ZXZWVrO1xuICAgICAgdmFyIGRheXNBZ28gPSAxO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgIHRoaXNXZWVrLnVuc2hpZnQobmV3IERhdGUodGhpc01vbnRoLmdldEZ1bGxZZWFyKCksIHRoaXNNb250aC5nZXRNb250aCgpLCBzdGFydGluZ0RhdGUgLSBkYXlzQWdvKSk7XG4gICAgICAgIGRheXNBZ28rKztcbiAgICAgIH1cblxuICAgICAgdGhpc1dlZWsucHVzaChuZXcgRGF0ZSh5ZWFyLCBtb250aCwgc3RhcnRpbmdEYXRlKSk7XG4gICAgICB2YXIgZGF5c0ZvcndhcmQgPSAxO1xuXG4gICAgICB3aGlsZSAodGhpc1dlZWsubGVuZ3RoIDwgNykge1xuICAgICAgICB0aGlzV2Vlay5wdXNoKG5ldyBEYXRlKHllYXIsIG1vbnRoLCBzdGFydGluZ0RhdGUgKyBkYXlzRm9yd2FyZCkpO1xuICAgICAgICBkYXlzRm9yd2FyZCsrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpc1dlZWs7XG4gICAgfSxcbiAgICBldmVudHNJblRoaXNXZWVrOiBmdW5jdGlvbiBldmVudHNJblRoaXNXZWVrKHdlZWspIHtcbiAgICAgIHJldHVybiB0aGlzLmV2ZW50c0luVGhpc01vbnRoLmZpbHRlcihmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHN0cmlwcGVkID0gbmV3IERhdGUoRGF0ZS5wYXJzZShldmVudC5kYXRlKSk7XG4gICAgICAgIHN0cmlwcGVkLnNldEhvdXJzKDApO1xuICAgICAgICBzdHJpcHBlZC5zZXRNaW51dGVzKDApO1xuICAgICAgICBzdHJpcHBlZC5zZXRTZWNvbmRzKDApO1xuICAgICAgICBzdHJpcHBlZC5zZXRNaWxsaXNlY29uZHMoMCk7XG4gICAgICAgIHZhciB0aW1lZCA9IHN0cmlwcGVkLmdldFRpbWUoKTtcbiAgICAgICAgcmV0dXJuIHdlZWsuc29tZShmdW5jdGlvbiAod2Vla0RhdGUpIHtcbiAgICAgICAgICByZXR1cm4gd2Vla0RhdGUuZ2V0VGltZSgpID09PSB0aW1lZDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHNldFJhbmdlSG92ZXJFbmREYXRlOiBmdW5jdGlvbiBzZXRSYW5nZUhvdmVyRW5kRGF0ZShkYXkpIHtcbiAgICAgIHRoaXMuaG92ZXJlZEVuZERhdGUgPSBkYXk7XG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fJDEgPSBzY3JpcHQkMTtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyQxID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnc2VjdGlvbicse3N0YXRpY0NsYXNzOlwiZGF0ZXBpY2tlci10YWJsZVwifSxbX2MoJ2hlYWRlcicse3N0YXRpY0NsYXNzOlwiZGF0ZXBpY2tlci1oZWFkZXJcIn0sX3ZtLl9sKChfdm0udmlzaWJsZURheU5hbWVzKSxmdW5jdGlvbihkYXksaW5kZXgpe3JldHVybiBfYygnZGl2Jyx7a2V5OmluZGV4LHN0YXRpY0NsYXNzOlwiZGF0ZXBpY2tlci1jZWxsXCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICBcIitfdm0uX3MoZGF5KStcIlxcbiAgICAgICAgXCIpXSl9KSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJkYXRlcGlja2VyLWJvZHlcIixjbGFzczp7J2hhcy1ldmVudHMnOl92bS5oYXNFdmVudHN9fSxfdm0uX2woKF92bS53ZWVrc0luVGhpc01vbnRoKSxmdW5jdGlvbih3ZWVrLGluZGV4KXtyZXR1cm4gX2MoJ2ItZGF0ZXBpY2tlci10YWJsZS1yb3cnLHtrZXk6aW5kZXgsYXR0cnM6e1wic2VsZWN0ZWQtZGF0ZVwiOl92bS52YWx1ZSxcIndlZWtcIjp3ZWVrLFwibW9udGhcIjpfdm0uZm9jdXNlZC5tb250aCxcIm1pbi1kYXRlXCI6X3ZtLm1pbkRhdGUsXCJtYXgtZGF0ZVwiOl92bS5tYXhEYXRlLFwiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWQsXCJ1bnNlbGVjdGFibGUtZGF0ZXNcIjpfdm0udW5zZWxlY3RhYmxlRGF0ZXMsXCJ1bnNlbGVjdGFibGUtZGF5cy1vZi13ZWVrXCI6X3ZtLnVuc2VsZWN0YWJsZURheXNPZldlZWssXCJzZWxlY3RhYmxlLWRhdGVzXCI6X3ZtLnNlbGVjdGFibGVEYXRlcyxcImV2ZW50c1wiOl92bS5ldmVudHNJblRoaXNXZWVrKHdlZWspLFwiaW5kaWNhdG9yc1wiOl92bS5pbmRpY2F0b3JzLFwiZGF0ZS1jcmVhdG9yXCI6X3ZtLmRhdGVDcmVhdG9yLFwibmVhcmJ5LW1vbnRoLWRheXNcIjpfdm0ubmVhcmJ5TW9udGhEYXlzLFwibmVhcmJ5LXNlbGVjdGFibGUtbW9udGgtZGF5c1wiOl92bS5uZWFyYnlTZWxlY3RhYmxlTW9udGhEYXlzLFwic2hvdy13ZWVrLW51bWJlclwiOl92bS5zaG93V2Vla051bWJlcixcImZpcnN0LWRheS1vZi13ZWVrXCI6X3ZtLmZpcnN0RGF5T2ZXZWVrLFwicnVsZXMtZm9yLWZpcnN0LXdlZWtcIjpfdm0ucnVsZXNGb3JGaXJzdFdlZWssXCJyYW5nZVwiOl92bS5yYW5nZSxcImhvdmVyZWQtZGF0ZS1yYW5nZVwiOl92bS5ob3ZlcmVkRGF0ZVJhbmdlfSxvbjp7XCJzZWxlY3RcIjpfdm0udXBkYXRlU2VsZWN0ZWREYXRlLFwicmFuZ2VIb3ZlckVuZERhdGVcIjpfdm0uc2V0UmFuZ2VIb3ZlckVuZERhdGV9fSl9KSldKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kMSA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDEgPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgRGF0ZXBpY2tlclRhYmxlID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fJDEsIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18kMSB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyQxLFxuICAgIF9fdnVlX3NjcmlwdF9fJDEsXG4gICAgX192dWVfc2NvcGVfaWRfXyQxLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQxLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMSxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbnZhciBzY3JpcHQkMiA9IHtcbiAgbmFtZTogJ0JEYXRlcGlja2VyTW9udGgnLFxuICBwcm9wczoge1xuICAgIHZhbHVlOiBEYXRlLFxuICAgIG1vbnRoTmFtZXM6IEFycmF5LFxuICAgIGV2ZW50czogQXJyYXksXG4gICAgaW5kaWNhdG9yczogU3RyaW5nLFxuICAgIG1pbkRhdGU6IERhdGUsXG4gICAgbWF4RGF0ZTogRGF0ZSxcbiAgICBmb2N1c2VkOiBPYmplY3QsXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgZGF0ZUNyZWF0b3I6IEZ1bmN0aW9uLFxuICAgIHVuc2VsZWN0YWJsZURhdGVzOiBBcnJheSxcbiAgICB1bnNlbGVjdGFibGVEYXlzT2ZXZWVrOiBBcnJheSxcbiAgICBzZWxlY3RhYmxlRGF0ZXM6IEFycmF5XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgaGFzRXZlbnRzOiBmdW5jdGlvbiBoYXNFdmVudHMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ldmVudHMgJiYgdGhpcy5ldmVudHMubGVuZ3RoO1xuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBSZXR1cm4gYXJyYXkgb2YgYWxsIGV2ZW50cyBpbiB0aGUgc3BlY2lmaWVkIG1vbnRoXHJcbiAgICAqL1xuICAgIGV2ZW50c0luVGhpc1llYXI6IGZ1bmN0aW9uIGV2ZW50c0luVGhpc1llYXIoKSB7XG4gICAgICBpZiAoIXRoaXMuZXZlbnRzKSByZXR1cm4gW107XG4gICAgICB2YXIgeWVhckV2ZW50cyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBldmVudCA9IHRoaXMuZXZlbnRzW2ldO1xuXG4gICAgICAgIGlmICghZXZlbnQuaGFzT3duUHJvcGVydHkoJ2RhdGUnKSkge1xuICAgICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgICAgZGF0ZTogZXZlbnRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFldmVudC5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XG4gICAgICAgICAgZXZlbnQudHlwZSA9ICdpcy1wcmltYXJ5JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5kYXRlLmdldEZ1bGxZZWFyKCkgPT09IHRoaXMuZm9jdXNlZC55ZWFyKSB7XG4gICAgICAgICAgeWVhckV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4geWVhckV2ZW50cztcbiAgICB9LFxuICAgIG1vbnRoRGF0ZXM6IGZ1bmN0aW9uIG1vbnRoRGF0ZXMoKSB7XG4gICAgICB2YXIgeWVhciA9IHRoaXMuZm9jdXNlZC55ZWFyO1xuICAgICAgdmFyIG1vbnRocyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSh5ZWFyLCBpLCAxKTtcbiAgICAgICAgZC5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgbW9udGhzLnB1c2goZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtb250aHM7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgc2VsZWN0YWJsZURhdGU6IGZ1bmN0aW9uIHNlbGVjdGFibGVEYXRlKGRheSkge1xuICAgICAgdmFyIHZhbGlkaXR5ID0gW107XG5cbiAgICAgIGlmICh0aGlzLm1pbkRhdGUpIHtcbiAgICAgICAgdmFsaWRpdHkucHVzaChkYXkgPj0gdGhpcy5taW5EYXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWF4RGF0ZSkge1xuICAgICAgICB2YWxpZGl0eS5wdXNoKGRheSA8PSB0aGlzLm1heERhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YWxpZGl0eS5wdXNoKGRheS5nZXRGdWxsWWVhcigpID09PSB0aGlzLmZvY3VzZWQueWVhcik7XG5cbiAgICAgIGlmICh0aGlzLnNlbGVjdGFibGVEYXRlcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2VsZWN0YWJsZURhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGVuYWJsZWREYXRlID0gdGhpcy5zZWxlY3RhYmxlRGF0ZXNbaV07XG5cbiAgICAgICAgICBpZiAoZGF5LmdldEZ1bGxZZWFyKCkgPT09IGVuYWJsZWREYXRlLmdldEZ1bGxZZWFyKCkgJiYgZGF5LmdldE1vbnRoKCkgPT09IGVuYWJsZWREYXRlLmdldE1vbnRoKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWxpZGl0eS5wdXNoKGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudW5zZWxlY3RhYmxlRGF0ZXMpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMudW5zZWxlY3RhYmxlRGF0ZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgdmFyIGRpc2FibGVkRGF0ZSA9IHRoaXMudW5zZWxlY3RhYmxlRGF0ZXNbX2ldO1xuICAgICAgICAgIHZhbGlkaXR5LnB1c2goZGF5LmdldEZ1bGxZZWFyKCkgIT09IGRpc2FibGVkRGF0ZS5nZXRGdWxsWWVhcigpIHx8IGRheS5nZXRNb250aCgpICE9PSBkaXNhYmxlZERhdGUuZ2V0TW9udGgoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudW5zZWxlY3RhYmxlRGF5c09mV2Vlaykge1xuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB0aGlzLnVuc2VsZWN0YWJsZURheXNPZldlZWsubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgIHZhciBkYXlPZldlZWsgPSB0aGlzLnVuc2VsZWN0YWJsZURheXNPZldlZWtbX2kyXTtcbiAgICAgICAgICB2YWxpZGl0eS5wdXNoKGRheS5nZXREYXkoKSAhPT0gZGF5T2ZXZWVrKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsaWRpdHkuaW5kZXhPZihmYWxzZSkgPCAwO1xuICAgIH0sXG4gICAgZXZlbnRzRGF0ZU1hdGNoOiBmdW5jdGlvbiBldmVudHNEYXRlTWF0Y2goZGF5KSB7XG4gICAgICBpZiAoIXRoaXMuZXZlbnRzSW5UaGlzWWVhci5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciBtb250aEV2ZW50cyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZXZlbnRzSW5UaGlzWWVhci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5ldmVudHNJblRoaXNZZWFyW2ldLmRhdGUuZ2V0TW9udGgoKSA9PT0gZGF5LmdldE1vbnRoKCkpIHtcbiAgICAgICAgICBtb250aEV2ZW50cy5wdXNoKHRoaXMuZXZlbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIW1vbnRoRXZlbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtb250aEV2ZW50cztcbiAgICB9LFxuXG4gICAgLypcclxuICAgICogQnVpbGQgY2xhc3NPYmplY3QgZm9yIGNlbGwgdXNpbmcgdmFsaWRhdGlvbnNcclxuICAgICovXG4gICAgY2xhc3NPYmplY3Q6IGZ1bmN0aW9uIGNsYXNzT2JqZWN0KGRheSkge1xuICAgICAgZnVuY3Rpb24gZGF0ZU1hdGNoKGRhdGVPbmUsIGRhdGVUd28pIHtcbiAgICAgICAgLy8gaWYgZWl0aGVyIGRhdGUgaXMgbnVsbCBvciB1bmRlZmluZWQsIHJldHVybiBmYWxzZVxuICAgICAgICBpZiAoIWRhdGVPbmUgfHwgIWRhdGVUd28pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZU9uZS5nZXRGdWxsWWVhcigpID09PSBkYXRlVHdvLmdldEZ1bGxZZWFyKCkgJiYgZGF0ZU9uZS5nZXRNb250aCgpID09PSBkYXRlVHdvLmdldE1vbnRoKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICdpcy1zZWxlY3RlZCc6IGRhdGVNYXRjaChkYXksIHRoaXMudmFsdWUpLFxuICAgICAgICAnaXMtdG9kYXknOiBkYXRlTWF0Y2goZGF5LCB0aGlzLmRhdGVDcmVhdG9yKCkpLFxuICAgICAgICAnaXMtc2VsZWN0YWJsZSc6IHRoaXMuc2VsZWN0YWJsZURhdGUoZGF5KSAmJiAhdGhpcy5kaXNhYmxlZCxcbiAgICAgICAgJ2lzLXVuc2VsZWN0YWJsZSc6ICF0aGlzLnNlbGVjdGFibGVEYXRlKGRheSkgfHwgdGhpcy5kaXNhYmxlZFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLypcclxuICAgICogRW1pdCBzZWxlY3QgZXZlbnQgd2l0aCBjaG9zZW4gZGF0ZSBhcyBwYXlsb2FkXHJcbiAgICAqL1xuICAgIGVtaXRDaG9zZW5EYXRlOiBmdW5jdGlvbiBlbWl0Q2hvc2VuRGF0ZShkYXkpIHtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkKSByZXR1cm47XG5cbiAgICAgIGlmICh0aGlzLnNlbGVjdGFibGVEYXRlKGRheSkpIHtcbiAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCBkYXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyQyID0gc2NyaXB0JDI7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18kMiA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczpcImRhdGVwaWNrZXItdGFibGVcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImRhdGVwaWNrZXItYm9keVwiLGNsYXNzOnsnaGFzLWV2ZW50cyc6X3ZtLmhhc0V2ZW50c319LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJkYXRlcGlja2VyLW1vbnRoc1wifSxbX3ZtLl9sKChfdm0ubW9udGhEYXRlcyksZnVuY3Rpb24oZGF0ZSxpbmRleCl7cmV0dXJuIFsoX3ZtLnNlbGVjdGFibGVEYXRlKGRhdGUpICYmICFfdm0uZGlzYWJsZWQpP19jKCdhJyx7a2V5OmluZGV4LHN0YXRpY0NsYXNzOlwiZGF0ZXBpY2tlci1jZWxsXCIsY2xhc3M6W1xuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmNsYXNzT2JqZWN0KGRhdGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeydoYXMtZXZlbnQnOiBfdm0uZXZlbnRzRGF0ZU1hdGNoKGRhdGUpfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pbmRpY2F0b3JzXG4gICAgICAgICAgICAgICAgICAgIF0sYXR0cnM6e1wicm9sZVwiOlwiYnV0dG9uXCIsXCJocmVmXCI6XCIjXCIsXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5lbWl0Q2hvc2VuRGF0ZShkYXRlKTt9LFwia2V5ZG93blwiOltmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLmVtaXRDaG9zZW5EYXRlKGRhdGUpO30sZnVuY3Rpb24oJGV2ZW50KXtpZighKCdidXR0b24nIGluICRldmVudCkmJl92bS5faygkZXZlbnQua2V5Q29kZSxcInNwYWNlXCIsMzIsJGV2ZW50LmtleSkpeyByZXR1cm4gbnVsbDsgfSRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5lbWl0Q2hvc2VuRGF0ZShkYXRlKTt9XX19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgIFwiK192bS5fcyhfdm0ubW9udGhOYW1lc1tkYXRlLmdldE1vbnRoKCldKStcIlxcbiAgICAgICAgICAgICAgICAgICAgXCIpLChfdm0uZXZlbnRzRGF0ZU1hdGNoKGRhdGUpKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJldmVudHNcIn0sX3ZtLl9sKChfdm0uZXZlbnRzRGF0ZU1hdGNoKGRhdGUpKSxmdW5jdGlvbihldmVudCxpbmRleCl7cmV0dXJuIF9jKCdkaXYnLHtrZXk6aW5kZXgsc3RhdGljQ2xhc3M6XCJldmVudFwiLGNsYXNzOmV2ZW50LnR5cGV9KX0pKTpfdm0uX2UoKV0pOl9jKCdkaXYnLHtrZXk6aW5kZXgsc3RhdGljQ2xhc3M6XCJkYXRlcGlja2VyLWNlbGxcIixjbGFzczpfdm0uY2xhc3NPYmplY3QoZGF0ZSl9LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgIFwiK192bS5fcyhfdm0ubW9udGhOYW1lc1tkYXRlLmdldE1vbnRoKCldKStcIlxcbiAgICAgICAgICAgICAgICBcIildKV19KV0sMildKV0pfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQyID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fJDIgPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fJDIgPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMiA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMiA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBEYXRlcGlja2VyTW9udGggPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18kMiwgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQyIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fJDIsXG4gICAgX192dWVfc2NyaXB0X18kMixcbiAgICBfX3Z1ZV9zY29wZV9pZF9fJDIsXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDIsXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQyLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxudmFyIF9jb21wb25lbnRzO1xuXG52YXIgZGVmYXVsdERhdGVGb3JtYXR0ZXIgPSBmdW5jdGlvbiBkZWZhdWx0RGF0ZUZvcm1hdHRlcihkYXRlLCB2bSkge1xuICB2YXIgdGFyZ2V0RGF0ZXMgPSBBcnJheS5pc0FycmF5KGRhdGUpID8gZGF0ZSA6IFtkYXRlXTtcbiAgcmV0dXJuIHRhcmdldERhdGVzLm1hcChmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHZhciB5eXl5TU1kZCA9IGRhdGUuZ2V0RnVsbFllYXIoKSArICcvJyArIChkYXRlLmdldE1vbnRoKCkgKyAxKSArICcvJyArIGRhdGUuZ2V0RGF0ZSgpO1xuICAgIHZhciBkID0gbmV3IERhdGUoeXl5eU1NZGQpO1xuICAgIHJldHVybiAhdm0uaXNUeXBlTW9udGggPyBkLnRvTG9jYWxlRGF0ZVN0cmluZygpIDogZC50b0xvY2FsZURhdGVTdHJpbmcodW5kZWZpbmVkLCB7XG4gICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICBtb250aDogJzItZGlnaXQnXG4gICAgfSk7XG4gIH0pLmpvaW4oJyAtICcpO1xufTtcblxudmFyIGRlZmF1bHREYXRlUGFyc2VyID0gZnVuY3Rpb24gZGVmYXVsdERhdGVQYXJzZXIoZGF0ZSwgdm0pIHtcbiAgaWYgKCF2bS5pc1R5cGVNb250aCkgcmV0dXJuIG5ldyBEYXRlKERhdGUucGFyc2UoZGF0ZSkpO1xuXG4gIGlmIChkYXRlKSB7XG4gICAgdmFyIHMgPSBkYXRlLnNwbGl0KCcvJyk7XG4gICAgdmFyIHllYXIgPSBzWzBdLmxlbmd0aCA9PT0gNCA/IHNbMF0gOiBzWzFdO1xuICAgIHZhciBtb250aCA9IHNbMF0ubGVuZ3RoID09PSAyID8gc1swXSA6IHNbMV07XG5cbiAgICBpZiAoeWVhciAmJiBtb250aCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKHBhcnNlSW50KHllYXIsIDEwKSwgcGFyc2VJbnQobW9udGggLSAxLCAxMCksIDEsIDAsIDAsIDAsIDApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIHNjcmlwdCQzID0ge1xuICBuYW1lOiAnQkRhdGVwaWNrZXInLFxuICBjb21wb25lbnRzOiAoX2NvbXBvbmVudHMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jb21wb25lbnRzLCBEYXRlcGlja2VyVGFibGUubmFtZSwgRGF0ZXBpY2tlclRhYmxlKSwgX2RlZmluZVByb3BlcnR5KF9jb21wb25lbnRzLCBEYXRlcGlja2VyTW9udGgubmFtZSwgRGF0ZXBpY2tlck1vbnRoKSwgX2RlZmluZVByb3BlcnR5KF9jb21wb25lbnRzLCBJbnB1dC5uYW1lLCBJbnB1dCksIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgRmllbGQubmFtZSwgRmllbGQpLCBfZGVmaW5lUHJvcGVydHkoX2NvbXBvbmVudHMsIFNlbGVjdC5uYW1lLCBTZWxlY3QpLCBfZGVmaW5lUHJvcGVydHkoX2NvbXBvbmVudHMsIEljb24ubmFtZSwgSWNvbiksIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgRHJvcGRvd24ubmFtZSwgRHJvcGRvd24pLCBfZGVmaW5lUHJvcGVydHkoX2NvbXBvbmVudHMsIERyb3Bkb3duSXRlbS5uYW1lLCBEcm9wZG93bkl0ZW0pLCBfY29tcG9uZW50cyksXG4gIG1peGluczogW0Zvcm1FbGVtZW50TWl4aW5dLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczoge1xuICAgIHZhbHVlOiB7XG4gICAgICB0eXBlOiBbRGF0ZSwgQXJyYXldXG4gICAgfSxcbiAgICBkYXlOYW1lczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnLmRlZmF1bHREYXlOYW1lcykpIHtcbiAgICAgICAgICByZXR1cm4gY29uZmlnLmRlZmF1bHREYXlOYW1lcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gWydTdScsICdNJywgJ1R1JywgJ1cnLCAnVGgnLCAnRicsICdTJ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG1vbnRoTmFtZXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZy5kZWZhdWx0TW9udGhOYW1lcykpIHtcbiAgICAgICAgICByZXR1cm4gY29uZmlnLmRlZmF1bHRNb250aE5hbWVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZmlyc3REYXlPZldlZWs6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWZhdWx0Rmlyc3REYXlPZldlZWsgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbmZpZy5kZWZhdWx0Rmlyc3REYXlPZldlZWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGlubGluZTogQm9vbGVhbixcbiAgICBtaW5EYXRlOiBEYXRlLFxuICAgIG1heERhdGU6IERhdGUsXG4gICAgZm9jdXNlZERhdGU6IERhdGUsXG4gICAgcGxhY2Vob2xkZXI6IFN0cmluZyxcbiAgICBlZGl0YWJsZTogQm9vbGVhbixcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICB1bnNlbGVjdGFibGVEYXRlczogQXJyYXksXG4gICAgdW5zZWxlY3RhYmxlRGF5c09mV2Vlazoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kZWZhdWx0VW5zZWxlY3RhYmxlRGF5c09mV2VlaztcbiAgICAgIH1cbiAgICB9LFxuICAgIHNlbGVjdGFibGVEYXRlczogQXJyYXksXG4gICAgZGF0ZUZvcm1hdHRlcjoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdChkYXRlLCB2bSkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWZhdWx0RGF0ZUZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBjb25maWcuZGVmYXVsdERhdGVGb3JtYXR0ZXIoZGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRlRm9ybWF0dGVyKGRhdGUsIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZGF0ZVBhcnNlcjoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdChkYXRlLCB2bSkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWZhdWx0RGF0ZVBhcnNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBjb25maWcuZGVmYXVsdERhdGVQYXJzZXIoZGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRlUGFyc2VyKGRhdGUsIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZGF0ZUNyZWF0b3I6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnLmRlZmF1bHREYXRlQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBjb25maWcuZGVmYXVsdERhdGVDcmVhdG9yKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG1vYmlsZU5hdGl2ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gY29uZmlnLmRlZmF1bHREYXRlcGlja2VyTW9iaWxlTmF0aXZlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcG9zaXRpb246IFN0cmluZyxcbiAgICBldmVudHM6IEFycmF5LFxuICAgIGluZGljYXRvcnM6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdkb3RzJ1xuICAgIH0sXG4gICAgb3Blbk9uRm9jdXM6IEJvb2xlYW4sXG4gICAgeWVhcnNSYW5nZToge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kZWZhdWx0RGF0ZXBpY2tlclllYXJzUmFuZ2U7XG4gICAgICB9XG4gICAgfSxcbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gWydtb250aCddLmluZGV4T2YodmFsdWUpID49IDA7XG4gICAgICB9XG4gICAgfSxcbiAgICBuZWFyYnlNb250aERheXM6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kZWZhdWx0RGF0ZXBpY2tlck5lYXJieU1vbnRoRGF5cztcbiAgICAgIH1cbiAgICB9LFxuICAgIG5lYXJieVNlbGVjdGFibGVNb250aERheXM6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kZWZhdWx0RGF0ZXBpY2tlck5lYXJieVNlbGVjdGFibGVNb250aERheXM7XG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93V2Vla051bWJlcjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gY29uZmlnLmRlZmF1bHREYXRlcGlja2VyU2hvd1dlZWtOdW1iZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICBydWxlc0ZvckZpcnN0V2Vlazoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiA0O1xuICAgICAgfVxuICAgIH0sXG4gICAgcmFuZ2U6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICB2YXIgZm9jdXNlZERhdGUgPSBBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpID8gdGhpcy52YWx1ZVswXSA6IHRoaXMudmFsdWUgfHwgdGhpcy5mb2N1c2VkRGF0ZSB8fCB0aGlzLmRhdGVDcmVhdG9yKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGVTZWxlY3RlZDogdGhpcy52YWx1ZSxcbiAgICAgIGZvY3VzZWREYXRlRGF0YToge1xuICAgICAgICBtb250aDogZm9jdXNlZERhdGUuZ2V0TW9udGgoKSxcbiAgICAgICAgeWVhcjogZm9jdXNlZERhdGUuZ2V0RnVsbFllYXIoKVxuICAgICAgfSxcbiAgICAgIF9lbGVtZW50UmVmOiAnaW5wdXQnLFxuICAgICAgX2lzRGF0ZXBpY2tlcjogdHJ1ZVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgY29tcHV0ZWRWYWx1ZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGVTZWxlY3RlZDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUludGVybmFsU3RhdGUodmFsdWUpO1xuICAgICAgICB0aGlzLnRvZ2dsZVBpY2tlcihmYWxzZSk7XG4gICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHllYXJzIGZvciB0aGUgeWVhciBkcm9wZG93bi4gSWYgZWFybGllc3QvbGF0ZXN0XHJcbiAgICAqIGRhdGVzIGFyZSBzZXQgYnkgcHJvcHMsIHJhbmdlIG9mIHllYXJzIHdpbGwgZmFsbCB3aXRoaW4gdGhvc2UgZGF0ZXMuXHJcbiAgICAqL1xuICAgIGxpc3RPZlllYXJzOiBmdW5jdGlvbiBsaXN0T2ZZZWFycygpIHtcbiAgICAgIHZhciBsYXRlc3RZZWFyID0gdGhpcy5mb2N1c2VkRGF0ZURhdGEueWVhciArIHRoaXMueWVhcnNSYW5nZVsxXTtcblxuICAgICAgaWYgKHRoaXMubWF4RGF0ZSAmJiB0aGlzLm1heERhdGUuZ2V0RnVsbFllYXIoKSA8IGxhdGVzdFllYXIpIHtcbiAgICAgICAgbGF0ZXN0WWVhciA9IE1hdGgubWF4KHRoaXMubWF4RGF0ZS5nZXRGdWxsWWVhcigpLCB0aGlzLmZvY3VzZWREYXRlRGF0YS55ZWFyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVhcmxpZXN0WWVhciA9IHRoaXMuZm9jdXNlZERhdGVEYXRhLnllYXIgKyB0aGlzLnllYXJzUmFuZ2VbMF07XG5cbiAgICAgIGlmICh0aGlzLm1pbkRhdGUgJiYgdGhpcy5taW5EYXRlLmdldEZ1bGxZZWFyKCkgPiBlYXJsaWVzdFllYXIpIHtcbiAgICAgICAgZWFybGllc3RZZWFyID0gTWF0aC5taW4odGhpcy5taW5EYXRlLmdldEZ1bGxZZWFyKCksIHRoaXMuZm9jdXNlZERhdGVEYXRhLnllYXIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXJyYXlPZlllYXJzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSBlYXJsaWVzdFllYXI7IGkgPD0gbGF0ZXN0WWVhcjsgaSsrKSB7XG4gICAgICAgIGFycmF5T2ZZZWFycy5wdXNoKGkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyYXlPZlllYXJzLnJldmVyc2UoKTtcbiAgICB9LFxuICAgIHNob3dQcmV2OiBmdW5jdGlvbiBzaG93UHJldigpIHtcbiAgICAgIGlmICghdGhpcy5taW5EYXRlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmlzVHlwZU1vbnRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvY3VzZWREYXRlRGF0YS55ZWFyIDw9IHRoaXMubWluRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGF0ZVRvQ2hlY2sgPSBuZXcgRGF0ZSh0aGlzLmZvY3VzZWREYXRlRGF0YS55ZWFyLCB0aGlzLmZvY3VzZWREYXRlRGF0YS5tb250aCk7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRoaXMubWluRGF0ZS5nZXRGdWxsWWVhcigpLCB0aGlzLm1pbkRhdGUuZ2V0TW9udGgoKSk7XG4gICAgICByZXR1cm4gZGF0ZVRvQ2hlY2sgPD0gZGF0ZTtcbiAgICB9LFxuICAgIHNob3dOZXh0OiBmdW5jdGlvbiBzaG93TmV4dCgpIHtcbiAgICAgIGlmICghdGhpcy5tYXhEYXRlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmlzVHlwZU1vbnRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvY3VzZWREYXRlRGF0YS55ZWFyID49IHRoaXMubWF4RGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGF0ZVRvQ2hlY2sgPSBuZXcgRGF0ZSh0aGlzLmZvY3VzZWREYXRlRGF0YS55ZWFyLCB0aGlzLmZvY3VzZWREYXRlRGF0YS5tb250aCk7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRoaXMubWF4RGF0ZS5nZXRGdWxsWWVhcigpLCB0aGlzLm1heERhdGUuZ2V0TW9udGgoKSk7XG4gICAgICByZXR1cm4gZGF0ZVRvQ2hlY2sgPj0gZGF0ZTtcbiAgICB9LFxuICAgIGlzTW9iaWxlOiBmdW5jdGlvbiBpc01vYmlsZSQxKCkge1xuICAgICAgcmV0dXJuIHRoaXMubW9iaWxlTmF0aXZlICYmIGlzTW9iaWxlLmFueSgpO1xuICAgIH0sXG4gICAgaXNUeXBlTW9udGg6IGZ1bmN0aW9uIGlzVHlwZU1vbnRoKCkge1xuICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ21vbnRoJztcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgLyoqXHJcbiAgICAqIFdoZW4gdi1tb2RlbCBpcyBjaGFuZ2VkOlxyXG4gICAgKiAgIDEuIFVwZGF0ZSBpbnRlcm5hbCB2YWx1ZS5cclxuICAgICogICAyLiBJZiBpdCdzIGludmFsaWQsIHZhbGlkYXRlIGFnYWluLlxyXG4gICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoX3ZhbHVlKSB7XG4gICAgICB0aGlzLnVwZGF0ZUludGVybmFsU3RhdGUoX3ZhbHVlKTtcbiAgICAgIHRoaXMudG9nZ2xlUGlja2VyKGZhbHNlKTtcbiAgICAgICF0aGlzLmlzVmFsaWQgJiYgdGhpcy4kcmVmcy5pbnB1dC5jaGVja0h0bWw1VmFsaWRpdHkoKTtcbiAgICB9LFxuICAgIGZvY3VzZWREYXRlOiBmdW5jdGlvbiBmb2N1c2VkRGF0ZSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZm9jdXNlZERhdGVEYXRhID0ge1xuICAgICAgICAgIG1vbnRoOiB2YWx1ZS5nZXRNb250aCgpLFxuICAgICAgICAgIHllYXI6IHZhbHVlLmdldEZ1bGxZZWFyKClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLypcclxuICAgICogRW1pdCBpbnB1dCBldmVudCBvbiBtb250aCBhbmQvb3IgeWVhciBjaGFuZ2VcclxuICAgICovXG4gICAgJ2ZvY3VzZWREYXRlRGF0YS5tb250aCc6IGZ1bmN0aW9uIGZvY3VzZWREYXRlRGF0YU1vbnRoKHZhbHVlKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UtbW9udGgnLCB2YWx1ZSk7XG4gICAgfSxcbiAgICAnZm9jdXNlZERhdGVEYXRhLnllYXInOiBmdW5jdGlvbiBmb2N1c2VkRGF0ZURhdGFZZWFyKHZhbHVlKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UteWVhcicsIHZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKlxyXG4gICAgKiBQYXJzZSBzdHJpbmcgaW50byBkYXRlXHJcbiAgICAqL1xuICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkge1xuICAgICAgdmFyIGRhdGUgPSB0aGlzLmRhdGVQYXJzZXIodmFsdWUsIHRoaXMpO1xuXG4gICAgICBpZiAoZGF0ZSAmJiAhaXNOYU4oZGF0ZSkpIHtcbiAgICAgICAgdGhpcy5jb21wdXRlZFZhbHVlID0gZGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvcmNlIHJlZnJlc2ggaW5wdXQgdmFsdWUgd2hlbiBub3QgdmFsaWQgZGF0ZVxuICAgICAgICB0aGlzLmNvbXB1dGVkVmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLiRyZWZzLmlucHV0Lm5ld1ZhbHVlID0gdGhpcy5jb21wdXRlZFZhbHVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBGb3JtYXQgZGF0ZSBpbnRvIHN0cmluZ1xyXG4gICAgKi9cbiAgICBmb3JtYXRWYWx1ZTogZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsdWUpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YXIgaXNBcnJheVdpdGhWYWxpZERhdGVzID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICByZXR1cm4gIWlzTmFOKHYpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXlXaXRoVmFsaWREYXRlcyA/IHRoaXMuZGF0ZUZvcm1hdHRlcih2YWx1ZSwgdGhpcykgOiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWUgJiYgIWlzTmFOKHZhbHVlKSA/IHRoaXMuZGF0ZUZvcm1hdHRlcih2YWx1ZSwgdGhpcykgOiBudWxsO1xuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBFaXRoZXIgZGVjcmVtZW50IG1vbnRoIGJ5IDEgaWYgbm90IEphbnVhcnkgb3IgZGVjcmVtZW50IHllYXIgYnkgMVxyXG4gICAgKiBhbmQgc2V0IG1vbnRoIHRvIDExIChEZWNlbWJlcikgb3IgZGVjcmVtZW50IHllYXIgd2hlbiAnbW9udGgnXHJcbiAgICAqL1xuICAgIHByZXY6IGZ1bmN0aW9uIHByZXYoKSB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAodGhpcy5pc1R5cGVNb250aCkge1xuICAgICAgICB0aGlzLmZvY3VzZWREYXRlRGF0YS55ZWFyIC09IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5mb2N1c2VkRGF0ZURhdGEubW9udGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5mb2N1c2VkRGF0ZURhdGEubW9udGggLT0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmZvY3VzZWREYXRlRGF0YS5tb250aCA9IDExO1xuICAgICAgICAgIHRoaXMuZm9jdXNlZERhdGVEYXRhLnllYXIgLT0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBFaXRoZXIgaW5jcmVtZW50IG1vbnRoIGJ5IDEgaWYgbm90IERlY2VtYmVyIG9yIGluY3JlbWVudCB5ZWFyIGJ5IDFcclxuICAgICogYW5kIHNldCBtb250aCB0byAwIChKYW51YXJ5KSBvciBpbmNyZW1lbnQgeWVhciB3aGVuICdtb250aCdcclxuICAgICovXG4gICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkKSByZXR1cm47XG5cbiAgICAgIGlmICh0aGlzLmlzVHlwZU1vbnRoKSB7XG4gICAgICAgIHRoaXMuZm9jdXNlZERhdGVEYXRhLnllYXIgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmZvY3VzZWREYXRlRGF0YS5tb250aCA8IDExKSB7XG4gICAgICAgICAgdGhpcy5mb2N1c2VkRGF0ZURhdGEubW9udGggKz0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmZvY3VzZWREYXRlRGF0YS5tb250aCA9IDA7XG4gICAgICAgICAgdGhpcy5mb2N1c2VkRGF0ZURhdGEueWVhciArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBmb3JtYXROYXRpdmU6IGZ1bmN0aW9uIGZvcm1hdE5hdGl2ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNUeXBlTW9udGggPyB0aGlzLmZvcm1hdFlZWVlNTSh2YWx1ZSkgOiB0aGlzLmZvcm1hdFlZWVlNTUREKHZhbHVlKTtcbiAgICB9LFxuXG4gICAgLypcclxuICAgICogRm9ybWF0IGRhdGUgaW50byBzdHJpbmcgJ1lZWVktTU0tREQnXHJcbiAgICAqL1xuICAgIGZvcm1hdFlZWVlNTUREOiBmdW5jdGlvbiBmb3JtYXRZWVlZTU1ERCh2YWx1ZSkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG5cbiAgICAgIGlmICh2YWx1ZSAmJiAhaXNOYU4oZGF0ZSkpIHtcbiAgICAgICAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgIHZhciBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XG4gICAgICAgIHZhciBkYXkgPSBkYXRlLmdldERhdGUoKTtcbiAgICAgICAgcmV0dXJuIHllYXIgKyAnLScgKyAoKG1vbnRoIDwgMTAgPyAnMCcgOiAnJykgKyBtb250aCkgKyAnLScgKyAoKGRheSA8IDEwID8gJzAnIDogJycpICsgZGF5KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcnO1xuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBGb3JtYXQgZGF0ZSBpbnRvIHN0cmluZyAnWVlZWS1NTSdcclxuICAgICovXG4gICAgZm9ybWF0WVlZWU1NOiBmdW5jdGlvbiBmb3JtYXRZWVlZTU0odmFsdWUpIHtcbiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUodmFsdWUpO1xuXG4gICAgICBpZiAodmFsdWUgJiYgIWlzTmFOKGRhdGUpKSB7XG4gICAgICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICB2YXIgbW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICAgICAgICByZXR1cm4geWVhciArICctJyArICgobW9udGggPCAxMCA/ICcwJyA6ICcnKSArIG1vbnRoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcnO1xuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBQYXJzZSBkYXRlIGZyb20gc3RyaW5nXHJcbiAgICAqL1xuICAgIG9uQ2hhbmdlTmF0aXZlUGlja2VyOiBmdW5jdGlvbiBvbkNoYW5nZU5hdGl2ZVBpY2tlcihldmVudCkge1xuICAgICAgdmFyIGRhdGUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICB0aGlzLmNvbXB1dGVkVmFsdWUgPSBkYXRlID8gbmV3IERhdGUoZGF0ZSArICcgMDA6MDA6MDAnKSA6IG51bGw7XG4gICAgfSxcbiAgICB1cGRhdGVJbnRlcm5hbFN0YXRlOiBmdW5jdGlvbiB1cGRhdGVJbnRlcm5hbFN0YXRlKHZhbHVlKSB7XG4gICAgICB2YXIgY3VycmVudERhdGUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlWzBdIDogIXZhbHVlID8gdGhpcy5kYXRlQ3JlYXRvcigpIDogdmFsdWU7XG4gICAgICB0aGlzLmZvY3VzZWREYXRlRGF0YSA9IHtcbiAgICAgICAgbW9udGg6IGN1cnJlbnREYXRlLmdldE1vbnRoKCksXG4gICAgICAgIHllYXI6IGN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKClcbiAgICAgIH07XG4gICAgICB0aGlzLmRhdGVTZWxlY3RlZCA9IHZhbHVlO1xuICAgIH0sXG5cbiAgICAvKlxyXG4gICAgKiBUb2dnbGUgZGF0ZXBpY2tlclxyXG4gICAgKi9cbiAgICB0b2dnbGVQaWNrZXI6IGZ1bmN0aW9uIHRvZ2dsZVBpY2tlcihhY3RpdmUpIHtcbiAgICAgIGlmICh0aGlzLiRyZWZzLmRyb3Bkb3duKSB7XG4gICAgICAgIHRoaXMuJHJlZnMuZHJvcGRvd24uaXNBY3RpdmUgPSB0eXBlb2YgYWN0aXZlID09PSAnYm9vbGVhbicgPyBhY3RpdmUgOiAhdGhpcy4kcmVmcy5kcm9wZG93bi5pc0FjdGl2ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLypcclxuICAgICogQ2FsbCBkZWZhdWx0IG9uRm9jdXMgbWV0aG9kIGFuZCBzaG93IGRhdGVwaWNrZXJcclxuICAgICovXG4gICAgaGFuZGxlT25Gb2N1czogZnVuY3Rpb24gaGFuZGxlT25Gb2N1cyhldmVudCkge1xuICAgICAgdGhpcy5vbkZvY3VzKGV2ZW50KTtcblxuICAgICAgaWYgKHRoaXMub3Blbk9uRm9jdXMpIHtcbiAgICAgICAgdGhpcy50b2dnbGVQaWNrZXIodHJ1ZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qXHJcbiAgICAqIFRvZ2dsZSBkcm9wZG93blxyXG4gICAgKi9cbiAgICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICh0aGlzLm1vYmlsZU5hdGl2ZSAmJiB0aGlzLmlzTW9iaWxlKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMuJHJlZnMuaW5wdXQuJHJlZnMuaW5wdXQ7XG4gICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgIGlucHV0LmNsaWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kcmVmcy5kcm9wZG93bi50b2dnbGUoKTtcbiAgICB9LFxuXG4gICAgLypcclxuICAgICogQXZvaWQgZHJvcGRvd24gdG9nZ2xlIHdoZW4gaXMgYWxyZWFkeSB2aXNpYmxlXHJcbiAgICAqL1xuICAgIG9uSW5wdXRDbGljazogZnVuY3Rpb24gb25JbnB1dENsaWNrKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy4kcmVmcy5kcm9wZG93bi5pc0FjdGl2ZSkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiBLZXlwcmVzcyBldmVudCB0aGF0IGlzIGJvdW5kIHRvIHRoZSBkb2N1bWVudC5cclxuICAgICAqL1xuICAgIGtleVByZXNzOiBmdW5jdGlvbiBrZXlQcmVzcyhldmVudCkge1xuICAgICAgLy8gRXNjIGtleVxuICAgICAgaWYgKHRoaXMuJHJlZnMuZHJvcGRvd24gJiYgdGhpcy4kcmVmcy5kcm9wZG93bi5pc0FjdGl2ZSAmJiBldmVudC5rZXlDb2RlID09PSAyNykge1xuICAgICAgICB0aGlzLnRvZ2dsZVBpY2tlcihmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmtleVByZXNzKTtcbiAgICB9XG4gIH0sXG4gIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMua2V5UHJlc3MpO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyQzID0gc2NyaXB0JDM7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18kMyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZGF0ZXBpY2tlciBjb250cm9sXCIsY2xhc3M6W192bS5zaXplLCB7J2lzLWV4cGFuZGVkJzogX3ZtLmV4cGFuZGVkfV19LFsoIV92bS5pc01vYmlsZSB8fCBfdm0uaW5saW5lKT9fYygnYi1kcm9wZG93bicse3JlZjpcImRyb3Bkb3duXCIsYXR0cnM6e1wicG9zaXRpb25cIjpfdm0ucG9zaXRpb24sXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcImlubGluZVwiOl92bS5pbmxpbmV9fSxbKCFfdm0uaW5saW5lKT9fYygnYi1pbnB1dCcsX3ZtLl9iKHtyZWY6XCJpbnB1dFwiLGF0dHJzOntcInNsb3RcIjpcInRyaWdnZXJcIixcImF1dG9jb21wbGV0ZVwiOlwib2ZmXCIsXCJ2YWx1ZVwiOl92bS5mb3JtYXRWYWx1ZShfdm0uY29tcHV0ZWRWYWx1ZSksXCJwbGFjZWhvbGRlclwiOl92bS5wbGFjZWhvbGRlcixcInNpemVcIjpfdm0uc2l6ZSxcImljb25cIjpfdm0uaWNvbixcImljb24tcGFja1wiOl92bS5pY29uUGFjayxcInJvdW5kZWRcIjpfdm0ucm91bmRlZCxcImxvYWRpbmdcIjpfdm0ubG9hZGluZyxcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkLFwicmVhZG9ubHlcIjohX3ZtLmVkaXRhYmxlLFwidXNlLWh0bWw1LXZhbGlkYXRpb25cIjpfdm0udXNlSHRtbDVWYWxpZGF0aW9ufSxvbjp7XCJmb2N1c1wiOl92bS5oYW5kbGVPbkZvY3VzLFwiYmx1clwiOl92bS5vbkJsdXJ9LG5hdGl2ZU9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub25JbnB1dENsaWNrKCRldmVudCk7fSxcImtleXVwXCI6ZnVuY3Rpb24oJGV2ZW50KXtpZighKCdidXR0b24nIGluICRldmVudCkmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImVudGVyXCIsMTMsJGV2ZW50LmtleSkpeyByZXR1cm4gbnVsbDsgfV92bS50b2dnbGVQaWNrZXIodHJ1ZSk7fSxcImNoYW5nZVwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLm9uQ2hhbmdlKCRldmVudC50YXJnZXQudmFsdWUpO319LHNsb3Q6XCJ0cmlnZ2VyXCJ9LCdiLWlucHV0Jyxfdm0uJGF0dHJzLGZhbHNlKSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnYi1kcm9wZG93bi1pdGVtJyx7YXR0cnM6e1wiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWQsXCJjdXN0b21cIjpcIlwifX0sW19jKCdoZWFkZXInLHtzdGF0aWNDbGFzczpcImRhdGVwaWNrZXItaGVhZGVyXCJ9LFsoX3ZtLiRzbG90cy5oZWFkZXIgIT09IHVuZGVmaW5lZCAmJiBfdm0uJHNsb3RzLmhlYWRlci5sZW5ndGgpP1tfdm0uX3QoXCJoZWFkZXJcIildOl9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInBhZ2luYXRpb24gZmllbGQgaXMtY2VudGVyZWRcIixjbGFzczpfdm0uc2l6ZX0sW19jKCdhJyx7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOighX3ZtLnNob3dQcmV2ICYmICFfdm0uZGlzYWJsZWQpLGV4cHJlc3Npb246XCIhc2hvd1ByZXYgJiYgIWRpc2FibGVkXCJ9XSxzdGF0aWNDbGFzczpcInBhZ2luYXRpb24tcHJldmlvdXNcIixhdHRyczp7XCJyb2xlXCI6XCJidXR0b25cIixcImhyZWZcIjpcIiNcIixcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLnByZXYoJGV2ZW50KTt9LFwia2V5ZG93blwiOltmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLnByZXYoJGV2ZW50KTt9LGZ1bmN0aW9uKCRldmVudCl7aWYoISgnYnV0dG9uJyBpbiAkZXZlbnQpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJzcGFjZVwiLDMyLCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH0kZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0ucHJldigkZXZlbnQpO31dfX0sW19jKCdiLWljb24nLHthdHRyczp7XCJpY29uXCI6XCJjaGV2cm9uLWxlZnRcIixcInBhY2tcIjpfdm0uaWNvblBhY2ssXCJib3RoXCI6XCJcIixcInR5cGVcIjpcImlzLXByaW1hcnkgaXMtY2xpY2thYmxlXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ2EnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KCFfdm0uc2hvd05leHQgJiYgIV92bS5kaXNhYmxlZCksZXhwcmVzc2lvbjpcIiFzaG93TmV4dCAmJiAhZGlzYWJsZWRcIn1dLHN0YXRpY0NsYXNzOlwicGFnaW5hdGlvbi1uZXh0XCIsYXR0cnM6e1wicm9sZVwiOlwiYnV0dG9uXCIsXCJocmVmXCI6XCIjXCIsXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5uZXh0KCRldmVudCk7fSxcImtleWRvd25cIjpbZnVuY3Rpb24oJGV2ZW50KXtpZighKCdidXR0b24nIGluICRldmVudCkmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImVudGVyXCIsMTMsJGV2ZW50LmtleSkpeyByZXR1cm4gbnVsbDsgfSRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5uZXh0KCRldmVudCk7fSxmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwic3BhY2VcIiwzMiwkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLm5leHQoJGV2ZW50KTt9XX19LFtfYygnYi1pY29uJyx7YXR0cnM6e1wiaWNvblwiOlwiY2hldnJvbi1yaWdodFwiLFwicGFja1wiOl92bS5pY29uUGFjayxcImJvdGhcIjpcIlwiLFwidHlwZVwiOlwiaXMtcHJpbWFyeSBpcy1jbGlja2FibGVcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwYWdpbmF0aW9uLWxpc3RcIn0sW19jKCdiLWZpZWxkJyxbKCFfdm0uaXNUeXBlTW9udGgpP19jKCdiLXNlbGVjdCcse2F0dHJzOntcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkLFwic2l6ZVwiOl92bS5zaXplfSxtb2RlbDp7dmFsdWU6KF92bS5mb2N1c2VkRGF0ZURhdGEubW9udGgpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZm9jdXNlZERhdGVEYXRhLCBcIm1vbnRoXCIsICQkdik7fSxleHByZXNzaW9uOlwiZm9jdXNlZERhdGVEYXRhLm1vbnRoXCJ9fSxfdm0uX2woKF92bS5tb250aE5hbWVzKSxmdW5jdGlvbihtb250aCxpbmRleCl7cmV0dXJuIF9jKCdvcHRpb24nLHtrZXk6bW9udGgsZG9tUHJvcHM6e1widmFsdWVcIjppbmRleH19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIitfdm0uX3MobW9udGgpK1wiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIildKX0pKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKCdiLXNlbGVjdCcse2F0dHJzOntcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkLFwic2l6ZVwiOl92bS5zaXplfSxtb2RlbDp7dmFsdWU6KF92bS5mb2N1c2VkRGF0ZURhdGEueWVhciksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5mb2N1c2VkRGF0ZURhdGEsIFwieWVhclwiLCAkJHYpO30sZXhwcmVzc2lvbjpcImZvY3VzZWREYXRlRGF0YS55ZWFyXCJ9fSxfdm0uX2woKF92bS5saXN0T2ZZZWFycyksZnVuY3Rpb24oeWVhcil7cmV0dXJuIF9jKCdvcHRpb24nLHtrZXk6eWVhcixkb21Qcm9wczp7XCJ2YWx1ZVwiOnllYXJ9fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIrX3ZtLl9zKHllYXIpK1wiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIildKX0pKV0sMSldLDEpXSldLDIpLF92bS5fdihcIiBcIiksKCFfdm0uaXNUeXBlTW9udGgpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImRhdGVwaWNrZXItY29udGVudFwifSxbX2MoJ2ItZGF0ZXBpY2tlci10YWJsZScse2F0dHJzOntcImRheS1uYW1lc1wiOl92bS5kYXlOYW1lcyxcIm1vbnRoLW5hbWVzXCI6X3ZtLm1vbnRoTmFtZXMsXCJmaXJzdC1kYXktb2Ytd2Vla1wiOl92bS5maXJzdERheU9mV2VlayxcInJ1bGVzLWZvci1maXJzdC13ZWVrXCI6X3ZtLnJ1bGVzRm9yRmlyc3RXZWVrLFwibWluLWRhdGVcIjpfdm0ubWluRGF0ZSxcIm1heC1kYXRlXCI6X3ZtLm1heERhdGUsXCJmb2N1c2VkXCI6X3ZtLmZvY3VzZWREYXRlRGF0YSxcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkLFwidW5zZWxlY3RhYmxlLWRhdGVzXCI6X3ZtLnVuc2VsZWN0YWJsZURhdGVzLFwidW5zZWxlY3RhYmxlLWRheXMtb2Ytd2Vla1wiOl92bS51bnNlbGVjdGFibGVEYXlzT2ZXZWVrLFwic2VsZWN0YWJsZS1kYXRlc1wiOl92bS5zZWxlY3RhYmxlRGF0ZXMsXCJldmVudHNcIjpfdm0uZXZlbnRzLFwiaW5kaWNhdG9yc1wiOl92bS5pbmRpY2F0b3JzLFwiZGF0ZS1jcmVhdG9yXCI6X3ZtLmRhdGVDcmVhdG9yLFwidHlwZS1tb250aFwiOl92bS5pc1R5cGVNb250aCxcIm5lYXJieS1tb250aC1kYXlzXCI6X3ZtLm5lYXJieU1vbnRoRGF5cyxcIm5lYXJieS1zZWxlY3RhYmxlLW1vbnRoLWRheXNcIjpfdm0ubmVhcmJ5U2VsZWN0YWJsZU1vbnRoRGF5cyxcInNob3ctd2Vlay1udW1iZXJcIjpfdm0uc2hvd1dlZWtOdW1iZXIsXCJyYW5nZVwiOl92bS5yYW5nZX0sb246e1wiY2xvc2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS50b2dnbGVQaWNrZXIoZmFsc2UpO319LG1vZGVsOnt2YWx1ZTooX3ZtLmNvbXB1dGVkVmFsdWUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uY29tcHV0ZWRWYWx1ZT0kJHY7fSxleHByZXNzaW9uOlwiY29tcHV0ZWRWYWx1ZVwifX0pXSwxKTpfYygnZGl2JyxbX2MoJ2ItZGF0ZXBpY2tlci1tb250aCcse2F0dHJzOntcIm1vbnRoLW5hbWVzXCI6X3ZtLm1vbnRoTmFtZXMsXCJtaW4tZGF0ZVwiOl92bS5taW5EYXRlLFwibWF4LWRhdGVcIjpfdm0ubWF4RGF0ZSxcImZvY3VzZWRcIjpfdm0uZm9jdXNlZERhdGVEYXRhLFwiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWQsXCJ1bnNlbGVjdGFibGUtZGF0ZXNcIjpfdm0udW5zZWxlY3RhYmxlRGF0ZXMsXCJ1bnNlbGVjdGFibGUtZGF5cy1vZi13ZWVrXCI6X3ZtLnVuc2VsZWN0YWJsZURheXNPZldlZWssXCJzZWxlY3RhYmxlLWRhdGVzXCI6X3ZtLnNlbGVjdGFibGVEYXRlcyxcImV2ZW50c1wiOl92bS5ldmVudHMsXCJpbmRpY2F0b3JzXCI6X3ZtLmluZGljYXRvcnMsXCJkYXRlLWNyZWF0b3JcIjpfdm0uZGF0ZUNyZWF0b3J9LG9uOntcImNsb3NlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0udG9nZ2xlUGlja2VyKGZhbHNlKTt9fSxtb2RlbDp7dmFsdWU6KF92bS5jb21wdXRlZFZhbHVlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLmNvbXB1dGVkVmFsdWU9JCR2O30sZXhwcmVzc2lvbjpcImNvbXB1dGVkVmFsdWVcIn19KV0sMSksX3ZtLl92KFwiIFwiKSwoX3ZtLiRzbG90cy5kZWZhdWx0ICE9PSB1bmRlZmluZWQgJiYgX3ZtLiRzbG90cy5kZWZhdWx0Lmxlbmd0aCk/X2MoJ2Zvb3Rlcicse3N0YXRpY0NsYXNzOlwiZGF0ZXBpY2tlci1mb290ZXJcIn0sW192bS5fdChcImRlZmF1bHRcIildLDIpOl92bS5fZSgpXSldLDEpOl9jKCdiLWlucHV0Jyxfdm0uX2Ioe3JlZjpcImlucHV0XCIsYXR0cnM6e1widHlwZVwiOiFfdm0uaXNUeXBlTW9udGggPyAnZGF0ZScgOiAnbW9udGgnLFwiYXV0b2NvbXBsZXRlXCI6XCJvZmZcIixcInZhbHVlXCI6X3ZtLmZvcm1hdE5hdGl2ZShfdm0uY29tcHV0ZWRWYWx1ZSksXCJwbGFjZWhvbGRlclwiOl92bS5wbGFjZWhvbGRlcixcInNpemVcIjpfdm0uc2l6ZSxcImljb25cIjpfdm0uaWNvbixcImljb24tcGFja1wiOl92bS5pY29uUGFjayxcImxvYWRpbmdcIjpfdm0ubG9hZGluZyxcIm1heFwiOl92bS5mb3JtYXROYXRpdmUoX3ZtLm1heERhdGUpLFwibWluXCI6X3ZtLmZvcm1hdE5hdGl2ZShfdm0ubWluRGF0ZSksXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcInJlYWRvbmx5XCI6ZmFsc2UsXCJzaG93LXdlZWstbnVtYmVyXCI6X3ZtLnNob3dXZWVrTnVtYmVyLFwidXNlLWh0bWw1LXZhbGlkYXRpb25cIjpfdm0udXNlSHRtbDVWYWxpZGF0aW9ufSxvbjp7XCJmb2N1c1wiOl92bS5oYW5kbGVPbkZvY3VzLFwiYmx1clwiOl92bS5vbkJsdXJ9LG5hdGl2ZU9uOntcImNoYW5nZVwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLm9uQ2hhbmdlTmF0aXZlUGlja2VyKCRldmVudCk7fX19LCdiLWlucHV0Jyxfdm0uJGF0dHJzLGZhbHNlKSldLDEpfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQzID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fJDMgPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fJDMgPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBEYXRlcGlja2VyID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fJDMsIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18kMyB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyQzLFxuICAgIF9fdnVlX3NjcmlwdF9fJDMsXG4gICAgX192dWVfc2NvcGVfaWRfXyQzLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQzLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBEYXRlcGlja2VyKTtcbiAgfVxufTtcbnVzZShQbHVnaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBQbHVnaW47XG5leHBvcnQgeyBEYXRlcGlja2VyIH07XG4iLCJpbXBvcnQgeyByIGFzIHJlbW92ZUVsZW1lbnQgfSBmcm9tICcuL2NodW5rLWU1ZmNlNDhmLmpzJztcbmltcG9ydCB7IGMgYXMgY29uZmlnIH0gZnJvbSAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fIH0gZnJvbSAnLi9jaHVuay1jY2E4OGRiOC5qcyc7XG5cbi8vXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQk1vZGFsJyxcbiAgcHJvcHM6IHtcbiAgICBhY3RpdmU6IEJvb2xlYW4sXG4gICAgY29tcG9uZW50OiBbT2JqZWN0LCBGdW5jdGlvbl0sXG4gICAgY29udGVudDogU3RyaW5nLFxuICAgIHByb2dyYW1tYXRpYzogQm9vbGVhbixcbiAgICBwcm9wczogT2JqZWN0LFxuICAgIGV2ZW50czogT2JqZWN0LFxuICAgIHdpZHRoOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogOTYwXG4gICAgfSxcbiAgICBoYXNNb2RhbENhcmQ6IEJvb2xlYW4sXG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnem9vbS1vdXQnXG4gICAgfSxcbiAgICBjYW5DYW5jZWw6IHtcbiAgICAgIHR5cGU6IFtBcnJheSwgQm9vbGVhbl0sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kZWZhdWx0TW9kYWxDYW5DYW5jZWw7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkNhbmNlbDoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHt9XG4gICAgfSxcbiAgICBzY3JvbGw6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gY29uZmlnLmRlZmF1bHRNb2RhbFNjcm9sbCA/IGNvbmZpZy5kZWZhdWx0TW9kYWxTY3JvbGwgOiAnY2xpcCc7XG4gICAgICB9LFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFsnY2xpcCcsICdrZWVwJ10uaW5kZXhPZih2YWx1ZSkgPj0gMDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZ1bGxTY3JlZW46IEJvb2xlYW4sXG4gICAgY3VzdG9tQ2xhc3M6IFN0cmluZ1xuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0FjdGl2ZTogdGhpcy5hY3RpdmUgfHwgZmFsc2UsXG4gICAgICBzYXZlZFNjcm9sbFRvcDogbnVsbCxcbiAgICAgIG5ld1dpZHRoOiB0eXBlb2YgdGhpcy53aWR0aCA9PT0gJ251bWJlcicgPyB0aGlzLndpZHRoICsgJ3B4JyA6IHRoaXMud2lkdGhcbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGNhbmNlbE9wdGlvbnM6IGZ1bmN0aW9uIGNhbmNlbE9wdGlvbnMoKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHRoaXMuY2FuQ2FuY2VsID09PSAnYm9vbGVhbicgPyB0aGlzLmNhbkNhbmNlbCA/IGNvbmZpZy5kZWZhdWx0TW9kYWxDYW5DYW5jZWwgOiBbXSA6IHRoaXMuY2FuQ2FuY2VsO1xuICAgIH0sXG4gICAgc2hvd1g6IGZ1bmN0aW9uIHNob3dYKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsT3B0aW9ucy5pbmRleE9mKCd4JykgPj0gMDtcbiAgICB9LFxuICAgIGN1c3RvbVN0eWxlOiBmdW5jdGlvbiBjdXN0b21TdHlsZSgpIHtcbiAgICAgIGlmICghdGhpcy5mdWxsU2NyZWVuKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF4V2lkdGg6IHRoaXMubmV3V2lkdGhcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIGFjdGl2ZTogZnVuY3Rpb24gYWN0aXZlKHZhbHVlKSB7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gdmFsdWU7XG4gICAgfSxcbiAgICBpc0FjdGl2ZTogZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgICB0aGlzLmhhbmRsZVNjcm9sbCgpO1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGhhbmRsZVNjcm9sbDogZnVuY3Rpb24gaGFuZGxlU2Nyb2xsKCkge1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG5cbiAgICAgIGlmICh0aGlzLnNjcm9sbCA9PT0gJ2NsaXAnKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWNsaXBwZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtY2xpcHBlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNhdmVkU2Nyb2xsVG9wID0gIXRoaXMuc2F2ZWRTY3JvbGxUb3AgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIDogdGhpcy5zYXZlZFNjcm9sbFRvcDtcblxuICAgICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdpcy1ub3Njcm9sbCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1ub3Njcm9sbCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCA9IFwiLVwiLmNvbmNhdCh0aGlzLnNhdmVkU2Nyb2xsVG9wLCBcInB4XCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSB0aGlzLnNhdmVkU2Nyb2xsVG9wO1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS50b3AgPSBudWxsO1xuICAgICAgdGhpcy5zYXZlZFNjcm9sbFRvcCA9IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBDbG9zZSB0aGUgTW9kYWwgaWYgY2FuQ2FuY2VsIGFuZCBjYWxsIHRoZSBvbkNhbmNlbCBwcm9wIChmdW5jdGlvbikuXHJcbiAgICAqL1xuICAgIGNhbmNlbDogZnVuY3Rpb24gY2FuY2VsKG1ldGhvZCkge1xuICAgICAgaWYgKHRoaXMuY2FuY2VsT3B0aW9ucy5pbmRleE9mKG1ldGhvZCkgPCAwKSByZXR1cm47XG4gICAgICB0aGlzLm9uQ2FuY2VsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBDYWxsIHRoZSBvbkNhbmNlbCBwcm9wIChmdW5jdGlvbikuXHJcbiAgICAqIEVtaXQgZXZlbnRzLCBhbmQgZGVzdHJveSBtb2RhbCBpZiBpdCdzIHByb2dyYW1tYXRpYy5cclxuICAgICovXG4gICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kZW1pdCgnY2xvc2UnKTtcbiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTphY3RpdmUnLCBmYWxzZSk7IC8vIFRpbWVvdXQgZm9yIHRoZSBhbmltYXRpb24gY29tcGxldGUgYmVmb3JlIGRlc3Ryb3lpbmdcblxuICAgICAgaWYgKHRoaXMucHJvZ3JhbW1hdGljKSB7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuJGRlc3Ryb3koKTtcblxuICAgICAgICAgIHJlbW92ZUVsZW1lbnQoX3RoaXMuJGVsKTtcbiAgICAgICAgfSwgMTUwKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIEtleXByZXNzIGV2ZW50IHRoYXQgaXMgYm91bmQgdG8gdGhlIGRvY3VtZW50LlxyXG4gICAgKi9cbiAgICBrZXlQcmVzczogZnVuY3Rpb24ga2V5UHJlc3MoZXZlbnQpIHtcbiAgICAgIC8vIEVzYyBrZXlcbiAgICAgIGlmICh0aGlzLmlzQWN0aXZlICYmIGV2ZW50LmtleUNvZGUgPT09IDI3KSB0aGlzLmNhbmNlbCgnZXNjYXBlJyk7XG4gICAgfVxuICB9LFxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmtleVByZXNzKTtcbiAgICB9XG4gIH0sXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCgpIHtcbiAgICAvLyBJbnNlcnQgdGhlIE1vZGFsIGNvbXBvbmVudCBpbiBib2R5IHRhZ1xuICAgIC8vIG9ubHkgaWYgaXQncyBwcm9ncmFtbWF0aWNcbiAgICB0aGlzLnByb2dyYW1tYXRpYyAmJiBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuJGVsKTtcbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICBpZiAodGhpcy5wcm9ncmFtbWF0aWMpIHRoaXMuaXNBY3RpdmUgPSB0cnVlO2Vsc2UgaWYgKHRoaXMuaXNBY3RpdmUpIHRoaXMuaGFuZGxlU2Nyb2xsKCk7XG4gIH0sXG4gIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMua2V5UHJlc3MpOyAvLyByZXNldCBzY3JvbGxcblxuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWNsaXBwZWQnKTtcbiAgICAgIHZhciBzYXZlZFNjcm9sbFRvcCA9ICF0aGlzLnNhdmVkU2Nyb2xsVG9wID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA6IHRoaXMuc2F2ZWRTY3JvbGxUb3A7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLW5vc2Nyb2xsJyk7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gc2F2ZWRTY3JvbGxUb3A7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCA9IG51bGw7XG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fID0gc2NyaXB0O1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygndHJhbnNpdGlvbicse2F0dHJzOntcIm5hbWVcIjpfdm0uYW5pbWF0aW9ufX0sWyhfdm0uaXNBY3RpdmUpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcIm1vZGFsIGlzLWFjdGl2ZVwiLGNsYXNzOlt7J2lzLWZ1bGwtc2NyZWVuJzogX3ZtLmZ1bGxTY3JlZW59LCBfdm0uY3VzdG9tQ2xhc3NdfSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibW9kYWwtYmFja2dyb3VuZFwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uY2FuY2VsKCdvdXRzaWRlJyk7fX19KSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFuaW1hdGlvbi1jb250ZW50XCIsY2xhc3M6eyAnbW9kYWwtY29udGVudCc6ICFfdm0uaGFzTW9kYWxDYXJkIH0sc3R5bGU6KF92bS5jdXN0b21TdHlsZSl9LFsoX3ZtLmNvbXBvbmVudCk/X2MoX3ZtLmNvbXBvbmVudCxfdm0uX2coX3ZtLl9iKHt0YWc6XCJjb21wb25lbnRcIixvbjp7XCJjbG9zZVwiOl92bS5jbG9zZX19LCdjb21wb25lbnQnLF92bS5wcm9wcyxmYWxzZSksX3ZtLmV2ZW50cykpOihfdm0uY29udGVudCk/X2MoJ2Rpdicse2RvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhfdm0uY29udGVudCl9fSk6X3ZtLl90KFwiZGVmYXVsdFwiKV0sMiksX3ZtLl92KFwiIFwiKSwoX3ZtLnNob3dYKT9fYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJtb2RhbC1jbG9zZSBpcy1sYXJnZVwiLGF0dHJzOntcInR5cGVcIjpcImJ1dHRvblwifSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmNhbmNlbCgneCcpO319fSk6X3ZtLl9lKCldKTpfdm0uX2UoKV0pfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyA9IHVuZGVmaW5lZDtcbiAgLyogc2NvcGVkICovXG4gIGNvbnN0IF9fdnVlX3Njb3BlX2lkX18gPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fID0gZmFsc2U7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIE1vZGFsID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG5leHBvcnQgeyBNb2RhbCBhcyBNIH07XG4iLCJpbXBvcnQgeyBfIGFzIF9kZWZpbmVQcm9wZXJ0eSB9IGZyb20gJy4vY2h1bmstZDYyMDAwODcuanMnO1xuaW1wb3J0IHsgciBhcyByZW1vdmVFbGVtZW50IH0gZnJvbSAnLi9jaHVuay1lNWZjZTQ4Zi5qcyc7XG5pbXBvcnQgeyBjIGFzIGNvbmZpZyB9IGZyb20gJy4vY2h1bmstOWUzMjA3Y2MuanMnO1xuaW1wb3J0IHsgSSBhcyBJY29uIH0gZnJvbSAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCBhIGFzIHJlZ2lzdGVyQ29tcG9uZW50UHJvZ3JhbW1hdGljLCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgTSBhcyBNb2RhbCB9IGZyb20gJy4vY2h1bmstYTVlYTcwZDAuanMnO1xuXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQkRpYWxvZycsXG4gIGNvbXBvbmVudHM6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgSWNvbi5uYW1lLCBJY29uKSxcbiAgZXh0ZW5kczogTW9kYWwsXG4gIHByb3BzOiB7XG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBtZXNzYWdlOiBTdHJpbmcsXG4gICAgaWNvbjogU3RyaW5nLFxuICAgIGljb25QYWNrOiBTdHJpbmcsXG4gICAgaGFzSWNvbjogQm9vbGVhbixcbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaXMtcHJpbWFyeSdcbiAgICB9LFxuICAgIHNpemU6IFN0cmluZyxcbiAgICBjb25maXJtVGV4dDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiBjb25maWcuZGVmYXVsdERpYWxvZ0NvbmZpcm1UZXh0ID8gY29uZmlnLmRlZmF1bHREaWFsb2dDb25maXJtVGV4dCA6ICdPSyc7XG4gICAgICB9XG4gICAgfSxcbiAgICBjYW5jZWxUZXh0OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kZWZhdWx0RGlhbG9nQ2FuY2VsVGV4dCA/IGNvbmZpZy5kZWZhdWx0RGlhbG9nQ2FuY2VsVGV4dCA6ICdDYW5jZWwnO1xuICAgICAgfVxuICAgIH0sXG4gICAgaGFzSW5wdXQ6IEJvb2xlYW4sXG4gICAgLy8gVXNlZCBpbnRlcm5hbGx5IHRvIGtub3cgaWYgaXQncyBwcm9tcHRcbiAgICBpbnB1dEF0dHJzOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgb25Db25maXJtOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge31cbiAgICB9LFxuICAgIGZvY3VzT246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdjb25maXJtJ1xuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICB2YXIgcHJvbXB0ID0gdGhpcy5oYXNJbnB1dCA/IHRoaXMuaW5wdXRBdHRycy52YWx1ZSB8fCAnJyA6ICcnO1xuICAgIHJldHVybiB7XG4gICAgICBwcm9tcHQ6IHByb21wdCxcbiAgICAgIGlzQWN0aXZlOiBmYWxzZSxcbiAgICAgIHZhbGlkYXRpb25NZXNzYWdlOiAnJ1xuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgLyoqXHJcbiAgICAqIEljb24gbmFtZSAoTURJKSBiYXNlZCBvbiB0aGUgdHlwZS5cclxuICAgICovXG4gICAgaWNvbkJ5VHlwZTogZnVuY3Rpb24gaWNvbkJ5VHlwZSgpIHtcbiAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2lzLWluZm8nOlxuICAgICAgICAgIHJldHVybiAnaW5mb3JtYXRpb24nO1xuXG4gICAgICAgIGNhc2UgJ2lzLXN1Y2Nlc3MnOlxuICAgICAgICAgIHJldHVybiAnY2hlY2stY2lyY2xlJztcblxuICAgICAgICBjYXNlICdpcy13YXJuaW5nJzpcbiAgICAgICAgICByZXR1cm4gJ2FsZXJ0JztcblxuICAgICAgICBjYXNlICdpcy1kYW5nZXInOlxuICAgICAgICAgIHJldHVybiAnYWxlcnQtY2lyY2xlJztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd0NhbmNlbDogZnVuY3Rpb24gc2hvd0NhbmNlbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbmNlbE9wdGlvbnMuaW5kZXhPZignYnV0dG9uJykgPj0gMDtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKipcclxuICAgICogSWYgaXQncyBhIHByb21wdCBEaWFsb2csIHZhbGlkYXRlIHRoZSBpbnB1dC5cclxuICAgICogQ2FsbCB0aGUgb25Db25maXJtIHByb3AgKGZ1bmN0aW9uKSBhbmQgY2xvc2UgdGhlIERpYWxvZy5cclxuICAgICovXG4gICAgY29uZmlybTogZnVuY3Rpb24gY29uZmlybSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLiRyZWZzLmlucHV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLiRyZWZzLmlucHV0LmNoZWNrVmFsaWRpdHkoKSkge1xuICAgICAgICAgIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2UgPSB0aGlzLiRyZWZzLmlucHV0LnZhbGlkYXRpb25NZXNzYWdlO1xuICAgICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy4kcmVmcy5pbnB1dC5zZWxlY3QoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5vbkNvbmZpcm0odGhpcy5wcm9tcHQpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogQ2xvc2UgdGhlIERpYWxvZy5cclxuICAgICovXG4gICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTsgLy8gVGltZW91dCBmb3IgdGhlIGFuaW1hdGlvbiBjb21wbGV0ZSBiZWZvcmUgZGVzdHJveWluZ1xuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLiRkZXN0cm95KCk7XG5cbiAgICAgICAgcmVtb3ZlRWxlbWVudChfdGhpczIuJGVsKTtcbiAgICAgIH0sIDE1MCk7XG4gICAgfVxuICB9LFxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAvLyBJbnNlcnQgdGhlIERpYWxvZyBjb21wb25lbnQgaW4gYm9keSB0YWdcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChfdGhpczMuJGVsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLmlucHV0QXR0cnMucmVxdWlyZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLiRzZXQodGhpcy5pbnB1dEF0dHJzLCAncmVxdWlyZWQnLCB0cnVlKTtcbiAgICB9XG5cbiAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBIYW5kbGUgd2hpY2ggZWxlbWVudCByZWNlaXZlcyBmb2N1c1xuICAgICAgaWYgKF90aGlzNC5oYXNJbnB1dCkge1xuICAgICAgICBfdGhpczQuJHJlZnMuaW5wdXQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAoX3RoaXM0LmZvY3VzT24gPT09ICdjYW5jZWwnICYmIF90aGlzNC5zaG93Q2FuY2VsKSB7XG4gICAgICAgIF90aGlzNC4kcmVmcy5jYW5jZWxCdXR0b24uZm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzNC4kcmVmcy5jb25maXJtQnV0dG9uLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCd0cmFuc2l0aW9uJyx7YXR0cnM6e1wibmFtZVwiOl92bS5hbmltYXRpb259fSxbKF92bS5pc0FjdGl2ZSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZGlhbG9nIG1vZGFsIGlzLWFjdGl2ZVwiLGNsYXNzOl92bS5zaXplfSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibW9kYWwtYmFja2dyb3VuZFwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uY2FuY2VsKCdvdXRzaWRlJyk7fX19KSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcIm1vZGFsLWNhcmQgYW5pbWF0aW9uLWNvbnRlbnRcIn0sWyhfdm0udGl0bGUpP19jKCdoZWFkZXInLHtzdGF0aWNDbGFzczpcIm1vZGFsLWNhcmQtaGVhZFwifSxbX2MoJ3AnLHtzdGF0aWNDbGFzczpcIm1vZGFsLWNhcmQtdGl0bGVcIn0sW192bS5fdihfdm0uX3MoX3ZtLnRpdGxlKSldKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczpcIm1vZGFsLWNhcmQtYm9keVwiLGNsYXNzOnsgJ2lzLXRpdGxlbGVzcyc6ICFfdm0udGl0bGUsICdpcy1mbGV4JzogX3ZtLmhhc0ljb24gfX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcIm1lZGlhXCJ9LFsoX3ZtLmhhc0ljb24pP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcIm1lZGlhLWxlZnRcIn0sW19jKCdiLWljb24nLHthdHRyczp7XCJpY29uXCI6X3ZtLmljb24gPyBfdm0uaWNvbiA6IF92bS5pY29uQnlUeXBlLFwicGFja1wiOl92bS5pY29uUGFjayxcInR5cGVcIjpfdm0udHlwZSxcImJvdGhcIjohX3ZtLmljb24sXCJzaXplXCI6XCJpcy1sYXJnZVwifX0pXSwxKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcIm1lZGlhLWNvbnRlbnRcIn0sW19jKCdwJyx7ZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKF92bS5tZXNzYWdlKX19KSxfdm0uX3YoXCIgXCIpLChfdm0uaGFzSW5wdXQpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZpZWxkXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjb250cm9sXCJ9LFtfYygnaW5wdXQnLF92bS5fYih7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsXCIsdmFsdWU6KF92bS5wcm9tcHQpLGV4cHJlc3Npb246XCJwcm9tcHRcIn1dLHJlZjpcImlucHV0XCIsc3RhdGljQ2xhc3M6XCJpbnB1dFwiLGNsYXNzOnsgJ2lzLWRhbmdlcic6IF92bS52YWxpZGF0aW9uTWVzc2FnZSB9LGRvbVByb3BzOntcInZhbHVlXCI6KF92bS5wcm9tcHQpfSxvbjp7XCJrZXl1cFwiOmZ1bmN0aW9uKCRldmVudCl7aWYoISgnYnV0dG9uJyBpbiAkZXZlbnQpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJlbnRlclwiLDEzLCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH1fdm0uY29uZmlybSgkZXZlbnQpO30sXCJpbnB1dFwiOmZ1bmN0aW9uKCRldmVudCl7aWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpeyByZXR1cm47IH1fdm0ucHJvbXB0PSRldmVudC50YXJnZXQudmFsdWU7fX19LCdpbnB1dCcsX3ZtLmlucHV0QXR0cnMsZmFsc2UpKV0pLF92bS5fdihcIiBcIiksX2MoJ3AnLHtzdGF0aWNDbGFzczpcImhlbHAgaXMtZGFuZ2VyXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS52YWxpZGF0aW9uTWVzc2FnZSkpXSldKTpfdm0uX2UoKV0pXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdmb290ZXInLHtzdGF0aWNDbGFzczpcIm1vZGFsLWNhcmQtZm9vdFwifSxbKF92bS5zaG93Q2FuY2VsKT9fYygnYnV0dG9uJyx7cmVmOlwiY2FuY2VsQnV0dG9uXCIsc3RhdGljQ2xhc3M6XCJidXR0b25cIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmNhbmNlbCgnYnV0dG9uJyk7fX19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgIFwiK192bS5fcyhfdm0uY2FuY2VsVGV4dCkrXCJcXG4gICAgICAgICAgICAgICAgXCIpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnYnV0dG9uJyx7cmVmOlwiY29uZmlybUJ1dHRvblwiLHN0YXRpY0NsYXNzOlwiYnV0dG9uXCIsY2xhc3M6X3ZtLnR5cGUsb246e1wiY2xpY2tcIjpfdm0uY29uZmlybX19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgIFwiK192bS5fcyhfdm0uY29uZmlybVRleHQpK1wiXFxuICAgICAgICAgICAgICAgIFwiKV0pXSldKV0pOl92bS5fZSgpXSl9O1xudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgRGlhbG9nID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG5mdW5jdGlvbiBvcGVuKHByb3BzRGF0YSkge1xuICB2YXIgdm0gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVnVlID8gd2luZG93LlZ1ZSA6IFZ1ZTtcbiAgdmFyIERpYWxvZ0NvbXBvbmVudCA9IHZtLmV4dGVuZChEaWFsb2cpO1xuICByZXR1cm4gbmV3IERpYWxvZ0NvbXBvbmVudCh7XG4gICAgZWw6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgIHByb3BzRGF0YTogcHJvcHNEYXRhXG4gIH0pO1xufVxuXG52YXIgRGlhbG9nUHJvZ3JhbW1hdGljID0ge1xuICBhbGVydDogZnVuY3Rpb24gYWxlcnQocGFyYW1zKSB7XG4gICAgdmFyIG1lc3NhZ2U7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICdzdHJpbmcnKSBtZXNzYWdlID0gcGFyYW1zO1xuICAgIHZhciBkZWZhdWx0UGFyYW0gPSB7XG4gICAgICBjYW5DYW5jZWw6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH07XG4gICAgdmFyIHByb3BzRGF0YSA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdFBhcmFtLCBwYXJhbXMpO1xuICAgIHJldHVybiBvcGVuKHByb3BzRGF0YSk7XG4gIH0sXG4gIGNvbmZpcm06IGZ1bmN0aW9uIGNvbmZpcm0ocGFyYW1zKSB7XG4gICAgdmFyIGRlZmF1bHRQYXJhbSA9IHt9O1xuICAgIHZhciBwcm9wc0RhdGEgPSBPYmplY3QuYXNzaWduKGRlZmF1bHRQYXJhbSwgcGFyYW1zKTtcbiAgICByZXR1cm4gb3Blbihwcm9wc0RhdGEpO1xuICB9LFxuICBwcm9tcHQ6IGZ1bmN0aW9uIHByb21wdChwYXJhbXMpIHtcbiAgICB2YXIgZGVmYXVsdFBhcmFtID0ge1xuICAgICAgaGFzSW5wdXQ6IHRydWUsXG4gICAgICBjb25maXJtVGV4dDogJ0RvbmUnXG4gICAgfTtcbiAgICB2YXIgcHJvcHNEYXRhID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0UGFyYW0sIHBhcmFtcyk7XG4gICAgcmV0dXJuIG9wZW4ocHJvcHNEYXRhKTtcbiAgfVxufTtcbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBEaWFsb2cpO1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50UHJvZ3JhbW1hdGljKFZ1ZSwgJ2RpYWxvZycsIERpYWxvZ1Byb2dyYW1tYXRpYyk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuZXhwb3J0IHsgRGlhbG9nUHJvZ3JhbW1hdGljIH07XG4iLCJpbXBvcnQgJy4vY2h1bmstOWUzMjA3Y2MuanMnO1xuaW1wb3J0IHsgciBhcyByZWdpc3RlckNvbXBvbmVudCwgdSBhcyB1c2UgfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcbmltcG9ydCB7IEQgYXMgRHJvcGRvd24sIGEgYXMgRHJvcGRvd25JdGVtIH0gZnJvbSAnLi9jaHVuay0wMGUzZTY3Zi5qcyc7XG5leHBvcnQgeyBEIGFzIERyb3Bkb3duLCBhIGFzIERyb3Bkb3duSXRlbSB9IGZyb20gJy4vY2h1bmstMDBlM2U2N2YuanMnO1xuXG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgRHJvcGRvd24pO1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgRHJvcGRvd25JdGVtKTtcbiAgfVxufTtcbnVzZShQbHVnaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBQbHVnaW47XG4iLCJpbXBvcnQgJy4vY2h1bmstZDYyMDAwODcuanMnO1xuaW1wb3J0ICcuL2NodW5rLTllMzIwN2NjLmpzJztcbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJDb21wb25lbnQsIHUgYXMgdXNlIH0gZnJvbSAnLi9jaHVuay1jY2E4OGRiOC5qcyc7XG5pbXBvcnQgeyBGIGFzIEZpZWxkIH0gZnJvbSAnLi9jaHVuay01MzFiODI3NC5qcyc7XG5leHBvcnQgeyBGIGFzIEZpZWxkIH0gZnJvbSAnLi9jaHVuay01MzFiODI3NC5qcyc7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBGaWVsZCk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuIiwiaW1wb3J0ICcuL2NodW5rLTllMzIwN2NjLmpzJztcbmltcG9ydCB7IEkgYXMgSWNvbiB9IGZyb20gJy4vY2h1bmstZTg0YjQwNDcuanMnO1xuZXhwb3J0IHsgSSBhcyBJY29uIH0gZnJvbSAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuXG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgSWNvbik7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuIiwiaW1wb3J0ICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgJy4vY2h1bmstMTBjODU1MjkuanMnO1xuaW1wb3J0ICcuL2NodW5rLWU4NGI0MDQ3LmpzJztcbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJDb21wb25lbnQsIHUgYXMgdXNlIH0gZnJvbSAnLi9jaHVuay1jY2E4OGRiOC5qcyc7XG5pbXBvcnQgeyBJIGFzIElucHV0IH0gZnJvbSAnLi9jaHVuay05OGU4NmY0MC5qcyc7XG5leHBvcnQgeyBJIGFzIElucHV0IH0gZnJvbSAnLi9jaHVuay05OGU4NmY0MC5qcyc7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBJbnB1dCk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuIiwiLy8gUG9seWZpbGxzIGZvciBTU1JcbnZhciBpc1NTUiA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnO1xudmFyIEhUTUxFbGVtZW50ID0gaXNTU1IgPyBPYmplY3QgOiB3aW5kb3cuSFRNTEVsZW1lbnQ7XG52YXIgRmlsZSA9IGlzU1NSID8gT2JqZWN0IDogd2luZG93LkZpbGU7XG5cbmV4cG9ydCB7IEZpbGUgYXMgRiwgSFRNTEVsZW1lbnQgYXMgSCB9O1xuIiwiaW1wb3J0IHsgciBhcyByZW1vdmVFbGVtZW50IH0gZnJvbSAnLi9jaHVuay1lNWZjZTQ4Zi5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCBhIGFzIHJlZ2lzdGVyQ29tcG9uZW50UHJvZ3JhbW1hdGljLCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgSCBhcyBIVE1MRWxlbWVudCB9IGZyb20gJy4vY2h1bmstYjliZGIwZTQuanMnO1xuXG4vL1xudmFyIHNjcmlwdCA9IHtcbiAgbmFtZTogJ0JMb2FkaW5nJyxcbiAgcHJvcHM6IHtcbiAgICBhY3RpdmU6IEJvb2xlYW4sXG4gICAgcHJvZ3JhbW1hdGljOiBCb29sZWFuLFxuICAgIGNvbnRhaW5lcjogW09iamVjdCwgRnVuY3Rpb24sIEhUTUxFbGVtZW50XSxcbiAgICBpc0Z1bGxQYWdlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZmFkZSdcbiAgICB9LFxuICAgIGNhbkNhbmNlbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBvbkNhbmNlbDoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHt9XG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0FjdGl2ZTogdGhpcy5hY3RpdmUgfHwgZmFsc2VcbiAgICB9O1xuICB9LFxuICB3YXRjaDoge1xuICAgIGFjdGl2ZTogZnVuY3Rpb24gYWN0aXZlKHZhbHVlKSB7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gdmFsdWU7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqXHJcbiAgICAqIENsb3NlIHRoZSBNb2RhbCBpZiBjYW5DYW5jZWwuXHJcbiAgICAqL1xuICAgIGNhbmNlbDogZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgaWYgKCF0aGlzLmNhbkNhbmNlbCB8fCAhdGhpcy5pc0FjdGl2ZSkgcmV0dXJuO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogRW1pdCBldmVudHMsIGFuZCBkZXN0cm95IG1vZGFsIGlmIGl0J3MgcHJvZ3JhbW1hdGljLlxyXG4gICAgKi9cbiAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLm9uQ2FuY2VsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLiRlbWl0KCdjbG9zZScpO1xuICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOmFjdGl2ZScsIGZhbHNlKTsgLy8gVGltZW91dCBmb3IgdGhlIGFuaW1hdGlvbiBjb21wbGV0ZSBiZWZvcmUgZGVzdHJveWluZ1xuXG4gICAgICBpZiAodGhpcy5wcm9ncmFtbWF0aWMpIHtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy4kZGVzdHJveSgpO1xuXG4gICAgICAgICAgcmVtb3ZlRWxlbWVudChfdGhpcy4kZWwpO1xuICAgICAgICB9LCAxNTApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogS2V5cHJlc3MgZXZlbnQgdGhhdCBpcyBib3VuZCB0byB0aGUgZG9jdW1lbnQuXHJcbiAgICAqL1xuICAgIGtleVByZXNzOiBmdW5jdGlvbiBrZXlQcmVzcyhldmVudCkge1xuICAgICAgLy8gRXNjIGtleVxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDI3KSB0aGlzLmNhbmNlbCgpO1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5rZXlQcmVzcyk7XG4gICAgfVxuICB9LFxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQoKSB7XG4gICAgLy8gSW5zZXJ0IHRoZSBMb2FkaW5nIGNvbXBvbmVudCBpbiBib2R5IHRhZ1xuICAgIC8vIG9ubHkgaWYgaXQncyBwcm9ncmFtbWF0aWNcbiAgICBpZiAodGhpcy5wcm9ncmFtbWF0aWMpIHtcbiAgICAgIGlmICghdGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLiRlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmlzRnVsbFBhZ2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy4kZWwpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICBpZiAodGhpcy5wcm9ncmFtbWF0aWMpIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuICB9LFxuICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmtleVByZXNzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCd0cmFuc2l0aW9uJyx7YXR0cnM6e1wibmFtZVwiOl92bS5hbmltYXRpb259fSxbKF92bS5pc0FjdGl2ZSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibG9hZGluZy1vdmVybGF5IGlzLWFjdGl2ZVwiLGNsYXNzOnsgJ2lzLWZ1bGwtcGFnZSc6IF92bS5pc0Z1bGxQYWdlIH19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJsb2FkaW5nLWJhY2tncm91bmRcIixvbjp7XCJjbGlja1wiOl92bS5jYW5jZWx9fSksX3ZtLl92KFwiIFwiKSxfdm0uX3QoXCJkZWZhdWx0XCIsW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImxvYWRpbmctaWNvblwifSldKV0sMik6X3ZtLl9lKCldKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBMb2FkaW5nID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgTG9hZGluZ1Byb2dyYW1tYXRpYyA9IHtcbiAgb3BlbjogZnVuY3Rpb24gb3BlbihwYXJhbXMpIHtcbiAgICB2YXIgZGVmYXVsdFBhcmFtID0ge1xuICAgICAgcHJvZ3JhbW1hdGljOiB0cnVlXG4gICAgfTtcbiAgICB2YXIgcHJvcHNEYXRhID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0UGFyYW0sIHBhcmFtcyk7XG4gICAgdmFyIHZtID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZ1ZSA/IHdpbmRvdy5WdWUgOiBWdWU7XG4gICAgdmFyIExvYWRpbmdDb21wb25lbnQgPSB2bS5leHRlbmQoTG9hZGluZyk7XG4gICAgcmV0dXJuIG5ldyBMb2FkaW5nQ29tcG9uZW50KHtcbiAgICAgIGVsOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgIHByb3BzRGF0YTogcHJvcHNEYXRhXG4gICAgfSk7XG4gIH1cbn07XG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgTG9hZGluZyk7XG4gICAgcmVnaXN0ZXJDb21wb25lbnRQcm9ncmFtbWF0aWMoVnVlLCAnbG9hZGluZycsIExvYWRpbmdQcm9ncmFtbWF0aWMpO1xuICB9XG59O1xudXNlKFBsdWdpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbjtcbmV4cG9ydCB7IExvYWRpbmcsIExvYWRpbmdQcm9ncmFtbWF0aWMgfTtcbiIsImltcG9ydCB7IF8gYXMgX2RlZmluZVByb3BlcnR5IH0gZnJvbSAnLi9jaHVuay1kNjIwMDA4Ny5qcyc7XG5pbXBvcnQgJy4vY2h1bmstOWUzMjA3Y2MuanMnO1xuaW1wb3J0IHsgSSBhcyBJY29uIH0gZnJvbSAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQk1lbnUnXG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fID0gc2NyaXB0O1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJtZW51XCJ9LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBNZW51ID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgc2NyaXB0JDEgPSB7XG4gIG5hbWU6ICdCTWVudUxpc3QnLFxuICBmdW5jdGlvbmFsOiB0cnVlLFxuICBwcm9wczoge1xuICAgIGxhYmVsOiBTdHJpbmcsXG4gICAgaWNvbjogU3RyaW5nLFxuICAgIGljb25QYWNrOiBTdHJpbmdcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoY3JlYXRlRWxlbWVudCwgY29udGV4dCkge1xuICAgIHZhciB2bGFiZWwgPSBudWxsO1xuICAgIHZhciBzbG90cyA9IGNvbnRleHQuc2xvdHMoKTtcblxuICAgIGlmIChjb250ZXh0LnByb3BzLmxhYmVsIHx8IHNsb3RzLmxhYmVsKSB7XG4gICAgICB2bGFiZWwgPSBjcmVhdGVFbGVtZW50KCdwJywge1xuICAgICAgICBhdHRyczoge1xuICAgICAgICAgICdjbGFzcyc6ICdtZW51LWxhYmVsJ1xuICAgICAgICB9XG4gICAgICB9LCBjb250ZXh0LnByb3BzLmxhYmVsID8gY29udGV4dC5wcm9wcy5pY29uID8gW2NyZWF0ZUVsZW1lbnQoJ2ItaWNvbicsIHtcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAnaWNvbic6IGNvbnRleHQucHJvcHMuaWNvbixcbiAgICAgICAgICAncGFjayc6IGNvbnRleHQucHJvcHMuaWNvblBhY2ssXG4gICAgICAgICAgJ3NpemUnOiAnaXMtc21hbGwnXG4gICAgICAgIH1cbiAgICAgIH0pLCBjcmVhdGVFbGVtZW50KCdzcGFuJywge30sIGNvbnRleHQucHJvcHMubGFiZWwpXSA6IGNvbnRleHQucHJvcHMubGFiZWwgOiBzbG90cy5sYWJlbCk7XG4gICAgfVxuXG4gICAgdmFyIHZub2RlID0gY3JlYXRlRWxlbWVudCgndWwnLCB7XG4gICAgICBhdHRyczoge1xuICAgICAgICAnY2xhc3MnOiAnbWVudS1saXN0J1xuICAgICAgfVxuICAgIH0sIHNsb3RzLmRlZmF1bHQpO1xuICAgIHJldHVybiB2bGFiZWwgPyBbdmxhYmVsLCB2bm9kZV0gOiB2bm9kZTtcbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyQxID0gc2NyaXB0JDE7XG5cbi8qIHRlbXBsYXRlICovXG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMSA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSA9IHVuZGVmaW5lZDtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgTWVudUxpc3QgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7fSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kMSxcbiAgICBfX3Z1ZV9zY3JpcHRfXyQxLFxuICAgIF9fdnVlX3Njb3BlX2lkX18kMSxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEsXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgc2NyaXB0JDIgPSB7XG4gIG5hbWU6ICdCTWVudUl0ZW0nLFxuICBjb21wb25lbnRzOiBfZGVmaW5lUHJvcGVydHkoe30sIEljb24ubmFtZSwgSWNvbiksXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiB7XG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICBhY3RpdmU6IEJvb2xlYW4sXG4gICAgZXhwYW5kZWQ6IEJvb2xlYW4sXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgaWNvblBhY2s6IFN0cmluZyxcbiAgICBpY29uOiBTdHJpbmcsXG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZmFkZSdcbiAgICB9LFxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2EnLFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFsnYScsICdyb3V0ZXItbGluaycsICdudXh0LWxpbmsnLCAnbi1saW5rJywgJ051eHRMaW5rJywgJ05MaW5rJ10uaW5kZXhPZih2YWx1ZSkgPj0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5ld0FjdGl2ZTogdGhpcy5hY3RpdmUsXG4gICAgICBuZXdFeHBhbmRlZDogdGhpcy5leHBhbmRlZFxuICAgIH07XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgYWN0aXZlOiBmdW5jdGlvbiBhY3RpdmUodmFsdWUpIHtcbiAgICAgIHRoaXMubmV3QWN0aXZlID0gdmFsdWU7XG4gICAgfSxcbiAgICBleHBhbmRlZDogZnVuY3Rpb24gZXhwYW5kZWQodmFsdWUpIHtcbiAgICAgIHRoaXMubmV3RXhwYW5kZWQgPSB2YWx1ZTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgdGhpcy5yZXNldCh0aGlzLiRwYXJlbnQpO1xuICAgICAgdGhpcy5uZXdFeHBhbmRlZCA9IHRydWU7XG4gICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6ZXhwYW5kZWQnLCB0aGlzLm5ld0FjdGl2ZSk7XG4gICAgICB0aGlzLm5ld0FjdGl2ZSA9IHRydWU7XG4gICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6YWN0aXZlJywgdGhpcy5uZXdBY3RpdmUpO1xuICAgICAgdGhpcy4kZW1pdCgnY2xpY2snLCBldmVudCk7XG4gICAgfSxcbiAgICByZXNldDogZnVuY3Rpb24gcmVzZXQocGFyZW50KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgaXRlbXMgPSBwYXJlbnQuJGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gYy5uYW1lID09PSBfdGhpcy5uYW1lO1xuICAgICAgfSk7XG4gICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtICE9PSBfdGhpcykge1xuICAgICAgICAgIF90aGlzLnJlc2V0KGl0ZW0pO1xuXG4gICAgICAgICAgaXRlbS5uZXdFeHBhbmRlZCA9IGZhbHNlO1xuICAgICAgICAgIGl0ZW0uJGVtaXQoJ3VwZGF0ZTpleHBhbmRlZCcsIGl0ZW0ubmV3QWN0aXZlKTtcbiAgICAgICAgICBpdGVtLm5ld0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIGl0ZW0uJGVtaXQoJ3VwZGF0ZTphY3RpdmUnLCBpdGVtLm5ld0FjdGl2ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyQyID0gc2NyaXB0JDI7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18kMSA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2xpJyxbX2MoX3ZtLnRhZyxfdm0uX2Ioe3RhZzpcImNvbXBvbmVudFwiLGNsYXNzOntcbiAgICAgICAgICAgICdpcy1hY3RpdmUnOiBfdm0ubmV3QWN0aXZlLFxuICAgICAgICAgICAgJ2lzLWRpc2FibGVkJzogX3ZtLmRpc2FibGVkXG4gICAgICAgIH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vbkNsaWNrKCRldmVudCk7fX19LCdjb21wb25lbnQnLF92bS4kYXR0cnMsZmFsc2UpLFsoX3ZtLmljb24pP19jKCdiLWljb24nLHthdHRyczp7XCJpY29uXCI6X3ZtLmljb24sXCJwYWNrXCI6X3ZtLmljb25QYWNrLFwic2l6ZVwiOlwiaXMtc21hbGxcIn19KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLChfdm0ubGFiZWwpP19jKCdzcGFuJyxbX3ZtLl92KF92bS5fcyhfdm0ubGFiZWwpKV0pOl92bS5fdChcImxhYmVsXCIsbnVsbCx7ZXhwYW5kZWQ6X3ZtLm5ld0V4cGFuZGVkLGFjdGl2ZTpfdm0ubmV3QWN0aXZlfSldLDIpLF92bS5fdihcIiBcIiksKF92bS4kc2xvdHMuZGVmYXVsdCk/W19jKCd0cmFuc2l0aW9uJyx7YXR0cnM6e1wibmFtZVwiOl92bS5hbmltYXRpb259fSxbX2MoJ3VsJyx7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOihfdm0ubmV3RXhwYW5kZWQpLGV4cHJlc3Npb246XCJuZXdFeHBhbmRlZFwifV19LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKV0pXTpfdm0uX2UoKV0sMil9O1xudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDEgPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kMiA9IHVuZGVmaW5lZDtcbiAgLyogc2NvcGVkICovXG4gIGNvbnN0IF9fdnVlX3Njb3BlX2lkX18kMiA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQyID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQyID0gZmFsc2U7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIE1lbnVJdGVtID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fJDEsIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18kMSB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyQyLFxuICAgIF9fdnVlX3NjcmlwdF9fJDIsXG4gICAgX192dWVfc2NvcGVfaWRfXyQyLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQyLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMixcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBNZW51KTtcbiAgICByZWdpc3RlckNvbXBvbmVudChWdWUsIE1lbnVMaXN0KTtcbiAgICByZWdpc3RlckNvbXBvbmVudChWdWUsIE1lbnVJdGVtKTtcbiAgfVxufTtcbnVzZShQbHVnaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBQbHVnaW47XG5leHBvcnQgeyBNZW51LCBNZW51SXRlbSwgTWVudUxpc3QgfTtcbiIsImltcG9ydCB7IF8gYXMgX2RlZmluZVByb3BlcnR5IH0gZnJvbSAnLi9jaHVuay1kNjIwMDA4Ny5qcyc7XG5pbXBvcnQgeyBJIGFzIEljb24gfSBmcm9tICcuL2NodW5rLWU4NGI0MDQ3LmpzJztcblxudmFyIE1lc3NhZ2VNaXhpbiA9IHtcbiAgY29tcG9uZW50czogX2RlZmluZVByb3BlcnR5KHt9LCBJY29uLm5hbWUsIEljb24pLFxuICBwcm9wczoge1xuICAgIGFjdGl2ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgY2xvc2FibGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBtZXNzYWdlOiBTdHJpbmcsXG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGhhc0ljb246IEJvb2xlYW4sXG4gICAgc2l6ZTogU3RyaW5nLFxuICAgIGljb25QYWNrOiBTdHJpbmcsXG4gICAgaWNvblNpemU6IFN0cmluZyxcbiAgICBhdXRvQ2xvc2U6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgZHVyYXRpb246IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDIwMDBcbiAgICB9XG4gIH0sXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzQWN0aXZlOiB0aGlzLmFjdGl2ZVxuICAgIH07XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgYWN0aXZlOiBmdW5jdGlvbiBhY3RpdmUodmFsdWUpIHtcbiAgICAgIHRoaXMuaXNBY3RpdmUgPSB2YWx1ZTtcbiAgICB9LFxuICAgIGlzQWN0aXZlOiBmdW5jdGlvbiBpc0FjdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0QXV0b0Nsb3NlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy50aW1lcikge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICAvKipcclxuICAgICAqIEljb24gbmFtZSAoTURJKSBiYXNlZCBvbiB0eXBlLlxyXG4gICAgICovXG4gICAgaWNvbjogZnVuY3Rpb24gaWNvbigpIHtcbiAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2lzLWluZm8nOlxuICAgICAgICAgIHJldHVybiAnaW5mb3JtYXRpb24nO1xuXG4gICAgICAgIGNhc2UgJ2lzLXN1Y2Nlc3MnOlxuICAgICAgICAgIHJldHVybiAnY2hlY2stY2lyY2xlJztcblxuICAgICAgICBjYXNlICdpcy13YXJuaW5nJzpcbiAgICAgICAgICByZXR1cm4gJ2FsZXJ0JztcblxuICAgICAgICBjYXNlICdpcy1kYW5nZXInOlxuICAgICAgICAgIHJldHVybiAnYWxlcnQtY2lyY2xlJztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIC8qKlxyXG4gICAgICogQ2xvc2UgdGhlIE1lc3NhZ2UgYW5kIGVtaXQgZXZlbnRzLlxyXG4gICAgICovXG4gICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy4kZW1pdCgnY2xvc2UnKTtcbiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTphY3RpdmUnLCBmYWxzZSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogU2V0IHRpbWVyIHRvIGF1dG8gY2xvc2UgbWVzc2FnZVxyXG4gICAgICovXG4gICAgc2V0QXV0b0Nsb3NlOiBmdW5jdGlvbiBzZXRBdXRvQ2xvc2UoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5hdXRvQ2xvc2UpIHtcbiAgICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChfdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMuZHVyYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICB0aGlzLnNldEF1dG9DbG9zZSgpO1xuICB9XG59O1xuXG5leHBvcnQgeyBNZXNzYWdlTWl4aW4gYXMgTSB9O1xuIiwiaW1wb3J0ICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgJy4vY2h1bmstZTg0YjQwNDcuanMnO1xuaW1wb3J0IHsgXyBhcyBfX3Z1ZV9ub3JtYWxpemVfXywgciBhcyByZWdpc3RlckNvbXBvbmVudCwgdSBhcyB1c2UgfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcbmltcG9ydCB7IE0gYXMgTWVzc2FnZU1peGluIH0gZnJvbSAnLi9jaHVuay1lZGQ4ZmY5MS5qcyc7XG5cbi8vXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQk1lc3NhZ2UnLFxuICBtaXhpbnM6IFtNZXNzYWdlTWl4aW5dLFxuICBwcm9wczoge1xuICAgIGFyaWFDbG9zZUxhYmVsOiBTdHJpbmdcbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmV3SWNvblNpemU6IHRoaXMuaWNvblNpemUgfHwgdGhpcy5zaXplIHx8ICdpcy1sYXJnZSdcbiAgICB9O1xuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fID0gc2NyaXB0O1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygndHJhbnNpdGlvbicse2F0dHJzOntcIm5hbWVcIjpcImZhZGVcIn19LFsoX3ZtLmlzQWN0aXZlKT9fYygnYXJ0aWNsZScse3N0YXRpY0NsYXNzOlwibWVzc2FnZVwiLGNsYXNzOltfdm0udHlwZSwgX3ZtLnNpemVdfSxbKF92bS50aXRsZSk/X2MoJ2hlYWRlcicse3N0YXRpY0NsYXNzOlwibWVzc2FnZS1oZWFkZXJcIn0sW19jKCdwJyxbX3ZtLl92KF92bS5fcyhfdm0udGl0bGUpKV0pLF92bS5fdihcIiBcIiksKF92bS5jbG9zYWJsZSk/X2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiZGVsZXRlXCIsYXR0cnM6e1widHlwZVwiOlwiYnV0dG9uXCIsXCJhcmlhLWxhYmVsXCI6X3ZtLmFyaWFDbG9zZUxhYmVsfSxvbjp7XCJjbGlja1wiOl92bS5jbG9zZX19KTpfdm0uX2UoKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczpcIm1lc3NhZ2UtYm9keVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibWVkaWFcIn0sWyhfdm0uaWNvbiAmJiBfdm0uaGFzSWNvbik/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibWVkaWEtbGVmdFwifSxbX2MoJ2ItaWNvbicse2NsYXNzOl92bS50eXBlLGF0dHJzOntcImljb25cIjpfdm0uaWNvbixcInBhY2tcIjpfdm0uaWNvblBhY2ssXCJib3RoXCI6XCJcIixcInNpemVcIjpfdm0ubmV3SWNvblNpemV9fSldLDEpOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibWVkaWEtY29udGVudFwifSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMildKV0pXSk6X3ZtLl9lKCldKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBNZXNzYWdlID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgTWVzc2FnZSk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuZXhwb3J0IHsgTWVzc2FnZSB9O1xuIiwiaW1wb3J0ICcuL2NodW5rLWU1ZmNlNDhmLmpzJztcbmltcG9ydCAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCBhIGFzIHJlZ2lzdGVyQ29tcG9uZW50UHJvZ3JhbW1hdGljLCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgTSBhcyBNb2RhbCB9IGZyb20gJy4vY2h1bmstYTVlYTcwZDAuanMnO1xuZXhwb3J0IHsgTSBhcyBNb2RhbCB9IGZyb20gJy4vY2h1bmstYTVlYTcwZDAuanMnO1xuXG52YXIgTW9kYWxQcm9ncmFtbWF0aWMgPSB7XG4gIG9wZW46IGZ1bmN0aW9uIG9wZW4ocGFyYW1zKSB7XG4gICAgdmFyIGNvbnRlbnQ7XG4gICAgdmFyIHBhcmVudDtcbiAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBwYXJhbXM7XG4gICAgdmFyIGRlZmF1bHRQYXJhbSA9IHtcbiAgICAgIHByb2dyYW1tYXRpYzogdHJ1ZSxcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICB9O1xuXG4gICAgaWYgKHBhcmFtcy5wYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmFtcy5wYXJlbnQ7XG4gICAgICBkZWxldGUgcGFyYW1zLnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXIgcHJvcHNEYXRhID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0UGFyYW0sIHBhcmFtcyk7XG4gICAgdmFyIHZtID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZ1ZSA/IHdpbmRvdy5WdWUgOiBWdWU7XG4gICAgdmFyIE1vZGFsQ29tcG9uZW50ID0gdm0uZXh0ZW5kKE1vZGFsKTtcbiAgICByZXR1cm4gbmV3IE1vZGFsQ29tcG9uZW50KHtcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgZWw6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgcHJvcHNEYXRhOiBwcm9wc0RhdGFcbiAgICB9KTtcbiAgfVxufTtcbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBNb2RhbCk7XG4gICAgcmVnaXN0ZXJDb21wb25lbnRQcm9ncmFtbWF0aWMoVnVlLCAnbW9kYWwnLCBNb2RhbFByb2dyYW1tYXRpYyk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuZXhwb3J0IHsgTW9kYWxQcm9ncmFtbWF0aWMgfTtcbiIsImltcG9ydCB7IHIgYXMgcmVtb3ZlRWxlbWVudCB9IGZyb20gJy4vY2h1bmstZTVmY2U0OGYuanMnO1xuaW1wb3J0IHsgYyBhcyBjb25maWcgfSBmcm9tICcuL2NodW5rLTllMzIwN2NjLmpzJztcblxudmFyIE5vdGljZU1peGluID0ge1xuICBwcm9wczoge1xuICAgIHR5cGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdpcy1kYXJrJ1xuICAgIH0sXG4gICAgbWVzc2FnZTogU3RyaW5nLFxuICAgIGR1cmF0aW9uOiBOdW1iZXIsXG4gICAgcXVldWU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIHBvc2l0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaXMtdG9wJyxcbiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbJ2lzLXRvcC1yaWdodCcsICdpcy10b3AnLCAnaXMtdG9wLWxlZnQnLCAnaXMtYm90dG9tLXJpZ2h0JywgJ2lzLWJvdHRvbScsICdpcy1ib3R0b20tbGVmdCddLmluZGV4T2YodmFsdWUpID4gLTE7XG4gICAgICB9XG4gICAgfSxcbiAgICBjb250YWluZXI6IFN0cmluZ1xuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgICBwYXJlbnRUb3A6IG51bGwsXG4gICAgICBwYXJlbnRCb3R0b206IG51bGwsXG4gICAgICBuZXdDb250YWluZXI6IHRoaXMuY29udGFpbmVyIHx8IGNvbmZpZy5kZWZhdWx0Q29udGFpbmVyRWxlbWVudFxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgY29ycmVjdFBhcmVudDogZnVuY3Rpb24gY29ycmVjdFBhcmVudCgpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5wb3NpdGlvbikge1xuICAgICAgICBjYXNlICdpcy10b3AtcmlnaHQnOlxuICAgICAgICBjYXNlICdpcy10b3AnOlxuICAgICAgICBjYXNlICdpcy10b3AtbGVmdCc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50VG9wO1xuXG4gICAgICAgIGNhc2UgJ2lzLWJvdHRvbS1yaWdodCc6XG4gICAgICAgIGNhc2UgJ2lzLWJvdHRvbSc6XG4gICAgICAgIGNhc2UgJ2lzLWJvdHRvbS1sZWZ0JzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnRCb3R0b207XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uOiBmdW5jdGlvbiB0cmFuc2l0aW9uKCkge1xuICAgICAgc3dpdGNoICh0aGlzLnBvc2l0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2lzLXRvcC1yaWdodCc6XG4gICAgICAgIGNhc2UgJ2lzLXRvcCc6XG4gICAgICAgIGNhc2UgJ2lzLXRvcC1sZWZ0JzpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW50ZXI6ICdmYWRlSW5Eb3duJyxcbiAgICAgICAgICAgIGxlYXZlOiAnZmFkZU91dCdcbiAgICAgICAgICB9O1xuXG4gICAgICAgIGNhc2UgJ2lzLWJvdHRvbS1yaWdodCc6XG4gICAgICAgIGNhc2UgJ2lzLWJvdHRvbSc6XG4gICAgICAgIGNhc2UgJ2lzLWJvdHRvbS1sZWZ0JzpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW50ZXI6ICdmYWRlSW5VcCcsXG4gICAgICAgICAgICBsZWF2ZTogJ2ZhZGVPdXQnXG4gICAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBzaG91bGRRdWV1ZTogZnVuY3Rpb24gc2hvdWxkUXVldWUoKSB7XG4gICAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlICE9PSB1bmRlZmluZWQgPyB0aGlzLnF1ZXVlIDogY29uZmlnLmRlZmF1bHROb3RpY2VRdWV1ZTtcbiAgICAgIGlmICghcXVldWUpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudFRvcC5jaGlsZEVsZW1lbnRDb3VudCA+IDAgfHwgdGhpcy5wYXJlbnRCb3R0b20uY2hpbGRFbGVtZW50Q291bnQgPiAwO1xuICAgIH0sXG4gICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlOyAvLyBUaW1lb3V0IGZvciB0aGUgYW5pbWF0aW9uIGNvbXBsZXRlIGJlZm9yZSBkZXN0cm95aW5nXG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy4kZGVzdHJveSgpO1xuXG4gICAgICAgIHJlbW92ZUVsZW1lbnQoX3RoaXMuJGVsKTtcbiAgICAgIH0sIDE1MCk7XG4gICAgfSxcbiAgICBzaG93Tm90aWNlOiBmdW5jdGlvbiBzaG93Tm90aWNlKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLnNob3VsZFF1ZXVlKCkpIHtcbiAgICAgICAgLy8gQ2FsbCByZWN1cnNpdmVseSBpZiBzaG91bGQgcXVldWVcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5zaG93Tm90aWNlKCk7XG4gICAgICAgIH0sIDI1MCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb3JyZWN0UGFyZW50Lmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJiZWdpbicsIHRoaXMuJGVsKTtcbiAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgICBpZiAoIXRoaXMuaW5kZWZpbml0ZSkge1xuICAgICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5jbG9zZSgpO1xuICAgICAgICB9LCB0aGlzLm5ld0R1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldHVwQ29udGFpbmVyOiBmdW5jdGlvbiBzZXR1cENvbnRhaW5lcigpIHtcbiAgICAgIHRoaXMucGFyZW50VG9wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5vdGljZXMuaXMtdG9wJyk7XG4gICAgICB0aGlzLnBhcmVudEJvdHRvbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ub3RpY2VzLmlzLWJvdHRvbScpO1xuICAgICAgaWYgKHRoaXMucGFyZW50VG9wICYmIHRoaXMucGFyZW50Qm90dG9tKSByZXR1cm47XG5cbiAgICAgIGlmICghdGhpcy5wYXJlbnRUb3ApIHtcbiAgICAgICAgdGhpcy5wYXJlbnRUb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5wYXJlbnRUb3AuY2xhc3NOYW1lID0gJ25vdGljZXMgaXMtdG9wJztcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnBhcmVudEJvdHRvbSkge1xuICAgICAgICB0aGlzLnBhcmVudEJvdHRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLnBhcmVudEJvdHRvbS5jbGFzc05hbWUgPSAnbm90aWNlcyBpcy1ib3R0b20nO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm5ld0NvbnRhaW5lcikgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnBhcmVudFRvcCk7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5wYXJlbnRCb3R0b20pO1xuXG4gICAgICBpZiAodGhpcy5uZXdDb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5wYXJlbnRUb3AuY2xhc3NMaXN0LmFkZCgnaGFzLWN1c3RvbS1jb250YWluZXInKTtcbiAgICAgICAgdGhpcy5wYXJlbnRCb3R0b20uY2xhc3NMaXN0LmFkZCgnaGFzLWN1c3RvbS1jb250YWluZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCgpIHtcbiAgICB0aGlzLnNldHVwQ29udGFpbmVyKCk7XG4gIH0sXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgdGhpcy5zaG93Tm90aWNlKCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IE5vdGljZU1peGluIGFzIE4gfTtcbiIsImltcG9ydCAnLi9jaHVuay1kNjIwMDA4Ny5qcyc7XG5pbXBvcnQgJy4vY2h1bmstZTVmY2U0OGYuanMnO1xuaW1wb3J0IHsgYyBhcyBjb25maWcgfSBmcm9tICcuL2NodW5rLTllMzIwN2NjLmpzJztcbmltcG9ydCAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCBhIGFzIHJlZ2lzdGVyQ29tcG9uZW50UHJvZ3JhbW1hdGljLCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgTSBhcyBNZXNzYWdlTWl4aW4gfSBmcm9tICcuL2NodW5rLWVkZDhmZjkxLmpzJztcbmltcG9ydCB7IE4gYXMgTm90aWNlTWl4aW4gfSBmcm9tICcuL2NodW5rLWRhZWFjODUyLmpzJztcblxuLy9cbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdCTm90aWZpY2F0aW9uJyxcbiAgbWl4aW5zOiBbTWVzc2FnZU1peGluXSxcbiAgcHJvcHM6IHtcbiAgICBwb3NpdGlvbjogU3RyaW5nLFxuICAgIGFyaWFDbG9zZUxhYmVsOiBTdHJpbmdcbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3RyYW5zaXRpb24nLHthdHRyczp7XCJuYW1lXCI6XCJmYWRlXCJ9fSxbX2MoJ2FydGljbGUnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KF92bS5pc0FjdGl2ZSksZXhwcmVzc2lvbjpcImlzQWN0aXZlXCJ9XSxzdGF0aWNDbGFzczpcIm5vdGlmaWNhdGlvblwiLGNsYXNzOltfdm0udHlwZSwgX3ZtLnBvc2l0aW9uXX0sWyhfdm0uY2xvc2FibGUpP19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImRlbGV0ZVwiLGF0dHJzOntcInR5cGVcIjpcImJ1dHRvblwiLFwiYXJpYS1sYWJlbFwiOl92bS5hcmlhQ2xvc2VMYWJlbH0sb246e1wiY2xpY2tcIjpfdm0uY2xvc2V9fSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJtZWRpYVwifSxbKF92bS5pY29uICYmIF92bS5oYXNJY29uKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJtZWRpYS1sZWZ0XCJ9LFtfYygnYi1pY29uJyx7YXR0cnM6e1wiaWNvblwiOl92bS5pY29uLFwicGFja1wiOl92bS5pY29uUGFjayxcImJvdGhcIjpcIlwiLFwic2l6ZVwiOlwiaXMtbGFyZ2VcIixcImFyaWEtaGlkZGVuXCI6XCJcIn19KV0sMSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJtZWRpYS1jb250ZW50XCJ9LFsoX3ZtLm1lc3NhZ2UpP19jKCdwJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0XCIsZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKF92bS5tZXNzYWdlKX19KTpfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKV0pXSldKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBOb3RpZmljYXRpb24gPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbi8vXG52YXIgc2NyaXB0JDEgPSB7XG4gIG5hbWU6ICdCTm90aWZpY2F0aW9uTm90aWNlJyxcbiAgbWl4aW5zOiBbTm90aWNlTWl4aW5dLFxuICBwcm9wczoge1xuICAgIGluZGVmaW5pdGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmV3RHVyYXRpb246IHRoaXMuZHVyYXRpb24gfHwgY29uZmlnLmRlZmF1bHROb3RpZmljYXRpb25EdXJhdGlvblxuICAgIH07XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18kMSA9IHNjcmlwdCQxO1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fJDEgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdiLW5vdGlmaWNhdGlvbicsX3ZtLl9iKHtvbjp7XCJjbG9zZVwiOl92bS5jbG9zZX19LCdiLW5vdGlmaWNhdGlvbicsX3ZtLiRvcHRpb25zLnByb3BzRGF0YSxmYWxzZSkpfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQxID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMSA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBOb3RpZmljYXRpb25Ob3RpY2UgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18kMSwgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQxIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fJDEsXG4gICAgX192dWVfc2NyaXB0X18kMSxcbiAgICBfX3Z1ZV9zY29wZV9pZF9fJDEsXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDEsXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQxLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxudmFyIE5vdGlmaWNhdGlvblByb2dyYW1tYXRpYyA9IHtcbiAgb3BlbjogZnVuY3Rpb24gb3BlbihwYXJhbXMpIHtcbiAgICB2YXIgbWVzc2FnZTtcbiAgICB2YXIgcGFyZW50O1xuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAnc3RyaW5nJykgbWVzc2FnZSA9IHBhcmFtcztcbiAgICB2YXIgZGVmYXVsdFBhcmFtID0ge1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIHBvc2l0aW9uOiBjb25maWcuZGVmYXVsdE5vdGlmaWNhdGlvblBvc2l0aW9uIHx8ICdpcy10b3AtcmlnaHQnXG4gICAgfTtcblxuICAgIGlmIChwYXJhbXMucGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJhbXMucGFyZW50O1xuICAgICAgZGVsZXRlIHBhcmFtcy5wYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzRGF0YSA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdFBhcmFtLCB0eXBlb2YgcGFyYW1zID09PSAnc3RyaW5nJyA/IHt9IDogcGFyYW1zKTtcbiAgICB2YXIgdm0gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVnVlID8gd2luZG93LlZ1ZSA6IFZ1ZTtcbiAgICB2YXIgTm90aWZpY2F0aW9uTm90aWNlQ29tcG9uZW50ID0gdm0uZXh0ZW5kKE5vdGlmaWNhdGlvbk5vdGljZSk7XG4gICAgcmV0dXJuIG5ldyBOb3RpZmljYXRpb25Ob3RpY2VDb21wb25lbnQoe1xuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBlbDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICBwcm9wc0RhdGE6IHByb3BzRGF0YVxuICAgIH0pO1xuICB9XG59O1xudmFyIFBsdWdpbiA9IHtcbiAgaW5zdGFsbDogZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcbiAgICByZWdpc3RlckNvbXBvbmVudChWdWUsIE5vdGlmaWNhdGlvbik7XG4gICAgcmVnaXN0ZXJDb21wb25lbnRQcm9ncmFtbWF0aWMoVnVlLCAnbm90aWZpY2F0aW9uJywgTm90aWZpY2F0aW9uUHJvZ3JhbW1hdGljKTtcbiAgfVxufTtcbnVzZShQbHVnaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBQbHVnaW47XG5leHBvcnQgeyBOb3RpZmljYXRpb24sIE5vdGlmaWNhdGlvblByb2dyYW1tYXRpYyB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfZGVmaW5lUHJvcGVydHkgfSBmcm9tICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCB7IF8gYXMgX192dWVfbm9ybWFsaXplX18sIHIgYXMgcmVnaXN0ZXJDb21wb25lbnQsIHUgYXMgdXNlIH0gZnJvbSAnLi9jaHVuay1jY2E4OGRiOC5qcyc7XG5cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xudmFyIHNjcmlwdCA9IHtcbiAgbmFtZTogJ05hdmJhckJ1cmdlcicsXG4gIHByb3BzOiB7XG4gICAgaXNPcGVuZWQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2EnLHtzdGF0aWNDbGFzczpcIm5hdmJhci1idXJnZXIgYnVyZ2VyXCIsY2xhc3M6eyAnaXMtYWN0aXZlJzogX3ZtLmlzT3BlbmVkIH0sYXR0cnM6e1wicm9sZVwiOlwiYnV0dG9uXCIsXCJhcmlhLWxhYmVsXCI6XCJtZW51XCIsXCJhcmlhLWV4cGFuZGVkXCI6X3ZtLmlzT3BlbmVkfX0sW19jKCdzcGFuJyx7YXR0cnM6e1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIn19KSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7YXR0cnM6e1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIn19KSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7YXR0cnM6e1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIn19KV0pfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyA9IHVuZGVmaW5lZDtcbiAgLyogc2NvcGVkICovXG4gIGNvbnN0IF9fdnVlX3Njb3BlX2lkX18gPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fID0gZmFsc2U7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIE5hdmJhckJ1cmdlciA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHsgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyxcbiAgICBfX3Z1ZV9zY3JpcHRfXyxcbiAgICBfX3Z1ZV9zY29wZV9pZF9fLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxudmFyIEZJWEVEX1RPUF9DTEFTUyA9ICdpcy1maXhlZC10b3AnO1xudmFyIEZJWEVEX0JPVFRPTV9DTEFTUyA9ICdpcy1maXhlZC1ib3R0b20nO1xudmFyIHNjcmlwdCQxID0ge1xuICBuYW1lOiAnQk5hdmJhcicsXG4gIGNvbXBvbmVudHM6IHtcbiAgICBOYXZiYXJCdXJnZXI6IE5hdmJhckJ1cmdlclxuICB9LFxuICBwcm9wczoge1xuICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0sXG4gICAgdHJhbnNwYXJlbnQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgZml4ZWRUb3A6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgZml4ZWRCb3R0b206IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgaXNBY3RpdmU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW50ZXJuYWxJc0FjdGl2ZTogdGhpcy5pc0FjdGl2ZVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgaXNPcGVuZWQ6IGZ1bmN0aW9uIGlzT3BlbmVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxJc0FjdGl2ZTtcbiAgICB9LFxuICAgIGNvbXB1dGVkQ2xhc3NlczogZnVuY3Rpb24gY29tcHV0ZWRDbGFzc2VzKCkge1xuICAgICAgcmV0dXJuIFt0aGlzLnR5cGUsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgRklYRURfVE9QX0NMQVNTLCB0aGlzLmZpeGVkVG9wKSwgX2RlZmluZVByb3BlcnR5KHt9LCBGSVhFRF9CT1RUT01fQ0xBU1MsIHRoaXMuZml4ZWRCb3R0b20pXTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgaXNBY3RpdmU6IHtcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoaXNBY3RpdmUpIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbElzQWN0aXZlID0gaXNBY3RpdmU7XG4gICAgICB9LFxuICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgfSxcbiAgICBmaXhlZFRvcDoge1xuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihpc1NldCkge1xuICAgICAgICB0aGlzLmNoZWNrSWZGaXhlZFByb3BlcnRpZXNBcmVDb2xsaWRpbmcoKTtcblxuICAgICAgICBpZiAoaXNTZXQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZXRCb2R5Q2xhc3MoRklYRURfVE9QX0NMQVNTKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVtb3ZlQm9keUNsYXNzKEZJWEVEX1RPUF9DTEFTUyk7XG4gICAgICB9LFxuICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgfSxcbiAgICBmaXhlZEJvdHRvbToge1xuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihpc1NldCkge1xuICAgICAgICB0aGlzLmNoZWNrSWZGaXhlZFByb3BlcnRpZXNBcmVDb2xsaWRpbmcoKTtcblxuICAgICAgICBpZiAoaXNTZXQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZXRCb2R5Q2xhc3MoRklYRURfQk9UVE9NX0NMQVNTKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVtb3ZlQm9keUNsYXNzKEZJWEVEX0JPVFRPTV9DTEFTUyk7XG4gICAgICB9LFxuICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgdG9nZ2xlQWN0aXZlOiBmdW5jdGlvbiB0b2dnbGVBY3RpdmUoKSB7XG4gICAgICB0aGlzLmludGVybmFsSXNBY3RpdmUgPSAhdGhpcy5pbnRlcm5hbElzQWN0aXZlO1xuICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOmlzQWN0aXZlJywgdGhpcy5pbnRlcm5hbElzQWN0aXZlKTtcbiAgICB9LFxuICAgIHNldEJvZHlDbGFzczogZnVuY3Rpb24gc2V0Qm9keUNsYXNzKGNsYXNzTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlQm9keUNsYXNzOiBmdW5jdGlvbiByZW1vdmVCb2R5Q2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGVja0lmRml4ZWRQcm9wZXJ0aWVzQXJlQ29sbGlkaW5nOiBmdW5jdGlvbiBjaGVja0lmRml4ZWRQcm9wZXJ0aWVzQXJlQ29sbGlkaW5nKCkge1xuICAgICAgdmFyIGFyZUNvbGxpZGluZyA9IHRoaXMuZml4ZWRUb3AgJiYgdGhpcy5maXhlZEJvdHRvbTtcblxuICAgICAgaWYgKGFyZUNvbGxpZGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBzaG91bGQgY2hvb3NlIGlmIHRoZSBCTmF2YmFyIGlzIGZpeGVkIGJvdHRvbSBvciBmaXhlZCB0b3AsIGJ1dCBub3QgYm90aCcpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbW92ZUJvZHlDbGFzcyhGSVhFRF9CT1RUT01fQ0xBU1MpO1xuICAgIHRoaXMucmVtb3ZlQm9keUNsYXNzKEZJWEVEX1RPUF9DTEFTUyk7XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18kMSA9IHNjcmlwdCQxO1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fJDEgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCduYXYnLHtzdGF0aWNDbGFzczpcIm5hdmJhclwiLGNsYXNzOl92bS5jb21wdXRlZENsYXNzZXMsYXR0cnM6e1wicm9sZVwiOlwibmF2aWdhdGlvblwiLFwiYXJpYS1sYWJlbFwiOlwibWFpbiBuYXZpZ2F0aW9uXCJ9fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibmF2YmFyLWJyYW5kXCJ9LFtfdm0uX3QoXCJicmFuZFwiKSxfdm0uX3YoXCIgXCIpLF92bS5fdChcImJ1cmdlclwiLFtfYygnbmF2YmFyLWJ1cmdlcicse2F0dHJzOntcImlzLW9wZW5lZFwiOl92bS5pc09wZW5lZH0sbmF0aXZlT246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS50b2dnbGVBY3RpdmUoJGV2ZW50KTt9fX0pXSxudWxsLHsgaXNPcGVuZWQ6IF92bS5pc09wZW5lZCwgdG9nZ2xlQWN0aXZlOiBfdm0udG9nZ2xlQWN0aXZlIH0pXSwyKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcIm5hdmJhci1tZW51XCIsY2xhc3M6eyAnaXMtYWN0aXZlJzogX3ZtLmlzT3BlbmVkIH19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJuYXZiYXItc3RhcnRcIn0sW192bS5fdChcInN0YXJ0XCIpXSwyKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcIm5hdmJhci1lbmRcIn0sW192bS5fdChcImVuZFwiKV0sMildKV0pfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQxID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMSA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBOYXZiYXIgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18kMSwgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQxIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fJDEsXG4gICAgX192dWVfc2NyaXB0X18kMSxcbiAgICBfX3Z1ZV9zY29wZV9pZF9fJDEsXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDEsXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQxLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbnZhciBzY3JpcHQkMiA9IHtcbiAgbmFtZTogJ0JOYXZiYXJJdGVtJyxcbiAgcHJvcHM6IHtcbiAgICB0YWc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdhJ1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyQyID0gc2NyaXB0JDI7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18kMiA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoX3ZtLnRhZyxfdm0uX2Ioe3RhZzpcImNvbXBvbmVudFwiLHN0YXRpY0NsYXNzOlwibmF2YmFyLWl0ZW1cIn0sJ2NvbXBvbmVudCcsX3ZtLiRhdHRycyxmYWxzZSksW192bS5fdChcImRlZmF1bHRcIildLDIpfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQyID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fJDIgPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fJDIgPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMiA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMiA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBOYXZiYXJJdGVtID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fJDIsIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18kMiB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyQyLFxuICAgIF9fdnVlX3NjcmlwdF9fJDIsXG4gICAgX192dWVfc2NvcGVfaWRfXyQyLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQyLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMixcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBOYXZiYXIpO1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgTmF2YmFySXRlbSk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuZXhwb3J0IHsgTmF2YmFyLCBOYXZiYXJJdGVtIH07XG4iLCJpbXBvcnQgeyBfIGFzIF9kZWZpbmVQcm9wZXJ0eSB9IGZyb20gJy4vY2h1bmstZDYyMDAwODcuanMnO1xuaW1wb3J0ICcuL2NodW5rLTllMzIwN2NjLmpzJztcbmltcG9ydCB7IEYgYXMgRm9ybUVsZW1lbnRNaXhpbiB9IGZyb20gJy4vY2h1bmstMTBjODU1MjkuanMnO1xuaW1wb3J0IHsgSSBhcyBJY29uIH0gZnJvbSAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IHsgSSBhcyBJbnB1dCB9IGZyb20gJy4vY2h1bmstOThlODZmNDAuanMnO1xuXG52YXIgX2NvbXBvbmVudHM7XG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQk51bWJlcmlucHV0JyxcbiAgY29tcG9uZW50czogKF9jb21wb25lbnRzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgSWNvbi5uYW1lLCBJY29uKSwgX2RlZmluZVByb3BlcnR5KF9jb21wb25lbnRzLCBJbnB1dC5uYW1lLCBJbnB1dCksIF9jb21wb25lbnRzKSxcbiAgbWl4aW5zOiBbRm9ybUVsZW1lbnRNaXhpbl0sXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IE51bWJlcixcbiAgICBtaW46IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgbWF4OiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIHN0ZXA6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgdHlwZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2lzLXByaW1hcnknXG4gICAgfSxcbiAgICBlZGl0YWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGNvbnRyb2xzUm91bmRlZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBjb250cm9sc1Bvc2l0aW9uOiBTdHJpbmdcbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmV3VmFsdWU6ICFpc05hTih0aGlzLnZhbHVlKSA/IHRoaXMudmFsdWUgOiBwYXJzZUZsb2F0KHRoaXMubWluKSB8fCAwLFxuICAgICAgbmV3U3RlcDogdGhpcy5zdGVwIHx8IDEsXG4gICAgICBfZWxlbWVudFJlZjogJ2lucHV0J1xuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgY29tcHV0ZWRWYWx1ZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ld1ZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHBhcnNlRmxvYXQodGhpcy5taW4pIHx8IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm5ld1ZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgbmV3VmFsdWUpO1xuICAgICAgICAhdGhpcy5pc1ZhbGlkICYmIHRoaXMuJHJlZnMuaW5wdXQuY2hlY2tIdG1sNVZhbGlkaXR5KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmaWVsZENsYXNzZXM6IGZ1bmN0aW9uIGZpZWxkQ2xhc3NlcygpIHtcbiAgICAgIHJldHVybiBbe1xuICAgICAgICAnaGFzLWFkZG9ucyc6IHRoaXMuY29udHJvbHNQb3NpdGlvbiA9PT0gJ2NvbXBhY3QnXG4gICAgICB9LCB7XG4gICAgICAgICdpcy1ncm91cGVkJzogdGhpcy5jb250cm9sc1Bvc2l0aW9uICE9PSAnY29tcGFjdCdcbiAgICAgIH1dO1xuICAgIH0sXG4gICAgYnV0dG9uQ2xhc3NlczogZnVuY3Rpb24gYnV0dG9uQ2xhc3NlcygpIHtcbiAgICAgIHJldHVybiBbdGhpcy50eXBlLCB0aGlzLnNpemUsIHtcbiAgICAgICAgJ2lzLXJvdW5kZWQnOiB0aGlzLmNvbnRyb2xzUm91bmRlZFxuICAgICAgfV07XG4gICAgfSxcbiAgICBtaW5OdW1iZXI6IGZ1bmN0aW9uIG1pbk51bWJlcigpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5taW4gPT09ICdzdHJpbmcnID8gcGFyc2VGbG9hdCh0aGlzLm1pbikgOiB0aGlzLm1pbjtcbiAgICB9LFxuICAgIG1heE51bWJlcjogZnVuY3Rpb24gbWF4TnVtYmVyKCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLm1heCA9PT0gJ3N0cmluZycgPyBwYXJzZUZsb2F0KHRoaXMubWF4KSA6IHRoaXMubWF4O1xuICAgIH0sXG4gICAgc3RlcE51bWJlcjogZnVuY3Rpb24gc3RlcE51bWJlcigpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5uZXdTdGVwID09PSAnc3RyaW5nJyA/IHBhcnNlRmxvYXQodGhpcy5uZXdTdGVwKSA6IHRoaXMubmV3U3RlcDtcbiAgICB9LFxuICAgIGRpc2FibGVkTWluOiBmdW5jdGlvbiBkaXNhYmxlZE1pbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVkVmFsdWUgLSB0aGlzLnN0ZXBOdW1iZXIgPCB0aGlzLm1pbk51bWJlcjtcbiAgICB9LFxuICAgIGRpc2FibGVkTWF4OiBmdW5jdGlvbiBkaXNhYmxlZE1heCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVkVmFsdWUgKyB0aGlzLnN0ZXBOdW1iZXIgPiB0aGlzLm1heE51bWJlcjtcbiAgICB9LFxuICAgIHN0ZXBEZWNpbWFsczogZnVuY3Rpb24gc3RlcERlY2ltYWxzKCkge1xuICAgICAgdmFyIHN0ZXAgPSB0aGlzLnN0ZXBOdW1iZXIudG9TdHJpbmcoKTtcbiAgICAgIHZhciBpbmRleCA9IHN0ZXAuaW5kZXhPZignLicpO1xuXG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICByZXR1cm4gc3RlcC5zdWJzdHJpbmcoaW5kZXggKyAxKS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICAvKipcclxuICAgICogV2hlbiB2LW1vZGVsIGlzIGNoYW5nZWQ6XHJcbiAgICAqICAgMS4gU2V0IGludGVybmFsIHZhbHVlLlxyXG4gICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoX3ZhbHVlKSB7XG4gICAgICB0aGlzLm5ld1ZhbHVlID0gX3ZhbHVlO1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlY3JlbWVudDogZnVuY3Rpb24gZGVjcmVtZW50KCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLm1pbk51bWJlciA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcy5jb21wdXRlZFZhbHVlIC0gdGhpcy5zdGVwTnVtYmVyID49IHRoaXMubWluTnVtYmVyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuY29tcHV0ZWRWYWx1ZSAtIHRoaXMuc3RlcE51bWJlcjtcbiAgICAgICAgdGhpcy5jb21wdXRlZFZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZS50b0ZpeGVkKHRoaXMuc3RlcERlY2ltYWxzKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbmNyZW1lbnQ6IGZ1bmN0aW9uIGluY3JlbWVudCgpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5tYXhOdW1iZXIgPT09ICd1bmRlZmluZWQnIHx8IHRoaXMuY29tcHV0ZWRWYWx1ZSArIHRoaXMuc3RlcE51bWJlciA8PSB0aGlzLm1heE51bWJlcikge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmNvbXB1dGVkVmFsdWUgKyB0aGlzLnN0ZXBOdW1iZXI7XG4gICAgICAgIHRoaXMuY29tcHV0ZWRWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUudG9GaXhlZCh0aGlzLnN0ZXBEZWNpbWFscykpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25Db250cm9sQ2xpY2s6IGZ1bmN0aW9uIG9uQ29udHJvbENsaWNrKGV2ZW50LCBpbmMpIHtcbiAgICAgIC8vIElFIDExIC0+IGZpbHRlciBjbGljayBldmVudFxuICAgICAgaWYgKGV2ZW50LmRldGFpbCAhPT0gMCB8fCBldmVudC50eXBlID09PSAnY2xpY2snKSByZXR1cm47XG4gICAgICBpZiAoaW5jKSB0aGlzLmluY3JlbWVudCgpO2Vsc2UgdGhpcy5kZWNyZW1lbnQoKTtcbiAgICB9LFxuICAgIG9uU3RhcnRMb25nUHJlc3M6IGZ1bmN0aW9uIG9uU3RhcnRMb25nUHJlc3MoZXZlbnQsIGluYykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCAmJiBldmVudC50eXBlICE9PSAndG91Y2hzdGFydCcpIHJldHVybjtcbiAgICAgIHRoaXMuXyRpbnRlcnZhbFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl8kaW50ZXJ2YWxSZWYpO1xuICAgICAgdGhpcy5fJGludGVydmFsUmVmID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaW5jKSBfdGhpcy5pbmNyZW1lbnQoKTtlbHNlIF90aGlzLmRlY3JlbWVudCgpO1xuICAgICAgfSwgMjUwKTtcbiAgICB9LFxuICAgIG9uU3RvcExvbmdQcmVzczogZnVuY3Rpb24gb25TdG9wTG9uZ1ByZXNzKGluYykge1xuICAgICAgaWYgKCF0aGlzLl8kaW50ZXJ2YWxSZWYpIHJldHVybjtcbiAgICAgIHZhciBkID0gbmV3IERhdGUoKTtcblxuICAgICAgaWYgKGQgLSB0aGlzLl8kaW50ZXJ2YWxUaW1lIDwgMjUwKSB7XG4gICAgICAgIGlmIChpbmMpIHRoaXMuaW5jcmVtZW50KCk7ZWxzZSB0aGlzLmRlY3JlbWVudCgpO1xuICAgICAgfVxuXG4gICAgICBjbGVhckludGVydmFsKHRoaXMuXyRpbnRlcnZhbFJlZik7XG4gICAgICB0aGlzLl8kaW50ZXJ2YWxSZWYgPSBudWxsO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYi1udW1iZXJpbnB1dCBmaWVsZFwiLGNsYXNzOl92bS5maWVsZENsYXNzZXN9LFtfYygncCcse3N0YXRpY0NsYXNzOlwiY29udHJvbFwiLG9uOntcIm1vdXNldXBcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vblN0b3BMb25nUHJlc3MoZmFsc2UpO30sXCJtb3VzZWxlYXZlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub25TdG9wTG9uZ1ByZXNzKGZhbHNlKTt9LFwidG91Y2hlbmRcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vblN0b3BMb25nUHJlc3MoZmFsc2UpO30sXCJ0b3VjaGNhbmNlbFwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLm9uU3RvcExvbmdQcmVzcyhmYWxzZSk7fX19LFtfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJidXR0b25cIixjbGFzczpfdm0uYnV0dG9uQ2xhc3NlcyxhdHRyczp7XCJ0eXBlXCI6XCJidXR0b25cIixcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkIHx8IF92bS5kaXNhYmxlZE1pbn0sb246e1wibW91c2Vkb3duXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub25TdGFydExvbmdQcmVzcygkZXZlbnQsIGZhbHNlKTt9LFwidG91Y2hzdGFydFwiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLm9uU3RhcnRMb25nUHJlc3MoJGV2ZW50LCBmYWxzZSk7fSxcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub25Db250cm9sQ2xpY2soJGV2ZW50LCBmYWxzZSk7fX19LFtfYygnYi1pY29uJyx7YXR0cnM6e1wiaWNvblwiOlwibWludXNcIixcInBhY2tcIjpfdm0uaWNvblBhY2ssXCJzaXplXCI6X3ZtLmljb25TaXplfX0pXSwxKV0pLF92bS5fdihcIiBcIiksX2MoJ2ItaW5wdXQnLF92bS5fYih7cmVmOlwiaW5wdXRcIixhdHRyczp7XCJ0eXBlXCI6XCJudW1iZXJcIixcInN0ZXBcIjpfdm0ubmV3U3RlcCxcIm1heFwiOl92bS5tYXgsXCJtaW5cIjpfdm0ubWluLFwic2l6ZVwiOl92bS5zaXplLFwiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWQsXCJyZWFkb25seVwiOiFfdm0uZWRpdGFibGUsXCJsb2FkaW5nXCI6X3ZtLmxvYWRpbmcsXCJyb3VuZGVkXCI6X3ZtLnJvdW5kZWQsXCJpY29uXCI6X3ZtLmljb24sXCJpY29uLXBhY2tcIjpfdm0uaWNvblBhY2ssXCJhdXRvY29tcGxldGVcIjpfdm0uYXV0b2NvbXBsZXRlLFwiZXhwYW5kZWRcIjpfdm0uZXhwYW5kZWQsXCJ1c2UtaHRtbDUtdmFsaWRhdGlvblwiOl92bS51c2VIdG1sNVZhbGlkYXRpb259LG9uOntcImZvY3VzXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uJGVtaXQoJ2ZvY3VzJywgJGV2ZW50KTt9LFwiYmx1clwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLiRlbWl0KCdibHVyJywgJGV2ZW50KTt9fSxtb2RlbDp7dmFsdWU6KF92bS5jb21wdXRlZFZhbHVlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLmNvbXB1dGVkVmFsdWU9X3ZtLl9uKCQkdik7fSxleHByZXNzaW9uOlwiY29tcHV0ZWRWYWx1ZVwifX0sJ2ItaW5wdXQnLF92bS4kYXR0cnMsZmFsc2UpKSxfdm0uX3YoXCIgXCIpLF9jKCdwJyx7c3RhdGljQ2xhc3M6XCJjb250cm9sXCIsb246e1wibW91c2V1cFwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLm9uU3RvcExvbmdQcmVzcyh0cnVlKTt9LFwibW91c2VsZWF2ZVwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLm9uU3RvcExvbmdQcmVzcyh0cnVlKTt9LFwidG91Y2hlbmRcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vblN0b3BMb25nUHJlc3ModHJ1ZSk7fSxcInRvdWNoY2FuY2VsXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub25TdG9wTG9uZ1ByZXNzKHRydWUpO319fSxbX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiYnV0dG9uXCIsY2xhc3M6X3ZtLmJ1dHRvbkNsYXNzZXMsYXR0cnM6e1widHlwZVwiOlwiYnV0dG9uXCIsXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCB8fCBfdm0uZGlzYWJsZWRNYXh9LG9uOntcIm1vdXNlZG93blwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLm9uU3RhcnRMb25nUHJlc3MoJGV2ZW50LCB0cnVlKTt9LFwidG91Y2hzdGFydFwiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLm9uU3RhcnRMb25nUHJlc3MoJGV2ZW50LCB0cnVlKTt9LFwiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vbkNvbnRyb2xDbGljaygkZXZlbnQsIHRydWUpO319fSxbX2MoJ2ItaWNvbicse2F0dHJzOntcImljb25cIjpcInBsdXNcIixcInBhY2tcIjpfdm0uaWNvblBhY2ssXCJzaXplXCI6X3ZtLmljb25TaXplfX0pXSwxKV0pXSwxKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBOdW1iZXJpbnB1dCA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHsgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyxcbiAgICBfX3Z1ZV9zY3JpcHRfXyxcbiAgICBfX3Z1ZV9zY29wZV9pZF9fLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxudmFyIFBsdWdpbiA9IHtcbiAgaW5zdGFsbDogZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcbiAgICByZWdpc3RlckNvbXBvbmVudChWdWUsIE51bWJlcmlucHV0KTtcbiAgfVxufTtcbnVzZShQbHVnaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBQbHVnaW47XG5leHBvcnQgeyBOdW1iZXJpbnB1dCB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfZGVmaW5lUHJvcGVydHkgfSBmcm9tICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCB7IEkgYXMgSWNvbiB9IGZyb20gJy4vY2h1bmstZTg0YjQwNDcuanMnO1xuaW1wb3J0IHsgXyBhcyBfX3Z1ZV9ub3JtYWxpemVfXyB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQlBhZ2luYXRpb24nLFxuICBjb21wb25lbnRzOiBfZGVmaW5lUHJvcGVydHkoe30sIEljb24ubmFtZSwgSWNvbiksXG4gIHByb3BzOiB7XG4gICAgdG90YWw6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgcGVyUGFnZToge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDIwXG4gICAgfSxcbiAgICBjdXJyZW50OiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgcmFuZ2VCZWZvcmU6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAxXG4gICAgfSxcbiAgICByYW5nZUFmdGVyOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgc2l6ZTogU3RyaW5nLFxuICAgIHNpbXBsZTogQm9vbGVhbixcbiAgICByb3VuZGVkOiBCb29sZWFuLFxuICAgIG9yZGVyOiBTdHJpbmcsXG4gICAgaWNvblBhY2s6IFN0cmluZyxcbiAgICBhcmlhTmV4dExhYmVsOiBTdHJpbmcsXG4gICAgYXJpYVByZXZpb3VzTGFiZWw6IFN0cmluZyxcbiAgICBhcmlhUGFnZUxhYmVsOiBTdHJpbmcsXG4gICAgYXJpYUN1cnJlbnRMYWJlbDogU3RyaW5nXG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgcm9vdENsYXNzZXM6IGZ1bmN0aW9uIHJvb3RDbGFzc2VzKCkge1xuICAgICAgcmV0dXJuIFt0aGlzLm9yZGVyLCB0aGlzLnNpemUsIHtcbiAgICAgICAgJ2lzLXNpbXBsZSc6IHRoaXMuc2ltcGxlLFxuICAgICAgICAnaXMtcm91bmRlZCc6IHRoaXMucm91bmRlZFxuICAgICAgfV07XG4gICAgfSxcbiAgICBiZWZvcmVDdXJyZW50OiBmdW5jdGlvbiBiZWZvcmVDdXJyZW50KCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMucmFuZ2VCZWZvcmUpO1xuICAgIH0sXG4gICAgYWZ0ZXJDdXJyZW50OiBmdW5jdGlvbiBhZnRlckN1cnJlbnQoKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5yYW5nZUFmdGVyKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIFRvdGFsIHBhZ2Ugc2l6ZSAoY291bnQpLlxyXG4gICAgKi9cbiAgICBwYWdlQ291bnQ6IGZ1bmN0aW9uIHBhZ2VDb3VudCgpIHtcbiAgICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy50b3RhbCAvIHRoaXMucGVyUGFnZSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBGaXJzdCBpdGVtIG9mIHRoZSBwYWdlIChjb3VudCkuXHJcbiAgICAqL1xuICAgIGZpcnN0SXRlbTogZnVuY3Rpb24gZmlyc3RJdGVtKCkge1xuICAgICAgdmFyIGZpcnN0SXRlbSA9IHRoaXMuY3VycmVudCAqIHRoaXMucGVyUGFnZSAtIHRoaXMucGVyUGFnZSArIDE7XG4gICAgICByZXR1cm4gZmlyc3RJdGVtID49IDAgPyBmaXJzdEl0ZW0gOiAwO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogQ2hlY2sgaWYgcHJldmlvdXMgYnV0dG9uIGlzIGF2YWlsYWJsZS5cclxuICAgICovXG4gICAgaGFzUHJldjogZnVuY3Rpb24gaGFzUHJldigpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgPiAxO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogQ2hlY2sgaWYgZmlyc3QgcGFnZSBidXR0b24gc2hvdWxkIGJlIHZpc2libGUuXHJcbiAgICAqL1xuICAgIGhhc0ZpcnN0OiBmdW5jdGlvbiBoYXNGaXJzdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgPj0gMiArIHRoaXMuYmVmb3JlQ3VycmVudDtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIENoZWNrIGlmIGZpcnN0IGVsbGlwc2lzIHNob3VsZCBiZSB2aXNpYmxlLlxyXG4gICAgKi9cbiAgICBoYXNGaXJzdEVsbGlwc2lzOiBmdW5jdGlvbiBoYXNGaXJzdEVsbGlwc2lzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudCA+PSB0aGlzLmJlZm9yZUN1cnJlbnQgKyA0O1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogQ2hlY2sgaWYgbGFzdCBwYWdlIGJ1dHRvbiBzaG91bGQgYmUgdmlzaWJsZS5cclxuICAgICovXG4gICAgaGFzTGFzdDogZnVuY3Rpb24gaGFzTGFzdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgPD0gdGhpcy5wYWdlQ291bnQgLSAoMSArIHRoaXMuYWZ0ZXJDdXJyZW50KTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIENoZWNrIGlmIGxhc3QgZWxsaXBzaXMgc2hvdWxkIGJlIHZpc2libGUuXHJcbiAgICAqL1xuICAgIGhhc0xhc3RFbGxpcHNpczogZnVuY3Rpb24gaGFzTGFzdEVsbGlwc2lzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudCA8IHRoaXMucGFnZUNvdW50IC0gKDIgKyB0aGlzLmFmdGVyQ3VycmVudCk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBDaGVjayBpZiBuZXh0IGJ1dHRvbiBpcyBhdmFpbGFibGUuXHJcbiAgICAqL1xuICAgIGhhc05leHQ6IGZ1bmN0aW9uIGhhc05leHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50IDwgdGhpcy5wYWdlQ291bnQ7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBHZXQgbmVhciBwYWdlcywgMSBiZWZvcmUgYW5kIDEgYWZ0ZXIgdGhlIGN1cnJlbnQuXHJcbiAgICAqIEFsc28gYWRkIHRoZSBjbGljayBldmVudCB0byB0aGUgYXJyYXkuXHJcbiAgICAqL1xuICAgIHBhZ2VzSW5SYW5nZTogZnVuY3Rpb24gcGFnZXNJblJhbmdlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuc2ltcGxlKSByZXR1cm47XG4gICAgICB2YXIgbGVmdCA9IE1hdGgubWF4KDEsIHRoaXMuY3VycmVudCAtIHRoaXMuYmVmb3JlQ3VycmVudCk7XG5cbiAgICAgIGlmIChsZWZ0IC0gMSA9PT0gMikge1xuICAgICAgICBsZWZ0LS07IC8vIERvIG5vdCBzaG93IHRoZSBlbGxpcHNpcyBpZiB0aGVyZSBpcyBvbmx5IG9uZSB0byBoaWRlXG4gICAgICB9XG5cbiAgICAgIHZhciByaWdodCA9IE1hdGgubWluKHRoaXMuY3VycmVudCArIHRoaXMuYWZ0ZXJDdXJyZW50LCB0aGlzLnBhZ2VDb3VudCk7XG5cbiAgICAgIGlmICh0aGlzLnBhZ2VDb3VudCAtIHJpZ2h0ID09PSAyKSB7XG4gICAgICAgIHJpZ2h0Kys7IC8vIERvIG5vdCBzaG93IHRoZSBlbGxpcHNpcyBpZiB0aGVyZSBpcyBvbmx5IG9uZSB0byBoaWRlXG4gICAgICB9XG5cbiAgICAgIHZhciBwYWdlcyA9IFtdO1xuXG4gICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XG4gICAgICAgIHBhZ2VzLnB1c2goe1xuICAgICAgICAgIG51bWJlcjogaSxcbiAgICAgICAgICBpc0N1cnJlbnQ6IF90aGlzLmN1cnJlbnQgPT09IGksXG4gICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuY3VycmVudCA9PT0gaSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBfdGhpcy4kZW1pdCgnY2hhbmdlJywgaSk7XG5cbiAgICAgICAgICAgIF90aGlzLiRlbWl0KCd1cGRhdGU6Y3VycmVudCcsIGkpOyAvLyBTZXQgZm9jdXMgb24gZWxlbWVudCB0byBrZWVwIHRhYiBvcmRlclxuXG5cbiAgICAgICAgICAgIF90aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBldmVudC50YXJnZXQuZm9jdXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBpID0gbGVmdDsgaSA8PSByaWdodDsgaSsrKSB7XG4gICAgICAgIF9sb29wKGkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFnZXM7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIC8qKlxyXG4gICAgKiBJZiBjdXJyZW50IHBhZ2UgaXMgdHJ5aW5nIHRvIGJlIGdyZWF0ZXIgdGhhbiBwYWdlIGNvdW50LCBzZXQgdG8gbGFzdC5cclxuICAgICovXG4gICAgcGFnZUNvdW50OiBmdW5jdGlvbiBwYWdlQ291bnQodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnQgPiB2YWx1ZSkgdGhpcy5sYXN0KCk7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqXHJcbiAgICAqIFByZXZpb3VzIGJ1dHRvbiBjbGljayBsaXN0ZW5lci5cclxuICAgICovXG4gICAgcHJldjogZnVuY3Rpb24gcHJldigpIHtcbiAgICAgIGlmICghdGhpcy5oYXNQcmV2KSByZXR1cm47XG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLmN1cnJlbnQgLSAxKTtcbiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTpjdXJyZW50JywgdGhpcy5jdXJyZW50IC0gMSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBGaXJzdCBidXR0b24gY2xpY2sgbGlzdGVuZXIuXHJcbiAgICAqL1xuICAgIGZpcnN0OiBmdW5jdGlvbiBmaXJzdCgpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIDEpO1xuICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOmN1cnJlbnQnLCAxKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIExhc3QgYnV0dG9uIGNsaWNrIGxpc3RlbmVyLlxyXG4gICAgKi9cbiAgICBsYXN0OiBmdW5jdGlvbiBsYXN0KCkge1xuICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgdGhpcy5wYWdlQ291bnQpO1xuICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOmN1cnJlbnQnLCB0aGlzLnBhZ2VDb3VudCk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBOZXh0IGJ1dHRvbiBjbGljayBsaXN0ZW5lci5cclxuICAgICovXG4gICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIGlmICghdGhpcy5oYXNOZXh0KSByZXR1cm47XG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLmN1cnJlbnQgKyAxKTtcbiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTpjdXJyZW50JywgdGhpcy5jdXJyZW50ICsgMSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBHZXQgdGV4dCBmb3IgYXJpYS1sYWJlbCBhY2NvcmRpbmcgdG8gcGFnZSBudW1iZXIuXHJcbiAgICAqL1xuICAgIGdldEFyaWFQYWdlTGFiZWw6IGZ1bmN0aW9uIGdldEFyaWFQYWdlTGFiZWwocGFnZU51bWJlciwgaXNDdXJyZW50KSB7XG4gICAgICBpZiAodGhpcy5hcmlhUGFnZUxhYmVsICYmICghaXNDdXJyZW50IHx8ICF0aGlzLmFyaWFDdXJyZW50TGFiZWwpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFyaWFQYWdlTGFiZWwgKyAnICcgKyBwYWdlTnVtYmVyICsgJy4nO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmFyaWFQYWdlTGFiZWwgJiYgaXNDdXJyZW50ICYmIHRoaXMuYXJpYUN1cnJlbnRMYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcmlhQ3VycmVudExhYmVsICsgJywgJyArIHRoaXMuYXJpYVBhZ2VMYWJlbCArICcgJyArIHBhZ2VOdW1iZXIgKyAnLic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ25hdicse3N0YXRpY0NsYXNzOlwicGFnaW5hdGlvblwiLGNsYXNzOl92bS5yb290Q2xhc3Nlc30sW19jKCdhJyx7c3RhdGljQ2xhc3M6XCJwYWdpbmF0aW9uLXByZXZpb3VzXCIsYXR0cnM6e1wicm9sZVwiOlwiYnV0dG9uXCIsXCJocmVmXCI6XCIjXCIsXCJkaXNhYmxlZFwiOiFfdm0uaGFzUHJldixcImFyaWEtbGFiZWxcIjpfdm0uYXJpYVByZXZpb3VzTGFiZWx9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0ucHJldigkZXZlbnQpO319fSxbX2MoJ2ItaWNvbicse2F0dHJzOntcImljb25cIjpcImNoZXZyb24tbGVmdFwiLFwicGFja1wiOl92bS5pY29uUGFjayxcImJvdGhcIjpcIlwiLFwiYXJpYS1oaWRkZW5cIjpcInRydWVcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygnYScse3N0YXRpY0NsYXNzOlwicGFnaW5hdGlvbi1uZXh0XCIsYXR0cnM6e1wicm9sZVwiOlwiYnV0dG9uXCIsXCJocmVmXCI6XCIjXCIsXCJkaXNhYmxlZFwiOiFfdm0uaGFzTmV4dCxcImFyaWEtbGFiZWxcIjpfdm0uYXJpYU5leHRMYWJlbH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5uZXh0KCRldmVudCk7fX19LFtfYygnYi1pY29uJyx7YXR0cnM6e1wiaWNvblwiOlwiY2hldnJvbi1yaWdodFwiLFwicGFja1wiOl92bS5pY29uUGFjayxcImJvdGhcIjpcIlwiLFwiYXJpYS1oaWRkZW5cIjpcInRydWVcIn19KV0sMSksX3ZtLl92KFwiIFwiKSwoIV92bS5zaW1wbGUpP19jKCd1bCcse3N0YXRpY0NsYXNzOlwicGFnaW5hdGlvbi1saXN0XCJ9LFsoX3ZtLmhhc0ZpcnN0KT9fYygnbGknLFtfYygnYScse3N0YXRpY0NsYXNzOlwicGFnaW5hdGlvbi1saW5rXCIsYXR0cnM6e1wicm9sZVwiOlwiYnV0dG9uXCIsXCJocmVmXCI6XCIjXCIsXCJhcmlhLWxhYmVsXCI6X3ZtLmdldEFyaWFQYWdlTGFiZWwoMSwgZmFsc2UpfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLmZpcnN0KCRldmVudCk7fX19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgMVxcbiAgICAgICAgICAgIFwiKV0pXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoX3ZtLmhhc0ZpcnN0RWxsaXBzaXMpP19jKCdsaScsW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJwYWdpbmF0aW9uLWVsbGlwc2lzXCJ9LFtfdm0uX3YoXCLigKZcIildKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLl9sKChfdm0ucGFnZXNJblJhbmdlKSxmdW5jdGlvbihwYWdlKXtyZXR1cm4gX2MoJ2xpJyx7a2V5OnBhZ2UubnVtYmVyfSxbX2MoJ2EnLHtzdGF0aWNDbGFzczpcInBhZ2luYXRpb24tbGlua1wiLGNsYXNzOnsgJ2lzLWN1cnJlbnQnOiBwYWdlLmlzQ3VycmVudCB9LGF0dHJzOntcInJvbGVcIjpcImJ1dHRvblwiLFwiaHJlZlwiOlwiI1wiLFwiYXJpYS1sYWJlbFwiOl92bS5nZXRBcmlhUGFnZUxhYmVsKHBhZ2UubnVtYmVyLCBwYWdlLmlzQ3VycmVudCksXCJhcmlhLWN1cnJlbnRcIjpwYWdlLmlzQ3VycmVudH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO3BhZ2UuY2xpY2soJGV2ZW50KTt9fX0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgICBcIitfdm0uX3MocGFnZS5udW1iZXIpK1wiXFxuICAgICAgICAgICAgXCIpXSldKX0pLF92bS5fdihcIiBcIiksKF92bS5oYXNMYXN0RWxsaXBzaXMpP19jKCdsaScsW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJwYWdpbmF0aW9uLWVsbGlwc2lzXCJ9LFtfdm0uX3YoXCLigKZcIildKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksKF92bS5oYXNMYXN0KT9fYygnbGknLFtfYygnYScse3N0YXRpY0NsYXNzOlwicGFnaW5hdGlvbi1saW5rXCIsYXR0cnM6e1wicm9sZVwiOlwiYnV0dG9uXCIsXCJocmVmXCI6XCIjXCIsXCJhcmlhLWxhYmVsXCI6X3ZtLmdldEFyaWFQYWdlTGFiZWwoX3ZtLnBhZ2VDb3VudCwgZmFsc2UpfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLmxhc3QoJGV2ZW50KTt9fX0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgICBcIitfdm0uX3MoX3ZtLnBhZ2VDb3VudCkrXCJcXG4gICAgICAgICAgICBcIildKV0pOl92bS5fZSgpXSwyKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLChfdm0uc2ltcGxlKT9fYygnc21hbGwnLHtzdGF0aWNDbGFzczpcImluZm9cIn0sWyhfdm0ucGVyUGFnZSA9PSAxKT9bX3ZtLl92KFwiXFxuICAgICAgICAgICAgXCIrX3ZtLl9zKF92bS5maXJzdEl0ZW0pK1wiIC8gXCIrX3ZtLl9zKF92bS50b3RhbCkrXCJcXG4gICAgICAgIFwiKV06W192bS5fdihcIlxcbiAgICAgICAgICAgIFwiK192bS5fcyhfdm0uZmlyc3RJdGVtKStcIi1cIitfdm0uX3MoTWF0aC5taW4oX3ZtLmN1cnJlbnQgKiBfdm0ucGVyUGFnZSwgX3ZtLnRvdGFsKSkrXCIgLyBcIitfdm0uX3MoX3ZtLnRvdGFsKStcIlxcbiAgICAgICAgXCIpXV0sMik6X3ZtLl9lKCldKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBQYWdpbmF0aW9uID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG5leHBvcnQgeyBQYWdpbmF0aW9uIGFzIFAgfTtcbiIsImltcG9ydCAnLi9jaHVuay1kNjIwMDA4Ny5qcyc7XG5pbXBvcnQgJy4vY2h1bmstOWUzMjA3Y2MuanMnO1xuaW1wb3J0ICcuL2NodW5rLWU4NGI0MDQ3LmpzJztcbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJDb21wb25lbnQsIHUgYXMgdXNlIH0gZnJvbSAnLi9jaHVuay1jY2E4OGRiOC5qcyc7XG5pbXBvcnQgeyBQIGFzIFBhZ2luYXRpb24gfSBmcm9tICcuL2NodW5rLWNjNzE4YzE1LmpzJztcbmV4cG9ydCB7IFAgYXMgUGFnaW5hdGlvbiB9IGZyb20gJy4vY2h1bmstY2M3MThjMTUuanMnO1xuXG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgUGFnaW5hdGlvbik7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuIiwiaW1wb3J0IHsgXyBhcyBfX3Z1ZV9ub3JtYWxpemVfXywgciBhcyByZWdpc3RlckNvbXBvbmVudCwgdSBhcyB1c2UgfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcblxuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdCUHJvZ3Jlc3MnLFxuICBwcm9wczoge1xuICAgIHR5cGU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0sXG4gICAgICBkZWZhdWx0OiAnaXMtZGFya2dyZXknXG4gICAgfSxcbiAgICBzaXplOiBTdHJpbmcsXG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgbWF4OiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAxMDBcbiAgICB9LFxuICAgIHNob3dWYWx1ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBmb3JtYXQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdyYXcnLFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFsncmF3JywgJ3BlcmNlbnQnXS5pbmRleE9mKHZhbHVlKSA+PSAwO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJlY2lzaW9uOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAyXG4gICAgfSxcbiAgICBrZWVwVHJhaWxpbmdaZXJvZXM6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBpc0luZGV0ZXJtaW5hdGU6IGZ1bmN0aW9uIGlzSW5kZXRlcm1pbmF0ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSB1bmRlZmluZWQgfHwgdGhpcy52YWx1ZSA9PT0gbnVsbDtcbiAgICB9LFxuICAgIG5ld1R5cGU6IGZ1bmN0aW9uIG5ld1R5cGUoKSB7XG4gICAgICByZXR1cm4gW3RoaXMuc2l6ZSwgdGhpcy50eXBlXTtcbiAgICB9LFxuICAgIG5ld1ZhbHVlOiBmdW5jdGlvbiBuZXdWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLnZhbHVlID09PSB1bmRlZmluZWQgfHwgdGhpcy52YWx1ZSA9PT0gbnVsbCB8fCBpc05hTih0aGlzLnZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mb3JtYXQgPT09ICdwZXJjZW50Jykge1xuICAgICAgICB2YXIgX3ZhbCA9IHRoaXMudG9GaXhlZCh0aGlzLnZhbHVlICogdGhpcy5tYXggLyAxMDApO1xuXG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChfdmFsLCBcIiVcIik7XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWwgPSB0aGlzLnRvRml4ZWQodGhpcy52YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoX3ZhbHVlKSB7XG4gICAgICB0aGlzLnNldFZhbHVlKF92YWx1ZSk7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqXHJcbiAgICAqIFdoZW4gdmFsdWUgaXMgY2hhbmdlZCBiYWNrIHRvIHVuZGVmaW5lZCwgdmFsdWUgb2YgbmF0aXZlIHByb2dyZXNzIGdldCByZXNldCB0byAwLlxyXG4gICAgKiBOZWVkIHRvIGFkZCBhbmQgcmVtb3ZlIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgdG8gaGF2ZSB0aGUgaW5kZXRlcm1pbmF0ZSBvciBub3QuXHJcbiAgICAqL1xuICAgIHNldFZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuaXNJbmRldGVybWluYXRlKSB7XG4gICAgICAgIHRoaXMuJHJlZnMucHJvZ3Jlc3MucmVtb3ZlQXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kcmVmcy5wcm9ncmVzcy5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gQ3VzdG9tIGZ1bmN0aW9uIHRoYXQgaW1pdGF0ZSB0aGUgamF2YXNjcmlwdCB0b0ZpeGVkIG1ldGhvZCB3aXRoIGltcHJvdmVkIHJvdW5kaW5nXG4gICAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChudW0pIHtcbiAgICAgIHZhciBmaXhlZCA9ICgrXCJcIi5jb25jYXQoTWF0aC5yb3VuZCgrXCJcIi5jb25jYXQobnVtLCBcImVcIikuY29uY2F0KHRoaXMucHJlY2lzaW9uKSksIFwiZVwiKS5jb25jYXQoLXRoaXMucHJlY2lzaW9uKSkudG9GaXhlZCh0aGlzLnByZWNpc2lvbik7XG5cbiAgICAgIGlmICghdGhpcy5rZWVwVHJhaWxpbmdaZXJvZXMpIHtcbiAgICAgICAgZml4ZWQgPSBmaXhlZC5yZXBsYWNlKC9cXC4/MCskLywgJycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZml4ZWQ7XG4gICAgfVxuICB9LFxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIHRoaXMuc2V0VmFsdWUodGhpcy52YWx1ZSk7XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInByb2dyZXNzLXdyYXBwZXJcIn0sW19jKCdwcm9ncmVzcycse3JlZjpcInByb2dyZXNzXCIsc3RhdGljQ2xhc3M6XCJwcm9ncmVzc1wiLGNsYXNzOl92bS5uZXdUeXBlLGF0dHJzOntcIm1heFwiOl92bS5tYXh9fSxbX3ZtLl92KF92bS5fcyhfdm0ubmV3VmFsdWUpKV0pLF92bS5fdihcIiBcIiksKF92bS5zaG93VmFsdWUpP19jKCdwJyx7c3RhdGljQ2xhc3M6XCJwcm9ncmVzcy12YWx1ZSBoYXMtdGV4dC13aGl0ZVwifSxbX3ZtLl90KFwiZGVmYXVsdFwiLFtfdm0uX3YoX3ZtLl9zKF92bS5uZXdWYWx1ZSkpXSldLDIpOl92bS5fZSgpXSl9O1xudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgUHJvZ3Jlc3MgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBQcm9ncmVzcyk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuZXhwb3J0IHsgUHJvZ3Jlc3MgfTtcbiIsImltcG9ydCB7IF8gYXMgX192dWVfbm9ybWFsaXplX18sIHIgYXMgcmVnaXN0ZXJDb21wb25lbnQsIHUgYXMgdXNlIH0gZnJvbSAnLi9jaHVuay1jY2E4OGRiOC5qcyc7XG5cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQlJhZGlvJyxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZTogW1N0cmluZywgTnVtYmVyLCBCb29sZWFuLCBGdW5jdGlvbiwgT2JqZWN0LCBBcnJheV0sXG4gICAgbmF0aXZlVmFsdWU6IFtTdHJpbmcsIE51bWJlciwgQm9vbGVhbiwgRnVuY3Rpb24sIE9iamVjdCwgQXJyYXldLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICByZXF1aXJlZDogQm9vbGVhbixcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgc2l6ZTogU3RyaW5nXG4gIH0sXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5ld1ZhbHVlOiB0aGlzLnZhbHVlXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBjb21wdXRlZFZhbHVlOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV3VmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5uZXdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgLyoqXHJcbiAgICAqIFdoZW4gdi1tb2RlbCBjaGFuZ2UsIHNldCBpbnRlcm5hbCB2YWx1ZS5cclxuICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKF92YWx1ZSkge1xuICAgICAgdGhpcy5uZXdWYWx1ZSA9IF92YWx1ZTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAvLyBNYWNPUyBGaXJlRm94IGFuZCBTYWZhcmkgZG8gbm90IGZvY3VzIHdoZW4gY2xpY2tlZFxuICAgICAgdGhpcy4kcmVmcy5pbnB1dC5mb2N1cygpO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2xhYmVsJyx7cmVmOlwibGFiZWxcIixzdGF0aWNDbGFzczpcImItcmFkaW8gcmFkaW9cIixjbGFzczpbX3ZtLnNpemUsIHsgJ2lzLWRpc2FibGVkJzogX3ZtLmRpc2FibGVkIH1dLGF0dHJzOntcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkfSxvbjp7XCJjbGlja1wiOl92bS5mb2N1cyxcImtleWRvd25cIjpmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLiRyZWZzLmxhYmVsLmNsaWNrKCk7fX19LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcIm1vZGVsXCIscmF3TmFtZTpcInYtbW9kZWxcIix2YWx1ZTooX3ZtLmNvbXB1dGVkVmFsdWUpLGV4cHJlc3Npb246XCJjb21wdXRlZFZhbHVlXCJ9XSxyZWY6XCJpbnB1dFwiLGF0dHJzOntcInR5cGVcIjpcInJhZGlvXCIsXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcInJlcXVpcmVkXCI6X3ZtLnJlcXVpcmVkLFwibmFtZVwiOl92bS5uYW1lfSxkb21Qcm9wczp7XCJ2YWx1ZVwiOl92bS5uYXRpdmVWYWx1ZSxcImNoZWNrZWRcIjpfdm0uX3EoX3ZtLmNvbXB1dGVkVmFsdWUsX3ZtLm5hdGl2ZVZhbHVlKX0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTt9LFwiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uY29tcHV0ZWRWYWx1ZT1fdm0ubmF0aXZlVmFsdWU7fX19KSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJjaGVja1wiLGNsYXNzOl92bS50eXBlfSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiY29udHJvbC1sYWJlbFwifSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMildKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBSYWRpbyA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHsgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyxcbiAgICBfX3Z1ZV9zY3JpcHRfXyxcbiAgICBfX3Z1ZV9zY29wZV9pZF9fLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbnZhciBzY3JpcHQkMSA9IHtcbiAgbmFtZTogJ0JSYWRpb0J1dHRvbicsXG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IFtTdHJpbmcsIE51bWJlciwgQm9vbGVhbiwgRnVuY3Rpb24sIE9iamVjdCwgQXJyYXldLFxuICAgIG5hdGl2ZVZhbHVlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIEZ1bmN0aW9uLCBPYmplY3QsIEFycmF5XSxcbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaXMtcHJpbWFyeSdcbiAgICB9LFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIHJlcXVpcmVkOiBCb29sZWFuLFxuICAgIG5hbWU6IFN0cmluZyxcbiAgICBzaXplOiBTdHJpbmdcbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmV3VmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICBpc0ZvY3VzZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBjb21wdXRlZFZhbHVlOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV3VmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5uZXdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgLyoqXHJcbiAgICAqIFdoZW4gdi1tb2RlbCBjaGFuZ2UsIHNldCBpbnRlcm5hbCB2YWx1ZS5cclxuICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKF92YWx1ZSkge1xuICAgICAgdGhpcy5uZXdWYWx1ZSA9IF92YWx1ZTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAvLyBNYWNPUyBGaXJlRm94IGFuZCBTYWZhcmkgZG8gbm90IGZvY3VzIHdoZW4gY2xpY2tlZFxuICAgICAgdGhpcy4kcmVmcy5pbnB1dC5mb2N1cygpO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyQxID0gc2NyaXB0JDE7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18kMSA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29udHJvbFwifSxbX2MoJ2xhYmVsJyx7cmVmOlwibGFiZWxcIixzdGF0aWNDbGFzczpcImItcmFkaW8gcmFkaW8gYnV0dG9uXCIsY2xhc3M6W192bS5uZXdWYWx1ZSA9PT0gX3ZtLm5hdGl2ZVZhbHVlID8gX3ZtLnR5cGUgOiBudWxsLCBfdm0uc2l6ZSwge1xuICAgICAgICAgICAgJ2lzLWRpc2FibGVkJzogX3ZtLmRpc2FibGVkLFxuICAgICAgICAgICAgJ2lzLWZvY3VzZWQnOiBfdm0uaXNGb2N1c2VkXG4gICAgICAgIH1dLGF0dHJzOntcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkfSxvbjp7XCJjbGlja1wiOl92bS5mb2N1cyxcImtleWRvd25cIjpmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLiRyZWZzLmxhYmVsLmNsaWNrKCk7fX19LFtfdm0uX3QoXCJkZWZhdWx0XCIpLF92bS5fdihcIiBcIiksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsXCIsdmFsdWU6KF92bS5jb21wdXRlZFZhbHVlKSxleHByZXNzaW9uOlwiY29tcHV0ZWRWYWx1ZVwifV0scmVmOlwiaW5wdXRcIixhdHRyczp7XCJ0eXBlXCI6XCJyYWRpb1wiLFwiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWQsXCJyZXF1aXJlZFwiOl92bS5yZXF1aXJlZCxcIm5hbWVcIjpfdm0ubmFtZX0sZG9tUHJvcHM6e1widmFsdWVcIjpfdm0ubmF0aXZlVmFsdWUsXCJjaGVja2VkXCI6X3ZtLl9xKF92bS5jb21wdXRlZFZhbHVlLF92bS5uYXRpdmVWYWx1ZSl9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7fSxcImZvY3VzXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaXNGb2N1c2VkID0gdHJ1ZTt9LFwiYmx1clwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmlzRm9jdXNlZCA9IGZhbHNlO30sXCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS5jb21wdXRlZFZhbHVlPV92bS5uYXRpdmVWYWx1ZTt9fX0pXSwyKV0pfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQxID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMSA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBSYWRpb0J1dHRvbiA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHsgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXyQxLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDEgfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kMSxcbiAgICBfX3Z1ZV9zY3JpcHRfXyQxLFxuICAgIF9fdnVlX3Njb3BlX2lkX18kMSxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEsXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgUmFkaW8pO1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgUmFkaW9CdXR0b24pO1xuICB9XG59O1xudXNlKFBsdWdpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbjtcbmV4cG9ydCB7IFJhZGlvLCBSYWRpb0J1dHRvbiB9O1xuIiwiaW1wb3J0ICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgJy4vY2h1bmstMTBjODU1MjkuanMnO1xuaW1wb3J0ICcuL2NodW5rLWU4NGI0MDQ3LmpzJztcbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJDb21wb25lbnQsIHUgYXMgdXNlIH0gZnJvbSAnLi9jaHVuay1jY2E4OGRiOC5qcyc7XG5pbXBvcnQgeyBTIGFzIFNlbGVjdCB9IGZyb20gJy4vY2h1bmstOTEyZWQ3MTUuanMnO1xuZXhwb3J0IHsgUyBhcyBTZWxlY3QgfSBmcm9tICcuL2NodW5rLTkxMmVkNzE1LmpzJztcblxudmFyIFBsdWdpbiA9IHtcbiAgaW5zdGFsbDogZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcbiAgICByZWdpc3RlckNvbXBvbmVudChWdWUsIFNlbGVjdCk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuIiwiaW1wb3J0IHsgYyBhcyBjb25maWcgfSBmcm9tICcuL2NodW5rLTllMzIwN2NjLmpzJztcbmltcG9ydCB7IF8gYXMgX192dWVfbm9ybWFsaXplX18gfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcblxuLy9cbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdCVG9vbHRpcCcsXG4gIHByb3BzOiB7XG4gICAgYWN0aXZlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGxhYmVsOiBTdHJpbmcsXG4gICAgcG9zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdpcy10b3AnLFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFsnaXMtdG9wJywgJ2lzLWJvdHRvbScsICdpcy1sZWZ0JywgJ2lzLXJpZ2h0J10uaW5kZXhPZih2YWx1ZSkgPiAtMTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFsd2F5czogQm9vbGVhbixcbiAgICBhbmltYXRlZDogQm9vbGVhbixcbiAgICBzcXVhcmU6IEJvb2xlYW4sXG4gICAgZGFzaGVkOiBCb29sZWFuLFxuICAgIG11bHRpbGluZWQ6IEJvb2xlYW4sXG4gICAgc2l6ZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2lzLW1lZGl1bSdcbiAgICB9LFxuICAgIGRlbGF5OiBOdW1iZXJcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBuZXdUeXBlOiBmdW5jdGlvbiBuZXdUeXBlKCkge1xuICAgICAgcmV0dXJuIHRoaXMudHlwZSB8fCBjb25maWcuZGVmYXVsdFRvb2x0aXBUeXBlO1xuICAgIH0sXG4gICAgbmV3QW5pbWF0ZWQ6IGZ1bmN0aW9uIG5ld0FuaW1hdGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0ZWQgfHwgY29uZmlnLmRlZmF1bHRUb29sdGlwQW5pbWF0ZWQ7XG4gICAgfSxcbiAgICBuZXdEZWxheTogZnVuY3Rpb24gbmV3RGVsYXkoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxheSB8fCBjb25maWcuZGVmYXVsdFRvb2x0aXBEZWxheTtcbiAgICB9XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdzcGFuJyx7Y2xhc3M6W192bS5uZXdUeXBlLCBfdm0ucG9zaXRpb24sIF92bS5zaXplLCB7XG4gICAgICAgICdiLXRvb2x0aXAnOiBfdm0uYWN0aXZlLFxuICAgICAgICAnaXMtc3F1YXJlJzogX3ZtLnNxdWFyZSxcbiAgICAgICAgJ2lzLWFuaW1hdGVkJzogX3ZtLm5ld0FuaW1hdGVkLFxuICAgICAgICAnaXMtYWx3YXlzJzogX3ZtLmFsd2F5cyxcbiAgICAgICAgJ2lzLW11bHRpbGluZSc6IF92bS5tdWx0aWxpbmVkLFxuICAgICAgICAnaXMtZGFzaGVkJzogX3ZtLmRhc2hlZFxuICAgIH1dLHN0eWxlOih7J3RyYW5zaXRpb24tZGVsYXknOiAoX3ZtLm5ld0RlbGF5ICsgXCJtc1wiKX0pLGF0dHJzOntcImRhdGEtbGFiZWxcIjpfdm0ubGFiZWx9fSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMil9O1xudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgVG9vbHRpcCA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHsgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyxcbiAgICBfX3Z1ZV9zY3JpcHRfXyxcbiAgICBfX3Z1ZV9zY29wZV9pZF9fLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxuZXhwb3J0IHsgVG9vbHRpcCBhcyBUIH07XG4iLCJpbXBvcnQgeyBfIGFzIF9kZWZpbmVQcm9wZXJ0eSwgYiBhcyBfdG9Db25zdW1hYmxlQXJyYXkgfSBmcm9tICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IHsgVCBhcyBUb29sdGlwIH0gZnJvbSAnLi9jaHVuay00MTFkNmVlYS5qcyc7XG5cbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdCU2xpZGVyVGh1bWInLFxuICBjb21wb25lbnRzOiBfZGVmaW5lUHJvcGVydHkoe30sIFRvb2x0aXAubmFtZSwgVG9vbHRpcCksXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDBcbiAgICB9LFxuICAgIHR5cGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICAgIHN0YXJ0WDogMCxcbiAgICAgIHN0YXJ0UG9zaXRpb246IDAsXG4gICAgICBuZXdQb3NpdGlvbjogbnVsbCxcbiAgICAgIG9sZFZhbHVlOiB0aGlzLnZhbHVlXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBkaXNhYmxlZDogZnVuY3Rpb24gZGlzYWJsZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcGFyZW50LmRpc2FibGVkO1xuICAgIH0sXG4gICAgbWF4OiBmdW5jdGlvbiBtYXgoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcGFyZW50Lm1heDtcbiAgICB9LFxuICAgIG1pbjogZnVuY3Rpb24gbWluKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHBhcmVudC5taW47XG4gICAgfSxcbiAgICBzdGVwOiBmdW5jdGlvbiBzdGVwKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHBhcmVudC5zdGVwO1xuICAgIH0sXG4gICAgcHJlY2lzaW9uOiBmdW5jdGlvbiBwcmVjaXNpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcGFyZW50LnByZWNpc2lvbjtcbiAgICB9LFxuICAgIGN1cnJlbnRQb3NpdGlvbjogZnVuY3Rpb24gY3VycmVudFBvc2l0aW9uKCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KCh0aGlzLnZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pICogMTAwLCBcIiVcIik7XG4gICAgfSxcbiAgICB3cmFwcGVyU3R5bGU6IGZ1bmN0aW9uIHdyYXBwZXJTdHlsZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IHRoaXMuY3VycmVudFBvc2l0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBkcmFnZ2luZzogZnVuY3Rpb24gZHJhZ2dpbmcodmFsKSB7XG4gICAgICB0aGlzLiRwYXJlbnQuZHJhZ2dpbmcgPSB2YWw7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgb25Gb2N1czogZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICAgIHRoaXMuaXNGb2N1c2VkID0gdHJ1ZTtcbiAgICB9LFxuICAgIG9uQmx1cjogZnVuY3Rpb24gb25CbHVyKCkge1xuICAgICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICB9LFxuICAgIG9uQnV0dG9uRG93bjogZnVuY3Rpb24gb25CdXR0b25Eb3duKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMub25EcmFnU3RhcnQoZXZlbnQpO1xuXG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbkRyYWdnaW5nKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vbkRyYWdnaW5nKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25EcmFnRW5kKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uRHJhZ0VuZCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgdGhpcy5vbkRyYWdFbmQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25MZWZ0S2V5RG93bjogZnVuY3Rpb24gb25MZWZ0S2V5RG93bigpIHtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8IHRoaXMudmFsdWUgPT09IHRoaXMubWluKSByZXR1cm47XG4gICAgICB0aGlzLm5ld1Bvc2l0aW9uID0gcGFyc2VGbG9hdCh0aGlzLmN1cnJlbnRQb3NpdGlvbikgLSB0aGlzLnN0ZXAgLyAodGhpcy5tYXggLSB0aGlzLm1pbikgKiAxMDA7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMubmV3UG9zaXRpb24pO1xuICAgICAgdGhpcy4kcGFyZW50LmVtaXRDaGFuZ2UoKTtcbiAgICB9LFxuICAgIG9uUmlnaHRLZXlEb3duOiBmdW5jdGlvbiBvblJpZ2h0S2V5RG93bigpIHtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8IHRoaXMudmFsdWUgPT09IHRoaXMubWF4KSByZXR1cm47XG4gICAgICB0aGlzLm5ld1Bvc2l0aW9uID0gcGFyc2VGbG9hdCh0aGlzLmN1cnJlbnRQb3NpdGlvbikgKyB0aGlzLnN0ZXAgLyAodGhpcy5tYXggLSB0aGlzLm1pbikgKiAxMDA7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMubmV3UG9zaXRpb24pO1xuICAgICAgdGhpcy4kcGFyZW50LmVtaXRDaGFuZ2UoKTtcbiAgICB9LFxuICAgIG9uSG9tZUtleURvd246IGZ1bmN0aW9uIG9uSG9tZUtleURvd24oKSB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCB0aGlzLnZhbHVlID09PSB0aGlzLm1pbikgcmV0dXJuO1xuICAgICAgdGhpcy5uZXdQb3NpdGlvbiA9IDA7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMubmV3UG9zaXRpb24pO1xuICAgICAgdGhpcy4kcGFyZW50LmVtaXRDaGFuZ2UoKTtcbiAgICB9LFxuICAgIG9uRW5kS2V5RG93bjogZnVuY3Rpb24gb25FbmRLZXlEb3duKCkge1xuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgdGhpcy52YWx1ZSA9PT0gdGhpcy5tYXgpIHJldHVybjtcbiAgICAgIHRoaXMubmV3UG9zaXRpb24gPSAxMDA7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMubmV3UG9zaXRpb24pO1xuICAgICAgdGhpcy4kcGFyZW50LmVtaXRDaGFuZ2UoKTtcbiAgICB9LFxuICAgIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbiBvbkRyYWdTdGFydChldmVudCkge1xuICAgICAgdGhpcy5kcmFnZ2luZyA9IHRydWU7XG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgICAgZXZlbnQuY2xpZW50WCA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGFydFggPSBldmVudC5jbGllbnRYO1xuICAgICAgdGhpcy5zdGFydFBvc2l0aW9uID0gcGFyc2VGbG9hdCh0aGlzLmN1cnJlbnRQb3NpdGlvbik7XG4gICAgICB0aGlzLm5ld1Bvc2l0aW9uID0gdGhpcy5zdGFydFBvc2l0aW9uO1xuICAgIH0sXG4gICAgb25EcmFnZ2luZzogZnVuY3Rpb24gb25EcmFnZ2luZyhldmVudCkge1xuICAgICAgaWYgKHRoaXMuZHJhZ2dpbmcpIHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgICAgICAgZXZlbnQuY2xpZW50WCA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaWZmID0gKGV2ZW50LmNsaWVudFggLSB0aGlzLnN0YXJ0WCkgLyB0aGlzLiRwYXJlbnQuc2xpZGVyU2l6ZSAqIDEwMDtcbiAgICAgICAgdGhpcy5uZXdQb3NpdGlvbiA9IHRoaXMuc3RhcnRQb3NpdGlvbiArIGRpZmY7XG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb24odGhpcy5uZXdQb3NpdGlvbik7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkRyYWdFbmQ6IGZ1bmN0aW9uIG9uRHJhZ0VuZCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLnZhbHVlICE9PSB0aGlzLm9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuJHBhcmVudC5lbWl0Q2hhbmdlKCk7XG4gICAgICB9XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBkZWZlciB0byBwcmV2ZW50IHRyaWdnZXJpbmcgY2xpY2sgb24gdGhlIHRyYWNrXG4gICAgICAgIF90aGlzLmRyYWdnaW5nID0gZmFsc2U7XG5cbiAgICAgICAgX3RoaXMuc2V0UG9zaXRpb24oX3RoaXMubmV3UG9zaXRpb24pO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uRHJhZ2dpbmcpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uRHJhZ2dpbmcpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbkRyYWdFbmQpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25EcmFnRW5kKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCB0aGlzLm9uRHJhZ0VuZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRQb3NpdGlvbjogZnVuY3Rpb24gc2V0UG9zaXRpb24ocGVyY2VudCkge1xuICAgICAgaWYgKHBlcmNlbnQgPT09IG51bGwgfHwgaXNOYU4ocGVyY2VudCkpIHJldHVybjtcblxuICAgICAgaWYgKHBlcmNlbnQgPCAwKSB7XG4gICAgICAgIHBlcmNlbnQgPSAwO1xuICAgICAgfSBlbHNlIGlmIChwZXJjZW50ID4gMTAwKSB7XG4gICAgICAgIHBlcmNlbnQgPSAxMDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGVwTGVuZ3RoID0gMTAwIC8gKCh0aGlzLm1heCAtIHRoaXMubWluKSAvIHRoaXMuc3RlcCk7XG4gICAgICB2YXIgc3RlcHMgPSBNYXRoLnJvdW5kKHBlcmNlbnQgLyBzdGVwTGVuZ3RoKTtcbiAgICAgIHZhciB2YWx1ZSA9IHN0ZXBzICogc3RlcExlbmd0aCAvIDEwMCAqICh0aGlzLm1heCAtIHRoaXMubWluKSArIHRoaXMubWluO1xuICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlLnRvRml4ZWQodGhpcy5wcmVjaXNpb24pKTtcbiAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdmFsdWUpO1xuXG4gICAgICBpZiAoIXRoaXMuZHJhZ2dpbmcgJiYgdmFsdWUgIT09IHRoaXMub2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5vbGRWYWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYi1zbGlkZXItdGh1bWItd3JhcHBlclwiLGNsYXNzOnsgJ2lzLWRyYWdnaW5nJzogX3ZtLmRyYWdnaW5nIH0sc3R5bGU6KF92bS53cmFwcGVyU3R5bGUpfSxbX2MoJ2ItdG9vbHRpcCcse2F0dHJzOntcImxhYmVsXCI6X3ZtLnZhbHVlLnRvU3RyaW5nKCksXCJ0eXBlXCI6X3ZtLnR5cGUsXCJhbHdheXNcIjpfdm0uZHJhZ2dpbmcgfHwgX3ZtLmlzRm9jdXNlZCxcImFjdGl2ZVwiOiFfdm0uZGlzYWJsZWQgJiYgX3ZtLnRvb2x0aXB9fSxbX2MoJ2RpdicsX3ZtLl9iKHtzdGF0aWNDbGFzczpcImItc2xpZGVyLXRodW1iXCIsYXR0cnM6e1widGFiaW5kZXhcIjpfdm0uZGlzYWJsZWQgPyBmYWxzZSA6IDB9LG9uOntcIm1vdXNlZG93blwiOl92bS5vbkJ1dHRvbkRvd24sXCJ0b3VjaHN0YXJ0XCI6X3ZtLm9uQnV0dG9uRG93bixcImZvY3VzXCI6X3ZtLm9uRm9jdXMsXCJibHVyXCI6X3ZtLm9uQmx1cixcImtleWRvd25cIjpbZnVuY3Rpb24oJGV2ZW50KXtpZighKCdidXR0b24nIGluICRldmVudCkmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImxlZnRcIiwzNywkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9aWYoJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDApeyByZXR1cm4gbnVsbDsgfSRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5vbkxlZnRLZXlEb3duKCRldmVudCk7fSxmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwicmlnaHRcIiwzOSwkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9aWYoJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDIpeyByZXR1cm4gbnVsbDsgfSRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5vblJpZ2h0S2V5RG93bigkZXZlbnQpO30sZnVuY3Rpb24oJGV2ZW50KXtpZighKCdidXR0b24nIGluICRldmVudCkmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImRvd25cIiw0MCwkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLm9uTGVmdEtleURvd24oJGV2ZW50KTt9LGZ1bmN0aW9uKCRldmVudCl7aWYoISgnYnV0dG9uJyBpbiAkZXZlbnQpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJ1cFwiLDM4LCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH0kZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0ub25SaWdodEtleURvd24oJGV2ZW50KTt9LGZ1bmN0aW9uKCRldmVudCl7aWYoISgnYnV0dG9uJyBpbiAkZXZlbnQpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJob21lXCIsdW5kZWZpbmVkLCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH0kZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0ub25Ib21lS2V5RG93bigkZXZlbnQpO30sZnVuY3Rpb24oJGV2ZW50KXtpZighKCdidXR0b24nIGluICRldmVudCkmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImVuZFwiLHVuZGVmaW5lZCwkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLm9uRW5kS2V5RG93bigkZXZlbnQpO31dfX0sJ2RpdicsX3ZtLiRhdHRycyxmYWxzZSkpXSldLDEpfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyA9IHVuZGVmaW5lZDtcbiAgLyogc2NvcGVkICovXG4gIGNvbnN0IF9fdnVlX3Njb3BlX2lkX18gPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fID0gZmFsc2U7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIFNsaWRlclRodW1iID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbnZhciBzY3JpcHQkMSA9IHtcbiAgbmFtZTogJ0JTbGlkZXJUaWNrJyxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMFxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBwb3NpdGlvbjogZnVuY3Rpb24gcG9zaXRpb24oKSB7XG4gICAgICB2YXIgcG9zID0gKHRoaXMudmFsdWUgLSB0aGlzLiRwYXJlbnQubWluKSAvICh0aGlzLiRwYXJlbnQubWF4IC0gdGhpcy4kcGFyZW50Lm1pbikgKiAxMDA7XG4gICAgICByZXR1cm4gcG9zID49IDAgJiYgcG9zIDw9IDEwMCA/IHBvcyA6IDA7XG4gICAgfSxcbiAgICBoaWRkZW46IGZ1bmN0aW9uIGhpZGRlbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSB0aGlzLiRwYXJlbnQubWluIHx8IHRoaXMudmFsdWUgPT09IHRoaXMuJHBhcmVudC5tYXg7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ2V0VGlja1N0eWxlOiBmdW5jdGlvbiBnZXRUaWNrU3R5bGUocG9zaXRpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdsZWZ0JzogcG9zaXRpb24gKyAnJSdcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge1xuICAgIGlmICghdGhpcy4kcGFyZW50LiRkYXRhLl9pc1NsaWRlcikge1xuICAgICAgdGhpcy4kZGVzdHJveSgpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3Ugc2hvdWxkIHdyYXAgYlNsaWRlclRpY2sgb24gYSBiU2xpZGVyJyk7XG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fJDEgPSBzY3JpcHQkMTtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyQxID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJiLXNsaWRlci10aWNrXCIsY2xhc3M6eyAnaXMtdGljay1oaWRkZW4nOiBfdm0uaGlkZGVuIH0sc3R5bGU6KF92bS5nZXRUaWNrU3R5bGUoX3ZtLnBvc2l0aW9uKSl9LFsoX3ZtLiRzbG90cy5kZWZhdWx0KT9fYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiYi1zbGlkZXItdGljay1sYWJlbFwifSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMik6X3ZtLl9lKCldKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kMSA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDEgPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgU2xpZGVyVGljayA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHsgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXyQxLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDEgfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kMSxcbiAgICBfX3Z1ZV9zY3JpcHRfXyQxLFxuICAgIF9fdnVlX3Njb3BlX2lkX18kMSxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEsXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgX2NvbXBvbmVudHM7XG52YXIgc2NyaXB0JDIgPSB7XG4gIG5hbWU6ICdCU2xpZGVyJyxcbiAgY29tcG9uZW50czogKF9jb21wb25lbnRzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgU2xpZGVyVGh1bWIubmFtZSwgU2xpZGVyVGh1bWIpLCBfZGVmaW5lUHJvcGVydHkoX2NvbXBvbmVudHMsIFNsaWRlclRpY2submFtZSwgU2xpZGVyVGljayksIF9jb21wb25lbnRzKSxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogW051bWJlciwgQXJyYXldLFxuICAgICAgZGVmYXVsdDogMFxuICAgIH0sXG4gICAgbWluOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcbiAgICBtYXg6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDEwMFxuICAgIH0sXG4gICAgc3RlcDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgdHlwZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2lzLXByaW1hcnknXG4gICAgfSxcbiAgICBzaXplOiBTdHJpbmcsXG4gICAgdGlja3M6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgdG9vbHRpcDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIHRvb2x0aXBUeXBlOiBTdHJpbmcsXG4gICAgcm91bmRlZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBkaXNhYmxlZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBhcmlhTGFiZWw6IFtTdHJpbmcsIEFycmF5XVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTE6IG51bGwsXG4gICAgICB2YWx1ZTI6IG51bGwsXG4gICAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgICBpc1JhbmdlOiBmYWxzZSxcbiAgICAgIG5ld1Rvb2x0aXBUeXBlOiB0aGlzLnRvb2x0aXBUeXBlID8gdGhpcy50b29sdGlwVHlwZSA6IHRoaXMudHlwZSxcbiAgICAgIF9pc1NsaWRlcjogdHJ1ZSAvLyBVc2VkIGJ5IFRodW1iIGFuZCBUaWNrXG5cbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIHRpY2tWYWx1ZXM6IGZ1bmN0aW9uIHRpY2tWYWx1ZXMoKSB7XG4gICAgICBpZiAoIXRoaXMudGlja3MgfHwgdGhpcy5taW4gPiB0aGlzLm1heCB8fCB0aGlzLnN0ZXAgPT09IDApIHJldHVybiBbXTtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMubWluICsgdGhpcy5zdGVwOyBpIDwgdGhpcy5tYXg7IGkgPSBpICsgdGhpcy5zdGVwKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgbWluVmFsdWU6IGZ1bmN0aW9uIG1pblZhbHVlKCkge1xuICAgICAgcmV0dXJuIE1hdGgubWluKHRoaXMudmFsdWUxLCB0aGlzLnZhbHVlMik7XG4gICAgfSxcbiAgICBtYXhWYWx1ZTogZnVuY3Rpb24gbWF4VmFsdWUoKSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy52YWx1ZTEsIHRoaXMudmFsdWUyKTtcbiAgICB9LFxuICAgIGJhclNpemU6IGZ1bmN0aW9uIGJhclNpemUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1JhbmdlID8gXCJcIi5jb25jYXQoMTAwICogKHRoaXMubWF4VmFsdWUgLSB0aGlzLm1pblZhbHVlKSAvICh0aGlzLm1heCAtIHRoaXMubWluKSwgXCIlXCIpIDogXCJcIi5jb25jYXQoMTAwICogKHRoaXMudmFsdWUxIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pLCBcIiVcIik7XG4gICAgfSxcbiAgICBiYXJTdGFydDogZnVuY3Rpb24gYmFyU3RhcnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1JhbmdlID8gXCJcIi5jb25jYXQoMTAwICogKHRoaXMubWluVmFsdWUgLSB0aGlzLm1pbikgLyAodGhpcy5tYXggLSB0aGlzLm1pbiksIFwiJVwiKSA6ICcwJSc7XG4gICAgfSxcbiAgICBwcmVjaXNpb246IGZ1bmN0aW9uIHByZWNpc2lvbigpIHtcbiAgICAgIHZhciBwcmVjaXNpb25zID0gW3RoaXMubWluLCB0aGlzLm1heCwgdGhpcy5zdGVwXS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgdmFyIGRlY2ltYWwgPSAoJycgKyBpdGVtKS5zcGxpdCgnLicpWzFdO1xuICAgICAgICByZXR1cm4gZGVjaW1hbCA/IGRlY2ltYWwubGVuZ3RoIDogMDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShwcmVjaXNpb25zKSk7XG4gICAgfSxcbiAgICBiYXJTdHlsZTogZnVuY3Rpb24gYmFyU3R5bGUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogdGhpcy5iYXJTaXplLFxuICAgICAgICBsZWZ0OiB0aGlzLmJhclN0YXJ0XG4gICAgICB9O1xuICAgIH0sXG4gICAgc2xpZGVyU2l6ZTogZnVuY3Rpb24gc2xpZGVyU2l6ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzLnNsaWRlclsnY2xpZW50V2lkdGgnXTtcbiAgICB9LFxuICAgIHJvb3RDbGFzc2VzOiBmdW5jdGlvbiByb290Q2xhc3NlcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdpcy1yb3VuZGVkJzogdGhpcy5yb3VuZGVkLFxuICAgICAgICAnaXMtZHJhZ2dpbmcnOiB0aGlzLmRyYWdnaW5nLFxuICAgICAgICAnaXMtZGlzYWJsZWQnOiB0aGlzLmRpc2FibGVkXG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICAvKipcclxuICAgICogV2hlbiB2LW1vZGVsIGlzIGNoYW5nZWQgc2V0IHRoZSBuZXcgYWN0aXZlIHN0ZXAuXHJcbiAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShfdmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWVzKF92YWx1ZSk7XG4gICAgfSxcbiAgICB2YWx1ZTE6IGZ1bmN0aW9uIHZhbHVlMSh2YWwpIHtcbiAgICAgIHRoaXMuaXNUaHVtYlJldmVyc2VkID0gdGhpcy52YWx1ZTEgPiB0aGlzLnZhbHVlMjtcblxuICAgICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIFt0aGlzLm1pblZhbHVlLCB0aGlzLm1heFZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHZhbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWx1ZTI6IGZ1bmN0aW9uIHZhbHVlMih2YWwpIHtcbiAgICAgIHRoaXMuaXNUaHVtYlJldmVyc2VkID0gdGhpcy52YWx1ZTEgPiB0aGlzLnZhbHVlMjtcblxuICAgICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIFt0aGlzLm1pblZhbHVlLCB0aGlzLm1heFZhbHVlXSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBtaW46IGZ1bmN0aW9uIG1pbigpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWVzKCk7XG4gICAgfSxcbiAgICBtYXg6IGZ1bmN0aW9uIG1heCgpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWVzKCk7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgc2V0VmFsdWVzOiBmdW5jdGlvbiBzZXRWYWx1ZXMobmV3VmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLm1pbiA+IHRoaXMubWF4KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmV3VmFsdWUpKSB7XG4gICAgICAgIHRoaXMuaXNSYW5nZSA9IHRydWU7XG4gICAgICAgIHZhciBzbWFsbFZhbHVlID0gdHlwZW9mIG5ld1ZhbHVlWzBdICE9PSAnbnVtYmVyJyB8fCBpc05hTihuZXdWYWx1ZVswXSkgPyB0aGlzLm1pbiA6IE1hdGgubWluKE1hdGgubWF4KHRoaXMubWluLCBuZXdWYWx1ZVswXSksIHRoaXMubWF4KTtcbiAgICAgICAgdmFyIGxhcmdlVmFsdWUgPSB0eXBlb2YgbmV3VmFsdWVbMV0gIT09ICdudW1iZXInIHx8IGlzTmFOKG5ld1ZhbHVlWzFdKSA/IHRoaXMubWF4IDogTWF0aC5tYXgoTWF0aC5taW4odGhpcy5tYXgsIG5ld1ZhbHVlWzFdKSwgdGhpcy5taW4pO1xuICAgICAgICB0aGlzLnZhbHVlMSA9IHRoaXMuaXNUaHVtYlJldmVyc2VkID8gbGFyZ2VWYWx1ZSA6IHNtYWxsVmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWUyID0gdGhpcy5pc1RodW1iUmV2ZXJzZWQgPyBzbWFsbFZhbHVlIDogbGFyZ2VWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaXNSYW5nZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZhbHVlMSA9IGlzTmFOKG5ld1ZhbHVlKSA/IHRoaXMubWluIDogTWF0aC5taW4odGhpcy5tYXgsIE1hdGgubWF4KHRoaXMubWluLCBuZXdWYWx1ZSkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25TbGlkZXJDbGljazogZnVuY3Rpb24gb25TbGlkZXJDbGljayhldmVudCkge1xuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuICAgICAgdmFyIHNsaWRlck9mZnNldExlZnQgPSB0aGlzLiRyZWZzLnNsaWRlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgICAgdmFyIHBlcmNlbnQgPSAoZXZlbnQuY2xpZW50WCAtIHNsaWRlck9mZnNldExlZnQpIC8gdGhpcy5zbGlkZXJTaXplICogMTAwO1xuICAgICAgdmFyIHRhcmdldFZhbHVlID0gdGhpcy5taW4gKyBwZXJjZW50ICogKHRoaXMubWF4IC0gdGhpcy5taW4pIC8gMTAwO1xuICAgICAgdmFyIGRpZmZGaXJzdCA9IE1hdGguYWJzKHRhcmdldFZhbHVlIC0gdGhpcy52YWx1ZTEpO1xuXG4gICAgICBpZiAoIXRoaXMuaXNSYW5nZSkge1xuICAgICAgICBpZiAoZGlmZkZpcnN0IDwgdGhpcy5zdGVwIC8gMikgcmV0dXJuO1xuICAgICAgICB0aGlzLiRyZWZzLmJ1dHRvbjEuc2V0UG9zaXRpb24ocGVyY2VudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZGlmZlNlY29uZCA9IE1hdGguYWJzKHRhcmdldFZhbHVlIC0gdGhpcy52YWx1ZTIpO1xuXG4gICAgICAgIGlmIChkaWZmRmlyc3QgPD0gZGlmZlNlY29uZCkge1xuICAgICAgICAgIGlmIChkaWZmRmlyc3QgPCB0aGlzLnN0ZXAgLyAyKSByZXR1cm47XG4gICAgICAgICAgdGhpcy4kcmVmc1snYnV0dG9uMSddLnNldFBvc2l0aW9uKHBlcmNlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChkaWZmU2Vjb25kIDwgdGhpcy5zdGVwIC8gMikgcmV0dXJuO1xuICAgICAgICAgIHRoaXMuJHJlZnNbJ2J1dHRvbjInXS5zZXRQb3NpdGlvbihwZXJjZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmVtaXRDaGFuZ2UoKTtcbiAgICB9LFxuICAgIGVtaXRDaGFuZ2U6IGZ1bmN0aW9uIGVtaXRDaGFuZ2UoKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLmlzUmFuZ2UgPyBbdGhpcy5taW5WYWx1ZSwgdGhpcy5tYXhWYWx1ZV0gOiB0aGlzLnZhbHVlMSk7XG4gICAgfVxuICB9LFxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge1xuICAgIHRoaXMuc2V0VmFsdWVzKHRoaXMudmFsdWUpO1xuICAgIHRoaXMuaXNUaHVtYlJldmVyc2VkID0gZmFsc2U7XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18kMiA9IHNjcmlwdCQyO1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fJDIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImItc2xpZGVyXCIsY2xhc3M6W192bS5zaXplLCBfdm0udHlwZSwgX3ZtLnJvb3RDbGFzc2VzXX0sW19jKCdkaXYnLHtyZWY6XCJzbGlkZXJcIixzdGF0aWNDbGFzczpcImItc2xpZGVyLXRyYWNrXCIsb246e1wiY2xpY2tcIjpfdm0ub25TbGlkZXJDbGlja319LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJiLXNsaWRlci1maWxsXCIsc3R5bGU6KF92bS5iYXJTdHlsZSl9KSxfdm0uX3YoXCIgXCIpLChfdm0udGlja3MpP192bS5fbCgoX3ZtLnRpY2tWYWx1ZXMpLGZ1bmN0aW9uKHZhbCxrZXkpe3JldHVybiBfYygnYi1zbGlkZXItdGljaycse2tleTprZXksYXR0cnM6e1widmFsdWVcIjp2YWx9fSl9KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5fdChcImRlZmF1bHRcIiksX3ZtLl92KFwiIFwiKSxfYygnYi1zbGlkZXItdGh1bWInLHtyZWY6XCJidXR0b24xXCIsYXR0cnM6e1widHlwZVwiOl92bS5uZXdUb29sdGlwVHlwZSxcInRvb2x0aXBcIjpfdm0udG9vbHRpcCxcInJvbGVcIjpcInNsaWRlclwiLFwiYXJpYS12YWx1ZW5vd1wiOl92bS52YWx1ZTEsXCJhcmlhLXZhbHVlbWluXCI6X3ZtLm1pbixcImFyaWEtdmFsdWVtYXhcIjpfdm0ubWF4LFwiYXJpYS1vcmllbnRhdGlvblwiOlwiaG9yaXpvbnRhbFwiLFwiYXJpYS1sYWJlbFwiOkFycmF5LmlzQXJyYXkoX3ZtLmFyaWFMYWJlbCkgPyBfdm0uYXJpYUxhYmVsWzBdIDogX3ZtLmFyaWFMYWJlbCxcImFyaWEtZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWR9LG1vZGVsOnt2YWx1ZTooX3ZtLnZhbHVlMSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS52YWx1ZTE9JCR2O30sZXhwcmVzc2lvbjpcInZhbHVlMVwifX0pLF92bS5fdihcIiBcIiksKF92bS5pc1JhbmdlKT9fYygnYi1zbGlkZXItdGh1bWInLHtyZWY6XCJidXR0b24yXCIsYXR0cnM6e1widHlwZVwiOl92bS5uZXdUb29sdGlwVHlwZSxcInRvb2x0aXBcIjpfdm0udG9vbHRpcCxcInJvbGVcIjpcInNsaWRlclwiLFwiYXJpYS12YWx1ZW5vd1wiOl92bS52YWx1ZTIsXCJhcmlhLXZhbHVlbWluXCI6X3ZtLm1pbixcImFyaWEtdmFsdWVtYXhcIjpfdm0ubWF4LFwiYXJpYS1vcmllbnRhdGlvblwiOlwiaG9yaXpvbnRhbFwiLFwiYXJpYS1sYWJlbFwiOkFycmF5LmlzQXJyYXkoX3ZtLmFyaWFMYWJlbCkgPyBfdm0uYXJpYUxhYmVsWzFdIDogJycsXCJhcmlhLWRpc2FibGVkXCI6X3ZtLmRpc2FibGVkfSxtb2RlbDp7dmFsdWU6KF92bS52YWx1ZTIpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0udmFsdWUyPSQkdjt9LGV4cHJlc3Npb246XCJ2YWx1ZTJcIn19KTpfdm0uX2UoKV0sMildKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kMiA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyQyID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyQyID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDIgPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDIgPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgU2xpZGVyID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fJDIsIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18kMiB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyQyLFxuICAgIF9fdnVlX3NjcmlwdF9fJDIsXG4gICAgX192dWVfc2NvcGVfaWRfXyQyLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQyLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMixcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBTbGlkZXIpO1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgU2xpZGVyVGljayk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuZXhwb3J0IHsgU2xpZGVyLCBTbGlkZXJUaWNrIH07XG4iLCJpbXBvcnQgJy4vY2h1bmstZTVmY2U0OGYuanMnO1xuaW1wb3J0IHsgYyBhcyBjb25maWcgfSBmcm9tICcuL2NodW5rLTllMzIwN2NjLmpzJztcbmltcG9ydCB7IF8gYXMgX192dWVfbm9ybWFsaXplX18sIGEgYXMgcmVnaXN0ZXJDb21wb25lbnRQcm9ncmFtbWF0aWMsIHUgYXMgdXNlIH0gZnJvbSAnLi9jaHVuay1jY2E4OGRiOC5qcyc7XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBOIGFzIE5vdGljZU1peGluIH0gZnJvbSAnLi9jaHVuay1kYWVhYzg1Mi5qcyc7XG5cbi8vXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQlNuYWNrYmFyJyxcbiAgbWl4aW5zOiBbTm90aWNlTWl4aW5dLFxuICBwcm9wczoge1xuICAgIGFjdGlvblRleHQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdPSydcbiAgICB9LFxuICAgIG9uQWN0aW9uOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge31cbiAgICB9LFxuICAgIGluZGVmaW5pdGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmV3RHVyYXRpb246IHRoaXMuZHVyYXRpb24gfHwgY29uZmlnLmRlZmF1bHRTbmFja2JhckR1cmF0aW9uXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIC8qKlxyXG4gICAgKiBDbGljayBsaXN0ZW5lci5cclxuICAgICogQ2FsbCBhY3Rpb24gcHJvcCBiZWZvcmUgY2xvc2luZyAoZnJvbSBNaXhpbikuXHJcbiAgICAqL1xuICAgIGFjdGlvbjogZnVuY3Rpb24gYWN0aW9uKCkge1xuICAgICAgdGhpcy5vbkFjdGlvbigpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3RyYW5zaXRpb24nLHthdHRyczp7XCJlbnRlci1hY3RpdmUtY2xhc3NcIjpfdm0udHJhbnNpdGlvbi5lbnRlcixcImxlYXZlLWFjdGl2ZS1jbGFzc1wiOl92bS50cmFuc2l0aW9uLmxlYXZlfX0sW19jKCdkaXYnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KF92bS5pc0FjdGl2ZSksZXhwcmVzc2lvbjpcImlzQWN0aXZlXCJ9XSxzdGF0aWNDbGFzczpcInNuYWNrYmFyXCIsY2xhc3M6W192bS50eXBlLF92bS5wb3NpdGlvbl19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0ZXh0XCIsZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKF92bS5tZXNzYWdlKX19KSxfdm0uX3YoXCIgXCIpLChfdm0uYWN0aW9uVGV4dCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYWN0aW9uXCIsY2xhc3M6X3ZtLnR5cGUsb246e1wiY2xpY2tcIjpfdm0uYWN0aW9ufX0sW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImJ1dHRvblwifSxbX3ZtLl92KF92bS5fcyhfdm0uYWN0aW9uVGV4dCkpXSldKTpfdm0uX2UoKV0pXSl9O1xudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgU25hY2tiYXIgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBTbmFja2JhclByb2dyYW1tYXRpYyA9IHtcbiAgb3BlbjogZnVuY3Rpb24gb3BlbihwYXJhbXMpIHtcbiAgICB2YXIgbWVzc2FnZTtcbiAgICB2YXIgcGFyZW50O1xuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAnc3RyaW5nJykgbWVzc2FnZSA9IHBhcmFtcztcbiAgICB2YXIgZGVmYXVsdFBhcmFtID0ge1xuICAgICAgdHlwZTogJ2lzLXN1Y2Nlc3MnLFxuICAgICAgcG9zaXRpb246IGNvbmZpZy5kZWZhdWx0U25hY2tiYXJQb3NpdGlvbiB8fCAnaXMtYm90dG9tLXJpZ2h0JyxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9O1xuXG4gICAgaWYgKHBhcmFtcy5wYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmFtcy5wYXJlbnQ7XG4gICAgICBkZWxldGUgcGFyYW1zLnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXIgcHJvcHNEYXRhID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0UGFyYW0sIHBhcmFtcyk7XG4gICAgdmFyIHZtID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZ1ZSA/IHdpbmRvdy5WdWUgOiBWdWU7XG4gICAgdmFyIFNuYWNrYmFyQ29tcG9uZW50ID0gdm0uZXh0ZW5kKFNuYWNrYmFyKTtcbiAgICByZXR1cm4gbmV3IFNuYWNrYmFyQ29tcG9uZW50KHtcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgZWw6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgcHJvcHNEYXRhOiBwcm9wc0RhdGFcbiAgICB9KTtcbiAgfVxufTtcbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnRQcm9ncmFtbWF0aWMoVnVlLCAnc25hY2tiYXInLCBTbmFja2JhclByb2dyYW1tYXRpYyk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuZXhwb3J0IHsgU25hY2tiYXJQcm9ncmFtbWF0aWMgfTtcbiIsImltcG9ydCB7IF8gYXMgX2RlZmluZVByb3BlcnR5IH0gZnJvbSAnLi9jaHVuay1kNjIwMDA4Ny5qcyc7XG5pbXBvcnQgJy4vY2h1bmstOWUzMjA3Y2MuanMnO1xuaW1wb3J0IHsgSSBhcyBJY29uIH0gZnJvbSAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IHsgUyBhcyBTbG90Q29tcG9uZW50IH0gZnJvbSAnLi9jaHVuay0wZTNmNGZiNS5qcyc7XG5cbnZhciBfY29tcG9uZW50cztcbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdCU3RlcHMnLFxuICBjb21wb25lbnRzOiAoX2NvbXBvbmVudHMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jb21wb25lbnRzLCBJY29uLm5hbWUsIEljb24pLCBfZGVmaW5lUHJvcGVydHkoX2NvbXBvbmVudHMsIFNsb3RDb21wb25lbnQubmFtZSwgU2xvdENvbXBvbmVudCksIF9jb21wb25lbnRzKSxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZTogTnVtYmVyLFxuICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0sXG4gICAgc2l6ZTogU3RyaW5nLFxuICAgIGFuaW1hdGVkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgZGVzdHJveU9uSGlkZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBpY29uUGFjazogU3RyaW5nLFxuICAgIGhhc05hdmlnYXRpb246IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBhcmlhTmV4dExhYmVsOiBTdHJpbmcsXG4gICAgYXJpYVByZXZpb3VzTGFiZWw6IFN0cmluZ1xuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhY3RpdmVTdGVwOiB0aGlzLnZhbHVlIHx8IDAsXG4gICAgICBzdGVwSXRlbXM6IFtdLFxuICAgICAgY29udGVudEhlaWdodDogMCxcbiAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2UsXG4gICAgICBfaXNTdGVwczogdHJ1ZSAvLyBVc2VkIGludGVybmFsbHkgYnkgU3RlcEl0ZW1cblxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgbWFpbkNsYXNzZXM6IGZ1bmN0aW9uIG1haW5DbGFzc2VzKCkge1xuICAgICAgcmV0dXJuIFt0aGlzLnR5cGUsIHRoaXMuc2l6ZV07XG4gICAgfSxcbiAgICByZXZlcnNlZFN0ZXBJdGVtczogZnVuY3Rpb24gcmV2ZXJzZWRTdGVwSXRlbXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGVwSXRlbXMuc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICAgICogQ2hlY2sgdGhlIGZpcnN0IHZpc2libGUgc3RlcCBpbmRleC5cclxuICAgICAgICAqL1xuICAgIGZpcnN0VmlzaWJsZVN0ZXBJbmRleDogZnVuY3Rpb24gZmlyc3RWaXNpYmxlU3RlcEluZGV4KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RlcEl0ZW1zLmZpbmRJbmRleChmdW5jdGlvbiAoc3RlcCwgaWR4KSB7XG4gICAgICAgIHJldHVybiBzdGVwLnZpc2libGU7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgICAgKiBDaGVjayBpZiBwcmV2aW91cyBidXR0b24gaXMgYXZhaWxhYmxlLlxyXG4gICAgICAgICovXG4gICAgaGFzUHJldjogZnVuY3Rpb24gaGFzUHJldigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpcnN0VmlzaWJsZVN0ZXBJbmRleCA+PSAwICYmIHRoaXMuYWN0aXZlU3RlcCA+IHRoaXMuZmlyc3RWaXNpYmxlU3RlcEluZGV4O1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAgICAqIENoZWNrIHRoZSBsYXN0IHZpc2libGUgc3RlcCBpbmRleC5cclxuICAgICAgICAqL1xuICAgIGxhc3RWaXNpYmxlU3RlcEluZGV4OiBmdW5jdGlvbiBsYXN0VmlzaWJsZVN0ZXBJbmRleCgpIHtcbiAgICAgIHZhciBpZHggPSB0aGlzLnJldmVyc2VkU3RlcEl0ZW1zLmZpbmRJbmRleChmdW5jdGlvbiAoc3RlcCwgaWR4KSB7XG4gICAgICAgIHJldHVybiBzdGVwLnZpc2libGU7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXBJdGVtcy5sZW5ndGggLSAxIC0gaWR4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaWR4O1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAgICAqIENoZWNrIGlmIG5leHQgYnV0dG9uIGlzIGF2YWlsYWJsZS5cclxuICAgICAgICAqL1xuICAgIGhhc05leHQ6IGZ1bmN0aW9uIGhhc05leHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sYXN0VmlzaWJsZVN0ZXBJbmRleCA+PSAwICYmIHRoaXMuYWN0aXZlU3RlcCA8IHRoaXMubGFzdFZpc2libGVTdGVwSW5kZXg7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIC8qKlxyXG4gICAgKiBXaGVuIHYtbW9kZWwgaXMgY2hhbmdlZCBzZXQgdGhlIG5ldyBhY3RpdmUgc3RlcC5cclxuICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKF92YWx1ZSkge1xuICAgICAgdGhpcy5jaGFuZ2VTdGVwKF92YWx1ZSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBXaGVuIHN0ZXAtaXRlbXMgYXJlIHVwZGF0ZWQsIHNldCBhY3RpdmUgb25lLlxyXG4gICAgKi9cbiAgICBzdGVwSXRlbXM6IGZ1bmN0aW9uIHN0ZXBJdGVtcygpIHtcbiAgICAgIGlmICh0aGlzLmFjdGl2ZVN0ZXAgPCB0aGlzLnN0ZXBJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5zdGVwSXRlbXNbdGhpcy5hY3RpdmVTdGVwXS5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqXHJcbiAgICAqIENoYW5nZSB0aGUgYWN0aXZlIHN0ZXAgYW5kIGVtaXQgY2hhbmdlIGV2ZW50LlxyXG4gICAgKi9cbiAgICBjaGFuZ2VTdGVwOiBmdW5jdGlvbiBjaGFuZ2VTdGVwKG5ld0luZGV4KSB7XG4gICAgICBpZiAodGhpcy5hY3RpdmVTdGVwID09PSBuZXdJbmRleCkgcmV0dXJuO1xuXG4gICAgICBpZiAodGhpcy5hY3RpdmVTdGVwIDwgdGhpcy5zdGVwSXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuc3RlcEl0ZW1zW3RoaXMuYWN0aXZlU3RlcF0uZGVhY3RpdmF0ZSh0aGlzLmFjdGl2ZVN0ZXAsIG5ld0luZGV4KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGVwSXRlbXNbbmV3SW5kZXhdLmFjdGl2YXRlKHRoaXMuYWN0aXZlU3RlcCwgbmV3SW5kZXgpO1xuICAgICAgdGhpcy5hY3RpdmVTdGVwID0gbmV3SW5kZXg7XG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCBuZXdJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICAgICogUmV0dXJuIGlmIHRoZSBzdGVwIHNob3VsZCBiZSBjbGlja2FibGUgb3Igbm90LlxyXG4gICAgICAgICovXG4gICAgaXNJdGVtQ2xpY2thYmxlOiBmdW5jdGlvbiBpc0l0ZW1DbGlja2FibGUoc3RlcEl0ZW0sIGluZGV4KSB7XG4gICAgICBpZiAoc3RlcEl0ZW0uY2xpY2thYmxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlU3RlcCA+IGluZGV4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RlcEl0ZW0uY2xpY2thYmxlO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogU3RlcCBjbGljayBsaXN0ZW5lciwgZW1pdCBpbnB1dCBldmVudCBhbmQgY2hhbmdlIGFjdGl2ZSBzdGVwLlxyXG4gICAgKi9cbiAgICBzdGVwQ2xpY2s6IGZ1bmN0aW9uIHN0ZXBDbGljayh2YWx1ZSkge1xuICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoYW5nZVN0ZXAodmFsdWUpO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAgICAqIFByZXZpb3VzIGJ1dHRvbiBjbGljayBsaXN0ZW5lci5cclxuICAgICAgICAqL1xuICAgIHByZXY6IGZ1bmN0aW9uIHByZXYoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuaGFzUHJldikgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJdGVtSWR4ID0gdGhpcy5yZXZlcnNlZFN0ZXBJdGVtcy5maW5kSW5kZXgoZnVuY3Rpb24gKHN0ZXAsIGlkeCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc3RlcEl0ZW1zLmxlbmd0aCAtIDEgLSBpZHggPCBfdGhpcy5hY3RpdmVTdGVwICYmIHN0ZXAudmlzaWJsZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocHJldkl0ZW1JZHggPj0gMCkge1xuICAgICAgICBwcmV2SXRlbUlkeCA9IHRoaXMuc3RlcEl0ZW1zLmxlbmd0aCAtIDEgLSBwcmV2SXRlbUlkeDtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCBwcmV2SXRlbUlkeCk7XG4gICAgICB0aGlzLmNoYW5nZVN0ZXAocHJldkl0ZW1JZHgpO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAgICAqIFByZXZpb3VzIGJ1dHRvbiBjbGljayBsaXN0ZW5lci5cclxuICAgICAgICAqL1xuICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLmhhc05leHQpIHJldHVybjtcbiAgICAgIHZhciBuZXh0SXRlbUlkeCA9IHRoaXMuc3RlcEl0ZW1zLmZpbmRJbmRleChmdW5jdGlvbiAoc3RlcCwgaWR4KSB7XG4gICAgICAgIHJldHVybiBpZHggPiBfdGhpczIuYWN0aXZlU3RlcCAmJiBzdGVwLnZpc2libGU7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgbmV4dEl0ZW1JZHgpO1xuICAgICAgdGhpcy5jaGFuZ2VTdGVwKG5leHRJdGVtSWR4KTtcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlU3RlcCA8IHRoaXMuc3RlcEl0ZW1zLmxlbmd0aCkge1xuICAgICAgdGhpcy5zdGVwSXRlbXNbdGhpcy5hY3RpdmVTdGVwXS5pc0FjdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fID0gc2NyaXB0O1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJiLXN0ZXBzXCJ9LFtfYygnbmF2Jyx7c3RhdGljQ2xhc3M6XCJzdGVwc1wiLGNsYXNzOl92bS5tYWluQ2xhc3Nlc30sW19jKCd1bCcse3N0YXRpY0NsYXNzOlwic3RlcC1pdGVtc1wifSxfdm0uX2woKF92bS5zdGVwSXRlbXMpLGZ1bmN0aW9uKHN0ZXBJdGVtLGluZGV4KXtyZXR1cm4gX2MoJ2xpJyx7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOihzdGVwSXRlbS52aXNpYmxlKSxleHByZXNzaW9uOlwic3RlcEl0ZW0udmlzaWJsZVwifV0sa2V5OmluZGV4LHN0YXRpY0NsYXNzOlwic3RlcC1pdGVtXCIsY2xhc3M6W3N0ZXBJdGVtLnR5cGUgfHwgX3ZtLnR5cGUsIHtcbiAgICAgICAgICAgICAgICAgICAgJ2lzLWFjdGl2ZSc6IF92bS5hY3RpdmVTdGVwID09PSBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgJ2lzLXByZXZpb3VzJzogX3ZtLmFjdGl2ZVN0ZXAgPiBpbmRleFxuICAgICAgICAgICAgfV19LFtfYygnYScse3N0YXRpY0NsYXNzOlwic3RlcC1saW5rXCIsY2xhc3M6eydpcy1jbGlja2FibGUnOiBfdm0uaXNJdGVtQ2xpY2thYmxlKHN0ZXBJdGVtLCBpbmRleCl9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaXNJdGVtQ2xpY2thYmxlKHN0ZXBJdGVtLCBpbmRleCkgJiYgX3ZtLnN0ZXBDbGljayhpbmRleCk7fX19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJzdGVwLW1hcmtlclwifSxbKHN0ZXBJdGVtLmljb24pP19jKCdiLWljb24nLHthdHRyczp7XCJpY29uXCI6c3RlcEl0ZW0uaWNvbixcInBhY2tcIjpzdGVwSXRlbS5pY29uUGFjayxcInNpemVcIjpfdm0uc2l6ZX19KTpfdm0uX2UoKV0sMSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJzdGVwLWRldGFpbHNcIn0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJzdGVwLXRpdGxlXCJ9LFtfdm0uX3YoX3ZtLl9zKHN0ZXBJdGVtLmxhYmVsKSldKV0pXSldKX0pKV0pLF92bS5fdihcIiBcIiksX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczpcInN0ZXAtY29udGVudFwiLGNsYXNzOnsnaXMtdHJhbnNpdGlvbmluZyc6IF92bS5pc1RyYW5zaXRpb25pbmd9fSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMiksX3ZtLl92KFwiIFwiKSwoX3ZtLmhhc05hdmlnYXRpb24pP19jKCduYXYnLHtzdGF0aWNDbGFzczpcInN0ZXAtbmF2aWdhdGlvblwifSxbX2MoJ2EnLHtzdGF0aWNDbGFzczpcInBhZ2luYXRpb24tcHJldmlvdXNcIixhdHRyczp7XCJyb2xlXCI6XCJidXR0b25cIixcImhyZWZcIjpcIiNcIixcImRpc2FibGVkXCI6IV92bS5oYXNQcmV2LFwiYXJpYS1sYWJlbFwiOl92bS5hcmlhUHJldmlvdXNMYWJlbH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5wcmV2KCRldmVudCk7fX19LFtfYygnYi1pY29uJyx7YXR0cnM6e1wiaWNvblwiOlwiY2hldnJvbi1sZWZ0XCIsXCJwYWNrXCI6X3ZtLmljb25QYWNrLFwiYm90aFwiOlwiXCIsXCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCdhJyx7c3RhdGljQ2xhc3M6XCJwYWdpbmF0aW9uLW5leHRcIixhdHRyczp7XCJyb2xlXCI6XCJidXR0b25cIixcImhyZWZcIjpcIiNcIixcImRpc2FibGVkXCI6IV92bS5oYXNOZXh0LFwiYXJpYS1sYWJlbFwiOl92bS5hcmlhTmV4dExhYmVsfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLm5leHQoJGV2ZW50KTt9fX0sW19jKCdiLWljb24nLHthdHRyczp7XCJpY29uXCI6XCJjaGV2cm9uLXJpZ2h0XCIsXCJwYWNrXCI6X3ZtLmljb25QYWNrLFwiYm90aFwiOlwiXCIsXCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifX0pXSwxKV0pOl92bS5fZSgpXSl9O1xudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgU3RlcHMgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBzY3JpcHQkMSA9IHtcbiAgbmFtZTogJ0JTdGVwSXRlbScsXG4gIHByb3BzOiB7XG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICB0eXBlOiBTdHJpbmcgfCBPYmplY3QsXG4gICAgaWNvbjogU3RyaW5nLFxuICAgIGljb25QYWNrOiBTdHJpbmcsXG4gICAgY2xpY2thYmxlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICB2aXNpYmxlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNBY3RpdmU6IGZhbHNlLFxuICAgICAgdHJhbnNpdGlvbk5hbWU6IG51bGxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqXHJcbiAgICAqIEFjdGl2YXRlIHN0ZXAsIGFsdGVyIGFuaW1hdGlvbiBuYW1lIGJhc2VkIG9uIHRoZSBpbmRleC5cclxuICAgICovXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uIGFjdGl2YXRlKG9sZEluZGV4LCBpbmRleCkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uTmFtZSA9IGluZGV4IDwgb2xkSW5kZXggPyAnc2xpZGUtbmV4dCcgOiAnc2xpZGUtcHJldic7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIERlYWN0aXZhdGUgc3RlcCwgYWx0ZXIgYW5pbWF0aW9uIG5hbWUgYmFzZWQgb24gdGhlIGluZGV4LlxyXG4gICAgKi9cbiAgICBkZWFjdGl2YXRlOiBmdW5jdGlvbiBkZWFjdGl2YXRlKG9sZEluZGV4LCBpbmRleCkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uTmFtZSA9IGluZGV4IDwgb2xkSW5kZXggPyAnc2xpZGUtbmV4dCcgOiAnc2xpZGUtcHJldic7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICB9LFxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge1xuICAgIGlmICghdGhpcy4kcGFyZW50LiRkYXRhLl9pc1N0ZXBzKSB7XG4gICAgICB0aGlzLiRkZXN0cm95KCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBzaG91bGQgd3JhcCBiU3RlcEl0ZW0gb24gYSBiU3RlcHMnKTtcbiAgICB9XG5cbiAgICB0aGlzLiRwYXJlbnQuc3RlcEl0ZW1zLnB1c2godGhpcyk7XG4gIH0sXG4gIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy4kcGFyZW50LnN0ZXBJdGVtcy5pbmRleE9mKHRoaXMpO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRoaXMuJHBhcmVudC5zdGVwSXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gaWYgZGVzdHJveSBhcHBseSB2LWlmXG4gICAgaWYgKHRoaXMuJHBhcmVudC5kZXN0cm95T25IaWRlKSB7XG4gICAgICBpZiAoIXRoaXMuaXNBY3RpdmUgfHwgIXRoaXMudmlzaWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHZub2RlID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgZGlyZWN0aXZlczogW3tcbiAgICAgICAgbmFtZTogJ3Nob3cnLFxuICAgICAgICB2YWx1ZTogdGhpcy5pc0FjdGl2ZSAmJiB0aGlzLnZpc2libGVcbiAgICAgIH1dLFxuICAgICAgYXR0cnM6IHtcbiAgICAgICAgJ2NsYXNzJzogJ3N0ZXAtaXRlbSdcbiAgICAgIH1cbiAgICB9LCB0aGlzLiRzbG90cy5kZWZhdWx0KTsgLy8gY2hlY2sgYW5pbWF0ZWQgcHJvcFxuXG4gICAgaWYgKHRoaXMuJHBhcmVudC5hbmltYXRlZCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ3RyYW5zaXRpb24nLCB7XG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgJ25hbWUnOiB0aGlzLnRyYW5zaXRpb25OYW1lXG4gICAgICAgIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgJ2JlZm9yZS1lbnRlcic6IGZ1bmN0aW9uIGJlZm9yZUVudGVyKCkge1xuICAgICAgICAgICAgX3RoaXMuJHBhcmVudC5pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ2FmdGVyLWVudGVyJzogZnVuY3Rpb24gYWZ0ZXJFbnRlcigpIHtcbiAgICAgICAgICAgIF90aGlzLiRwYXJlbnQuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBbdm5vZGVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdm5vZGU7XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18kMSA9IHNjcmlwdCQxO1xuXG4vKiB0ZW1wbGF0ZSAqL1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyQxID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIFN0ZXBJdGVtID0gX192dWVfbm9ybWFsaXplX18oXG4gICAge30sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fJDEsXG4gICAgX192dWVfc2NyaXB0X18kMSxcbiAgICBfX3Z1ZV9zY29wZV9pZF9fJDEsXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDEsXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQxLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxudmFyIFBsdWdpbiA9IHtcbiAgaW5zdGFsbDogZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcbiAgICByZWdpc3RlckNvbXBvbmVudChWdWUsIFN0ZXBzKTtcbiAgICByZWdpc3RlckNvbXBvbmVudChWdWUsIFN0ZXBJdGVtKTtcbiAgfVxufTtcbnVzZShQbHVnaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBQbHVnaW47XG5leHBvcnQgeyBTdGVwSXRlbSwgU3RlcHMgfTtcbiIsInZhciBTbG90Q29tcG9uZW50ID0ge1xuICBuYW1lOiAnQlNsb3RDb21wb25lbnQnLFxuICBwcm9wczoge1xuICAgIGNvbXBvbmVudDoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIG5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdkZWZhdWx0J1xuICAgIH0sXG4gICAgc2NvcGVkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuXG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICB0YWc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdkaXYnXG4gICAgfSxcbiAgICBldmVudDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2hvb2s6dXBkYXRlZCdcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICByZWZyZXNoOiBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgdGhpcy4kZm9yY2VVcGRhdGUoKTtcbiAgICB9LFxuICAgIGlzVnVlQ29tcG9uZW50OiBmdW5jdGlvbiBpc1Z1ZUNvbXBvbmVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudCAmJiB0aGlzLmNvbXBvbmVudC5faXNWdWU7XG4gICAgfVxuICB9LFxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge1xuICAgIGlmICh0aGlzLmlzVnVlQ29tcG9uZW50KCkpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50LiRvbih0aGlzLmV2ZW50LCB0aGlzLnJlZnJlc2gpO1xuICAgIH1cbiAgfSxcbiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5pc1Z1ZUNvbXBvbmVudCgpKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudC4kb2ZmKHRoaXMuZXZlbnQsIHRoaXMucmVmcmVzaCk7XG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihjcmVhdGVFbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuaXNWdWVDb21wb25lbnQoKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodGhpcy50YWcsIHt9LCB0aGlzLnNjb3BlZCA/IHRoaXMuY29tcG9uZW50LiRzY29wZWRTbG90c1t0aGlzLm5hbWVdKHRoaXMucHJvcHMpIDogdGhpcy5jb21wb25lbnQuJHNsb3RzW3RoaXMubmFtZV0pO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IHsgU2xvdENvbXBvbmVudCBhcyBTIH07XG4iLCJpbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xudmFyIHNjcmlwdCA9IHtcbiAgbmFtZTogJ0JTd2l0Y2gnLFxuICBwcm9wczoge1xuICAgIHZhbHVlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIEZ1bmN0aW9uLCBPYmplY3QsIEFycmF5XSxcbiAgICBuYXRpdmVWYWx1ZTogW1N0cmluZywgTnVtYmVyLCBCb29sZWFuLCBGdW5jdGlvbiwgT2JqZWN0LCBBcnJheV0sXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgdHlwZTogU3RyaW5nLFxuICAgIG5hbWU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogQm9vbGVhbixcbiAgICBzaXplOiBTdHJpbmcsXG4gICAgdHJ1ZVZhbHVlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIEZ1bmN0aW9uLCBPYmplY3QsIEFycmF5XSxcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGZhbHNlVmFsdWU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlciwgQm9vbGVhbiwgRnVuY3Rpb24sIE9iamVjdCwgQXJyYXldLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIHJvdW5kZWQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBvdXRsaW5lZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuZXdWYWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIGlzTW91c2VEb3duOiBmYWxzZVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgY29tcHV0ZWRWYWx1ZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ld1ZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMubmV3VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBuZXdDbGFzczogZnVuY3Rpb24gbmV3Q2xhc3MoKSB7XG4gICAgICByZXR1cm4gW3RoaXMuc2l6ZSwge1xuICAgICAgICAnaXMtZGlzYWJsZWQnOiB0aGlzLmRpc2FibGVkXG4gICAgICB9LCB7XG4gICAgICAgICdpcy1yb3VuZGVkJzogdGhpcy5yb3VuZGVkXG4gICAgICB9LCB7XG4gICAgICAgICdpcy1vdXRsaW5lZCc6IHRoaXMub3V0bGluZWRcbiAgICAgIH1dO1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICAvKipcclxuICAgICogV2hlbiB2LW1vZGVsIGNoYW5nZSwgc2V0IGludGVybmFsIHZhbHVlLlxyXG4gICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoX3ZhbHVlKSB7XG4gICAgICB0aGlzLm5ld1ZhbHVlID0gX3ZhbHVlO1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgIC8vIE1hY09TIEZpcmVGb3ggYW5kIFNhZmFyaSBkbyBub3QgZm9jdXMgd2hlbiBjbGlja2VkXG4gICAgICB0aGlzLiRyZWZzLmlucHV0LmZvY3VzKCk7XG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fID0gc2NyaXB0O1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnbGFiZWwnLHtyZWY6XCJsYWJlbFwiLHN0YXRpY0NsYXNzOlwic3dpdGNoXCIsY2xhc3M6X3ZtLm5ld0NsYXNzLGF0dHJzOntcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkfSxvbjp7XCJjbGlja1wiOl92bS5mb2N1cyxcImtleWRvd25cIjpmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLiRyZWZzLmxhYmVsLmNsaWNrKCk7fSxcIm1vdXNlZG93blwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmlzTW91c2VEb3duID0gdHJ1ZTt9LFwibW91c2V1cFwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmlzTW91c2VEb3duID0gZmFsc2U7fSxcIm1vdXNlb3V0XCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaXNNb3VzZURvd24gPSBmYWxzZTt9LFwiYmx1clwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmlzTW91c2VEb3duID0gZmFsc2U7fX19LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcIm1vZGVsXCIscmF3TmFtZTpcInYtbW9kZWxcIix2YWx1ZTooX3ZtLmNvbXB1dGVkVmFsdWUpLGV4cHJlc3Npb246XCJjb21wdXRlZFZhbHVlXCJ9XSxyZWY6XCJpbnB1dFwiLGF0dHJzOntcInR5cGVcIjpcImNoZWNrYm94XCIsXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcIm5hbWVcIjpfdm0ubmFtZSxcInJlcXVpcmVkXCI6X3ZtLnJlcXVpcmVkLFwidHJ1ZS12YWx1ZVwiOl92bS50cnVlVmFsdWUsXCJmYWxzZS12YWx1ZVwiOl92bS5mYWxzZVZhbHVlfSxkb21Qcm9wczp7XCJ2YWx1ZVwiOl92bS5uYXRpdmVWYWx1ZSxcImNoZWNrZWRcIjpBcnJheS5pc0FycmF5KF92bS5jb21wdXRlZFZhbHVlKT9fdm0uX2koX3ZtLmNvbXB1dGVkVmFsdWUsX3ZtLm5hdGl2ZVZhbHVlKT4tMTpfdm0uX3EoX3ZtLmNvbXB1dGVkVmFsdWUsX3ZtLnRydWVWYWx1ZSl9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7fSxcImNoYW5nZVwiOmZ1bmN0aW9uKCRldmVudCl7dmFyICQkYT1fdm0uY29tcHV0ZWRWYWx1ZSwkJGVsPSRldmVudC50YXJnZXQsJCRjPSQkZWwuY2hlY2tlZD8oX3ZtLnRydWVWYWx1ZSk6KF92bS5mYWxzZVZhbHVlKTtpZihBcnJheS5pc0FycmF5KCQkYSkpe3ZhciAkJHY9X3ZtLm5hdGl2ZVZhbHVlLCQkaT1fdm0uX2koJCRhLCQkdik7aWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKF92bS5jb21wdXRlZFZhbHVlPSQkYS5jb25jYXQoWyQkdl0pKTt9ZWxzZXskJGk+LTEmJihfdm0uY29tcHV0ZWRWYWx1ZT0kJGEuc2xpY2UoMCwkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpKzEpKSk7fX1lbHNle192bS5jb21wdXRlZFZhbHVlPSQkYzt9fX19KSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJjaGVja1wiLGNsYXNzOlt7ICdpcy1lbGFzdGljJzogX3ZtLmlzTW91c2VEb3duICYmICFfdm0uZGlzYWJsZWQgfSwgX3ZtLnR5cGVdfSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiY29udHJvbC1sYWJlbFwifSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMildKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBTd2l0Y2ggPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBTd2l0Y2gpO1xuICB9XG59O1xudXNlKFBsdWdpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbjtcbmV4cG9ydCB7IFN3aXRjaCB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfZGVmaW5lUHJvcGVydHksIGIgYXMgX3RvQ29uc3VtYWJsZUFycmF5IH0gZnJvbSAnLi9jaHVuay1kNjIwMDA4Ny5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldFZhbHVlQnlQYXRoLCBhIGFzIGluZGV4T2YgfSBmcm9tICcuL2NodW5rLWU1ZmNlNDhmLmpzJztcbmltcG9ydCAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgJy4vY2h1bmstMTBjODU1MjkuanMnO1xuaW1wb3J0IHsgSSBhcyBJY29uIH0gZnJvbSAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IHsgQyBhcyBDaGVja2JveCB9IGZyb20gJy4vY2h1bmstOWE3NzY2OTcuanMnO1xuaW1wb3J0IHsgUyBhcyBTZWxlY3QgfSBmcm9tICcuL2NodW5rLTkxMmVkNzE1LmpzJztcbmltcG9ydCB7IFAgYXMgUGFnaW5hdGlvbiB9IGZyb20gJy4vY2h1bmstY2M3MThjMTUuanMnO1xuaW1wb3J0IHsgUyBhcyBTbG90Q29tcG9uZW50IH0gZnJvbSAnLi9jaHVuay0wZTNmNGZiNS5qcyc7XG5cbnZhciBfY29tcG9uZW50cztcbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdCVGFibGVNb2JpbGVTb3J0JyxcbiAgY29tcG9uZW50czogKF9jb21wb25lbnRzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgU2VsZWN0Lm5hbWUsIFNlbGVjdCksIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgSWNvbi5uYW1lLCBJY29uKSwgX2NvbXBvbmVudHMpLFxuICBwcm9wczoge1xuICAgIGN1cnJlbnRTb3J0Q29sdW1uOiBPYmplY3QsXG4gICAgaXNBc2M6IEJvb2xlYW4sXG4gICAgY29sdW1uczogQXJyYXksXG4gICAgcGxhY2Vob2xkZXI6IFN0cmluZ1xuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtb2JpbGVTb3J0OiB0aGlzLmN1cnJlbnRTb3J0Q29sdW1uXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBzaG93UGxhY2Vob2xkZXI6IGZ1bmN0aW9uIHNob3dQbGFjZWhvbGRlcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHJldHVybiAhdGhpcy5jb2x1bW5zIHx8ICF0aGlzLmNvbHVtbnMuc29tZShmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBjb2x1bW4gPT09IF90aGlzLm1vYmlsZVNvcnQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgbW9iaWxlU29ydDogZnVuY3Rpb24gbW9iaWxlU29ydChjb2x1bW4pIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRTb3J0Q29sdW1uID09PSBjb2x1bW4pIHJldHVybjtcbiAgICAgIHRoaXMuJGVtaXQoJ3NvcnQnLCBjb2x1bW4pO1xuICAgIH0sXG4gICAgY3VycmVudFNvcnRDb2x1bW46IGZ1bmN0aW9uIGN1cnJlbnRTb3J0Q29sdW1uKGNvbHVtbikge1xuICAgICAgdGhpcy5tb2JpbGVTb3J0ID0gY29sdW1uO1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoKSB7XG4gICAgICB0aGlzLiRlbWl0KCdzb3J0JywgdGhpcy5tb2JpbGVTb3J0KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZpZWxkIHRhYmxlLW1vYmlsZS1zb3J0XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmaWVsZCBoYXMtYWRkb25zXCJ9LFtfYygnYi1zZWxlY3QnLHthdHRyczp7XCJleHBhbmRlZFwiOlwiXCJ9LG1vZGVsOnt2YWx1ZTooX3ZtLm1vYmlsZVNvcnQpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0ubW9iaWxlU29ydD0kJHY7fSxleHByZXNzaW9uOlwibW9iaWxlU29ydFwifX0sWyhfdm0ucGxhY2Vob2xkZXIpP1tfYygnb3B0aW9uJyx7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOihfdm0uc2hvd1BsYWNlaG9sZGVyKSxleHByZXNzaW9uOlwic2hvd1BsYWNlaG9sZGVyXCJ9XSxhdHRyczp7XCJzZWxlY3RlZFwiOlwiXCIsXCJkaXNhYmxlZFwiOlwiXCIsXCJoaWRkZW5cIjpcIlwifSxkb21Qcm9wczp7XCJ2YWx1ZVwiOnt9fX0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgICAgICAgXCIrX3ZtLl9zKF92bS5wbGFjZWhvbGRlcikrXCJcXG4gICAgICAgICAgICAgICAgXCIpXSldOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLl9sKChfdm0uY29sdW1ucyksZnVuY3Rpb24oY29sdW1uLGluZGV4KXtyZXR1cm4gKGNvbHVtbi5zb3J0YWJsZSk/X2MoJ29wdGlvbicse2tleTppbmRleCxkb21Qcm9wczp7XCJ2YWx1ZVwiOmNvbHVtbn19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgXCIrX3ZtLl9zKGNvbHVtbi5sYWJlbCkrXCJcXG4gICAgICAgICAgICBcIildKTpfdm0uX2UoKX0pXSwyKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImNvbnRyb2xcIn0sW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImJ1dHRvbiBpcy1wcmltYXJ5XCIsb246e1wiY2xpY2tcIjpfdm0uc29ydH19LFtfYygnYi1pY29uJyx7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOihfdm0uY3VycmVudFNvcnRDb2x1bW4gPT09IF92bS5tb2JpbGVTb3J0KSxleHByZXNzaW9uOlwiY3VycmVudFNvcnRDb2x1bW4gPT09IG1vYmlsZVNvcnRcIn1dLGNsYXNzOnsgJ2lzLWRlc2MnOiAhX3ZtLmlzQXNjIH0sYXR0cnM6e1wiaWNvblwiOlwiYXJyb3ctdXBcIixcInNpemVcIjpcImlzLXNtYWxsXCIsXCJib3RoXCI6XCJcIn19KV0sMSldKV0sMSldKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBUYWJsZU1vYmlsZVNvcnQgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbnZhciBzY3JpcHQkMSA9IHtcbiAgbmFtZTogJ0JUYWJsZUNvbHVtbicsXG4gIHByb3BzOiB7XG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICBjdXN0b21LZXk6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZmllbGQ6IFN0cmluZyxcbiAgICBtZXRhOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIEZ1bmN0aW9uLCBPYmplY3QsIEFycmF5XSxcbiAgICB3aWR0aDogW051bWJlciwgU3RyaW5nXSxcbiAgICBudW1lcmljOiBCb29sZWFuLFxuICAgIGNlbnRlcmVkOiBCb29sZWFuLFxuICAgIHNvcnRhYmxlOiBCb29sZWFuLFxuICAgIHZpc2libGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBjdXN0b21Tb3J0OiBGdW5jdGlvbixcbiAgICBpbnRlcm5hbDogQm9vbGVhbiAvLyBVc2VkIGludGVybmFsbHkgYnkgVGFibGVcblxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuZXdLZXk6IHRoaXMuY3VzdG9tS2V5IHx8IHRoaXMubGFiZWxcbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIHJvb3RDbGFzc2VzOiBmdW5jdGlvbiByb290Q2xhc3NlcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdoYXMtdGV4dC1yaWdodCc6IHRoaXMubnVtZXJpYyAmJiAhdGhpcy5jZW50ZXJlZCxcbiAgICAgICAgJ2hhcy10ZXh0LWNlbnRlcmVkJzogdGhpcy5jZW50ZXJlZFxuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBhZGRSZWZUb1RhYmxlOiBmdW5jdGlvbiBhZGRSZWZUb1RhYmxlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLiRwYXJlbnQuJGRhdGEuX2lzVGFibGUpIHtcbiAgICAgICAgdGhpcy4kZGVzdHJveSgpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBzaG91bGQgd3JhcCBiVGFibGVDb2x1bW4gb24gYSBiVGFibGUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaW50ZXJuYWwpIHJldHVybjsgLy8gU2luY2Ugd2UncmUgdXNpbmcgc2NvcGVkIHByb3AgdGhlIGNvbHVtbnMgZ29ubmEgYmUgbXVsdGlwbGllZCxcbiAgICAgIC8vIHRoaXMgZmluZHMgd2hlbiB0byBzdG9wIGJhc2VkIG9uIHRoZSBuZXdLZXkgcHJvcGVydHkuXG5cbiAgICAgIHZhciByZXBlYXRlZCA9IHRoaXMuJHBhcmVudC5uZXdDb2x1bW5zLnNvbWUoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gY29sdW1uLm5ld0tleSA9PT0gX3RoaXMubmV3S2V5O1xuICAgICAgfSk7XG4gICAgICAhcmVwZWF0ZWQgJiYgdGhpcy4kcGFyZW50Lm5ld0NvbHVtbnMucHVzaCh0aGlzKTtcbiAgICB9XG4gIH0sXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCgpIHtcbiAgICB0aGlzLmFkZFJlZlRvVGFibGUoKTtcbiAgfSxcbiAgYmVmb3JlVXBkYXRlOiBmdW5jdGlvbiBiZWZvcmVVcGRhdGUoKSB7XG4gICAgdGhpcy5hZGRSZWZUb1RhYmxlKCk7XG4gIH0sXG4gIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy4kcGFyZW50Lm5ld0NvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgIHJldHVybiBjb2x1bW4ubmV3S2V5O1xuICAgIH0pLmluZGV4T2YodGhpcy5uZXdLZXkpO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRoaXMuJHBhcmVudC5uZXdDb2x1bW5zLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fJDEgPSBzY3JpcHQkMTtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyQxID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiAoX3ZtLnZpc2libGUpP19jKCd0ZCcse2NsYXNzOl92bS5yb290Q2xhc3NlcyxhdHRyczp7XCJkYXRhLWxhYmVsXCI6X3ZtLmxhYmVsfX0sW192bS5fdChcImRlZmF1bHRcIildLDIpOl92bS5fZSgpfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQxID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMSA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBUYWJsZUNvbHVtbiA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHsgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXyQxLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDEgfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kMSxcbiAgICBfX3Z1ZV9zY3JpcHRfXyQxLFxuICAgIF9fdnVlX3Njb3BlX2lkX18kMSxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEsXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgX2NvbXBvbmVudHMkMTtcbnZhciBzY3JpcHQkMiA9IHtcbiAgbmFtZTogJ0JUYWJsZScsXG4gIGNvbXBvbmVudHM6IChfY29tcG9uZW50cyQxID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cyQxLCBDaGVja2JveC5uYW1lLCBDaGVja2JveCksIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cyQxLCBJY29uLm5hbWUsIEljb24pLCBfZGVmaW5lUHJvcGVydHkoX2NvbXBvbmVudHMkMSwgUGFnaW5hdGlvbi5uYW1lLCBQYWdpbmF0aW9uKSwgX2RlZmluZVByb3BlcnR5KF9jb21wb25lbnRzJDEsIFNsb3RDb21wb25lbnQubmFtZSwgU2xvdENvbXBvbmVudCksIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cyQxLCBUYWJsZU1vYmlsZVNvcnQubmFtZSwgVGFibGVNb2JpbGVTb3J0KSwgX2RlZmluZVByb3BlcnR5KF9jb21wb25lbnRzJDEsIFRhYmxlQ29sdW1uLm5hbWUsIFRhYmxlQ29sdW1uKSwgX2NvbXBvbmVudHMkMSksXG4gIHByb3BzOiB7XG4gICAgZGF0YToge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH0sXG4gICAgY29sdW1uczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH0sXG4gICAgYm9yZGVyZWQ6IEJvb2xlYW4sXG4gICAgc3RyaXBlZDogQm9vbGVhbixcbiAgICBuYXJyb3dlZDogQm9vbGVhbixcbiAgICBob3ZlcmFibGU6IEJvb2xlYW4sXG4gICAgbG9hZGluZzogQm9vbGVhbixcbiAgICBkZXRhaWxlZDogQm9vbGVhbixcbiAgICBjaGVja2FibGU6IEJvb2xlYW4sXG4gICAgaGVhZGVyQ2hlY2thYmxlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgY2hlY2tib3hQb3NpdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2xlZnQnLFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YodmFsdWUpID49IDA7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZWxlY3RlZDogT2JqZWN0LFxuICAgIGZvY3VzYWJsZTogQm9vbGVhbixcbiAgICBjdXN0b21Jc0NoZWNrZWQ6IEZ1bmN0aW9uLFxuICAgIGlzUm93Q2hlY2thYmxlOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNoZWNrZWRSb3dzOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfSxcbiAgICBtb2JpbGVDYXJkczoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGRlZmF1bHRTb3J0OiBbU3RyaW5nLCBBcnJheV0sXG4gICAgZGVmYXVsdFNvcnREaXJlY3Rpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdhc2MnXG4gICAgfSxcbiAgICBzb3J0SWNvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2Fycm93LXVwJ1xuICAgIH0sXG4gICAgc29ydEljb25TaXplOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaXMtc21hbGwnXG4gICAgfSxcbiAgICBwYWdpbmF0ZWQ6IEJvb2xlYW4sXG4gICAgY3VycmVudFBhZ2U6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDFcbiAgICB9LFxuICAgIHBlclBhZ2U6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAyMFxuICAgIH0sXG4gICAgc2hvd0RldGFpbEljb246IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBwYWdpbmF0aW9uU2ltcGxlOiBCb29sZWFuLFxuICAgIHBhZ2luYXRpb25TaXplOiBTdHJpbmcsXG4gICAgcGFnaW5hdGlvblBvc2l0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnYm90dG9tJyxcbiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbJ2JvdHRvbScsICd0b3AnLCAnYm90aCddLmluZGV4T2YodmFsdWUpID49IDA7XG4gICAgICB9XG4gICAgfSxcbiAgICBiYWNrZW5kU29ydGluZzogQm9vbGVhbixcbiAgICByb3dDbGFzczoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH0sXG4gICAgb3BlbmVkRGV0YWlsZWQ6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGhhc0RldGFpbGVkVmlzaWJsZToge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXRhaWxLZXk6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICBjdXN0b21EZXRhaWxSb3c6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgYmFja2VuZFBhZ2luYXRpb246IEJvb2xlYW4sXG4gICAgdG90YWw6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcbiAgICBpY29uUGFjazogU3RyaW5nLFxuICAgIG1vYmlsZVNvcnRQbGFjZWhvbGRlcjogU3RyaW5nLFxuICAgIGN1c3RvbVJvd0tleTogU3RyaW5nLFxuICAgIGRyYWdnYWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZnVhbHQ6IGZhbHNlXG4gICAgfSxcbiAgICBhcmlhTmV4dExhYmVsOiBTdHJpbmcsXG4gICAgYXJpYVByZXZpb3VzTGFiZWw6IFN0cmluZyxcbiAgICBhcmlhUGFnZUxhYmVsOiBTdHJpbmcsXG4gICAgYXJpYUN1cnJlbnRMYWJlbDogU3RyaW5nXG4gIH0sXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFZhbHVlQnlQYXRoOiBnZXRWYWx1ZUJ5UGF0aCxcbiAgICAgIG5ld0NvbHVtbnM6IF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmNvbHVtbnMpLFxuICAgICAgdmlzaWJsZURldGFpbFJvd3M6IHRoaXMub3BlbmVkRGV0YWlsZWQsXG4gICAgICBuZXdEYXRhOiB0aGlzLmRhdGEsXG4gICAgICBuZXdEYXRhVG90YWw6IHRoaXMuYmFja2VuZFBhZ2luYXRpb24gPyB0aGlzLnRvdGFsIDogdGhpcy5kYXRhLmxlbmd0aCxcbiAgICAgIG5ld0NoZWNrZWRSb3dzOiBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5jaGVja2VkUm93cyksXG4gICAgICBuZXdDdXJyZW50UGFnZTogdGhpcy5jdXJyZW50UGFnZSxcbiAgICAgIGN1cnJlbnRTb3J0Q29sdW1uOiB7fSxcbiAgICAgIGlzQXNjOiB0cnVlLFxuICAgICAgZmlyc3RUaW1lU29ydDogdHJ1ZSxcbiAgICAgIC8vIFVzZWQgYnkgZmlyc3QgdGltZSBpbml0U29ydFxuICAgICAgX2lzVGFibGU6IHRydWUgLy8gVXNlZCBieSBUYWJsZUNvbHVtblxuXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICAvKipcclxuICAgICogcmV0dXJuIGlmIGRldGFpbGVkIHJvdyB0YWJsZWRcclxuICAgICogd2lsbCBiZSB3aXRoIGNoZXZyb24gY29sdW1uICYgaWNvbiBvciBub3RcclxuICAgICovXG4gICAgc2hvd0RldGFpbFJvd0ljb246IGZ1bmN0aW9uIHNob3dEZXRhaWxSb3dJY29uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGV0YWlsZWQgJiYgdGhpcy5zaG93RGV0YWlsSWNvbjtcbiAgICB9LFxuICAgIHRhYmxlQ2xhc3NlczogZnVuY3Rpb24gdGFibGVDbGFzc2VzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ2lzLWJvcmRlcmVkJzogdGhpcy5ib3JkZXJlZCxcbiAgICAgICAgJ2lzLXN0cmlwZWQnOiB0aGlzLnN0cmlwZWQsXG4gICAgICAgICdpcy1uYXJyb3cnOiB0aGlzLm5hcnJvd2VkLFxuICAgICAgICAnaGFzLW1vYmlsZS1jYXJkcyc6IHRoaXMubW9iaWxlQ2FyZHMsXG4gICAgICAgICdpcy1ob3ZlcmFibGUnOiAodGhpcy5ob3ZlcmFibGUgfHwgdGhpcy5mb2N1c2FibGUpICYmIHRoaXMudmlzaWJsZURhdGEubGVuZ3RoXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogU3BsaXR0ZWQgZGF0YSBiYXNlZCBvbiB0aGUgcGFnaW5hdGlvbi5cclxuICAgICovXG4gICAgdmlzaWJsZURhdGE6IGZ1bmN0aW9uIHZpc2libGVEYXRhKCkge1xuICAgICAgaWYgKCF0aGlzLnBhZ2luYXRlZCkgcmV0dXJuIHRoaXMubmV3RGF0YTtcbiAgICAgIHZhciBjdXJyZW50UGFnZSA9IHRoaXMubmV3Q3VycmVudFBhZ2U7XG4gICAgICB2YXIgcGVyUGFnZSA9IHRoaXMucGVyUGFnZTtcblxuICAgICAgaWYgKHRoaXMubmV3RGF0YS5sZW5ndGggPD0gcGVyUGFnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXdEYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gKGN1cnJlbnRQYWdlIC0gMSkgKiBwZXJQYWdlO1xuICAgICAgICB2YXIgZW5kID0gcGFyc2VJbnQoc3RhcnQsIDEwKSArIHBhcnNlSW50KHBlclBhZ2UsIDEwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV3RGF0YS5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZpc2libGVDb2x1bW5zOiBmdW5jdGlvbiB2aXNpYmxlQ29sdW1ucygpIHtcbiAgICAgIGlmICghdGhpcy5uZXdDb2x1bW5zKSByZXR1cm4gdGhpcy5uZXdDb2x1bW5zO1xuICAgICAgcmV0dXJuIHRoaXMubmV3Q29sdW1ucy5maWx0ZXIoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gY29sdW1uLnZpc2libGUgfHwgY29sdW1uLnZpc2libGUgPT09IHVuZGVmaW5lZDtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogQ2hlY2sgaWYgYWxsIHJvd3MgaW4gdGhlIHBhZ2UgYXJlIGNoZWNrZWQuXHJcbiAgICAqL1xuICAgIGlzQWxsQ2hlY2tlZDogZnVuY3Rpb24gaXNBbGxDaGVja2VkKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIHZhbGlkVmlzaWJsZURhdGEgPSB0aGlzLnZpc2libGVEYXRhLmZpbHRlcihmdW5jdGlvbiAocm93KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc1Jvd0NoZWNrYWJsZShyb3cpO1xuICAgICAgfSk7XG4gICAgICBpZiAodmFsaWRWaXNpYmxlRGF0YS5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciBpc0FsbENoZWNrZWQgPSB2YWxpZFZpc2libGVEYXRhLnNvbWUoZnVuY3Rpb24gKGN1cnJlbnRWaXNpYmxlUm93KSB7XG4gICAgICAgIHJldHVybiBpbmRleE9mKF90aGlzLm5ld0NoZWNrZWRSb3dzLCBjdXJyZW50VmlzaWJsZVJvdywgX3RoaXMuY3VzdG9tSXNDaGVja2VkKSA8IDA7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhaXNBbGxDaGVja2VkO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogQ2hlY2sgaWYgYWxsIHJvd3MgaW4gdGhlIHBhZ2UgYXJlIGNoZWNrYWJsZS5cclxuICAgICovXG4gICAgaXNBbGxVbmNoZWNrYWJsZTogZnVuY3Rpb24gaXNBbGxVbmNoZWNrYWJsZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgdmFsaWRWaXNpYmxlRGF0YSA9IHRoaXMudmlzaWJsZURhdGEuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5pc1Jvd0NoZWNrYWJsZShyb3cpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdmFsaWRWaXNpYmxlRGF0YS5sZW5ndGggPT09IDA7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBDaGVjayBpZiBoYXMgYW55IHNvcnRhYmxlIGNvbHVtbi5cclxuICAgICovXG4gICAgaGFzU29ydGFibGVuZXdDb2x1bW5zOiBmdW5jdGlvbiBoYXNTb3J0YWJsZW5ld0NvbHVtbnMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5uZXdDb2x1bW5zLnNvbWUoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gY29sdW1uLnNvcnRhYmxlO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBSZXR1cm4gdG90YWwgY29sdW1uIGNvdW50IGJhc2VkIGlmIGl0J3MgY2hlY2thYmxlIG9yIGV4cGFuZGVkXHJcbiAgICAqL1xuICAgIGNvbHVtbkNvdW50OiBmdW5jdGlvbiBjb2x1bW5Db3VudCgpIHtcbiAgICAgIHZhciBjb3VudCA9IHRoaXMubmV3Q29sdW1ucy5sZW5ndGg7XG4gICAgICBjb3VudCArPSB0aGlzLmNoZWNrYWJsZSA/IDEgOiAwO1xuICAgICAgY291bnQgKz0gdGhpcy5kZXRhaWxlZCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICAvKipcclxuICAgICogV2hlbiBkYXRhIHByb3AgY2hhbmdlOlxyXG4gICAgKiAgIDEuIFVwZGF0ZSBpbnRlcm5hbCB2YWx1ZS5cclxuICAgICogICAyLiBSZXNldCBuZXdDb2x1bW5zICh0aGVhZCksIGluIGNhc2UgaXQncyBvbiBhIHYtZm9yIGxvb3AuXHJcbiAgICAqICAgMy4gU29ydCBhZ2FpbiBpZiBpdCdzIG5vdCBiYWNrZW5kLXNvcnQuXHJcbiAgICAqICAgNC4gU2V0IG5ldyB0b3RhbCBpZiBpdCdzIG5vdCBiYWNrZW5kLXBhZ2luYXRlZC5cclxuICAgICovXG4gICAgZGF0YTogZnVuY3Rpb24gZGF0YSh2YWx1ZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIC8vIFNhdmUgbmV3Q29sdW1ucyBiZWZvcmUgcmVzZXR0aW5nXG4gICAgICB2YXIgbmV3Q29sdW1ucyA9IHRoaXMubmV3Q29sdW1ucztcbiAgICAgIHRoaXMubmV3Q29sdW1ucyA9IFtdO1xuICAgICAgdGhpcy5uZXdEYXRhID0gdmFsdWU7IC8vIFByZXZlbnQgdGFibGUgZnJvbSBiZWluZyBoZWFkbGVzcywgZGF0YSBjb3VsZCBjaGFuZ2UgYW5kIGNyZWF0ZWQgaG9va1xuICAgICAgLy8gb24gY29sdW1uIG1pZ2h0IG5vdCB0cmlnZ2VyXG5cbiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFfdGhpczMubmV3Q29sdW1ucy5sZW5ndGgpIF90aGlzMy5uZXdDb2x1bW5zID0gbmV3Q29sdW1ucztcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXRoaXMuYmFja2VuZFNvcnRpbmcpIHtcbiAgICAgICAgdGhpcy5zb3J0KHRoaXMuY3VycmVudFNvcnRDb2x1bW4sIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuYmFja2VuZFBhZ2luYXRpb24pIHtcbiAgICAgICAgdGhpcy5uZXdEYXRhVG90YWwgPSB2YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBXaGVuIFBhZ2luYXRpb24gdG90YWwgY2hhbmdlLCB1cGRhdGUgaW50ZXJuYWwgdG90YWxcclxuICAgICogb25seSBpZiBpdCdzIGJhY2tlbmQtcGFnaW5hdGVkLlxyXG4gICAgKi9cbiAgICB0b3RhbDogZnVuY3Rpb24gdG90YWwobmV3VG90YWwpIHtcbiAgICAgIGlmICghdGhpcy5iYWNrZW5kUGFnaW5hdGlvbikgcmV0dXJuO1xuICAgICAgdGhpcy5uZXdEYXRhVG90YWwgPSBuZXdUb3RhbDtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIFdoZW4gY2hlY2tlZFJvd3MgcHJvcCBjaGFuZ2UsIHVwZGF0ZSBpbnRlcm5hbCB2YWx1ZSB3aXRob3V0XHJcbiAgICAqIG11dGF0aW5nIG9yaWdpbmFsIGRhdGEuXHJcbiAgICAqL1xuICAgIGNoZWNrZWRSb3dzOiBmdW5jdGlvbiBjaGVja2VkUm93cyhyb3dzKSB7XG4gICAgICB0aGlzLm5ld0NoZWNrZWRSb3dzID0gX3RvQ29uc3VtYWJsZUFycmF5KHJvd3MpO1xuICAgIH0sXG4gICAgY29sdW1uczogZnVuY3Rpb24gY29sdW1ucyh2YWx1ZSkge1xuICAgICAgdGhpcy5uZXdDb2x1bW5zID0gX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlKTtcbiAgICB9LFxuICAgIG5ld0NvbHVtbnM6IGZ1bmN0aW9uIG5ld0NvbHVtbnModmFsdWUpIHtcbiAgICAgIHRoaXMuY2hlY2tTb3J0KCk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICAgICogV2hlbiB0aGUgdXNlciB3YW50cyB0byBjb250cm9sIHRoZSBkZXRhaWxlZCByb3dzIHZpYSBwcm9wcy5cclxuICAgICAgICAqIE9yIHdhbnRzIHRvIG9wZW4gdGhlIGRldGFpbHMgb2YgY2VydGFpbiByb3cgd2l0aCB0aGUgcm91dGVyIGZvciBleGFtcGxlLlxyXG4gICAgICAgICovXG4gICAgb3BlbmVkRGV0YWlsZWQ6IGZ1bmN0aW9uIG9wZW5lZERldGFpbGVkKGV4cGFuZGVkUm93cykge1xuICAgICAgdGhpcy52aXNpYmxlRGV0YWlsUm93cyA9IGV4cGFuZGVkUm93cztcbiAgICB9LFxuICAgIGN1cnJlbnRQYWdlOiBmdW5jdGlvbiBjdXJyZW50UGFnZShuZXdWYWwpIHtcbiAgICAgIHRoaXMubmV3Q3VycmVudFBhZ2UgPSBuZXdWYWw7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqXHJcbiAgICAqIFNvcnQgYW4gYXJyYXkgYnkga2V5IHdpdGhvdXQgbXV0YXRpbmcgb3JpZ2luYWwgZGF0YS5cclxuICAgICogQ2FsbCB0aGUgdXNlciBzb3J0IGZ1bmN0aW9uIGlmIGl0IHdhcyBwYXNzZWQuXHJcbiAgICAqL1xuICAgIHNvcnRCeTogZnVuY3Rpb24gc29ydEJ5KGFycmF5LCBrZXksIGZuLCBpc0FzYykge1xuICAgICAgdmFyIHNvcnRlZCA9IFtdOyAvLyBTb3J0aW5nIHdpdGhvdXQgbXV0YXRpbmcgb3JpZ2luYWwgZGF0YVxuXG4gICAgICBpZiAoZm4gJiYgdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNvcnRlZCA9IF90b0NvbnN1bWFibGVBcnJheShhcnJheSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBmbihhLCBiLCBpc0FzYyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc29ydGVkID0gX3RvQ29uc3VtYWJsZUFycmF5KGFycmF5KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgLy8gR2V0IG5lc3RlZCB2YWx1ZXMgZnJvbSBvYmplY3RzXG4gICAgICAgICAgdmFyIG5ld0EgPSBnZXRWYWx1ZUJ5UGF0aChhLCBrZXkpO1xuICAgICAgICAgIHZhciBuZXdCID0gZ2V0VmFsdWVCeVBhdGgoYiwga2V5KTsgLy8gc29ydCBib29sZWFuIHR5cGVcblxuICAgICAgICAgIGlmICh0eXBlb2YgbmV3QSA9PT0gJ2Jvb2xlYW4nICYmIHR5cGVvZiBuZXdCID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FzYyA/IG5ld0EgLSBuZXdCIDogbmV3QiAtIG5ld0E7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFuZXdBICYmIG5ld0EgIT09IDApIHJldHVybiAxO1xuICAgICAgICAgIGlmICghbmV3QiAmJiBuZXdCICE9PSAwKSByZXR1cm4gLTE7XG4gICAgICAgICAgaWYgKG5ld0EgPT09IG5ld0IpIHJldHVybiAwO1xuICAgICAgICAgIG5ld0EgPSB0eXBlb2YgbmV3QSA9PT0gJ3N0cmluZycgPyBuZXdBLnRvVXBwZXJDYXNlKCkgOiBuZXdBO1xuICAgICAgICAgIG5ld0IgPSB0eXBlb2YgbmV3QiA9PT0gJ3N0cmluZycgPyBuZXdCLnRvVXBwZXJDYXNlKCkgOiBuZXdCO1xuICAgICAgICAgIHJldHVybiBpc0FzYyA/IG5ld0EgPiBuZXdCID8gMSA6IC0xIDogbmV3QSA+IG5ld0IgPyAtMSA6IDE7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc29ydGVkO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogU29ydCB0aGUgY29sdW1uLlxyXG4gICAgKiBUb2dnbGUgY3VycmVudCBkaXJlY3Rpb24gb24gY29sdW1uIGlmIGl0J3Mgc29ydGFibGVcclxuICAgICogYW5kIG5vdCBqdXN0IHVwZGF0aW5nIHRoZSBwcm9wLlxyXG4gICAgKi9cbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbHVtbikge1xuICAgICAgdmFyIHVwZGF0aW5nRGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICBpZiAoIWNvbHVtbiB8fCAhY29sdW1uLnNvcnRhYmxlKSByZXR1cm47XG5cbiAgICAgIGlmICghdXBkYXRpbmdEYXRhKSB7XG4gICAgICAgIHRoaXMuaXNBc2MgPSBjb2x1bW4gPT09IHRoaXMuY3VycmVudFNvcnRDb2x1bW4gPyAhdGhpcy5pc0FzYyA6IHRoaXMuZGVmYXVsdFNvcnREaXJlY3Rpb24udG9Mb3dlckNhc2UoKSAhPT0gJ2Rlc2MnO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuZmlyc3RUaW1lU29ydCkge1xuICAgICAgICB0aGlzLiRlbWl0KCdzb3J0JywgY29sdW1uLmZpZWxkLCB0aGlzLmlzQXNjID8gJ2FzYycgOiAnZGVzYycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuYmFja2VuZFNvcnRpbmcpIHtcbiAgICAgICAgdGhpcy5uZXdEYXRhID0gdGhpcy5zb3J0QnkodGhpcy5uZXdEYXRhLCBjb2x1bW4uZmllbGQsIGNvbHVtbi5jdXN0b21Tb3J0LCB0aGlzLmlzQXNjKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jdXJyZW50U29ydENvbHVtbiA9IGNvbHVtbjtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIENoZWNrIGlmIHRoZSByb3cgaXMgY2hlY2tlZCAoaXMgYWRkZWQgdG8gdGhlIGFycmF5KS5cclxuICAgICovXG4gICAgaXNSb3dDaGVja2VkOiBmdW5jdGlvbiBpc1Jvd0NoZWNrZWQocm93KSB7XG4gICAgICByZXR1cm4gaW5kZXhPZih0aGlzLm5ld0NoZWNrZWRSb3dzLCByb3csIHRoaXMuY3VzdG9tSXNDaGVja2VkKSA+PSAwO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICogUmVtb3ZlIGEgY2hlY2tlZCByb3cgZnJvbSB0aGUgYXJyYXkuXHJcbiAgICAqL1xuICAgIHJlbW92ZUNoZWNrZWRSb3c6IGZ1bmN0aW9uIHJlbW92ZUNoZWNrZWRSb3cocm93KSB7XG4gICAgICB2YXIgaW5kZXggPSBpbmRleE9mKHRoaXMubmV3Q2hlY2tlZFJvd3MsIHJvdywgdGhpcy5jdXN0b21Jc0NoZWNrZWQpO1xuXG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICB0aGlzLm5ld0NoZWNrZWRSb3dzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBIZWFkZXIgY2hlY2tib3ggY2xpY2sgbGlzdGVuZXIuXHJcbiAgICAqIEFkZCBvciByZW1vdmUgYWxsIHJvd3MgaW4gY3VycmVudCBwYWdlLlxyXG4gICAgKi9cbiAgICBjaGVja0FsbDogZnVuY3Rpb24gY2hlY2tBbGwoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIGlzQWxsQ2hlY2tlZCA9IHRoaXMuaXNBbGxDaGVja2VkO1xuICAgICAgdGhpcy52aXNpYmxlRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50Um93KSB7XG4gICAgICAgIF90aGlzNC5yZW1vdmVDaGVja2VkUm93KGN1cnJlbnRSb3cpO1xuXG4gICAgICAgIGlmICghaXNBbGxDaGVja2VkKSB7XG4gICAgICAgICAgaWYgKF90aGlzNC5pc1Jvd0NoZWNrYWJsZShjdXJyZW50Um93KSkge1xuICAgICAgICAgICAgX3RoaXM0Lm5ld0NoZWNrZWRSb3dzLnB1c2goY3VycmVudFJvdyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuJGVtaXQoJ2NoZWNrJywgdGhpcy5uZXdDaGVja2VkUm93cyk7XG4gICAgICB0aGlzLiRlbWl0KCdjaGVjay1hbGwnLCB0aGlzLm5ld0NoZWNrZWRSb3dzKTsgLy8gRW1pdCBjaGVja2VkIHJvd3MgdG8gdXBkYXRlIHVzZXIgdmFyaWFibGVcblxuICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOmNoZWNrZWRSb3dzJywgdGhpcy5uZXdDaGVja2VkUm93cyk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBSb3cgY2hlY2tib3ggY2xpY2sgbGlzdGVuZXIuXHJcbiAgICAqIEFkZCBvciByZW1vdmUgYSBzaW5nbGUgcm93LlxyXG4gICAgKi9cbiAgICBjaGVja1JvdzogZnVuY3Rpb24gY2hlY2tSb3cocm93KSB7XG4gICAgICBpZiAoIXRoaXMuaXNSb3dDaGVja2VkKHJvdykpIHtcbiAgICAgICAgdGhpcy5uZXdDaGVja2VkUm93cy5wdXNoKHJvdyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZUNoZWNrZWRSb3cocm93KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZW1pdCgnY2hlY2snLCB0aGlzLm5ld0NoZWNrZWRSb3dzLCByb3cpOyAvLyBFbWl0IGNoZWNrZWQgcm93cyB0byB1cGRhdGUgdXNlciB2YXJpYWJsZVxuXG4gICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6Y2hlY2tlZFJvd3MnLCB0aGlzLm5ld0NoZWNrZWRSb3dzKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIFJvdyBjbGljayBsaXN0ZW5lci5cclxuICAgICogRW1pdCBhbGwgbmVjZXNzYXJ5IGV2ZW50cy5cclxuICAgICovXG4gICAgc2VsZWN0Um93OiBmdW5jdGlvbiBzZWxlY3RSb3cocm93LCBpbmRleCkge1xuICAgICAgdGhpcy4kZW1pdCgnY2xpY2snLCByb3cpO1xuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQgPT09IHJvdykgcmV0dXJuOyAvLyBFbWl0IG5ldyBhbmQgb2xkIHJvd1xuXG4gICAgICB0aGlzLiRlbWl0KCdzZWxlY3QnLCByb3csIHRoaXMuc2VsZWN0ZWQpOyAvLyBFbWl0IG5ldyByb3cgdG8gdXBkYXRlIHVzZXIgdmFyaWFibGVcblxuICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnNlbGVjdGVkJywgcm93KTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIFBhZ2luYXRvciBjaGFuZ2UgbGlzdGVuZXIuXHJcbiAgICAqL1xuICAgIHBhZ2VDaGFuZ2VkOiBmdW5jdGlvbiBwYWdlQ2hhbmdlZChwYWdlKSB7XG4gICAgICB0aGlzLm5ld0N1cnJlbnRQYWdlID0gcGFnZSA+IDAgPyBwYWdlIDogMTtcbiAgICAgIHRoaXMuJGVtaXQoJ3BhZ2UtY2hhbmdlJywgdGhpcy5uZXdDdXJyZW50UGFnZSk7XG4gICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6Y3VycmVudFBhZ2UnLCB0aGlzLm5ld0N1cnJlbnRQYWdlKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIFRvZ2dsZSB0byBzaG93L2hpZGUgZGV0YWlscyBzbG90XHJcbiAgICAqL1xuICAgIHRvZ2dsZURldGFpbHM6IGZ1bmN0aW9uIHRvZ2dsZURldGFpbHMob2JqKSB7XG4gICAgICB2YXIgZm91bmQgPSB0aGlzLmlzVmlzaWJsZURldGFpbFJvdyhvYmopO1xuXG4gICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgdGhpcy5jbG9zZURldGFpbFJvdyhvYmopO1xuICAgICAgICB0aGlzLiRlbWl0KCdkZXRhaWxzLWNsb3NlJywgb2JqKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub3BlbkRldGFpbFJvdyhvYmopO1xuICAgICAgICB0aGlzLiRlbWl0KCdkZXRhaWxzLW9wZW4nLCBvYmopO1xuICAgICAgfSAvLyBTeW5jcyB0aGUgZGV0YWlsZWQgcm93cyB3aXRoIHRoZSBwYXJlbnQgY29tcG9uZW50XG5cblxuICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOm9wZW5lZERldGFpbGVkJywgdGhpcy52aXNpYmxlRGV0YWlsUm93cyk7XG4gICAgfSxcbiAgICBvcGVuRGV0YWlsUm93OiBmdW5jdGlvbiBvcGVuRGV0YWlsUm93KG9iaikge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5oYW5kbGVEZXRhaWxLZXkob2JqKTtcbiAgICAgIHRoaXMudmlzaWJsZURldGFpbFJvd3MucHVzaChpbmRleCk7XG4gICAgfSxcbiAgICBjbG9zZURldGFpbFJvdzogZnVuY3Rpb24gY2xvc2VEZXRhaWxSb3cob2JqKSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmhhbmRsZURldGFpbEtleShvYmopO1xuICAgICAgdmFyIGkgPSB0aGlzLnZpc2libGVEZXRhaWxSb3dzLmluZGV4T2YoaW5kZXgpO1xuICAgICAgdGhpcy52aXNpYmxlRGV0YWlsUm93cy5zcGxpY2UoaSwgMSk7XG4gICAgfSxcbiAgICBpc1Zpc2libGVEZXRhaWxSb3c6IGZ1bmN0aW9uIGlzVmlzaWJsZURldGFpbFJvdyhvYmopIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuaGFuZGxlRGV0YWlsS2V5KG9iaik7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy52aXNpYmxlRGV0YWlsUm93cy5pbmRleE9mKGluZGV4KSA+PSAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIGlzQWN0aXZlRGV0YWlsUm93OiBmdW5jdGlvbiBpc0FjdGl2ZURldGFpbFJvdyhyb3cpIHtcbiAgICAgIHJldHVybiB0aGlzLmRldGFpbGVkICYmICF0aGlzLmN1c3RvbURldGFpbFJvdyAmJiB0aGlzLmlzVmlzaWJsZURldGFpbFJvdyhyb3cpO1xuICAgIH0sXG4gICAgaXNBY3RpdmVDdXN0b21EZXRhaWxSb3c6IGZ1bmN0aW9uIGlzQWN0aXZlQ3VzdG9tRGV0YWlsUm93KHJvdykge1xuICAgICAgcmV0dXJuIHRoaXMuZGV0YWlsZWQgJiYgdGhpcy5jdXN0b21EZXRhaWxSb3cgJiYgdGhpcy5pc1Zpc2libGVEZXRhaWxSb3cocm93KTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgICAgKiBXaGVuIHRoZSBkZXRhaWxLZXkgaXMgZGVmaW5lZCB3ZSB1c2UgdGhlIG9iamVjdFtkZXRhaWxLZXldIGFzIGluZGV4LlxyXG4gICAgICAgICogSWYgbm90LCB1c2UgdGhlIG9iamVjdCByZWZlcmVuY2UgYnkgZGVmYXVsdC5cclxuICAgICAgICAqL1xuICAgIGhhbmRsZURldGFpbEtleTogZnVuY3Rpb24gaGFuZGxlRGV0YWlsS2V5KGluZGV4KSB7XG4gICAgICB2YXIga2V5ID0gdGhpcy5kZXRhaWxLZXk7XG4gICAgICByZXR1cm4gIWtleS5sZW5ndGggPyBpbmRleCA6IGluZGV4W2tleV07XG4gICAgfSxcbiAgICBjaGVja1ByZWRlZmluZWREZXRhaWxlZFJvd3M6IGZ1bmN0aW9uIGNoZWNrUHJlZGVmaW5lZERldGFpbGVkUm93cygpIHtcbiAgICAgIHZhciBkZWZhdWx0RXhwYW5kZWRSb3dzRGVmaW5lZCA9IHRoaXMub3BlbmVkRGV0YWlsZWQubGVuZ3RoID4gMDtcblxuICAgICAgaWYgKGRlZmF1bHRFeHBhbmRlZFJvd3NEZWZpbmVkICYmICF0aGlzLmRldGFpbEtleS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJZiB5b3Ugc2V0IGEgcHJlZGVmaW5lZCBvcGVuZWQtZGV0YWlsZWQsIHlvdSBtdXN0IHByb3ZpZGUgYSB1bmlxdWUga2V5IHVzaW5nIHRoZSBwcm9wIFwiZGV0YWlsLWtleVwiJyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBDYWxsIGluaXRTb3J0IG9ubHkgZmlyc3QgdGltZSAoRm9yIGV4YW1wbGUgYXN5bmMgZGF0YSkuXHJcbiAgICAqL1xuICAgIGNoZWNrU29ydDogZnVuY3Rpb24gY2hlY2tTb3J0KCkge1xuICAgICAgaWYgKHRoaXMubmV3Q29sdW1ucy5sZW5ndGggJiYgdGhpcy5maXJzdFRpbWVTb3J0KSB7XG4gICAgICAgIHRoaXMuaW5pdFNvcnQoKTtcbiAgICAgICAgdGhpcy5maXJzdFRpbWVTb3J0ID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubmV3Q29sdW1ucy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFNvcnRDb2x1bW4uZmllbGQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubmV3Q29sdW1ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMubmV3Q29sdW1uc1tpXS5maWVsZCA9PT0gdGhpcy5jdXJyZW50U29ydENvbHVtbi5maWVsZCkge1xuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRTb3J0Q29sdW1uID0gdGhpcy5uZXdDb2x1bW5zW2ldO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIENoZWNrIGlmIGZvb3RlciBzbG90IGhhcyBjdXN0b20gY29udGVudC5cclxuICAgICovXG4gICAgaGFzQ3VzdG9tRm9vdGVyU2xvdDogZnVuY3Rpb24gaGFzQ3VzdG9tRm9vdGVyU2xvdCgpIHtcbiAgICAgIGlmICh0aGlzLiRzbG90cy5mb290ZXIubGVuZ3RoID4gMSkgcmV0dXJuIHRydWU7XG4gICAgICB2YXIgdGFnID0gdGhpcy4kc2xvdHMuZm9vdGVyWzBdLnRhZztcbiAgICAgIGlmICh0YWcgIT09ICd0aCcgJiYgdGFnICE9PSAndGQnKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIENoZWNrIGlmIGJvdHRvbS1sZWZ0IHNsb3QgZXhpc3RzLlxyXG4gICAgKi9cbiAgICBoYXNCb3R0b21MZWZ0U2xvdDogZnVuY3Rpb24gaGFzQm90dG9tTGVmdFNsb3QoKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHRoaXMuJHNsb3RzWydib3R0b20tbGVmdCddICE9PSAndW5kZWZpbmVkJztcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIFRhYmxlIGFycm93IGtleXMgbGlzdGVuZXIsIGNoYW5nZSBzZWxlY3Rpb24uXHJcbiAgICAqL1xuICAgIHByZXNzZWRBcnJvdzogZnVuY3Rpb24gcHJlc3NlZEFycm93KHBvcykge1xuICAgICAgaWYgKCF0aGlzLnZpc2libGVEYXRhLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy52aXNpYmxlRGF0YS5pbmRleE9mKHRoaXMuc2VsZWN0ZWQpICsgcG9zOyAvLyBQcmV2ZW50IGZyb20gZ29pbmcgdXAgZnJvbSBmaXJzdCBhbmQgZG93biBmcm9tIGxhc3RcblxuICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyAwIDogaW5kZXggPiB0aGlzLnZpc2libGVEYXRhLmxlbmd0aCAtIDEgPyB0aGlzLnZpc2libGVEYXRhLmxlbmd0aCAtIDEgOiBpbmRleDtcbiAgICAgIHRoaXMuc2VsZWN0Um93KHRoaXMudmlzaWJsZURhdGFbaW5kZXhdKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIEZvY3VzIHRhYmxlIGVsZW1lbnQgaWYgaGFzIHNlbGVjdGVkIHByb3AuXHJcbiAgICAqL1xuICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgIGlmICghdGhpcy5mb2N1c2FibGUpIHJldHVybjtcbiAgICAgIHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlJykuZm9jdXMoKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIEluaXRpYWwgc29ydGVkIGNvbHVtbiBiYXNlZCBvbiB0aGUgZGVmYXVsdC1zb3J0IHByb3AuXHJcbiAgICAqL1xuICAgIGluaXRTb3J0OiBmdW5jdGlvbiBpbml0U29ydCgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuZGVmYXVsdFNvcnQpIHJldHVybjtcbiAgICAgIHZhciBzb3J0RmllbGQgPSAnJztcbiAgICAgIHZhciBzb3J0RGlyZWN0aW9uID0gdGhpcy5kZWZhdWx0U29ydERpcmVjdGlvbjtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5kZWZhdWx0U29ydCkpIHtcbiAgICAgICAgc29ydEZpZWxkID0gdGhpcy5kZWZhdWx0U29ydFswXTtcblxuICAgICAgICBpZiAodGhpcy5kZWZhdWx0U29ydFsxXSkge1xuICAgICAgICAgIHNvcnREaXJlY3Rpb24gPSB0aGlzLmRlZmF1bHRTb3J0WzFdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzb3J0RmllbGQgPSB0aGlzLmRlZmF1bHRTb3J0O1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5ld0NvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgIGlmIChjb2x1bW4uZmllbGQgPT09IHNvcnRGaWVsZCkge1xuICAgICAgICAgIF90aGlzNS5pc0FzYyA9IHNvcnREaXJlY3Rpb24udG9Mb3dlckNhc2UoKSAhPT0gJ2Rlc2MnO1xuXG4gICAgICAgICAgX3RoaXM1LnNvcnQoY29sdW1uLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBFbWl0cyBkcmFnIHN0YXJ0IGV2ZW50XHJcbiAgICAqL1xuICAgIGhhbmRsZURyYWdTdGFydDogZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0KGV2ZW50LCByb3csIGluZGV4KSB7XG4gICAgICB0aGlzLiRlbWl0KCdkcmFnc3RhcnQnLCB7XG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgcm93OiByb3csXG4gICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBFbWl0cyBkcm9wIGV2ZW50XHJcbiAgICAqL1xuICAgIGhhbmRsZURyb3A6IGZ1bmN0aW9uIGhhbmRsZURyb3AoZXZlbnQsIHJvdywgaW5kZXgpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2Ryb3AnLCB7XG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgcm93OiByb3csXG4gICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBFbWl0cyBkcmFnIG92ZXIgZXZlbnRcclxuICAgICovXG4gICAgaGFuZGxlRHJhZ092ZXI6IGZ1bmN0aW9uIGhhbmRsZURyYWdPdmVyKGV2ZW50LCByb3csIGluZGV4KSB7XG4gICAgICB0aGlzLiRlbWl0KCdkcmFnb3ZlcicsIHtcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICByb3c6IHJvdyxcbiAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIEVtaXRzIGRyYWcgbGVhdmUgZXZlbnRcclxuICAgICovXG4gICAgaGFuZGxlRHJhZ0xlYXZlOiBmdW5jdGlvbiBoYW5kbGVEcmFnTGVhdmUoZXZlbnQsIHJvdywgaW5kZXgpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2RyYWdsZWF2ZScsIHtcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICByb3c6IHJvdyxcbiAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgdGhpcy5jaGVja1ByZWRlZmluZWREZXRhaWxlZFJvd3MoKTtcbiAgICB0aGlzLmNoZWNrU29ydCgpO1xuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fJDIgPSBzY3JpcHQkMjtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyQyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJiLXRhYmxlXCIsY2xhc3M6eyAnaXMtbG9hZGluZyc6IF92bS5sb2FkaW5nIH19LFsoX3ZtLm1vYmlsZUNhcmRzICYmIF92bS5oYXNTb3J0YWJsZW5ld0NvbHVtbnMpP19jKCdiLXRhYmxlLW1vYmlsZS1zb3J0Jyx7YXR0cnM6e1wiY3VycmVudC1zb3J0LWNvbHVtblwiOl92bS5jdXJyZW50U29ydENvbHVtbixcImlzLWFzY1wiOl92bS5pc0FzYyxcImNvbHVtbnNcIjpfdm0ubmV3Q29sdW1ucyxcInBsYWNlaG9sZGVyXCI6X3ZtLm1vYmlsZVNvcnRQbGFjZWhvbGRlcn0sb246e1wic29ydFwiOmZ1bmN0aW9uIChjb2x1bW4pIHsgcmV0dXJuIF92bS5zb3J0KGNvbHVtbik7IH19fSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoX3ZtLnBhZ2luYXRlZCAmJiAoX3ZtLnBhZ2luYXRpb25Qb3NpdGlvbiA9PT0gJ3RvcCcgfHwgX3ZtLnBhZ2luYXRpb25Qb3NpdGlvbiA9PT0gJ2JvdGgnKSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidG9wIGxldmVsXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJsZXZlbC1sZWZ0XCJ9LFtfdm0uX3QoXCJ0b3AtbGVmdFwiKV0sMiksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJsZXZlbC1yaWdodFwifSxbKF92bS5wYWdpbmF0ZWQpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImxldmVsLWl0ZW1cIn0sW19jKCdiLXBhZ2luYXRpb24nLHthdHRyczp7XCJpY29uLXBhY2tcIjpfdm0uaWNvblBhY2ssXCJ0b3RhbFwiOl92bS5uZXdEYXRhVG90YWwsXCJwZXItcGFnZVwiOl92bS5wZXJQYWdlLFwic2ltcGxlXCI6X3ZtLnBhZ2luYXRpb25TaW1wbGUsXCJzaXplXCI6X3ZtLnBhZ2luYXRpb25TaXplLFwiY3VycmVudFwiOl92bS5uZXdDdXJyZW50UGFnZSxcImFyaWEtbmV4dC1sYWJlbFwiOl92bS5hcmlhTmV4dExhYmVsLFwiYXJpYS1wcmV2aW91cy1sYWJlbFwiOl92bS5hcmlhUHJldmlvdXNMYWJlbCxcImFyaWEtcGFnZS1sYWJlbFwiOl92bS5hcmlhUGFnZUxhYmVsLFwiYXJpYS1jdXJyZW50LWxhYmVsXCI6X3ZtLmFyaWFDdXJyZW50TGFiZWx9LG9uOntcImNoYW5nZVwiOl92bS5wYWdlQ2hhbmdlZH19KV0sMSk6X3ZtLl9lKCldKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGFibGUtd3JhcHBlclwifSxbX2MoJ3RhYmxlJyx7c3RhdGljQ2xhc3M6XCJ0YWJsZVwiLGNsYXNzOl92bS50YWJsZUNsYXNzZXMsYXR0cnM6e1widGFiaW5kZXhcIjohX3ZtLmZvY3VzYWJsZSA/IGZhbHNlIDogMH0sb246e1wia2V5ZG93blwiOltmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwidXBcIiwzOCwkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9aWYoJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXQpeyByZXR1cm4gbnVsbDsgfSRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5wcmVzc2VkQXJyb3coLTEpO30sZnVuY3Rpb24oJGV2ZW50KXtpZighKCdidXR0b24nIGluICRldmVudCkmJl92bS5faygkZXZlbnQua2V5Q29kZSxcImRvd25cIiw0MCwkZXZlbnQua2V5KSl7IHJldHVybiBudWxsOyB9aWYoJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXQpeyByZXR1cm4gbnVsbDsgfSRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5wcmVzc2VkQXJyb3coMSk7fV19fSxbKF92bS5uZXdDb2x1bW5zLmxlbmd0aCk/X2MoJ3RoZWFkJyxbX2MoJ3RyJyxbKF92bS5zaG93RGV0YWlsUm93SWNvbik/X2MoJ3RoJyx7YXR0cnM6e1wid2lkdGhcIjpcIjQwcHhcIn19KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLChfdm0uY2hlY2thYmxlICYmIF92bS5jaGVja2JveFBvc2l0aW9uID09PSAnbGVmdCcpP19jKCd0aCcse3N0YXRpY0NsYXNzOlwiY2hlY2tib3gtY2VsbFwifSxbKF92bS5oZWFkZXJDaGVja2FibGUpP1tfYygnYi1jaGVja2JveCcse2F0dHJzOntcInZhbHVlXCI6X3ZtLmlzQWxsQ2hlY2tlZCxcImRpc2FibGVkXCI6X3ZtLmlzQWxsVW5jaGVja2FibGV9LG5hdGl2ZU9uOntcImNoYW5nZVwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmNoZWNrQWxsKCRldmVudCk7fX19KV06X3ZtLl9lKCldLDIpOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLl9sKChfdm0udmlzaWJsZUNvbHVtbnMpLGZ1bmN0aW9uKGNvbHVtbixpbmRleCl7cmV0dXJuIF9jKCd0aCcse2tleTppbmRleCxjbGFzczp7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzLWN1cnJlbnQtc29ydCc6IF92bS5jdXJyZW50U29ydENvbHVtbiA9PT0gY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpcy1zb3J0YWJsZSc6IGNvbHVtbi5zb3J0YWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxzdHlsZTooe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBjb2x1bW4ud2lkdGggPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb2x1bW4ud2lkdGggKyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO192bS5zb3J0KGNvbHVtbik7fX19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0aC13cmFwXCIsY2xhc3M6e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaXMtbnVtZXJpYyc6IGNvbHVtbi5udW1lcmljLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaXMtY2VudGVyZWQnOiBjb2x1bW4uY2VudGVyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH19LFsoY29sdW1uLiRzY29wZWRTbG90cyAmJiBjb2x1bW4uJHNjb3BlZFNsb3RzLmhlYWRlcik/W19jKCdiLXNsb3QtY29tcG9uZW50Jyx7YXR0cnM6e1wiY29tcG9uZW50XCI6Y29sdW1uLFwic2NvcGVkXCI6dHJ1ZSxcIm5hbWVcIjpcImhlYWRlclwiLFwidGFnXCI6XCJzcGFuXCIsXCJwcm9wc1wiOnsgY29sdW1uOiBjb2x1bW4sIGluZGV4OiBpbmRleCB9fX0pXTooX3ZtLiRzY29wZWRTbG90cy5oZWFkZXIpP1tfdm0uX3QoXCJoZWFkZXJcIixudWxsLHtjb2x1bW46Y29sdW1uLGluZGV4OmluZGV4fSldOltfdm0uX3YoX3ZtLl9zKGNvbHVtbi5sYWJlbCkpXSxfdm0uX3YoXCIgXCIpLF9jKCdiLWljb24nLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KF92bS5jdXJyZW50U29ydENvbHVtbiA9PT0gY29sdW1uKSxleHByZXNzaW9uOlwiY3VycmVudFNvcnRDb2x1bW4gPT09IGNvbHVtblwifV0sY2xhc3M6eyAnaXMtZGVzYyc6ICFfdm0uaXNBc2MgfSxhdHRyczp7XCJpY29uXCI6X3ZtLnNvcnRJY29uLFwicGFja1wiOl92bS5pY29uUGFjayxcImJvdGhcIjpcIlwiLFwic2l6ZVwiOl92bS5zb3J0SWNvblNpemV9fSldLDIpXSl9KSxfdm0uX3YoXCIgXCIpLChfdm0uY2hlY2thYmxlICYmIF92bS5jaGVja2JveFBvc2l0aW9uID09PSAncmlnaHQnKT9fYygndGgnLHtzdGF0aWNDbGFzczpcImNoZWNrYm94LWNlbGxcIn0sWyhfdm0uaGVhZGVyQ2hlY2thYmxlKT9bX2MoJ2ItY2hlY2tib3gnLHthdHRyczp7XCJ2YWx1ZVwiOl92bS5pc0FsbENoZWNrZWQsXCJkaXNhYmxlZFwiOl92bS5pc0FsbFVuY2hlY2thYmxlfSxuYXRpdmVPbjp7XCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS5jaGVja0FsbCgkZXZlbnQpO319fSldOl92bS5fZSgpXSwyKTpfdm0uX2UoKV0sMildKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLChfdm0udmlzaWJsZURhdGEubGVuZ3RoKT9fYygndGJvZHknLFtfdm0uX2woKF92bS52aXNpYmxlRGF0YSksZnVuY3Rpb24ocm93LGluZGV4KXtyZXR1cm4gW19jKCd0cicse2tleTpfdm0uY3VzdG9tUm93S2V5ID8gcm93W192bS5jdXN0b21Sb3dLZXldIDogaW5kZXgsY2xhc3M6W192bS5yb3dDbGFzcyhyb3csIGluZGV4KSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpcy1zZWxlY3RlZCc6IHJvdyA9PT0gX3ZtLnNlbGVjdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpcy1jaGVja2VkJzogX3ZtLmlzUm93Q2hlY2tlZChyb3cpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sYXR0cnM6e1wiZHJhZ2dhYmxlXCI6X3ZtLmRyYWdnYWJsZX0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5zZWxlY3RSb3cocm93KTt9LFwiZGJsY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS4kZW1pdCgnZGJsY2xpY2snLCByb3cpO30sXCJtb3VzZWVudGVyXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uJGVtaXQoJ21vdXNlZW50ZXInLCByb3cpO30sXCJtb3VzZWxlYXZlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uJGVtaXQoJ21vdXNlbGVhdmUnLCByb3cpO30sXCJjb250ZXh0bWVudVwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLiRlbWl0KCdjb250ZXh0bWVudScsIHJvdywgJGV2ZW50KTt9LFwiZHJhZ3N0YXJ0XCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaGFuZGxlRHJhZ1N0YXJ0KCRldmVudCwgcm93LCBpbmRleCk7fSxcImRyb3BcIjpmdW5jdGlvbigkZXZlbnQpe192bS5oYW5kbGVEcm9wKCRldmVudCwgcm93LCBpbmRleCk7fSxcImRyYWdvdmVyXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaGFuZGxlRHJhZ092ZXIoJGV2ZW50LCByb3csIGluZGV4KTt9LFwiZHJhZ2xlYXZlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaGFuZGxlRHJhZ0xlYXZlKCRldmVudCwgcm93LCBpbmRleCk7fX19LFsoX3ZtLnNob3dEZXRhaWxSb3dJY29uKT9fYygndGQnLHtzdGF0aWNDbGFzczpcImNoZXZyb24tY2VsbFwifSxbKF92bS5oYXNEZXRhaWxlZFZpc2libGUocm93KSk/X2MoJ2EnLHthdHRyczp7XCJyb2xlXCI6XCJidXR0b25cIn0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtfdm0udG9nZ2xlRGV0YWlscyhyb3cpO319fSxbX2MoJ2ItaWNvbicse2NsYXNzOnsnaXMtZXhwYW5kZWQnOiBfdm0uaXNWaXNpYmxlRGV0YWlsUm93KHJvdyl9LGF0dHJzOntcImljb25cIjpcImNoZXZyb24tcmlnaHRcIixcInBhY2tcIjpfdm0uaWNvblBhY2ssXCJib3RoXCI6XCJcIn19KV0sMSk6X3ZtLl9lKCldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLChfdm0uY2hlY2thYmxlICYmIF92bS5jaGVja2JveFBvc2l0aW9uID09PSAnbGVmdCcpP19jKCd0ZCcse3N0YXRpY0NsYXNzOlwiY2hlY2tib3gtY2VsbFwifSxbX2MoJ2ItY2hlY2tib3gnLHthdHRyczp7XCJkaXNhYmxlZFwiOiFfdm0uaXNSb3dDaGVja2FibGUocm93KSxcInZhbHVlXCI6X3ZtLmlzUm93Q2hlY2tlZChyb3cpfSxuYXRpdmVPbjp7XCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS5jaGVja1Jvdyhyb3cpO30sXCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO319fSldLDEpOl92bS5fZSgpLF92bS5fdihcIiBcIiksKF92bS4kc2NvcGVkU2xvdHMuZGVmYXVsdCk/X3ZtLl90KFwiZGVmYXVsdFwiLG51bGwse3Jvdzpyb3csaW5kZXg6aW5kZXh9KTpfdm0uX2woKF92bS5uZXdDb2x1bW5zKSxmdW5jdGlvbihjb2x1bW4pe3JldHVybiBfYygnQlRhYmxlQ29sdW1uJyxfdm0uX2Ioe2tleTpjb2x1bW4uZmllbGQsYXR0cnM6e1wiaW50ZXJuYWxcIjpcIlwifX0sJ0JUYWJsZUNvbHVtbicsY29sdW1uLGZhbHNlKSxbKGNvbHVtbi5yZW5kZXJIdG1sKT9fYygnc3Bhbicse2RvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhfdm0uZ2V0VmFsdWVCeVBhdGgocm93LCBjb2x1bW4uZmllbGQpKX19KTpbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIrX3ZtLl9zKF92bS5nZXRWYWx1ZUJ5UGF0aChyb3csIGNvbHVtbi5maWVsZCkpK1wiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIildXSwyKX0pLF92bS5fdihcIiBcIiksKF92bS5jaGVja2FibGUgJiYgX3ZtLmNoZWNrYm94UG9zaXRpb24gPT09ICdyaWdodCcpP19jKCd0ZCcse3N0YXRpY0NsYXNzOlwiY2hlY2tib3gtY2VsbFwifSxbX2MoJ2ItY2hlY2tib3gnLHthdHRyczp7XCJkaXNhYmxlZFwiOiFfdm0uaXNSb3dDaGVja2FibGUocm93KSxcInZhbHVlXCI6X3ZtLmlzUm93Q2hlY2tlZChyb3cpfSxuYXRpdmVPbjp7XCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS5jaGVja1Jvdyhyb3cpO30sXCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO319fSldLDEpOl92bS5fZSgpXSwyKSxfdm0uX3YoXCIgXCIpLChfdm0uaXNBY3RpdmVEZXRhaWxSb3cocm93KSk/X2MoJ3RyJyx7c3RhdGljQ2xhc3M6XCJkZXRhaWxcIn0sW19jKCd0ZCcse2F0dHJzOntcImNvbHNwYW5cIjpfdm0uY29sdW1uQ291bnR9fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZGV0YWlsLWNvbnRhaW5lclwifSxbX3ZtLl90KFwiZGV0YWlsXCIsbnVsbCx7cm93OnJvdyxpbmRleDppbmRleH0pXSwyKV0pXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoX3ZtLmlzQWN0aXZlQ3VzdG9tRGV0YWlsUm93KHJvdykpP192bS5fdChcImRldGFpbFwiLG51bGwse3Jvdzpyb3csaW5kZXg6aW5kZXh9KTpfdm0uX2UoKV19KV0sMik6X2MoJ3Rib2R5JyxbX2MoJ3RyJyx7c3RhdGljQ2xhc3M6XCJpcy1lbXB0eVwifSxbX2MoJ3RkJyx7YXR0cnM6e1wiY29sc3BhblwiOl92bS5jb2x1bW5Db3VudH19LFtfdm0uX3QoXCJlbXB0eVwiKV0sMildKV0pLF92bS5fdihcIiBcIiksKF92bS4kc2xvdHMuZm9vdGVyICE9PSB1bmRlZmluZWQpP19jKCd0Zm9vdCcsW19jKCd0cicse3N0YXRpY0NsYXNzOlwidGFibGUtZm9vdGVyXCJ9LFsoX3ZtLmhhc0N1c3RvbUZvb3RlclNsb3QoKSk/X3ZtLl90KFwiZm9vdGVyXCIpOl9jKCd0aCcse2F0dHJzOntcImNvbHNwYW5cIjpfdm0uY29sdW1uQ291bnR9fSxbX3ZtLl90KFwiZm9vdGVyXCIpXSwyKV0sMildKTpfdm0uX2UoKV0pXSksX3ZtLl92KFwiIFwiKSwoKF92bS5jaGVja2FibGUgJiYgX3ZtLmhhc0JvdHRvbUxlZnRTbG90KCkpIHx8XG4gICAgICAgIChfdm0ucGFnaW5hdGVkICYmIChfdm0ucGFnaW5hdGlvblBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBfdm0ucGFnaW5hdGlvblBvc2l0aW9uID09PSAnYm90aCcpKSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibGV2ZWxcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImxldmVsLWxlZnRcIn0sW192bS5fdChcImJvdHRvbS1sZWZ0XCIpXSwyKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImxldmVsLXJpZ2h0XCJ9LFsoX3ZtLnBhZ2luYXRlZCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibGV2ZWwtaXRlbVwifSxbX2MoJ2ItcGFnaW5hdGlvbicse2F0dHJzOntcImljb24tcGFja1wiOl92bS5pY29uUGFjayxcInRvdGFsXCI6X3ZtLm5ld0RhdGFUb3RhbCxcInBlci1wYWdlXCI6X3ZtLnBlclBhZ2UsXCJzaW1wbGVcIjpfdm0ucGFnaW5hdGlvblNpbXBsZSxcInNpemVcIjpfdm0ucGFnaW5hdGlvblNpemUsXCJjdXJyZW50XCI6X3ZtLm5ld0N1cnJlbnRQYWdlLFwiYXJpYS1uZXh0LWxhYmVsXCI6X3ZtLmFyaWFOZXh0TGFiZWwsXCJhcmlhLXByZXZpb3VzLWxhYmVsXCI6X3ZtLmFyaWFQcmV2aW91c0xhYmVsLFwiYXJpYS1wYWdlLWxhYmVsXCI6X3ZtLmFyaWFQYWdlTGFiZWwsXCJhcmlhLWN1cnJlbnQtbGFiZWxcIjpfdm0uYXJpYUN1cnJlbnRMYWJlbH0sb246e1wiY2hhbmdlXCI6X3ZtLnBhZ2VDaGFuZ2VkfX0pXSwxKTpfdm0uX2UoKV0pXSk6X3ZtLl9lKCldLDEpfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQyID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fJDIgPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fJDIgPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMiA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMiA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBUYWJsZSA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHsgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXyQyLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDIgfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kMixcbiAgICBfX3Z1ZV9zY3JpcHRfXyQyLFxuICAgIF9fdnVlX3Njb3BlX2lkX18kMixcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMixcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDIsXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgVGFibGUpO1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgVGFibGVDb2x1bW4pO1xuICB9XG59O1xudXNlKFBsdWdpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbjtcbmV4cG9ydCB7IFRhYmxlLCBUYWJsZUNvbHVtbiB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfZGVmaW5lUHJvcGVydHkgfSBmcm9tICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgeyBJIGFzIEljb24gfSBmcm9tICcuL2NodW5rLWU4NGI0MDQ3LmpzJztcbmltcG9ydCB7IF8gYXMgX192dWVfbm9ybWFsaXplX18sIHIgYXMgcmVnaXN0ZXJDb21wb25lbnQsIHUgYXMgdXNlIH0gZnJvbSAnLi9jaHVuay1jY2E4OGRiOC5qcyc7XG5pbXBvcnQgeyBTIGFzIFNsb3RDb21wb25lbnQgfSBmcm9tICcuL2NodW5rLTBlM2Y0ZmI1LmpzJztcblxudmFyIF9jb21wb25lbnRzO1xudmFyIHNjcmlwdCA9IHtcbiAgbmFtZTogJ0JUYWJzJyxcbiAgY29tcG9uZW50czogKF9jb21wb25lbnRzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgSWNvbi5uYW1lLCBJY29uKSwgX2RlZmluZVByb3BlcnR5KF9jb21wb25lbnRzLCBTbG90Q29tcG9uZW50Lm5hbWUsIFNsb3RDb21wb25lbnQpLCBfY29tcG9uZW50cyksXG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IE51bWJlcixcbiAgICBleHBhbmRlZDogQm9vbGVhbixcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgc2l6ZTogU3RyaW5nLFxuICAgIHBvc2l0aW9uOiBTdHJpbmcsXG4gICAgYW5pbWF0ZWQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBkZXN0cm95T25IaWRlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9XG4gIH0sXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2ZVRhYjogdGhpcy52YWx1ZSB8fCAwLFxuICAgICAgdGFiSXRlbXM6IFtdLFxuICAgICAgY29udGVudEhlaWdodDogMCxcbiAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2UsXG4gICAgICBfaXNUYWJzOiB0cnVlIC8vIFVzZWQgaW50ZXJuYWxseSBieSBUYWJJdGVtXG5cbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIG5hdkNsYXNzZXM6IGZ1bmN0aW9uIG5hdkNsYXNzZXMoKSB7XG4gICAgICByZXR1cm4gW3RoaXMudHlwZSwgdGhpcy5zaXplLCB0aGlzLnBvc2l0aW9uLCB7XG4gICAgICAgICdpcy1mdWxsd2lkdGgnOiB0aGlzLmV4cGFuZGVkLFxuICAgICAgICAnaXMtdG9nZ2xlLXJvdW5kZWQgaXMtdG9nZ2xlJzogdGhpcy50eXBlID09PSAnaXMtdG9nZ2xlLXJvdW5kZWQnXG4gICAgICB9XTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgLyoqXHJcbiAgICAqIFdoZW4gdi1tb2RlbCBpcyBjaGFuZ2VkIHNldCB0aGUgbmV3IGFjdGl2ZSB0YWIuXHJcbiAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShfdmFsdWUpIHtcbiAgICAgIHRoaXMuY2hhbmdlVGFiKF92YWx1ZSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBXaGVuIHRhYi1pdGVtcyBhcmUgdXBkYXRlZCwgc2V0IGFjdGl2ZSBvbmUuXHJcbiAgICAqL1xuICAgIHRhYkl0ZW1zOiBmdW5jdGlvbiB0YWJJdGVtcygpIHtcbiAgICAgIGlmICh0aGlzLmFjdGl2ZVRhYiA8IHRoaXMudGFiSXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMudGFiSXRlbXNbdGhpcy5hY3RpdmVUYWJdLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKipcclxuICAgICogQ2hhbmdlIHRoZSBhY3RpdmUgdGFiIGFuZCBlbWl0IGNoYW5nZSBldmVudC5cclxuICAgICovXG4gICAgY2hhbmdlVGFiOiBmdW5jdGlvbiBjaGFuZ2VUYWIobmV3SW5kZXgpIHtcbiAgICAgIGlmICh0aGlzLmFjdGl2ZVRhYiA9PT0gbmV3SW5kZXgpIHJldHVybjtcblxuICAgICAgaWYgKHRoaXMuYWN0aXZlVGFiIDwgdGhpcy50YWJJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy50YWJJdGVtc1t0aGlzLmFjdGl2ZVRhYl0uZGVhY3RpdmF0ZSh0aGlzLmFjdGl2ZVRhYiwgbmV3SW5kZXgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRhYkl0ZW1zW25ld0luZGV4XS5hY3RpdmF0ZSh0aGlzLmFjdGl2ZVRhYiwgbmV3SW5kZXgpO1xuICAgICAgdGhpcy5hY3RpdmVUYWIgPSBuZXdJbmRleDtcbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIG5ld0luZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIFRhYiBjbGljayBsaXN0ZW5lciwgZW1pdCBpbnB1dCBldmVudCBhbmQgY2hhbmdlIGFjdGl2ZSB0YWIuXHJcbiAgICAqL1xuICAgIHRhYkNsaWNrOiBmdW5jdGlvbiB0YWJDbGljayh2YWx1ZSkge1xuICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoYW5nZVRhYih2YWx1ZSk7XG4gICAgfVxuICB9LFxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIGlmICh0aGlzLmFjdGl2ZVRhYiA8IHRoaXMudGFiSXRlbXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnRhYkl0ZW1zW3RoaXMuYWN0aXZlVGFiXS5pc0FjdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbmNvbnN0IF9fdnVlX3NjcmlwdF9fID0gc2NyaXB0O1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJiLXRhYnNcIixjbGFzczp7ICdpcy1mdWxsd2lkdGgnOiBfdm0uZXhwYW5kZWQgfX0sW19jKCduYXYnLHtzdGF0aWNDbGFzczpcInRhYnNcIixjbGFzczpfdm0ubmF2Q2xhc3Nlc30sW19jKCd1bCcsX3ZtLl9sKChfdm0udGFiSXRlbXMpLGZ1bmN0aW9uKHRhYkl0ZW0saW5kZXgpe3JldHVybiBfYygnbGknLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KHRhYkl0ZW0udmlzaWJsZSksZXhwcmVzc2lvbjpcInRhYkl0ZW0udmlzaWJsZVwifV0sa2V5OmluZGV4LGNsYXNzOnsgJ2lzLWFjdGl2ZSc6IF92bS5hY3RpdmVUYWIgPT09IGluZGV4LCAnaXMtZGlzYWJsZWQnOiB0YWJJdGVtLmRpc2FibGVkIH19LFtfYygnYScse29uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0udGFiQ2xpY2soaW5kZXgpO319fSxbKHRhYkl0ZW0uJHNsb3RzLmhlYWRlcik/W19jKCdiLXNsb3QtY29tcG9uZW50Jyx7YXR0cnM6e1wiY29tcG9uZW50XCI6dGFiSXRlbSxcIm5hbWVcIjpcImhlYWRlclwiLFwidGFnXCI6XCJzcGFuXCJ9fSldOlsodGFiSXRlbS5pY29uKT9fYygnYi1pY29uJyx7YXR0cnM6e1wiaWNvblwiOnRhYkl0ZW0uaWNvbixcInBhY2tcIjp0YWJJdGVtLmljb25QYWNrLFwic2l6ZVwiOl92bS5zaXplfX0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ3NwYW4nLFtfdm0uX3YoX3ZtLl9zKHRhYkl0ZW0ubGFiZWwpKV0pXV0sMildKX0pKV0pLF92bS5fdihcIiBcIiksX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczpcInRhYi1jb250ZW50XCIsY2xhc3M6eydpcy10cmFuc2l0aW9uaW5nJzogX3ZtLmlzVHJhbnNpdGlvbmluZ319LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKV0pfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyA9IHVuZGVmaW5lZDtcbiAgLyogc2NvcGVkICovXG4gIGNvbnN0IF9fdnVlX3Njb3BlX2lkX18gPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fID0gZmFsc2U7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIFRhYnMgPSBfX3Z1ZV9ub3JtYWxpemVfXyhcbiAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18sXG4gICAgX192dWVfc2NyaXB0X18sXG4gICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18sXG4gICAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBzY3JpcHQkMSA9IHtcbiAgbmFtZTogJ0JUYWJJdGVtJyxcbiAgcHJvcHM6IHtcbiAgICBsYWJlbDogU3RyaW5nLFxuICAgIGljb246IFN0cmluZyxcbiAgICBpY29uUGFjazogU3RyaW5nLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIHZpc2libGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgICB0cmFuc2l0aW9uTmFtZTogbnVsbFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKipcclxuICAgICogQWN0aXZhdGUgdGFiLCBhbHRlciBhbmltYXRpb24gbmFtZSBiYXNlZCBvbiB0aGUgaW5kZXguXHJcbiAgICAqL1xuICAgIGFjdGl2YXRlOiBmdW5jdGlvbiBhY3RpdmF0ZShvbGRJbmRleCwgaW5kZXgpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbk5hbWUgPSBpbmRleCA8IG9sZEluZGV4ID8gJ3NsaWRlLW5leHQnIDogJ3NsaWRlLXByZXYnO1xuICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBEZWFjdGl2YXRlIHRhYiwgYWx0ZXIgYW5pbWF0aW9uIG5hbWUgYmFzZWQgb24gdGhlIGluZGV4LlxyXG4gICAgKi9cbiAgICBkZWFjdGl2YXRlOiBmdW5jdGlvbiBkZWFjdGl2YXRlKG9sZEluZGV4LCBpbmRleCkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uTmFtZSA9IGluZGV4IDwgb2xkSW5kZXggPyAnc2xpZGUtbmV4dCcgOiAnc2xpZGUtcHJldic7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICB9LFxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge1xuICAgIGlmICghdGhpcy4kcGFyZW50LiRkYXRhLl9pc1RhYnMpIHtcbiAgICAgIHRoaXMuJGRlc3Ryb3koKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IHNob3VsZCB3cmFwIGJUYWJJdGVtIG9uIGEgYlRhYnMnKTtcbiAgICB9XG5cbiAgICB0aGlzLiRwYXJlbnQudGFiSXRlbXMucHVzaCh0aGlzKTtcbiAgfSxcbiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLiRwYXJlbnQudGFiSXRlbXMuaW5kZXhPZih0aGlzKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB0aGlzLiRwYXJlbnQudGFiSXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gaWYgZGVzdHJveSBhcHBseSB2LWlmXG4gICAgaWYgKHRoaXMuJHBhcmVudC5kZXN0cm95T25IaWRlKSB7XG4gICAgICBpZiAoIXRoaXMuaXNBY3RpdmUgfHwgIXRoaXMudmlzaWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHZub2RlID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgZGlyZWN0aXZlczogW3tcbiAgICAgICAgbmFtZTogJ3Nob3cnLFxuICAgICAgICB2YWx1ZTogdGhpcy5pc0FjdGl2ZSAmJiB0aGlzLnZpc2libGVcbiAgICAgIH1dLFxuICAgICAgYXR0cnM6IHtcbiAgICAgICAgJ2NsYXNzJzogJ3RhYi1pdGVtJ1xuICAgICAgfVxuICAgIH0sIHRoaXMuJHNsb3RzLmRlZmF1bHQpOyAvLyBjaGVjayBhbmltYXRlZCBwcm9wXG5cbiAgICBpZiAodGhpcy4kcGFyZW50LmFuaW1hdGVkKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgndHJhbnNpdGlvbicsIHtcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAnbmFtZSc6IHRoaXMudHJhbnNpdGlvbk5hbWVcbiAgICAgICAgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICAnYmVmb3JlLWVudGVyJzogZnVuY3Rpb24gYmVmb3JlRW50ZXIoKSB7XG4gICAgICAgICAgICBfdGhpcy4kcGFyZW50LmlzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAnYWZ0ZXItZW50ZXInOiBmdW5jdGlvbiBhZnRlckVudGVyKCkge1xuICAgICAgICAgICAgX3RoaXMuJHBhcmVudC5pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIFt2bm9kZV0pO1xuICAgIH1cblxuICAgIHJldHVybiB2bm9kZTtcbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyQxID0gc2NyaXB0JDE7XG5cbi8qIHRlbXBsYXRlICovXG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fJDEgPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMSA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSA9IHVuZGVmaW5lZDtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgVGFiSXRlbSA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHt9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyQxLFxuICAgIF9fdnVlX3NjcmlwdF9fJDEsXG4gICAgX192dWVfc2NvcGVfaWRfXyQxLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQxLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kMSxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBUYWJzKTtcbiAgICByZWdpc3RlckNvbXBvbmVudChWdWUsIFRhYkl0ZW0pO1xuICB9XG59O1xudXNlKFBsdWdpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbjtcbmV4cG9ydCB7IFRhYkl0ZW0sIFRhYnMgfTtcbiIsImltcG9ydCB7IF8gYXMgX192dWVfbm9ybWFsaXplX18gfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcblxuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQlRhZycsXG4gIHByb3BzOiB7XG4gICAgYXR0YWNoZWQ6IEJvb2xlYW4sXG4gICAgY2xvc2FibGU6IEJvb2xlYW4sXG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHNpemU6IFN0cmluZyxcbiAgICByb3VuZGVkOiBCb29sZWFuLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGVsbGlwc2lzOiBCb29sZWFuLFxuICAgIHRhYnN0b3A6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBhcmlhQ2xvc2VMYWJlbDogU3RyaW5nXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKipcclxuICAgICogRW1pdCBjbG9zZSBldmVudCB3aGVuIGRlbGV0ZSBidXR0b24gaXMgY2xpY2tlZFxyXG4gICAgKiBvciBkZWxldGUga2V5IGlzIHByZXNzZWQuXHJcbiAgICAqL1xuICAgIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkKSByZXR1cm47XG4gICAgICB0aGlzLiRlbWl0KCdjbG9zZScpO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gKF92bS5hdHRhY2hlZCAmJiBfdm0uY2xvc2FibGUpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRhZ3MgaGFzLWFkZG9uc1wifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInRhZ1wiLGNsYXNzOltfdm0udHlwZSwgX3ZtLnNpemUsIHsgJ2lzLXJvdW5kZWQnOiBfdm0ucm91bmRlZCB9XX0sW19jKCdzcGFuJyx7Y2xhc3M6eyAnaGFzLWVsbGlwc2lzJzogX3ZtLmVsbGlwc2lzIH19LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKV0pLF92bS5fdihcIiBcIiksX2MoJ2EnLHtzdGF0aWNDbGFzczpcInRhZyBpcy1kZWxldGVcIixjbGFzczpbX3ZtLnNpemUsIHsgJ2lzLXJvdW5kZWQnOiBfdm0ucm91bmRlZCB9XSxhdHRyczp7XCJyb2xlXCI6XCJidXR0b25cIixcImFyaWEtbGFiZWxcIjpfdm0uYXJpYUNsb3NlTGFiZWwsXCJ0YWJpbmRleFwiOl92bS50YWJzdG9wID8gMCA6IGZhbHNlLFwiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWR9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uY2xvc2UoKTt9LFwia2V5dXBcIjpmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZGVsZXRlXCIsWzgsNDZdLCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH0kZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0uY2xvc2UoKTt9fX0pXSk6X2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInRhZ1wiLGNsYXNzOltfdm0udHlwZSwgX3ZtLnNpemUsIHsgJ2lzLXJvdW5kZWQnOiBfdm0ucm91bmRlZCB9XX0sW19jKCdzcGFuJyx7Y2xhc3M6eyAnaGFzLWVsbGlwc2lzJzogX3ZtLmVsbGlwc2lzIH19LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKSxfdm0uX3YoXCIgXCIpLChfdm0uY2xvc2FibGUpP19jKCdhJyx7c3RhdGljQ2xhc3M6XCJkZWxldGUgaXMtc21hbGxcIixhdHRyczp7XCJyb2xlXCI6XCJidXR0b25cIixcImFyaWEtbGFiZWxcIjpfdm0uYXJpYUNsb3NlTGFiZWwsXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcInRhYmluZGV4XCI6X3ZtLnRhYnN0b3AgPyAwIDogZmFsc2V9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uY2xvc2UoKTt9LFwia2V5dXBcIjpmdW5jdGlvbigkZXZlbnQpe2lmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZGVsZXRlXCIsWzgsNDZdLCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH0kZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0uY2xvc2UoKTt9fX0pOl92bS5fZSgpXSl9O1xudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG5cbiAgLyogc3R5bGUgKi9cbiAgY29uc3QgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuICAvKiBzY29wZWQgKi9cbiAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cbiAgY29uc3QgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IHVuZGVmaW5lZDtcbiAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICBjb25zdCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSBmYWxzZTtcbiAgLyogc3R5bGUgaW5qZWN0ICovXG4gIFxuICAvKiBzdHlsZSBpbmplY3QgU1NSICovXG4gIFxuXG4gIFxuICB2YXIgVGFnID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG5leHBvcnQgeyBUYWcgYXMgVCB9O1xuIiwiaW1wb3J0IHsgXyBhcyBfX3Z1ZV9ub3JtYWxpemVfXywgciBhcyByZWdpc3RlckNvbXBvbmVudCwgdSBhcyB1c2UgfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcbmltcG9ydCB7IFQgYXMgVGFnIH0gZnJvbSAnLi9jaHVuay0zZTQ3MzA4Zi5qcyc7XG5leHBvcnQgeyBUIGFzIFRhZyB9IGZyb20gJy4vY2h1bmstM2U0NzMwOGYuanMnO1xuXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQlRhZ2xpc3QnLFxuICBwcm9wczoge1xuICAgIGF0dGFjaGVkOiBCb29sZWFuXG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRhZ3NcIixjbGFzczp7ICdoYXMtYWRkb25zJzogX3ZtLmF0dGFjaGVkIH19LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBUYWdsaXN0ID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgVGFnKTtcbiAgICByZWdpc3RlckNvbXBvbmVudChWdWUsIFRhZ2xpc3QpO1xuICB9XG59O1xudXNlKFBsdWdpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbjtcbmV4cG9ydCB7IFRhZ2xpc3QgfTtcbiIsImltcG9ydCB7IF8gYXMgX2RlZmluZVByb3BlcnR5LCBhIGFzIF90eXBlb2YgfSBmcm9tICcuL2NodW5rLWQ2MjAwMDg3LmpzJztcbmltcG9ydCB7IGcgYXMgZ2V0VmFsdWVCeVBhdGggfSBmcm9tICcuL2NodW5rLWU1ZmNlNDhmLmpzJztcbmltcG9ydCB7IGMgYXMgY29uZmlnIH0gZnJvbSAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgeyBGIGFzIEZvcm1FbGVtZW50TWl4aW4gfSBmcm9tICcuL2NodW5rLTEwYzg1NTI5LmpzJztcbmltcG9ydCAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0ICcuL2NodW5rLTk4ZTg2ZjQwLmpzJztcbmltcG9ydCB7IEEgYXMgQXV0b2NvbXBsZXRlIH0gZnJvbSAnLi9jaHVuay05MmFjYzIxZi5qcyc7XG5pbXBvcnQgeyBUIGFzIFRhZyB9IGZyb20gJy4vY2h1bmstM2U0NzMwOGYuanMnO1xuXG52YXIgX2NvbXBvbmVudHM7XG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQlRhZ2lucHV0JyxcbiAgY29tcG9uZW50czogKF9jb21wb25lbnRzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgQXV0b2NvbXBsZXRlLm5hbWUsIEF1dG9jb21wbGV0ZSksIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgVGFnLm5hbWUsIFRhZyksIF9jb21wb25lbnRzKSxcbiAgbWl4aW5zOiBbRm9ybUVsZW1lbnRNaXhpbl0sXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRhdGE6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICByb3VuZGVkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGF0dGFjaGVkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIG1heHRhZ3M6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICByZXF1aXJlZDogZmFsc2VcbiAgICB9LFxuICAgIGhhc0NvdW50ZXI6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kZWZhdWx0VGFnaW5wdXRIYXNDb3VudGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgZmllbGQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICd2YWx1ZSdcbiAgICB9LFxuICAgIGF1dG9jb21wbGV0ZTogQm9vbGVhbixcbiAgICBuYXRpdmVBdXRvY29tcGxldGU6IFN0cmluZyxcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBlbGxpcHNpczogQm9vbGVhbixcbiAgICBjbG9zYWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGNvbmZpcm1LZXlDb2Rlczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIFsxMywgMTg4XTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZU9uS2V5czoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIFs4XTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFsbG93TmV3OiBCb29sZWFuLFxuICAgIG9uUGFzdGVTZXBhcmF0b3JzOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gWycsJ107XG4gICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVBZGRpbmc6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgYWxsb3dEdXBsaWNhdGVzOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9XG4gIH0sXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhZ3M6IEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkgPyB0aGlzLnZhbHVlLnNsaWNlKDApIDogdGhpcy52YWx1ZSB8fCBbXSxcbiAgICAgIG5ld1RhZzogJycsXG4gICAgICBfZWxlbWVudFJlZjogJ2lucHV0JyxcbiAgICAgIF9pc1RhZ2lucHV0OiB0cnVlXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICByb290Q2xhc3NlczogZnVuY3Rpb24gcm9vdENsYXNzZXMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnaXMtZXhwYW5kZWQnOiB0aGlzLmV4cGFuZGVkXG4gICAgICB9O1xuICAgIH0sXG4gICAgY29udGFpbmVyQ2xhc3NlczogZnVuY3Rpb24gY29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdpcy1mb2N1c2VkJzogdGhpcy5pc0ZvY3VzZWQsXG4gICAgICAgICdpcy1mb2N1c2FibGUnOiB0aGlzLmhhc0lucHV0XG4gICAgICB9O1xuICAgIH0sXG4gICAgdmFsdWVMZW5ndGg6IGZ1bmN0aW9uIHZhbHVlTGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIHRoaXMubmV3VGFnLnRyaW0oKS5sZW5ndGg7XG4gICAgfSxcbiAgICBkZWZhdWx0U2xvdE5hbWU6IGZ1bmN0aW9uIGRlZmF1bHRTbG90TmFtZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhc0RlZmF1bHRTbG90ID8gJ2RlZmF1bHQnIDogJ2RvbnRyZW5kZXInO1xuICAgIH0sXG4gICAgZW1wdHlTbG90TmFtZTogZnVuY3Rpb24gZW1wdHlTbG90TmFtZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhc0VtcHR5U2xvdCA/ICdlbXB0eScgOiAnZG9udHJlbmRlcic7XG4gICAgfSxcbiAgICBoZWFkZXJTbG90TmFtZTogZnVuY3Rpb24gaGVhZGVyU2xvdE5hbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYXNIZWFkZXJTbG90ID8gJ2hlYWRlcicgOiAnZG9udHJlbmRlcic7XG4gICAgfSxcbiAgICBmb290ZXJTbG90TmFtZTogZnVuY3Rpb24gZm9vdGVyU2xvdE5hbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYXNIZWFkZXJTbG90ID8gJ2Zvb3RlcicgOiAnZG9udHJlbmRlcic7XG4gICAgfSxcbiAgICBoYXNEZWZhdWx0U2xvdDogZnVuY3Rpb24gaGFzRGVmYXVsdFNsb3QoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0O1xuICAgIH0sXG4gICAgaGFzRW1wdHlTbG90OiBmdW5jdGlvbiBoYXNFbXB0eVNsb3QoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLiRzbG90cy5lbXB0eTtcbiAgICB9LFxuICAgIGhhc0hlYWRlclNsb3Q6IGZ1bmN0aW9uIGhhc0hlYWRlclNsb3QoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLiRzbG90cy5oZWFkZXI7XG4gICAgfSxcbiAgICBoYXNGb290ZXJTbG90OiBmdW5jdGlvbiBoYXNGb290ZXJTbG90KCkge1xuICAgICAgcmV0dXJuICEhdGhpcy4kc2xvdHMuZm9vdGVyO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqIFNob3cgdGhlIGlucHV0IGZpZWxkIGlmIGEgbWF4dGFncyBoYXNuJ3QgYmVlbiBzZXQgb3IgcmVhY2hlZC5cclxuICAgICAqL1xuICAgIGhhc0lucHV0OiBmdW5jdGlvbiBoYXNJbnB1dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1heHRhZ3MgPT0gbnVsbCB8fCB0aGlzLnRhZ3NMZW5ndGggPCB0aGlzLm1heHRhZ3M7XG4gICAgfSxcbiAgICB0YWdzTGVuZ3RoOiBmdW5jdGlvbiB0YWdzTGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFncy5sZW5ndGg7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogSWYgVGFnaW5wdXQgaGFzIG9uUGFzdGVTZXBhcmF0b3JzIHByb3AsXHJcbiAgICAgKiByZXR1cm5pbmcgbmV3IFJlZ0V4cCB1c2VkIHRvIHNwbGl0IHBhc3RlZCBzdHJpbmcuXHJcbiAgICAgKi9cbiAgICBzZXBhcmF0b3JzQXNSZWdFeHA6IGZ1bmN0aW9uIHNlcGFyYXRvcnNBc1JlZ0V4cCgpIHtcbiAgICAgIHZhciBzZXAgPSB0aGlzLm9uUGFzdGVTZXBhcmF0b3JzO1xuICAgICAgcmV0dXJuIHNlcC5sZW5ndGggPyBuZXcgUmVnRXhwKHNlcC5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIHMgPyBzLnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJykgOiBudWxsO1xuICAgICAgfSkuam9pbignfCcpLCAnZycpIDogbnVsbDtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIHYtbW9kZWwgaXMgY2hhbmdlZCBzZXQgaW50ZXJuYWwgdmFsdWUuXHJcbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoX3ZhbHVlKSB7XG4gICAgICB0aGlzLnRhZ3MgPSBfdmFsdWU7XG4gICAgfSxcbiAgICBoYXNJbnB1dDogZnVuY3Rpb24gaGFzSW5wdXQoKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzSW5wdXQpIHRoaXMub25CbHVyKCk7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYWRkVGFnOiBmdW5jdGlvbiBhZGRUYWcodGFnKSB7XG4gICAgICB2YXIgdGFnVG9BZGQgPSB0YWcgfHwgdGhpcy5uZXdUYWcudHJpbSgpO1xuXG4gICAgICBpZiAodGFnVG9BZGQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmF1dG9jb21wbGV0ZSkge1xuICAgICAgICAgIHZhciByZWcgPSB0aGlzLnNlcGFyYXRvcnNBc1JlZ0V4cDtcblxuICAgICAgICAgIGlmIChyZWcgJiYgdGFnVG9BZGQubWF0Y2gocmVnKSkge1xuICAgICAgICAgICAgdGFnVG9BZGQuc3BsaXQocmVnKS5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQudHJpbSgpO1xuICAgICAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0Lmxlbmd0aCAhPT0gMDtcbiAgICAgICAgICAgIH0pLm1hcCh0aGlzLmFkZFRhZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIEFkZCB0aGUgdGFnIGlucHV0IGlmIGl0IGlzIG5vdCBibGFua1xuICAgICAgICAvLyBvciBwcmV2aW91c2x5IGFkZGVkIChpZiBub3QgYWxsb3dEdXBsaWNhdGVzKS5cblxuXG4gICAgICAgIHZhciBhZGQgPSAhdGhpcy5hbGxvd0R1cGxpY2F0ZXMgPyB0aGlzLnRhZ3MuaW5kZXhPZih0YWdUb0FkZCkgPT09IC0xIDogdHJ1ZTtcblxuICAgICAgICBpZiAoYWRkICYmIHRoaXMuYmVmb3JlQWRkaW5nKHRhZ1RvQWRkKSkge1xuICAgICAgICAgIHRoaXMudGFncy5wdXNoKHRhZ1RvQWRkKTtcbiAgICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHRoaXMudGFncyk7XG4gICAgICAgICAgdGhpcy4kZW1pdCgnYWRkJywgdGFnVG9BZGQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmV3VGFnID0gJyc7XG4gICAgfSxcbiAgICBnZXROb3JtYWxpemVkVGFnVGV4dDogZnVuY3Rpb24gZ2V0Tm9ybWFsaXplZFRhZ1RleHQodGFnKSB7XG4gICAgICBpZiAoX3R5cGVvZih0YWcpID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZ2V0VmFsdWVCeVBhdGgodGFnLCB0aGlzLmZpZWxkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhZztcbiAgICB9LFxuICAgIGN1c3RvbU9uQmx1cjogZnVuY3Rpb24gY3VzdG9tT25CbHVyKCRldmVudCkge1xuICAgICAgLy8gQWRkIHRhZyBvbi1ibHVyIGlmIG5vdCBzZWxlY3Qgb25seVxuICAgICAgaWYgKCF0aGlzLmF1dG9jb21wbGV0ZSkgdGhpcy5hZGRUYWcoKTtcbiAgICAgIHRoaXMub25CbHVyKCRldmVudCk7XG4gICAgfSxcbiAgICBvblNlbGVjdDogZnVuY3Rpb24gb25TZWxlY3Qob3B0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIW9wdGlvbikgcmV0dXJuO1xuICAgICAgdGhpcy5hZGRUYWcob3B0aW9uKTtcbiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMubmV3VGFnID0gJyc7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbW92ZVRhZzogZnVuY3Rpb24gcmVtb3ZlVGFnKGluZGV4KSB7XG4gICAgICB2YXIgdGFnID0gdGhpcy50YWdzLnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHRoaXMudGFncyk7XG4gICAgICB0aGlzLiRlbWl0KCdyZW1vdmUnLCB0YWcpO1xuICAgICAgcmV0dXJuIHRhZztcbiAgICB9LFxuICAgIHJlbW92ZUxhc3RUYWc6IGZ1bmN0aW9uIHJlbW92ZUxhc3RUYWcoKSB7XG4gICAgICBpZiAodGhpcy50YWdzTGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLnJlbW92ZVRhZyh0aGlzLnRhZ3NMZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGtleWRvd246IGZ1bmN0aW9uIGtleWRvd24oZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLnJlbW92ZU9uS2V5cy5pbmRleE9mKGV2ZW50LmtleUNvZGUpICE9PSAtMSAmJiAhdGhpcy5uZXdUYWcubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGFzdFRhZygpO1xuICAgICAgfSAvLyBTdG9wIGlmIGlzIHRvIGFjY2VwdCBzZWxlY3Qgb25seVxuXG5cbiAgICAgIGlmICh0aGlzLmF1dG9jb21wbGV0ZSAmJiAhdGhpcy5hbGxvd05ldykgcmV0dXJuO1xuXG4gICAgICBpZiAodGhpcy5jb25maXJtS2V5Q29kZXMuaW5kZXhPZihldmVudC5rZXlDb2RlKSA+PSAwKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuYWRkVGFnKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBvblR5cGluZzogZnVuY3Rpb24gb25UeXBpbmcoJGV2ZW50KSB7XG4gICAgICB0aGlzLiRlbWl0KCd0eXBpbmcnLCAkZXZlbnQudHJpbSgpKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xuY29uc3QgX192dWVfc2NyaXB0X18gPSBzY3JpcHQ7XG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRhZ2lucHV0IGNvbnRyb2xcIixjbGFzczpfdm0ucm9vdENsYXNzZXN9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0YWdpbnB1dC1jb250YWluZXJcIixjbGFzczpbX3ZtLnN0YXR1c1R5cGUsIF92bS5zaXplLCBfdm0uY29udGFpbmVyQ2xhc3Nlc10sYXR0cnM6e1wiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWR9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaGFzSW5wdXQgJiYgX3ZtLmZvY3VzKCRldmVudCk7fX19LFtfdm0uX2woKF92bS50YWdzKSxmdW5jdGlvbih0YWcsaW5kZXgpe3JldHVybiBfYygnYi10YWcnLHtrZXk6aW5kZXgsYXR0cnM6e1widHlwZVwiOl92bS50eXBlLFwic2l6ZVwiOl92bS5zaXplLFwicm91bmRlZFwiOl92bS5yb3VuZGVkLFwiYXR0YWNoZWRcIjpfdm0uYXR0YWNoZWQsXCJ0YWJzdG9wXCI6ZmFsc2UsXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcImVsbGlwc2lzXCI6X3ZtLmVsbGlwc2lzLFwiY2xvc2FibGVcIjpfdm0uY2xvc2FibGUsXCJ0aXRsZVwiOl92bS5lbGxpcHNpcyAmJiBfdm0uZ2V0Tm9ybWFsaXplZFRhZ1RleHQodGFnKX0sb246e1wiY2xvc2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS5yZW1vdmVUYWcoaW5kZXgpO319fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgXCIrX3ZtLl9zKF92bS5nZXROb3JtYWxpemVkVGFnVGV4dCh0YWcpKStcIlxcbiAgICAgICAgXCIpXSl9KSxfdm0uX3YoXCIgXCIpLChfdm0uaGFzSW5wdXQpP19jKCdiLWF1dG9jb21wbGV0ZScsX3ZtLl9iKHtyZWY6XCJhdXRvY29tcGxldGVcIixhdHRyczp7XCJkYXRhXCI6X3ZtLmRhdGEsXCJmaWVsZFwiOl92bS5maWVsZCxcImljb25cIjpfdm0uaWNvbixcImljb24tcGFja1wiOl92bS5pY29uUGFjayxcIm1heGxlbmd0aFwiOl92bS5tYXhsZW5ndGgsXCJoYXMtY291bnRlclwiOmZhbHNlLFwic2l6ZVwiOl92bS5zaXplLFwiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWQsXCJsb2FkaW5nXCI6X3ZtLmxvYWRpbmcsXCJhdXRvY29tcGxldGVcIjpfdm0ubmF0aXZlQXV0b2NvbXBsZXRlLFwia2VlcC1maXJzdFwiOiFfdm0uYWxsb3dOZXcsXCJ1c2UtaHRtbDUtdmFsaWRhdGlvblwiOl92bS51c2VIdG1sNVZhbGlkYXRpb259LG9uOntcInR5cGluZ1wiOl92bS5vblR5cGluZyxcImZvY3VzXCI6X3ZtLm9uRm9jdXMsXCJibHVyXCI6X3ZtLmN1c3RvbU9uQmx1cixcInNlbGVjdFwiOl92bS5vblNlbGVjdH0sbmF0aXZlT246e1wia2V5ZG93blwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmtleWRvd24oJGV2ZW50KTt9fSxzY29wZWRTbG90czpfdm0uX3UoW3trZXk6X3ZtLmRlZmF1bHRTbG90TmFtZSxmbjpmdW5jdGlvbihwcm9wcyl7cmV0dXJuIFtfdm0uX3QoXCJkZWZhdWx0XCIsbnVsbCx7b3B0aW9uOnByb3BzLm9wdGlvbixpbmRleDpwcm9wcy5pbmRleH0pXX19XSksbW9kZWw6e3ZhbHVlOihfdm0ubmV3VGFnKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLm5ld1RhZz0kJHY7fSxleHByZXNzaW9uOlwibmV3VGFnXCJ9fSwnYi1hdXRvY29tcGxldGUnLF92bS4kYXR0cnMsZmFsc2UpLFtfYygndGVtcGxhdGUnLHtzbG90Ol92bS5oZWFkZXJTbG90TmFtZX0sW192bS5fdChcImhlYWRlclwiKV0sMiksX3ZtLl92KFwiIFwiKSxfYygndGVtcGxhdGUnLHtzbG90Ol92bS5lbXB0eVNsb3ROYW1lfSxbX3ZtLl90KFwiZW1wdHlcIildLDIpLF92bS5fdihcIiBcIiksX2MoJ3RlbXBsYXRlJyx7c2xvdDpfdm0uZm9vdGVyU2xvdE5hbWV9LFtfdm0uX3QoXCJmb290ZXJcIildLDIpXSwyKTpfdm0uX2UoKV0sMiksX3ZtLl92KFwiIFwiKSwoX3ZtLmhhc0NvdW50ZXIgJiYgKF92bS5tYXh0YWdzIHx8IF92bS5tYXhsZW5ndGgpKT9fYygnc21hbGwnLHtzdGF0aWNDbGFzczpcImhlbHAgY291bnRlclwifSxbKF92bS5tYXhsZW5ndGggJiYgX3ZtLnZhbHVlTGVuZ3RoID4gMCk/W192bS5fdihcIlxcbiAgICAgICAgICAgIFwiK192bS5fcyhfdm0udmFsdWVMZW5ndGgpK1wiIC8gXCIrX3ZtLl9zKF92bS5tYXhsZW5ndGgpK1wiXFxuICAgICAgICBcIildOihfdm0ubWF4dGFncyk/W192bS5fdihcIlxcbiAgICAgICAgICAgIFwiK192bS5fcyhfdm0udGFnc0xlbmd0aCkrXCIgLyBcIitfdm0uX3MoX3ZtLm1heHRhZ3MpK1wiXFxuICAgICAgICBcIildOl92bS5fZSgpXSwyKTpfdm0uX2UoKV0pfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyA9IHVuZGVmaW5lZDtcbiAgLyogc2NvcGVkICovXG4gIGNvbnN0IF9fdnVlX3Njb3BlX2lkX18gPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fID0gZmFsc2U7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIFRhZ2lucHV0ID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgVGFnaW5wdXQpO1xuICB9XG59O1xudXNlKFBsdWdpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbjtcbmV4cG9ydCB7IFRhZ2lucHV0IH07XG4iLCJpbXBvcnQgeyBfIGFzIF9kZWZpbmVQcm9wZXJ0eSB9IGZyb20gJy4vY2h1bmstZDYyMDAwODcuanMnO1xuaW1wb3J0ICcuL2NodW5rLWU1ZmNlNDhmLmpzJztcbmltcG9ydCAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgJy4vY2h1bmstMTBjODU1MjkuanMnO1xuaW1wb3J0IHsgSSBhcyBJY29uIH0gZnJvbSAnLi9jaHVuay1lODRiNDA0Ny5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IHsgSSBhcyBJbnB1dCB9IGZyb20gJy4vY2h1bmstOThlODZmNDAuanMnO1xuaW1wb3J0IHsgVCBhcyBUaW1lcGlja2VyTWl4aW4gfSBmcm9tICcuL2NodW5rLTA3ZTE5NDQ2LmpzJztcbmltcG9ydCB7IEQgYXMgRHJvcGRvd24sIGEgYXMgRHJvcGRvd25JdGVtIH0gZnJvbSAnLi9jaHVuay0wMGUzZTY3Zi5qcyc7XG5pbXBvcnQgeyBGIGFzIEZpZWxkIH0gZnJvbSAnLi9jaHVuay01MzFiODI3NC5qcyc7XG5pbXBvcnQgeyBTIGFzIFNlbGVjdCB9IGZyb20gJy4vY2h1bmstOTEyZWQ3MTUuanMnO1xuXG52YXIgX2NvbXBvbmVudHM7XG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQlRpbWVwaWNrZXInLFxuICBjb21wb25lbnRzOiAoX2NvbXBvbmVudHMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jb21wb25lbnRzLCBJbnB1dC5uYW1lLCBJbnB1dCksIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgRmllbGQubmFtZSwgRmllbGQpLCBfZGVmaW5lUHJvcGVydHkoX2NvbXBvbmVudHMsIFNlbGVjdC5uYW1lLCBTZWxlY3QpLCBfZGVmaW5lUHJvcGVydHkoX2NvbXBvbmVudHMsIEljb24ubmFtZSwgSWNvbiksIF9kZWZpbmVQcm9wZXJ0eShfY29tcG9uZW50cywgRHJvcGRvd24ubmFtZSwgRHJvcGRvd24pLCBfZGVmaW5lUHJvcGVydHkoX2NvbXBvbmVudHMsIERyb3Bkb3duSXRlbS5uYW1lLCBEcm9wZG93bkl0ZW0pLCBfY29tcG9uZW50cyksXG4gIG1peGluczogW1RpbWVwaWNrZXJNaXhpbl0sXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9pc1RpbWVwaWNrZXI6IHRydWVcbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIG5hdGl2ZVN0ZXA6IGZ1bmN0aW9uIG5hdGl2ZVN0ZXAoKSB7XG4gICAgICBpZiAodGhpcy5lbmFibGVTZWNvbmRzKSByZXR1cm4gJzEnO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGltZXBpY2tlciBjb250cm9sXCIsY2xhc3M6W192bS5zaXplLCB7J2lzLWV4cGFuZGVkJzogX3ZtLmV4cGFuZGVkfV19LFsoIV92bS5pc01vYmlsZSB8fCBfdm0uaW5saW5lKT9fYygnYi1kcm9wZG93bicse3JlZjpcImRyb3Bkb3duXCIsYXR0cnM6e1wicG9zaXRpb25cIjpfdm0ucG9zaXRpb24sXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcImlubGluZVwiOl92bS5pbmxpbmV9fSxbKCFfdm0uaW5saW5lKT9fYygnYi1pbnB1dCcsX3ZtLl9iKHtyZWY6XCJpbnB1dFwiLGF0dHJzOntcInNsb3RcIjpcInRyaWdnZXJcIixcImF1dG9jb21wbGV0ZVwiOlwib2ZmXCIsXCJ2YWx1ZVwiOl92bS5mb3JtYXRWYWx1ZShfdm0uY29tcHV0ZWRWYWx1ZSksXCJwbGFjZWhvbGRlclwiOl92bS5wbGFjZWhvbGRlcixcInNpemVcIjpfdm0uc2l6ZSxcImljb25cIjpfdm0uaWNvbixcImljb24tcGFja1wiOl92bS5pY29uUGFjayxcImxvYWRpbmdcIjpfdm0ubG9hZGluZyxcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkLFwicmVhZG9ubHlcIjohX3ZtLmVkaXRhYmxlLFwicm91bmRlZFwiOl92bS5yb3VuZGVkLFwidXNlLWh0bWw1LXZhbGlkYXRpb25cIjpfdm0udXNlSHRtbDVWYWxpZGF0aW9ufSxvbjp7XCJmb2N1c1wiOl92bS5oYW5kbGVPbkZvY3VzLFwiYmx1clwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLm9uQmx1cigpICYmIF92bS5jaGVja0h0bWw1VmFsaWRpdHkoKTt9fSxuYXRpdmVPbjp7XCJrZXl1cFwiOmZ1bmN0aW9uKCRldmVudCl7aWYoISgnYnV0dG9uJyBpbiAkZXZlbnQpJiZfdm0uX2soJGV2ZW50LmtleUNvZGUsXCJlbnRlclwiLDEzLCRldmVudC5rZXkpKXsgcmV0dXJuIG51bGw7IH1fdm0udG9nZ2xlKHRydWUpO30sXCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vbkNoYW5nZSgkZXZlbnQudGFyZ2V0LnZhbHVlKTt9fSxzbG90OlwidHJpZ2dlclwifSwnYi1pbnB1dCcsX3ZtLiRhdHRycyxmYWxzZSkpOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ2ItZHJvcGRvd24taXRlbScse2F0dHJzOntcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkLFwiY3VzdG9tXCI6XCJcIn19LFtfYygnYi1maWVsZCcse2F0dHJzOntcImdyb3VwZWRcIjpcIlwiLFwicG9zaXRpb25cIjpcImlzLWNlbnRlcmVkXCJ9fSxbX2MoJ2Itc2VsZWN0Jyx7YXR0cnM6e1wiZGlzYWJsZWRcIjpfdm0uZGlzYWJsZWQsXCJwbGFjZWhvbGRlclwiOlwiMDBcIn0sbmF0aXZlT246e1wiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub25Ib3Vyc0NoYW5nZSgkZXZlbnQudGFyZ2V0LnZhbHVlKTt9fSxtb2RlbDp7dmFsdWU6KF92bS5ob3Vyc1NlbGVjdGVkKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLmhvdXJzU2VsZWN0ZWQ9JCR2O30sZXhwcmVzc2lvbjpcImhvdXJzU2VsZWN0ZWRcIn19LF92bS5fbCgoX3ZtLmhvdXJzKSxmdW5jdGlvbihob3VyKXtyZXR1cm4gX2MoJ29wdGlvbicse2tleTpob3VyLnZhbHVlLGF0dHJzOntcImRpc2FibGVkXCI6X3ZtLmlzSG91ckRpc2FibGVkKGhvdXIudmFsdWUpfSxkb21Qcm9wczp7XCJ2YWx1ZVwiOmhvdXIudmFsdWV9fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgXCIrX3ZtLl9zKGhvdXIubGFiZWwpK1wiXFxuICAgICAgICAgICAgICAgICAgICBcIildKX0pKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJjb250cm9sIGlzLWNvbG9uXCJ9LFtfdm0uX3YoXCI6XCIpXSksX3ZtLl92KFwiIFwiKSxfYygnYi1zZWxlY3QnLHthdHRyczp7XCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcInBsYWNlaG9sZGVyXCI6XCIwMFwifSxuYXRpdmVPbjp7XCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vbk1pbnV0ZXNDaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSk7fX0sbW9kZWw6e3ZhbHVlOihfdm0ubWludXRlc1NlbGVjdGVkKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLm1pbnV0ZXNTZWxlY3RlZD0kJHY7fSxleHByZXNzaW9uOlwibWludXRlc1NlbGVjdGVkXCJ9fSxfdm0uX2woKF92bS5taW51dGVzKSxmdW5jdGlvbihtaW51dGUpe3JldHVybiBfYygnb3B0aW9uJyx7a2V5Om1pbnV0ZS52YWx1ZSxhdHRyczp7XCJkaXNhYmxlZFwiOl92bS5pc01pbnV0ZURpc2FibGVkKG1pbnV0ZS52YWx1ZSl9LGRvbVByb3BzOntcInZhbHVlXCI6bWludXRlLnZhbHVlfX0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiK192bS5fcyhtaW51dGUubGFiZWwpK1wiXFxuICAgICAgICAgICAgICAgICAgICBcIildKX0pKSxfdm0uX3YoXCIgXCIpLChfdm0uZW5hYmxlU2Vjb25kcyk/W19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJjb250cm9sIGlzLWNvbG9uXCJ9LFtfdm0uX3YoXCI6XCIpXSksX3ZtLl92KFwiIFwiKSxfYygnYi1zZWxlY3QnLHthdHRyczp7XCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcInBsYWNlaG9sZGVyXCI6XCIwMFwifSxuYXRpdmVPbjp7XCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe192bS5vblNlY29uZHNDaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSk7fX0sbW9kZWw6e3ZhbHVlOihfdm0uc2Vjb25kc1NlbGVjdGVkKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLnNlY29uZHNTZWxlY3RlZD0kJHY7fSxleHByZXNzaW9uOlwic2Vjb25kc1NlbGVjdGVkXCJ9fSxfdm0uX2woKF92bS5zZWNvbmRzKSxmdW5jdGlvbihzZWNvbmQpe3JldHVybiBfYygnb3B0aW9uJyx7a2V5OnNlY29uZC52YWx1ZSxhdHRyczp7XCJkaXNhYmxlZFwiOl92bS5pc1NlY29uZERpc2FibGVkKHNlY29uZC52YWx1ZSl9LGRvbVByb3BzOntcInZhbHVlXCI6c2Vjb25kLnZhbHVlfX0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIitfdm0uX3Moc2Vjb25kLmxhYmVsKStcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiKV0pfSkpXTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLCghX3ZtLmlzSG91ckZvcm1hdDI0KT9fYygnYi1zZWxlY3QnLHthdHRyczp7XCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZH0sbmF0aXZlT246e1wiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub25NZXJpZGllbkNoYW5nZSgkZXZlbnQudGFyZ2V0LnZhbHVlKTt9fSxtb2RlbDp7dmFsdWU6KF92bS5tZXJpZGllblNlbGVjdGVkKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLm1lcmlkaWVuU2VsZWN0ZWQ9JCR2O30sZXhwcmVzc2lvbjpcIm1lcmlkaWVuU2VsZWN0ZWRcIn19LF92bS5fbCgoX3ZtLm1lcmlkaWVucyksZnVuY3Rpb24obWVyaWRpZW4pe3JldHVybiBfYygnb3B0aW9uJyx7a2V5Om1lcmlkaWVuLGRvbVByb3BzOntcInZhbHVlXCI6bWVyaWRpZW59fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgXCIrX3ZtLl9zKG1lcmlkaWVuKStcIlxcbiAgICAgICAgICAgICAgICAgICAgXCIpXSl9KSk6X3ZtLl9lKCldLDIpLF92bS5fdihcIiBcIiksKF92bS4kc2xvdHMuZGVmYXVsdCAhPT0gdW5kZWZpbmVkICYmIF92bS4kc2xvdHMuZGVmYXVsdC5sZW5ndGgpP19jKCdmb290ZXInLHtzdGF0aWNDbGFzczpcInRpbWVwaWNrZXItZm9vdGVyXCJ9LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKTpfdm0uX2UoKV0sMSldLDEpOl9jKCdiLWlucHV0Jyxfdm0uX2Ioe3JlZjpcImlucHV0XCIsYXR0cnM6e1widHlwZVwiOlwidGltZVwiLFwic3RlcFwiOl92bS5uYXRpdmVTdGVwLFwiYXV0b2NvbXBsZXRlXCI6XCJvZmZcIixcInZhbHVlXCI6X3ZtLmZvcm1hdEhITU1TUyhfdm0uY29tcHV0ZWRWYWx1ZSksXCJwbGFjZWhvbGRlclwiOl92bS5wbGFjZWhvbGRlcixcInNpemVcIjpfdm0uc2l6ZSxcImljb25cIjpfdm0uaWNvbixcImljb24tcGFja1wiOl92bS5pY29uUGFjayxcImxvYWRpbmdcIjpfdm0ubG9hZGluZyxcIm1heFwiOl92bS5mb3JtYXRISE1NU1MoX3ZtLm1heFRpbWUpLFwibWluXCI6X3ZtLmZvcm1hdEhITU1TUyhfdm0ubWluVGltZSksXCJkaXNhYmxlZFwiOl92bS5kaXNhYmxlZCxcInJlYWRvbmx5XCI6ZmFsc2UsXCJ1c2UtaHRtbDUtdmFsaWRhdGlvblwiOl92bS51c2VIdG1sNVZhbGlkYXRpb259LG9uOntcImZvY3VzXCI6X3ZtLmhhbmRsZU9uRm9jdXMsXCJibHVyXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ub25CbHVyKCkgJiYgX3ZtLmNoZWNrSHRtbDVWYWxpZGl0eSgpO319LG5hdGl2ZU9uOntcImNoYW5nZVwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLm9uQ2hhbmdlKCRldmVudC50YXJnZXQudmFsdWUpO319fSwnYi1pbnB1dCcsX3ZtLiRhdHRycyxmYWxzZSkpXSwxKX07XG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18gPSBbXTtcblxuICAvKiBzdHlsZSAqL1xuICBjb25zdCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18gPSB1bmRlZmluZWQ7XG4gIC8qIHNjb3BlZCAqL1xuICBjb25zdCBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICBjb25zdCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gdW5kZWZpbmVkO1xuICAvKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG4gIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAvKiBzdHlsZSBpbmplY3QgKi9cbiAgXG4gIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgXG5cbiAgXG4gIHZhciBUaW1lcGlja2VyID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50KFZ1ZSwgVGltZXBpY2tlcik7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuZXhwb3J0IHsgVGltZXBpY2tlciB9O1xuIiwiaW1wb3J0ICcuL2NodW5rLWU1ZmNlNDhmLmpzJztcbmltcG9ydCB7IGMgYXMgY29uZmlnIH0gZnJvbSAnLi9jaHVuay05ZTMyMDdjYy5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCBhIGFzIHJlZ2lzdGVyQ29tcG9uZW50UHJvZ3JhbW1hdGljLCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgTiBhcyBOb3RpY2VNaXhpbiB9IGZyb20gJy4vY2h1bmstZGFlYWM4NTIuanMnO1xuXG4vL1xudmFyIHNjcmlwdCA9IHtcbiAgbmFtZTogJ0JUb2FzdCcsXG4gIG1peGluczogW05vdGljZU1peGluXSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmV3RHVyYXRpb246IHRoaXMuZHVyYXRpb24gfHwgY29uZmlnLmRlZmF1bHRUb2FzdER1cmF0aW9uXG4gICAgfTtcbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3RyYW5zaXRpb24nLHthdHRyczp7XCJlbnRlci1hY3RpdmUtY2xhc3NcIjpfdm0udHJhbnNpdGlvbi5lbnRlcixcImxlYXZlLWFjdGl2ZS1jbGFzc1wiOl92bS50cmFuc2l0aW9uLmxlYXZlfX0sW19jKCdkaXYnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KF92bS5pc0FjdGl2ZSksZXhwcmVzc2lvbjpcImlzQWN0aXZlXCJ9XSxzdGF0aWNDbGFzczpcInRvYXN0XCIsY2xhc3M6W192bS50eXBlLCBfdm0ucG9zaXRpb25dLGF0dHJzOntcImFyaWEtaGlkZGVuXCI6IV92bS5pc0FjdGl2ZSxcInJvbGVcIjpcImFsZXJ0XCJ9fSxbX2MoJ2Rpdicse2RvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhfdm0ubWVzc2FnZSl9fSldKV0pfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyA9IHVuZGVmaW5lZDtcbiAgLyogc2NvcGVkICovXG4gIGNvbnN0IF9fdnVlX3Njb3BlX2lkX18gPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fID0gZmFsc2U7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIFRvYXN0ID0gX192dWVfbm9ybWFsaXplX18oXG4gICAgeyByZW5kZXI6IF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fIH0sXG4gICAgX192dWVfaW5qZWN0X3N0eWxlc19fLFxuICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgIF9fdnVlX3Njb3BlX2lkX18sXG4gICAgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fLFxuICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG52YXIgVG9hc3RQcm9ncmFtbWF0aWMgPSB7XG4gIG9wZW46IGZ1bmN0aW9uIG9wZW4ocGFyYW1zKSB7XG4gICAgdmFyIG1lc3NhZ2U7XG4gICAgdmFyIHBhcmVudDtcbiAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3N0cmluZycpIG1lc3NhZ2UgPSBwYXJhbXM7XG4gICAgdmFyIGRlZmF1bHRQYXJhbSA9IHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBwb3NpdGlvbjogY29uZmlnLmRlZmF1bHRUb2FzdFBvc2l0aW9uIHx8ICdpcy10b3AnXG4gICAgfTtcblxuICAgIGlmIChwYXJhbXMucGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJhbXMucGFyZW50O1xuICAgICAgZGVsZXRlIHBhcmFtcy5wYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzRGF0YSA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdFBhcmFtLCBwYXJhbXMpO1xuICAgIHZhciB2bSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WdWUgPyB3aW5kb3cuVnVlIDogVnVlO1xuICAgIHZhciBUb2FzdENvbXBvbmVudCA9IHZtLmV4dGVuZChUb2FzdCk7XG4gICAgcmV0dXJuIG5ldyBUb2FzdENvbXBvbmVudCh7XG4gICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgIGVsOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgIHByb3BzRGF0YTogcHJvcHNEYXRhXG4gICAgfSk7XG4gIH1cbn07XG52YXIgUGx1Z2luID0ge1xuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsKFZ1ZSkge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50UHJvZ3JhbW1hdGljKFZ1ZSwgJ3RvYXN0JywgVG9hc3RQcm9ncmFtbWF0aWMpO1xuICB9XG59O1xudXNlKFBsdWdpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbjtcbmV4cG9ydCB7IFRvYXN0UHJvZ3JhbW1hdGljIH07XG4iLCJpbXBvcnQgJy4vY2h1bmstOWUzMjA3Y2MuanMnO1xuaW1wb3J0IHsgciBhcyByZWdpc3RlckNvbXBvbmVudCwgdSBhcyB1c2UgfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcbmltcG9ydCB7IFQgYXMgVG9vbHRpcCB9IGZyb20gJy4vY2h1bmstNDExZDZlZWEuanMnO1xuZXhwb3J0IHsgVCBhcyBUb29sdGlwIH0gZnJvbSAnLi9jaHVuay00MTFkNmVlYS5qcyc7XG5cbnZhciBQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQoVnVlLCBUb29sdGlwKTtcbiAgfVxufTtcbnVzZShQbHVnaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBQbHVnaW47XG4iLCJpbXBvcnQgJy4vY2h1bmstOWUzMjA3Y2MuanMnO1xuaW1wb3J0IHsgRiBhcyBGb3JtRWxlbWVudE1peGluIH0gZnJvbSAnLi9jaHVuay0xMGM4NTUyOS5qcyc7XG5pbXBvcnQgeyBfIGFzIF9fdnVlX25vcm1hbGl6ZV9fLCByIGFzIHJlZ2lzdGVyQ29tcG9uZW50LCB1IGFzIHVzZSB9IGZyb20gJy4vY2h1bmstY2NhODhkYjguanMnO1xuaW1wb3J0IHsgRiBhcyBGaWxlIH0gZnJvbSAnLi9jaHVuay1iOWJkYjBlNC5qcyc7XG5cbi8vXG52YXIgc2NyaXB0ID0ge1xuICBuYW1lOiAnQlVwbG9hZCcsXG4gIG1peGluczogW0Zvcm1FbGVtZW50TWl4aW5dLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczoge1xuICAgIHZhbHVlOiB7XG4gICAgICB0eXBlOiBbT2JqZWN0LCBGdW5jdGlvbiwgRmlsZSwgQXJyYXldXG4gICAgfSxcbiAgICBtdWx0aXBsZTogQm9vbGVhbixcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBhY2NlcHQ6IFN0cmluZyxcbiAgICBkcmFnRHJvcDogQm9vbGVhbixcbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaXMtcHJpbWFyeSdcbiAgICB9LFxuICAgIG5hdGl2ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuZXdWYWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIGRyYWdEcm9wRm9jdXM6IGZhbHNlLFxuICAgICAgX2VsZW1lbnRSZWY6ICdpbnB1dCdcbiAgICB9O1xuICB9LFxuICB3YXRjaDoge1xuICAgIC8qKlxyXG4gICAgICogICBXaGVuIHYtbW9kZWwgaXMgY2hhbmdlZDpcclxuICAgICAqICAgMS4gR2V0IHZhbHVlIGZyb20gaW5wdXQgZmlsZVxyXG4gICAgICogICAyLiBTZXQgaW50ZXJuYWwgdmFsdWUuXHJcbiAgICAgKiAgIDMuIFJlc2V0IGlucHV0IHZhbHVlIGlmIGFycmF5IGlzIGVtcHR5IG9yIHdoZW4gaW5wdXQgZmlsZSBpcyBub3QgZm91bmQgaW4gbmV3VmFsdWVcclxuICAgICAqICAgNC4gSWYgaXQncyBpbnZhbGlkLCB2YWxpZGF0ZSBhZ2Fpbi5cclxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShfdmFsdWUpIHtcbiAgICAgIHZhciBpbnB1dEZpbGVzID0gdGhpcy4kcmVmcy5pbnB1dC5maWxlcztcbiAgICAgIHRoaXMubmV3VmFsdWUgPSBfdmFsdWU7XG5cbiAgICAgIGlmICghdGhpcy5uZXdWYWx1ZSB8fCBBcnJheS5pc0FycmF5KHRoaXMubmV3VmFsdWUpICYmIHRoaXMubmV3VmFsdWUubGVuZ3RoID09PSAwIHx8ICFpbnB1dEZpbGVzWzBdIHx8IEFycmF5LmlzQXJyYXkodGhpcy5uZXdWYWx1ZSkgJiYgIXRoaXMubmV3VmFsdWUuc29tZShmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gYS5uYW1lID09PSBpbnB1dEZpbGVzWzBdLm5hbWU7XG4gICAgICB9KSkge1xuICAgICAgICB0aGlzLiRyZWZzLmlucHV0LnZhbHVlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgIXRoaXMuaXNWYWxpZCAmJiAhdGhpcy5kcmFnRHJvcCAmJiB0aGlzLmNoZWNrSHRtbDVWYWxpZGl0eSgpO1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIC8qKlxyXG4gICAgKiBMaXN0ZW4gY2hhbmdlIGV2ZW50IG9uIGlucHV0IHR5cGUgJ2ZpbGUnLFxyXG4gICAgKiBlbWl0ICdpbnB1dCcgZXZlbnQgYW5kIHZhbGlkYXRlXHJcbiAgICAqL1xuICAgIG9uRmlsZUNoYW5nZTogZnVuY3Rpb24gb25GaWxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCB0aGlzLmxvYWRpbmcpIHJldHVybjtcblxuICAgICAgaWYgKHRoaXMuZHJhZ0Ryb3ApIHtcbiAgICAgICAgdGhpcy51cGRhdGVEcmFnRHJvcEZvY3VzKGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZXZlbnQudGFyZ2V0LmZpbGVzIHx8IGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlcztcblxuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoIXRoaXMubmV3VmFsdWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5uYXRpdmUpIHtcbiAgICAgICAgICB0aGlzLm5ld1ZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghdGhpcy5tdWx0aXBsZSkge1xuICAgICAgICAvLyBvbmx5IG9uZSBlbGVtZW50IGluIGNhc2UgZHJhZyBkcm9wIG1vZGUgYW5kIGlzbid0IG11bHRpcGxlXG4gICAgICAgIGlmICh0aGlzLmRyYWdEcm9wICYmIHZhbHVlLmxlbmd0aCAhPT0gMSkgcmV0dXJuO2Vsc2Uge1xuICAgICAgICAgIHZhciBmaWxlID0gdmFsdWVbMF07XG5cbiAgICAgICAgICBpZiAodGhpcy5jaGVja1R5cGUoZmlsZSkpIHtcbiAgICAgICAgICAgIHRoaXMubmV3VmFsdWUgPSBmaWxlO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5uZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5uZXdWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFsd2F5cyBuZXcgdmFsdWVzIGlmIG5hdGl2ZSBvciB1bmRlZmluZWQgbG9jYWxcbiAgICAgICAgdmFyIG5ld1ZhbHVlcyA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLm5hdGl2ZSB8fCAhdGhpcy5uZXdWYWx1ZSkge1xuICAgICAgICAgIHRoaXMubmV3VmFsdWUgPSBbXTtcbiAgICAgICAgICBuZXdWYWx1ZXMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBfZmlsZSA9IHZhbHVlW2ldO1xuXG4gICAgICAgICAgaWYgKHRoaXMuY2hlY2tUeXBlKF9maWxlKSkge1xuICAgICAgICAgICAgdGhpcy5uZXdWYWx1ZS5wdXNoKF9maWxlKTtcbiAgICAgICAgICAgIG5ld1ZhbHVlcyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFuZXdWYWx1ZXMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB0aGlzLm5ld1ZhbHVlKTtcbiAgICAgICF0aGlzLmRyYWdEcm9wICYmIHRoaXMuY2hlY2tIdG1sNVZhbGlkaXR5KCk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgKiBMaXN0ZW4gZHJhZy1kcm9wIHRvIHVwZGF0ZSBpbnRlcm5hbCB2YXJpYWJsZVxyXG4gICAgKi9cbiAgICB1cGRhdGVEcmFnRHJvcEZvY3VzOiBmdW5jdGlvbiB1cGRhdGVEcmFnRHJvcEZvY3VzKGZvY3VzKSB7XG4gICAgICBpZiAoIXRoaXMuZGlzYWJsZWQgJiYgIXRoaXMubG9hZGluZykge1xuICAgICAgICB0aGlzLmRyYWdEcm9wRm9jdXMgPSBmb2N1cztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAqIENoZWNrIG1pbWUgdHlwZSBvZiBmaWxlXHJcbiAgICAqL1xuICAgIGNoZWNrVHlwZTogZnVuY3Rpb24gY2hlY2tUeXBlKGZpbGUpIHtcbiAgICAgIGlmICghdGhpcy5hY2NlcHQpIHJldHVybiB0cnVlO1xuICAgICAgdmFyIHR5cGVzID0gdGhpcy5hY2NlcHQuc3BsaXQoJywnKTtcbiAgICAgIGlmICh0eXBlcy5sZW5ndGggPT09IDApIHJldHVybiB0cnVlO1xuICAgICAgdmFyIHZhbGlkID0gZmFsc2U7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZXNbaV0udHJpbSgpO1xuXG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgaWYgKHR5cGUuc3Vic3RyaW5nKDAsIDEpID09PSAnLicpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGV4dGVuc2lvblxuICAgICAgICAgICAgdmFyIGV4dEluZGV4ID0gZmlsZS5uYW1lLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICAgICAgICB2YXIgZXh0ZW5zaW9uID0gZXh0SW5kZXggPj0gMCA/IGZpbGUubmFtZS5zdWJzdHJpbmcoZXh0SW5kZXgpIDogJyc7XG5cbiAgICAgICAgICAgIGlmIChleHRlbnNpb24udG9Mb3dlckNhc2UoKSA9PT0gdHlwZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY2hlY2sgbWltZSB0eXBlXG4gICAgICAgICAgICBpZiAoZmlsZS50eXBlLm1hdGNoKHR5cGUpKSB7XG4gICAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbGlkO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG5jb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6XCJ1cGxvYWQgY29udHJvbFwifSxbKCFfdm0uZHJhZ0Ryb3ApP1tfdm0uX3QoXCJkZWZhdWx0XCIpXTpfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ1cGxvYWQtZHJhZ2dhYmxlXCIsY2xhc3M6W192bS50eXBlLCB7XG4gICAgICAgICAgICAnaXMtbG9hZGluZyc6IF92bS5sb2FkaW5nLFxuICAgICAgICAgICAgJ2lzLWRpc2FibGVkJzogX3ZtLmRpc2FibGVkLFxuICAgICAgICAgICAgJ2lzLWhvdmVyZWQnOiBfdm0uZHJhZ0Ryb3BGb2N1c1xuICAgICAgICB9XSxvbjp7XCJkcmFnb3ZlclwiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLnVwZGF0ZURyYWdEcm9wRm9jdXModHJ1ZSk7fSxcImRyYWdsZWF2ZVwiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3ZtLnVwZGF0ZURyYWdEcm9wRm9jdXMoZmFsc2UpO30sXCJkcmFnZW50ZXJcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS51cGRhdGVEcmFnRHJvcEZvY3VzKHRydWUpO30sXCJkcm9wXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQucHJldmVudERlZmF1bHQoKTtfdm0ub25GaWxlQ2hhbmdlKCRldmVudCk7fX19LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKSxfdm0uX3YoXCIgXCIpLF9jKCdpbnB1dCcsX3ZtLl9iKHtyZWY6XCJpbnB1dFwiLGF0dHJzOntcInR5cGVcIjpcImZpbGVcIixcIm11bHRpcGxlXCI6X3ZtLm11bHRpcGxlLFwiYWNjZXB0XCI6X3ZtLmFjY2VwdCxcImRpc2FibGVkXCI6X3ZtLmRpc2FibGVkfSxvbjp7XCJjaGFuZ2VcIjpfdm0ub25GaWxlQ2hhbmdlfX0sJ2lucHV0Jyxfdm0uJGF0dHJzLGZhbHNlKSldLDIpfTtcbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyA9IFtdO1xuXG4gIC8qIHN0eWxlICovXG4gIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyA9IHVuZGVmaW5lZDtcbiAgLyogc2NvcGVkICovXG4gIGNvbnN0IF9fdnVlX3Njb3BlX2lkX18gPSB1bmRlZmluZWQ7XG4gIC8qIG1vZHVsZSBpZGVudGlmaWVyICovXG4gIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4gIC8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cbiAgY29uc3QgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fID0gZmFsc2U7XG4gIC8qIHN0eWxlIGluamVjdCAqL1xuICBcbiAgLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuICBcblxuICBcbiAgdmFyIFVwbG9hZCA9IF9fdnVlX25vcm1hbGl6ZV9fKFxuICAgIHsgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyB9LFxuICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyxcbiAgICBfX3Z1ZV9zY3JpcHRfXyxcbiAgICBfX3Z1ZV9zY29wZV9pZF9fLFxuICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyxcbiAgICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWRcbiAgKTtcblxudmFyIFBsdWdpbiA9IHtcbiAgaW5zdGFsbDogZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcbiAgICByZWdpc3RlckNvbXBvbmVudChWdWUsIFVwbG9hZCk7XG4gIH1cbn07XG51c2UoUGx1Z2luKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1Z2luO1xuZXhwb3J0IHsgVXBsb2FkIH07XG4iLCJpbXBvcnQgJy4vY2h1bmstZDYyMDAwODcuanMnO1xuaW1wb3J0ICcuL2NodW5rLWU1ZmNlNDhmLmpzJztcbmltcG9ydCB7IHMgYXMgc2V0T3B0aW9ucywgYyBhcyBjb25maWcgfSBmcm9tICcuL2NodW5rLTllMzIwN2NjLmpzJztcbmltcG9ydCAnLi9jaHVuay0xMGM4NTUyOS5qcyc7XG5pbXBvcnQgJy4vY2h1bmstZTg0YjQwNDcuanMnO1xuaW1wb3J0IHsgYSBhcyByZWdpc3RlckNvbXBvbmVudFByb2dyYW1tYXRpYywgdSBhcyB1c2UgfSBmcm9tICcuL2NodW5rLWNjYTg4ZGI4LmpzJztcbmltcG9ydCAnLi9jaHVuay05OGU4NmY0MC5qcyc7XG5pbXBvcnQgJy4vY2h1bmstOTJhY2MyMWYuanMnO1xuaW1wb3J0IFBsdWdpbiBmcm9tICcuL2F1dG9jb21wbGV0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEF1dG9jb21wbGV0ZSB9IGZyb20gJy4vYXV0b2NvbXBsZXRlLmpzJztcbmltcG9ydCBQbHVnaW4kMSBmcm9tICcuL2J1dHRvbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEJ1dHRvbiB9IGZyb20gJy4vYnV0dG9uLmpzJztcbmltcG9ydCAnLi9jaHVuay05YTc3NjY5Ny5qcyc7XG5pbXBvcnQgUGx1Z2luJDIgZnJvbSAnLi9jaGVja2JveC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENoZWNrYm94IH0gZnJvbSAnLi9jaGVja2JveC5qcyc7XG5pbXBvcnQgUGx1Z2luJDQgZnJvbSAnLi9jb2xsYXBzZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENvbGxhcHNlIH0gZnJvbSAnLi9jb2xsYXBzZS5qcyc7XG5pbXBvcnQgJy4vY2h1bmstMDdlMTk0NDYuanMnO1xuaW1wb3J0ICcuL2NodW5rLTAwZTNlNjdmLmpzJztcbmltcG9ydCAnLi9jaHVuay01MzFiODI3NC5qcyc7XG5pbXBvcnQgUGx1Z2luJDMgZnJvbSAnLi9jbG9ja3BpY2tlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENsb2NrcGlja2VyIH0gZnJvbSAnLi9jbG9ja3BpY2tlci5qcyc7XG5pbXBvcnQgJy4vY2h1bmstOTEyZWQ3MTUuanMnO1xuaW1wb3J0IFBsdWdpbiQ1IGZyb20gJy4vZGF0ZXBpY2tlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIERhdGVwaWNrZXIgfSBmcm9tICcuL2RhdGVwaWNrZXIuanMnO1xuaW1wb3J0ICd2dWUnO1xuaW1wb3J0ICcuL2NodW5rLWE1ZWE3MGQwLmpzJztcbmltcG9ydCBQbHVnaW4kNiBmcm9tICcuL2RpYWxvZy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIERpYWxvZywgRGlhbG9nUHJvZ3JhbW1hdGljIH0gZnJvbSAnLi9kaWFsb2cuanMnO1xuaW1wb3J0IFBsdWdpbiQ3IGZyb20gJy4vZHJvcGRvd24uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gJy4vZHJvcGRvd24uanMnO1xuaW1wb3J0IFBsdWdpbiQ4IGZyb20gJy4vZmllbGQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBGaWVsZCB9IGZyb20gJy4vZmllbGQuanMnO1xuaW1wb3J0IFBsdWdpbiQ5IGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEljb24gfSBmcm9tICcuL2ljb24uanMnO1xuaW1wb3J0IFBsdWdpbiRhIGZyb20gJy4vaW5wdXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBJbnB1dCB9IGZyb20gJy4vaW5wdXQuanMnO1xuaW1wb3J0ICcuL2NodW5rLWI5YmRiMGU0LmpzJztcbmltcG9ydCBQbHVnaW4kYiBmcm9tICcuL2xvYWRpbmcuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nLCBMb2FkaW5nUHJvZ3JhbW1hdGljIH0gZnJvbSAnLi9sb2FkaW5nLmpzJztcbmltcG9ydCBQbHVnaW4kYyBmcm9tICcuL21lbnUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNZW51IH0gZnJvbSAnLi9tZW51LmpzJztcbmltcG9ydCAnLi9jaHVuay1lZGQ4ZmY5MS5qcyc7XG5pbXBvcnQgUGx1Z2luJGQgZnJvbSAnLi9tZXNzYWdlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWVzc2FnZSB9IGZyb20gJy4vbWVzc2FnZS5qcyc7XG5pbXBvcnQgUGx1Z2luJGUgZnJvbSAnLi9tb2RhbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsLCBNb2RhbFByb2dyYW1tYXRpYyB9IGZyb20gJy4vbW9kYWwuanMnO1xuaW1wb3J0IFBsdWdpbiRnIGZyb20gJy4vbm90aWZpY2F0aW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTm90aWZpY2F0aW9uLCBOb3RpZmljYXRpb25Qcm9ncmFtbWF0aWMgfSBmcm9tICcuL25vdGlmaWNhdGlvbi5qcyc7XG5pbXBvcnQgJy4vY2h1bmstZGFlYWM4NTIuanMnO1xuaW1wb3J0IFBsdWdpbiRmIGZyb20gJy4vbmF2YmFyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTmF2YmFyIH0gZnJvbSAnLi9uYXZiYXIuanMnO1xuaW1wb3J0IFBsdWdpbiRoIGZyb20gJy4vbnVtYmVyaW5wdXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBOdW1iZXJpbnB1dCB9IGZyb20gJy4vbnVtYmVyaW5wdXQuanMnO1xuaW1wb3J0ICcuL2NodW5rLWNjNzE4YzE1LmpzJztcbmltcG9ydCBQbHVnaW4kaSBmcm9tICcuL3BhZ2luYXRpb24uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQYWdpbmF0aW9uIH0gZnJvbSAnLi9wYWdpbmF0aW9uLmpzJztcbmltcG9ydCBQbHVnaW4kaiBmcm9tICcuL3Byb2dyZXNzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUHJvZ3Jlc3MgfSBmcm9tICcuL3Byb2dyZXNzLmpzJztcbmltcG9ydCBQbHVnaW4kayBmcm9tICcuL3JhZGlvLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUmFkaW8gfSBmcm9tICcuL3JhZGlvLmpzJztcbmltcG9ydCBQbHVnaW4kbCBmcm9tICcuL3NlbGVjdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdCB9IGZyb20gJy4vc2VsZWN0LmpzJztcbmltcG9ydCAnLi9jaHVuay00MTFkNmVlYS5qcyc7XG5pbXBvcnQgUGx1Z2luJG0gZnJvbSAnLi9zbGlkZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTbGlkZXIgfSBmcm9tICcuL3NsaWRlci5qcyc7XG5pbXBvcnQgUGx1Z2luJG4gZnJvbSAnLi9zbmFja2Jhci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFNuYWNrYmFyLCBTbmFja2JhclByb2dyYW1tYXRpYyB9IGZyb20gJy4vc25hY2tiYXIuanMnO1xuaW1wb3J0ICcuL2NodW5rLTBlM2Y0ZmI1LmpzJztcbmltcG9ydCBQbHVnaW4kbyBmcm9tICcuL3N0ZXBzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3RlcHMgfSBmcm9tICcuL3N0ZXBzLmpzJztcbmltcG9ydCBQbHVnaW4kcCBmcm9tICcuL3N3aXRjaC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN3aXRjaCB9IGZyb20gJy4vc3dpdGNoLmpzJztcbmltcG9ydCBQbHVnaW4kcSBmcm9tICcuL3RhYmxlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGFibGUgfSBmcm9tICcuL3RhYmxlLmpzJztcbmltcG9ydCBQbHVnaW4kciBmcm9tICcuL3RhYnMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUYWJzIH0gZnJvbSAnLi90YWJzLmpzJztcbmltcG9ydCAnLi9jaHVuay0zZTQ3MzA4Zi5qcyc7XG5pbXBvcnQgUGx1Z2luJHMgZnJvbSAnLi90YWcuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUYWcgfSBmcm9tICcuL3RhZy5qcyc7XG5pbXBvcnQgUGx1Z2luJHQgZnJvbSAnLi90YWdpbnB1dC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRhZ2lucHV0IH0gZnJvbSAnLi90YWdpbnB1dC5qcyc7XG5pbXBvcnQgUGx1Z2luJHUgZnJvbSAnLi90aW1lcGlja2VyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGltZXBpY2tlciB9IGZyb20gJy4vdGltZXBpY2tlci5qcyc7XG5pbXBvcnQgUGx1Z2luJHYgZnJvbSAnLi90b2FzdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRvYXN0LCBUb2FzdFByb2dyYW1tYXRpYyB9IGZyb20gJy4vdG9hc3QuanMnO1xuaW1wb3J0IFBsdWdpbiR3IGZyb20gJy4vdG9vbHRpcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRvb2x0aXAgfSBmcm9tICcuL3Rvb2x0aXAuanMnO1xuaW1wb3J0IFBsdWdpbiR4IGZyb20gJy4vdXBsb2FkLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVXBsb2FkIH0gZnJvbSAnLi91cGxvYWQuanMnO1xuXG5cblxudmFyIGNvbXBvbmVudHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgQXV0b2NvbXBsZXRlOiBQbHVnaW4sXG4gICAgQnV0dG9uOiBQbHVnaW4kMSxcbiAgICBDaGVja2JveDogUGx1Z2luJDIsXG4gICAgQ2xvY2twaWNrZXI6IFBsdWdpbiQzLFxuICAgIENvbGxhcHNlOiBQbHVnaW4kNCxcbiAgICBEYXRlcGlja2VyOiBQbHVnaW4kNSxcbiAgICBEaWFsb2c6IFBsdWdpbiQ2LFxuICAgIERyb3Bkb3duOiBQbHVnaW4kNyxcbiAgICBGaWVsZDogUGx1Z2luJDgsXG4gICAgSWNvbjogUGx1Z2luJDksXG4gICAgSW5wdXQ6IFBsdWdpbiRhLFxuICAgIExvYWRpbmc6IFBsdWdpbiRiLFxuICAgIE1lbnU6IFBsdWdpbiRjLFxuICAgIE1lc3NhZ2U6IFBsdWdpbiRkLFxuICAgIE1vZGFsOiBQbHVnaW4kZSxcbiAgICBOYXZiYXI6IFBsdWdpbiRmLFxuICAgIE5vdGlmaWNhdGlvbjogUGx1Z2luJGcsXG4gICAgTnVtYmVyaW5wdXQ6IFBsdWdpbiRoLFxuICAgIFBhZ2luYXRpb246IFBsdWdpbiRpLFxuICAgIFByb2dyZXNzOiBQbHVnaW4kaixcbiAgICBSYWRpbzogUGx1Z2luJGssXG4gICAgU2VsZWN0OiBQbHVnaW4kbCxcbiAgICBTbGlkZXI6IFBsdWdpbiRtLFxuICAgIFNuYWNrYmFyOiBQbHVnaW4kbixcbiAgICBTdGVwczogUGx1Z2luJG8sXG4gICAgU3dpdGNoOiBQbHVnaW4kcCxcbiAgICBUYWJsZTogUGx1Z2luJHEsXG4gICAgVGFiczogUGx1Z2luJHIsXG4gICAgVGFnOiBQbHVnaW4kcyxcbiAgICBUYWdpbnB1dDogUGx1Z2luJHQsXG4gICAgVGltZXBpY2tlcjogUGx1Z2luJHUsXG4gICAgVG9hc3Q6IFBsdWdpbiR2LFxuICAgIFRvb2x0aXA6IFBsdWdpbiR3LFxuICAgIFVwbG9hZDogUGx1Z2luJHhcbn0pO1xuXG52YXIgQnVlZnkgPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgLy8gT3B0aW9uc1xuICAgIHNldE9wdGlvbnMoT2JqZWN0LmFzc2lnbihjb25maWcsIG9wdGlvbnMpKTsgLy8gQ29tcG9uZW50c1xuXG5cbiAgICBmb3IgKHZhciBjb21wb25lbnRLZXkgaW4gY29tcG9uZW50cykge1xuICAgICAgVnVlLnVzZShjb21wb25lbnRzW2NvbXBvbmVudEtleV0pO1xuICAgIH0gLy8gQ29uZmlnIGNvbXBvbmVudFxuXG5cbiAgICB2YXIgQnVlZnlQcm9ncmFtbWF0aWMgPSB7XG4gICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zJDEob3B0aW9ucykge1xuICAgICAgICBzZXRPcHRpb25zKE9iamVjdC5hc3NpZ24oY29uZmlnLCBvcHRpb25zKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZWdpc3RlckNvbXBvbmVudFByb2dyYW1tYXRpYyhWdWUsICdjb25maWcnLCBCdWVmeVByb2dyYW1tYXRpYyk7XG4gIH1cbn07XG51c2UoQnVlZnkpO1xuXG5leHBvcnQgZGVmYXVsdCBCdWVmeTtcbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=